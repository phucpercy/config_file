/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		0: 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([761,12]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ 10:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherType; });
var CipherType;
(function (CipherType) {
    CipherType[CipherType["Login"] = 1] = "Login";
    CipherType[CipherType["SecureNote"] = 2] = "SecureNote";
    CipherType[CipherType["Card"] = 3] = "Card";
    CipherType[CipherType["Identity"] = 4] = "Identity";
})(CipherType || (CipherType = {}));


/***/ }),

/***/ 100:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginUriView; });
/* harmony import */ var _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);


const CanLaunchWhitelist = [
    'https://',
    'http://',
    'ssh://',
    'ftp://',
    'sftp://',
    'irc://',
    'vnc://',
    // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri
    'rdp://',
    'ms-rd:',
    'chrome://',
    'iosapp://',
    'androidapp://',
];
class LoginUriView {
    // tslint:enable
    constructor(u) {
        this.match = null;
        // tslint:disable
        this._uri = null;
        this._domain = null;
        this._hostname = null;
        this._host = null;
        this._canLaunch = null;
        if (!u) {
            return;
        }
        this.match = u.match;
    }
    get uri() {
        return this._uri;
    }
    set uri(value) {
        this._uri = value;
        this._domain = null;
        this._canLaunch = null;
    }
    get domain() {
        if (this._domain == null && this.uri != null) {
            this._domain = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].getDomain(this.uri);
            if (this._domain === '') {
                this._domain = null;
            }
        }
        return this._domain;
    }
    get hostname() {
        if (this.match === _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_0__[/* UriMatchType */ "a"].RegularExpression) {
            return null;
        }
        if (this._hostname == null && this.uri != null) {
            this._hostname = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].getHostname(this.uri);
            if (this._hostname === '') {
                this._hostname = null;
            }
        }
        return this._hostname;
    }
    get host() {
        if (this.match === _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_0__[/* UriMatchType */ "a"].RegularExpression) {
            return null;
        }
        if (this._host == null && this.uri != null) {
            this._host = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].getHost(this.uri);
            if (this._host === '') {
                this._host = null;
            }
        }
        return this._host;
    }
    get hostnameOrUri() {
        return this.hostname != null ? this.hostname : this.uri;
    }
    get hostOrUri() {
        return this.host != null ? this.host : this.uri;
    }
    get isWebsite() {
        return this.uri != null && (this.uri.indexOf('http://') === 0 || this.uri.indexOf('https://') === 0 ||
            (this.uri.indexOf('://') < 0 && _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].tldEndingRegex.test(this.uri)));
    }
    get canLaunch() {
        if (this._canLaunch != null) {
            return this._canLaunch;
        }
        if (this.uri != null && this.match !== _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_0__[/* UriMatchType */ "a"].RegularExpression) {
            const uri = this.launchUri;
            for (let i = 0; i < CanLaunchWhitelist.length; i++) {
                if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {
                    this._canLaunch = true;
                    return this._canLaunch;
                }
            }
        }
        this._canLaunch = false;
        return this._canLaunch;
    }
    get launchUri() {
        return this.uri.indexOf('://') < 0 && _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].tldEndingRegex.test(this.uri) ? ('http://' + this.uri) : this.uri;
    }
}


/***/ }),

/***/ 106:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SafariApp; });
/* harmony import */ var _browserApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);

class SafariApp {
    static sendMessageToApp(command, data = null, resolveNow = false) {
        if (!_browserApi__WEBPACK_IMPORTED_MODULE_0__[/* BrowserApi */ "a"].isSafariApi) {
            return Promise.resolve(null);
        }
        return new Promise(resolve => {
            const now = new Date();
            const messageId = now.getTime().toString() + '_' + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
            browser.runtime.sendNativeMessage('com.bitwarden.desktop', {
                id: messageId,
                command: command,
                data: data,
                responseData: null,
            }, (response) => {
                resolve(response);
            });
        });
    }
}


/***/ }),

/***/ 107:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardView; });
/* harmony import */ var _itemView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(76);
/* harmony import */ var _enums_linkedIdType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);
/* harmony import */ var _misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



class CardView extends _itemView__WEBPACK_IMPORTED_MODULE_0__[/* ItemView */ "a"] {
    // tslint:enable
    constructor(c) {
        super();
        this.cardholderName = null;
        this.expMonth = null;
        this.expYear = null;
        this.code = null;
        // tslint:disable
        this._brand = null;
        this._number = null;
        this._subTitle = null;
    }
    get maskedCode() {
        return this.code != null ? '•'.repeat(this.code.length) : null;
    }
    get maskedNumber() {
        return this.number != null ? '•'.repeat(this.number.length) : null;
    }
    get brand() {
        return this._brand;
    }
    set brand(value) {
        this._brand = value;
        this._subTitle = null;
    }
    get number() {
        return this._number;
    }
    set number(value) {
        this._number = value;
        this._subTitle = null;
    }
    get subTitle() {
        if (this._subTitle == null) {
            this._subTitle = this.brand;
            if (this.number != null && this.number.length >= 4) {
                if (this._subTitle != null && this._subTitle !== '') {
                    this._subTitle += ', ';
                }
                else {
                    this._subTitle = '';
                }
                // Show last 5 on amex, last 4 for all others
                const count = this.number.length >= 5 && this.number.match(new RegExp('^3[47]')) != null ? 5 : 4;
                this._subTitle += ('*' + this.number.substr(this.number.length - count));
            }
        }
        return this._subTitle;
    }
    get expiration() {
        if (!this.expMonth && !this.expYear) {
            return null;
        }
        let exp = this.expMonth != null ? ('0' + this.expMonth).slice(-2) : '__';
        exp += (' / ' + (this.expYear != null ? this.formatYear(this.expYear) : '____'));
        return exp;
    }
    formatYear(year) {
        return year.length === 2 ? '20' + year : year;
    }
}
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_2__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_1__[/* CardLinkedId */ "a"].CardholderName),
    __metadata("design:type", String)
], CardView.prototype, "cardholderName", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_2__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_1__[/* CardLinkedId */ "a"].ExpMonth, 'expirationMonth'),
    __metadata("design:type", String)
], CardView.prototype, "expMonth", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_2__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_1__[/* CardLinkedId */ "a"].ExpYear, 'expirationYear'),
    __metadata("design:type", String)
], CardView.prototype, "expYear", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_2__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_1__[/* CardLinkedId */ "a"].Code, 'securityCode'),
    __metadata("design:type", String)
], CardView.prototype, "code", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_2__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_1__[/* CardLinkedId */ "a"].Brand),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], CardView.prototype, "brand", null);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_2__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_1__[/* CardLinkedId */ "a"].Number),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], CardView.prototype, "number", null);


/***/ }),

/***/ 108:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IdentityView; });
/* harmony import */ var _itemView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(76);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var _enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);
/* harmony import */ var _misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class IdentityView extends _itemView__WEBPACK_IMPORTED_MODULE_0__[/* ItemView */ "a"] {
    // tslint:enable
    constructor(i) {
        super();
        this.title = null;
        this.middleName = null;
        this.address1 = null;
        this.address2 = null;
        this.address3 = null;
        this.city = null;
        this.state = null;
        this.postalCode = null;
        this.country = null;
        this.company = null;
        this.email = null;
        this.phone = null;
        this.ssn = null;
        this.username = null;
        this.passportNumber = null;
        this.licenseNumber = null;
        // tslint:disable
        this._firstName = null;
        this._lastName = null;
        this._subTitle = null;
    }
    get firstName() {
        return this._firstName;
    }
    set firstName(value) {
        this._firstName = value;
        this._subTitle = null;
    }
    get lastName() {
        return this._lastName;
    }
    set lastName(value) {
        this._lastName = value;
        this._subTitle = null;
    }
    get subTitle() {
        if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {
            this._subTitle = '';
            if (this.firstName != null) {
                this._subTitle = this.firstName;
            }
            if (this.lastName != null) {
                if (this._subTitle !== '') {
                    this._subTitle += ' ';
                }
                this._subTitle += this.lastName;
            }
        }
        return this._subTitle;
    }
    get fullName() {
        if (this.title != null || this.firstName != null || this.middleName != null || this.lastName != null) {
            let name = '';
            if (this.title != null) {
                name += (this.title + ' ');
            }
            if (this.firstName != null) {
                name += (this.firstName + ' ');
            }
            if (this.middleName != null) {
                name += (this.middleName + ' ');
            }
            if (this.lastName != null) {
                name += this.lastName;
            }
            return name.trim();
        }
        return null;
    }
    get fullAddress() {
        let address = this.address1;
        if (!_misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].isNullOrWhitespace(this.address2)) {
            if (!_misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].isNullOrWhitespace(address)) {
                address += ', ';
            }
            address += this.address2;
        }
        if (!_misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].isNullOrWhitespace(this.address3)) {
            if (!_misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].isNullOrWhitespace(address)) {
                address += ', ';
            }
            address += this.address3;
        }
        return address;
    }
    get fullAddressPart2() {
        if (this.city == null && this.state == null && this.postalCode == null) {
            return null;
        }
        const city = this.city || '-';
        const state = this.state;
        const postalCode = this.postalCode || '-';
        let addressPart2 = city;
        if (!_misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].isNullOrWhitespace(state)) {
            addressPart2 += ', ' + state;
        }
        addressPart2 += ', ' + postalCode;
        return addressPart2;
    }
}
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Title),
    __metadata("design:type", String)
], IdentityView.prototype, "title", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].MiddleName),
    __metadata("design:type", String)
], IdentityView.prototype, "middleName", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Address1),
    __metadata("design:type", String)
], IdentityView.prototype, "address1", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Address2),
    __metadata("design:type", String)
], IdentityView.prototype, "address2", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Address3),
    __metadata("design:type", String)
], IdentityView.prototype, "address3", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].City, 'cityTown'),
    __metadata("design:type", String)
], IdentityView.prototype, "city", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].State, 'stateProvince'),
    __metadata("design:type", String)
], IdentityView.prototype, "state", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].PostalCode, 'zipPostalCode'),
    __metadata("design:type", String)
], IdentityView.prototype, "postalCode", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Country),
    __metadata("design:type", String)
], IdentityView.prototype, "country", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Company),
    __metadata("design:type", String)
], IdentityView.prototype, "company", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Email),
    __metadata("design:type", String)
], IdentityView.prototype, "email", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Phone),
    __metadata("design:type", String)
], IdentityView.prototype, "phone", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Ssn),
    __metadata("design:type", String)
], IdentityView.prototype, "ssn", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].Username),
    __metadata("design:type", String)
], IdentityView.prototype, "username", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].PassportNumber),
    __metadata("design:type", String)
], IdentityView.prototype, "passportNumber", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].LicenseNumber),
    __metadata("design:type", String)
], IdentityView.prototype, "licenseNumber", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].FirstName),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], IdentityView.prototype, "firstName", null);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].LastName),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], IdentityView.prototype, "lastName", null);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* IdentityLinkedId */ "b"].FullName),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], IdentityView.prototype, "fullName", null);


/***/ }),

/***/ 114:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNoteView; });
/* harmony import */ var _itemView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(76);

class SecureNoteView extends _itemView__WEBPACK_IMPORTED_MODULE_0__[/* ItemView */ "a"] {
    constructor(n) {
        super();
        this.type = null;
        if (!n) {
            return;
        }
        this.type = n.type;
    }
    get subTitle() {
        return null;
    }
}


/***/ }),

/***/ 116:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KeysRequest; });
class KeysRequest {
    constructor(publicKey, encryptedPrivateKey) {
        this.publicKey = publicKey;
        this.encryptedPrivateKey = encryptedPrivateKey;
    }
}


/***/ }),

/***/ 117:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FolderView; });
class FolderView {
    constructor(f) {
        this.id = null;
        this.name = null;
        this.revisionDate = null;
        if (!f) {
            return;
        }
        this.id = f.id;
        this.revisionDate = f.revisionDate;
    }
}


/***/ }),

/***/ 119:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Cipher; });
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var _data_cipherData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(92);
/* harmony import */ var _view_cipherView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(80);
/* harmony import */ var _attachment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(280);
/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(188);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(32);
/* harmony import */ var _field__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(189);
/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(190);
/* harmony import */ var _login__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(191);
/* harmony import */ var _password__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(277);
/* harmony import */ var _secureNote__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(193);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class Cipher extends _domainBase__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false, localData = null) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            id: null,
            userId: null,
            organizationId: null,
            folderId: null,
            name: null,
            notes: null,
        }, alreadyEncrypted, ['id', 'userId', 'organizationId', 'folderId']);
        this.type = obj.type;
        this.favorite = obj.favorite;
        this.organizationUseTotp = obj.organizationUseTotp;
        this.edit = obj.edit;
        if (obj.viewPassword != null) {
            this.viewPassword = obj.viewPassword;
        }
        else {
            this.viewPassword = true; // Default for already synced Ciphers without viewPassword
        }
        this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;
        this.collectionIds = obj.collectionIds;
        this.localData = localData;
        this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;
        this.reprompt = obj.reprompt;
        switch (this.type) {
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                this.login = new _login__WEBPACK_IMPORTED_MODULE_8__[/* Login */ "a"](obj.login, alreadyEncrypted);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                this.secureNote = new _secureNote__WEBPACK_IMPORTED_MODULE_10__[/* SecureNote */ "a"](obj.secureNote, alreadyEncrypted);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                this.card = new _card__WEBPACK_IMPORTED_MODULE_4__[/* Card */ "a"](obj.card, alreadyEncrypted);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                this.identity = new _identity__WEBPACK_IMPORTED_MODULE_7__[/* Identity */ "a"](obj.identity, alreadyEncrypted);
                break;
            default:
                break;
        }
        if (obj.attachments != null) {
            this.attachments = obj.attachments.map(a => new _attachment__WEBPACK_IMPORTED_MODULE_3__[/* Attachment */ "a"](a, alreadyEncrypted));
        }
        else {
            this.attachments = null;
        }
        if (obj.fields != null) {
            this.fields = obj.fields.map(f => new _field__WEBPACK_IMPORTED_MODULE_6__[/* Field */ "a"](f, alreadyEncrypted));
        }
        else {
            this.fields = null;
        }
        if (obj.passwordHistory != null) {
            this.passwordHistory = obj.passwordHistory.map(ph => new _password__WEBPACK_IMPORTED_MODULE_9__[/* Password */ "a"](ph, alreadyEncrypted));
        }
        else {
            this.passwordHistory = null;
        }
    }
    decrypt(encKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const model = new _view_cipherView__WEBPACK_IMPORTED_MODULE_2__[/* CipherView */ "a"](this);
            yield this.decryptObj(model, {
                name: null,
                notes: null,
            }, this.organizationId, encKey);
            switch (this.type) {
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                    model.login = yield this.login.decrypt(this.organizationId, encKey);
                    break;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                    model.secureNote = yield this.secureNote.decrypt(this.organizationId, encKey);
                    break;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                    model.card = yield this.card.decrypt(this.organizationId, encKey);
                    break;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                    model.identity = yield this.identity.decrypt(this.organizationId, encKey);
                    break;
                default:
                    break;
            }
            const orgId = this.organizationId;
            if (this.attachments != null && this.attachments.length > 0) {
                const attachments = [];
                yield this.attachments.reduce((promise, attachment) => {
                    return promise.then(() => {
                        return attachment.decrypt(orgId, encKey);
                    }).then(decAttachment => {
                        attachments.push(decAttachment);
                    });
                }, Promise.resolve());
                model.attachments = attachments;
            }
            if (this.fields != null && this.fields.length > 0) {
                const fields = [];
                yield this.fields.reduce((promise, field) => {
                    return promise.then(() => {
                        return field.decrypt(orgId, encKey);
                    }).then(decField => {
                        fields.push(decField);
                    });
                }, Promise.resolve());
                model.fields = fields;
            }
            if (this.passwordHistory != null && this.passwordHistory.length > 0) {
                const passwordHistory = [];
                yield this.passwordHistory.reduce((promise, ph) => {
                    return promise.then(() => {
                        return ph.decrypt(orgId, encKey);
                    }).then(decPh => {
                        passwordHistory.push(decPh);
                    });
                }, Promise.resolve());
                model.passwordHistory = passwordHistory;
            }
            return model;
        });
    }
    toCipherData(userId) {
        const c = new _data_cipherData__WEBPACK_IMPORTED_MODULE_1__[/* CipherData */ "a"]();
        c.id = this.id;
        c.organizationId = this.organizationId;
        c.folderId = this.folderId;
        c.userId = this.organizationId != null ? userId : null;
        c.edit = this.edit;
        c.viewPassword = this.viewPassword;
        c.organizationUseTotp = this.organizationUseTotp;
        c.favorite = this.favorite;
        c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;
        c.type = this.type;
        c.collectionIds = this.collectionIds;
        c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;
        c.reprompt = this.reprompt;
        this.buildDataModel(this, c, {
            name: null,
            notes: null,
        });
        switch (c.type) {
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                c.login = this.login.toLoginData();
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                c.secureNote = this.secureNote.toSecureNoteData();
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                c.card = this.card.toCardData();
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                c.identity = this.identity.toIdentityData();
                break;
            default:
                break;
        }
        if (this.fields != null) {
            c.fields = this.fields.map(f => f.toFieldData());
        }
        if (this.attachments != null) {
            c.attachments = this.attachments.map(a => a.toAttachmentData());
        }
        if (this.passwordHistory != null) {
            c.passwordHistory = this.passwordHistory.map(ph => ph.toPasswordHistoryData());
        }
        return c;
    }
}


/***/ }),

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BrowserApi; });
/* harmony import */ var _safariApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(106);
/* harmony import */ var jslib_common_misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class BrowserApi {
    static getTabFromCurrentWindowId() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BrowserApi.tabsQueryFirst({
                active: true,
                windowId: chrome.windows.WINDOW_ID_CURRENT,
            });
        });
    }
    static getTabFromCurrentWindow() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BrowserApi.tabsQueryFirst({
                active: true,
                currentWindow: true,
            });
        });
    }
    static getActiveTabs() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BrowserApi.tabsQuery({
                active: true,
            });
        });
    }
    static tabsQuery(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                chrome.tabs.query(options, (tabs) => {
                    resolve(tabs);
                });
            });
        });
    }
    static tabsQueryFirst(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const tabs = yield BrowserApi.tabsQuery(options);
            if (tabs.length > 0) {
                return tabs[0];
            }
            return null;
        });
    }
    static tabSendMessageData(tab, command, data = null) {
        const obj = {
            command: command,
        };
        if (data != null) {
            obj.data = data;
        }
        return BrowserApi.tabSendMessage(tab, obj);
    }
    static tabSendMessage(tab, obj, options = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!tab || !tab.id) {
                return;
            }
            return new Promise(resolve => {
                chrome.tabs.sendMessage(tab.id, obj, options, () => {
                    if (chrome.runtime.lastError) {
                        // Some error happened
                    }
                    resolve();
                });
            });
        });
    }
    static getBackgroundPage() {
        return chrome.extension.getBackgroundPage();
    }
    static getApplicationVersion() {
        return chrome.runtime.getManifest().version;
    }
    static isPopupOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(chrome.extension.getViews({ type: 'popup' }).length > 0);
        });
    }
    static createNewTab(url, extensionPage = false, active = true) {
        chrome.tabs.create({ url: url, active: active });
    }
    static messageListener(name, callback) {
        chrome.runtime.onMessage.addListener((msg, sender, response) => {
            callback(msg, sender, response);
        });
    }
    static closeLoginTab() {
        return __awaiter(this, void 0, void 0, function* () {
            const tabs = yield BrowserApi.tabsQuery({
                active: true,
                title: 'Bitwarden',
                windowType: 'normal',
                currentWindow: true,
            });
            if (tabs.length === 0) {
                return;
            }
            const tabToClose = tabs[tabs.length - 1].id;
            chrome.tabs.remove(tabToClose);
        });
    }
    static focusSpecifiedTab(tabId) {
        return __awaiter(this, void 0, void 0, function* () {
            chrome.tabs.update(tabId, { active: true, highlighted: true });
        });
    }
    static closePopup(win) {
        if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {
            // Reactivating the active tab dismisses the popup tab. The promise final
            // condition is only called if the popup wasn't already dismissed (future proofing).
            // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604
            browser.tabs.update({ active: true }).finally(win.close);
        }
        else {
            win.close();
        }
    }
    static downloadFile(win, blobData, blobOptions, fileName) {
        if (BrowserApi.isSafariApi) {
            const type = blobOptions != null ? blobOptions.type : null;
            let data = null;
            if (type === 'text/plain' && typeof (blobData) === 'string') {
                data = blobData;
            }
            else {
                data = jslib_common_misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].fromBufferToB64(blobData);
            }
            _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].sendMessageToApp('downloadFile', JSON.stringify({
                blobData: data,
                blobOptions: blobOptions,
                fileName: fileName,
            }), true);
        }
        else {
            const blob = new Blob([blobData], blobOptions);
            if (navigator.msSaveOrOpenBlob) {
                navigator.msSaveBlob(blob, fileName);
            }
            else {
                const a = win.document.createElement('a');
                a.href = URL.createObjectURL(blob);
                a.download = fileName;
                win.document.body.appendChild(a);
                a.click();
                win.document.body.removeChild(a);
            }
        }
    }
    static gaFilter() {
        return "production" !== 'production';
    }
    static getUILanguage(win) {
        return chrome.i18n.getUILanguage();
    }
    static reloadExtension(win) {
        if (win != null) {
            return win.location.reload(true);
        }
        else {
            return chrome.runtime.reload();
        }
    }
    static reloadOpenWindows() {
        const views = chrome.extension.getViews();
        views.filter(w => w.location.href != null).forEach(w => {
            w.location.reload();
        });
    }
    static connectNative(application) {
        if (BrowserApi.isWebExtensionsApi) {
            return browser.runtime.connectNative(application);
        }
        else if (BrowserApi.isChromeApi) {
            return chrome.runtime.connectNative(application);
        }
    }
    static requestPermission(permission) {
        if (BrowserApi.isWebExtensionsApi) {
            return browser.permissions.request(permission);
        }
        return new Promise((resolve, reject) => {
            chrome.permissions.request(permission, resolve);
        });
    }
    static getPlatformInfo() {
        if (BrowserApi.isWebExtensionsApi) {
            return browser.runtime.getPlatformInfo();
        }
        return new Promise(resolve => {
            chrome.runtime.getPlatformInfo(resolve);
        });
    }
}
BrowserApi.isWebExtensionsApi = (typeof browser !== 'undefined');
BrowserApi.isSafariApi = navigator.userAgent.indexOf(' Safari/') !== -1 &&
    navigator.userAgent.indexOf(' Chrome/') === -1 &&
    navigator.userAgent.indexOf(' Chromium/') === -1;
BrowserApi.isChromeApi = !BrowserApi.isSafariApi && (typeof chrome !== 'undefined');
BrowserApi.isFirefoxOnAndroid = navigator.userAgent.indexOf('Firefox/') !== -1 &&
    navigator.userAgent.indexOf('Android') !== -1;


/***/ }),

/***/ 137:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OrganizationUserStatusType; });
var OrganizationUserStatusType;
(function (OrganizationUserStatusType) {
    OrganizationUserStatusType[OrganizationUserStatusType["Invited"] = 0] = "Invited";
    OrganizationUserStatusType[OrganizationUserStatusType["Accepted"] = 1] = "Accepted";
    OrganizationUserStatusType[OrganizationUserStatusType["Confirmed"] = 2] = "Confirmed";
})(OrganizationUserStatusType || (OrganizationUserStatusType = {}));


/***/ }),

/***/ 138:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendFileView; });
class SendFileView {
    constructor(f) {
        this.id = null;
        this.size = null;
        this.sizeName = null;
        this.fileName = null;
        if (!f) {
            return;
        }
        this.id = f.id;
        this.size = f.size;
        this.sizeName = f.sizeName;
    }
    get fileSize() {
        try {
            if (this.size != null) {
                return parseInt(this.size, null);
            }
        }
        catch (_a) {
            // Invalid file size.
        }
        return 0;
    }
}


/***/ }),

/***/ 139:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendTextView; });
class SendTextView {
    constructor(t) {
        this.text = null;
        if (!t) {
            return;
        }
        this.hidden = t.hidden;
    }
    get maskedText() {
        return this.text != null ? '••••••••' : null;
    }
}


/***/ }),

/***/ 14:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TwoFactorProviderType; });
var TwoFactorProviderType;
(function (TwoFactorProviderType) {
    TwoFactorProviderType[TwoFactorProviderType["Authenticator"] = 0] = "Authenticator";
    TwoFactorProviderType[TwoFactorProviderType["Email"] = 1] = "Email";
    TwoFactorProviderType[TwoFactorProviderType["Duo"] = 2] = "Duo";
    TwoFactorProviderType[TwoFactorProviderType["Yubikey"] = 3] = "Yubikey";
    TwoFactorProviderType[TwoFactorProviderType["U2f"] = 4] = "U2f";
    TwoFactorProviderType[TwoFactorProviderType["Remember"] = 5] = "Remember";
    TwoFactorProviderType[TwoFactorProviderType["OrganizationDuo"] = 6] = "OrganizationDuo";
    TwoFactorProviderType[TwoFactorProviderType["WebAuthn"] = 7] = "WebAuthn";
})(TwoFactorProviderType || (TwoFactorProviderType = {}));


/***/ }),

/***/ 141:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ cipherRequest_CipherRequest; });

// EXTERNAL MODULE: ./jslib/common/src/enums/cipherType.ts
var cipherType = __webpack_require__(10);

// EXTERNAL MODULE: ./jslib/common/src/models/api/cardApi.ts
var cardApi = __webpack_require__(263);

// EXTERNAL MODULE: ./jslib/common/src/models/api/fieldApi.ts
var fieldApi = __webpack_require__(264);

// EXTERNAL MODULE: ./jslib/common/src/models/api/identityApi.ts
var identityApi = __webpack_require__(265);

// EXTERNAL MODULE: ./jslib/common/src/models/api/loginApi.ts
var loginApi = __webpack_require__(266);

// EXTERNAL MODULE: ./jslib/common/src/models/api/loginUriApi.ts
var loginUriApi = __webpack_require__(267);

// EXTERNAL MODULE: ./jslib/common/src/models/api/secureNoteApi.ts
var secureNoteApi = __webpack_require__(268);

// CONCATENATED MODULE: ./jslib/common/src/models/request/attachmentRequest.ts
class AttachmentRequest {
}

// CONCATENATED MODULE: ./jslib/common/src/models/request/cipherRequest.ts








class cipherRequest_CipherRequest {
    constructor(cipher) {
        this.type = cipher.type;
        this.folderId = cipher.folderId;
        this.organizationId = cipher.organizationId;
        this.name = cipher.name ? cipher.name.encryptedString : null;
        this.notes = cipher.notes ? cipher.notes.encryptedString : null;
        this.favorite = cipher.favorite;
        this.lastKnownRevisionDate = cipher.revisionDate;
        this.reprompt = cipher.reprompt;
        switch (this.type) {
            case cipherType["a" /* CipherType */].Login:
                this.login = new loginApi["a" /* LoginApi */]();
                this.login.uris = null;
                this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;
                this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;
                this.login.passwordRevisionDate = cipher.login.passwordRevisionDate != null ?
                    cipher.login.passwordRevisionDate.toISOString() : null;
                this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;
                this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;
                if (cipher.login.uris != null) {
                    this.login.uris = cipher.login.uris.map(u => {
                        const uri = new loginUriApi["a" /* LoginUriApi */]();
                        uri.uri = u.uri != null ? u.uri.encryptedString : null;
                        uri.match = u.match != null ? u.match : null;
                        return uri;
                    });
                }
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                this.secureNote = new secureNoteApi["a" /* SecureNoteApi */]();
                this.secureNote.type = cipher.secureNote.type;
                break;
            case cipherType["a" /* CipherType */].Card:
                this.card = new cardApi["a" /* CardApi */]();
                this.card.cardholderName = cipher.card.cardholderName != null ?
                    cipher.card.cardholderName.encryptedString : null;
                this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;
                this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;
                this.card.expMonth = cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;
                this.card.expYear = cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;
                this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;
                break;
            case cipherType["a" /* CipherType */].Identity:
                this.identity = new identityApi["a" /* IdentityApi */]();
                this.identity.title = cipher.identity.title != null ? cipher.identity.title.encryptedString : null;
                this.identity.firstName = cipher.identity.firstName != null ?
                    cipher.identity.firstName.encryptedString : null;
                this.identity.middleName = cipher.identity.middleName != null ?
                    cipher.identity.middleName.encryptedString : null;
                this.identity.lastName = cipher.identity.lastName != null ?
                    cipher.identity.lastName.encryptedString : null;
                this.identity.address1 = cipher.identity.address1 != null ?
                    cipher.identity.address1.encryptedString : null;
                this.identity.address2 = cipher.identity.address2 != null ?
                    cipher.identity.address2.encryptedString : null;
                this.identity.address3 = cipher.identity.address3 != null ?
                    cipher.identity.address3.encryptedString : null;
                this.identity.city = cipher.identity.city != null ? cipher.identity.city.encryptedString : null;
                this.identity.state = cipher.identity.state != null ? cipher.identity.state.encryptedString : null;
                this.identity.postalCode = cipher.identity.postalCode != null ?
                    cipher.identity.postalCode.encryptedString : null;
                this.identity.country = cipher.identity.country != null ?
                    cipher.identity.country.encryptedString : null;
                this.identity.company = cipher.identity.company != null ?
                    cipher.identity.company.encryptedString : null;
                this.identity.email = cipher.identity.email != null ? cipher.identity.email.encryptedString : null;
                this.identity.phone = cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;
                this.identity.ssn = cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;
                this.identity.username = cipher.identity.username != null ?
                    cipher.identity.username.encryptedString : null;
                this.identity.passportNumber = cipher.identity.passportNumber != null ?
                    cipher.identity.passportNumber.encryptedString : null;
                this.identity.licenseNumber = cipher.identity.licenseNumber != null ?
                    cipher.identity.licenseNumber.encryptedString : null;
                break;
            default:
                break;
        }
        if (cipher.fields != null) {
            this.fields = cipher.fields.map(f => {
                const field = new fieldApi["a" /* FieldApi */]();
                field.type = f.type;
                field.name = f.name ? f.name.encryptedString : null;
                field.value = f.value ? f.value.encryptedString : null;
                field.linkedId = f.linkedId;
                return field;
            });
        }
        if (cipher.passwordHistory != null) {
            this.passwordHistory = [];
            cipher.passwordHistory.forEach(ph => {
                this.passwordHistory.push({
                    lastUsedDate: ph.lastUsedDate,
                    password: ph.password ? ph.password.encryptedString : null,
                });
            });
        }
        if (cipher.attachments != null) {
            this.attachments = {};
            this.attachments2 = {};
            cipher.attachments.forEach(attachment => {
                const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;
                this.attachments[attachment.id] = fileName;
                const attachmentRequest = new AttachmentRequest();
                attachmentRequest.fileName = fileName;
                if (attachment.key != null) {
                    attachmentRequest.key = attachment.key.encryptedString;
                }
                this.attachments2[attachment.id] = attachmentRequest;
            });
        }
    }
}


/***/ }),

/***/ 151:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FieldView; });
class FieldView {
    constructor(f) {
        this.name = null;
        this.value = null;
        this.type = null;
        this.newField = false; // Marks if the field is new and hasn't been saved
        this.showValue = false;
        this.linkedId = null;
        if (!f) {
            return;
        }
        this.type = f.type;
        this.linkedId = f.linkedId;
    }
    get maskedValue() {
        return this.value != null ? '••••••••' : null;
    }
}


/***/ }),

/***/ 154:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VerificationType; });
var VerificationType;
(function (VerificationType) {
    VerificationType[VerificationType["MasterPassword"] = 0] = "MasterPassword";
    VerificationType[VerificationType["OTP"] = 1] = "OTP";
})(VerificationType || (VerificationType = {}));


/***/ }),

/***/ 16:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MessagingService; });
class MessagingService {
}


/***/ }),

/***/ 170:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecretVerificationRequest; });
class SecretVerificationRequest {
}


/***/ }),

/***/ 171:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KdfType; });
var KdfType;
(function (KdfType) {
    KdfType[KdfType["PBKDF2_SHA256"] = 0] = "PBKDF2_SHA256";
})(KdfType || (KdfType = {}));


/***/ }),

/***/ 172:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KeyConnectorUserKeyRequest; });
class KeyConnectorUserKeyRequest {
    constructor(key) {
        this.key = key;
    }
}


/***/ }),

/***/ 174:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ sendData_SendData; });

// EXTERNAL MODULE: ./jslib/common/src/enums/sendType.ts
var sendType = __webpack_require__(45);

// CONCATENATED MODULE: ./jslib/common/src/models/data/sendFileData.ts
class SendFileData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.id = data.id;
        this.fileName = data.fileName;
        this.key = data.key;
        this.size = data.size;
        this.sizeName = data.sizeName;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/data/sendTextData.ts
class SendTextData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.text = data.text;
        this.hidden = data.hidden;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/data/sendData.ts



class sendData_SendData {
    constructor(response, userId) {
        if (response == null) {
            return;
        }
        this.id = response.id;
        this.accessId = response.accessId;
        this.userId = userId;
        this.type = response.type;
        this.name = response.name;
        this.notes = response.notes;
        this.key = response.key;
        this.maxAccessCount = response.maxAccessCount;
        this.accessCount = response.accessCount;
        this.revisionDate = response.revisionDate;
        this.expirationDate = response.expirationDate;
        this.deletionDate = response.deletionDate;
        this.password = response.password;
        this.disabled = response.disable;
        this.hideEmail = response.hideEmail;
        switch (this.type) {
            case sendType["a" /* SendType */].Text:
                this.text = new SendTextData(response.text);
                break;
            case sendType["a" /* SendType */].File:
                this.file = new SendFileData(response.file);
                break;
            default:
                break;
        }
    }
}


/***/ }),

/***/ 186:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendFileApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

class SendFileApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.id = this.getResponseProperty('Id');
        this.fileName = this.getResponseProperty('FileName');
        this.key = this.getResponseProperty('Key');
        this.size = this.getResponseProperty('Size');
        this.sizeName = this.getResponseProperty('SizeName');
    }
}


/***/ }),

/***/ 187:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendTextApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

class SendTextApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.text = this.getResponseProperty('Text');
        this.hidden = this.getResponseProperty('Hidden') || false;
    }
}


/***/ }),

/***/ 188:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Card; });
/* harmony import */ var _data_cardData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(270);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _view_cardView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);



class Card extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            cardholderName: null,
            brand: null,
            number: null,
            expMonth: null,
            expYear: null,
            code: null,
        }, alreadyEncrypted, []);
    }
    decrypt(orgId, encKey) {
        return this.decryptObj(new _view_cardView__WEBPACK_IMPORTED_MODULE_2__[/* CardView */ "a"](this), {
            cardholderName: null,
            brand: null,
            number: null,
            expMonth: null,
            expYear: null,
            code: null,
        }, orgId, encKey);
    }
    toCardData() {
        const c = new _data_cardData__WEBPACK_IMPORTED_MODULE_0__[/* CardData */ "a"]();
        this.buildDataModel(this, c, {
            cardholderName: null,
            brand: null,
            number: null,
            expMonth: null,
            expYear: null,
            code: null,
        });
        return c;
    }
}


/***/ }),

/***/ 189:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Field; });
/* harmony import */ var _data_fieldData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(271);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _view_fieldView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(151);



class Field extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.type = obj.type;
        this.linkedId = obj.linkedId;
        this.buildDomainModel(this, obj, {
            name: null,
            value: null,
        }, alreadyEncrypted, []);
    }
    decrypt(orgId, encKey) {
        return this.decryptObj(new _view_fieldView__WEBPACK_IMPORTED_MODULE_2__[/* FieldView */ "a"](this), {
            name: null,
            value: null,
        }, orgId, encKey);
    }
    toFieldData() {
        const f = new _data_fieldData__WEBPACK_IMPORTED_MODULE_0__[/* FieldData */ "a"]();
        this.buildDataModel(this, f, {
            name: null,
            value: null,
            type: null,
            linkedId: null,
        }, ['type', 'linkedId']);
        return f;
    }
}


/***/ }),

/***/ 19:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return LoginLinkedId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardLinkedId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return IdentityLinkedId; });
// LoginView
var LoginLinkedId;
(function (LoginLinkedId) {
    LoginLinkedId[LoginLinkedId["Username"] = 100] = "Username";
    LoginLinkedId[LoginLinkedId["Password"] = 101] = "Password";
})(LoginLinkedId || (LoginLinkedId = {}));
// CardView
var CardLinkedId;
(function (CardLinkedId) {
    CardLinkedId[CardLinkedId["CardholderName"] = 300] = "CardholderName";
    CardLinkedId[CardLinkedId["ExpMonth"] = 301] = "ExpMonth";
    CardLinkedId[CardLinkedId["ExpYear"] = 302] = "ExpYear";
    CardLinkedId[CardLinkedId["Code"] = 303] = "Code";
    CardLinkedId[CardLinkedId["Brand"] = 304] = "Brand";
    CardLinkedId[CardLinkedId["Number"] = 305] = "Number";
})(CardLinkedId || (CardLinkedId = {}));
// IdentityView
var IdentityLinkedId;
(function (IdentityLinkedId) {
    IdentityLinkedId[IdentityLinkedId["Title"] = 400] = "Title";
    IdentityLinkedId[IdentityLinkedId["MiddleName"] = 401] = "MiddleName";
    IdentityLinkedId[IdentityLinkedId["Address1"] = 402] = "Address1";
    IdentityLinkedId[IdentityLinkedId["Address2"] = 403] = "Address2";
    IdentityLinkedId[IdentityLinkedId["Address3"] = 404] = "Address3";
    IdentityLinkedId[IdentityLinkedId["City"] = 405] = "City";
    IdentityLinkedId[IdentityLinkedId["State"] = 406] = "State";
    IdentityLinkedId[IdentityLinkedId["PostalCode"] = 407] = "PostalCode";
    IdentityLinkedId[IdentityLinkedId["Country"] = 408] = "Country";
    IdentityLinkedId[IdentityLinkedId["Company"] = 409] = "Company";
    IdentityLinkedId[IdentityLinkedId["Email"] = 410] = "Email";
    IdentityLinkedId[IdentityLinkedId["Phone"] = 411] = "Phone";
    IdentityLinkedId[IdentityLinkedId["Ssn"] = 412] = "Ssn";
    IdentityLinkedId[IdentityLinkedId["Username"] = 413] = "Username";
    IdentityLinkedId[IdentityLinkedId["PassportNumber"] = 414] = "PassportNumber";
    IdentityLinkedId[IdentityLinkedId["LicenseNumber"] = 415] = "LicenseNumber";
    IdentityLinkedId[IdentityLinkedId["FirstName"] = 416] = "FirstName";
    IdentityLinkedId[IdentityLinkedId["LastName"] = 417] = "LastName";
    IdentityLinkedId[IdentityLinkedId["FullName"] = 418] = "FullName";
})(IdentityLinkedId || (IdentityLinkedId = {}));


/***/ }),

/***/ 190:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Identity; });
/* harmony import */ var _data_identityData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(272);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _view_identityView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(108);



class Identity extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            title: null,
            firstName: null,
            middleName: null,
            lastName: null,
            address1: null,
            address2: null,
            address3: null,
            city: null,
            state: null,
            postalCode: null,
            country: null,
            company: null,
            email: null,
            phone: null,
            ssn: null,
            username: null,
            passportNumber: null,
            licenseNumber: null,
        }, alreadyEncrypted, []);
    }
    decrypt(orgId, encKey) {
        return this.decryptObj(new _view_identityView__WEBPACK_IMPORTED_MODULE_2__[/* IdentityView */ "a"](this), {
            title: null,
            firstName: null,
            middleName: null,
            lastName: null,
            address1: null,
            address2: null,
            address3: null,
            city: null,
            state: null,
            postalCode: null,
            country: null,
            company: null,
            email: null,
            phone: null,
            ssn: null,
            username: null,
            passportNumber: null,
            licenseNumber: null,
        }, orgId, encKey);
    }
    toIdentityData() {
        const i = new _data_identityData__WEBPACK_IMPORTED_MODULE_0__[/* IdentityData */ "a"]();
        this.buildDataModel(this, i, {
            title: null,
            firstName: null,
            middleName: null,
            lastName: null,
            address1: null,
            address2: null,
            address3: null,
            city: null,
            state: null,
            postalCode: null,
            country: null,
            company: null,
            email: null,
            phone: null,
            ssn: null,
            username: null,
            passportNumber: null,
            licenseNumber: null,
        });
        return i;
    }
}


/***/ }),

/***/ 191:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Login; });
/* harmony import */ var _loginUri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(192);
/* harmony import */ var _data_loginData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(273);
/* harmony import */ var _view_loginView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(88);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class Login extends _domainBase__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.passwordRevisionDate = obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;
        this.autofillOnPageLoad = obj.autofillOnPageLoad;
        this.buildDomainModel(this, obj, {
            username: null,
            password: null,
            totp: null,
        }, alreadyEncrypted, []);
        if (obj.uris) {
            this.uris = [];
            obj.uris.forEach(u => {
                this.uris.push(new _loginUri__WEBPACK_IMPORTED_MODULE_0__[/* LoginUri */ "a"](u, alreadyEncrypted));
            });
        }
    }
    decrypt(orgId, encKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = yield this.decryptObj(new _view_loginView__WEBPACK_IMPORTED_MODULE_2__[/* LoginView */ "a"](this), {
                username: null,
                password: null,
                totp: null,
            }, orgId, encKey);
            if (this.uris != null) {
                view.uris = [];
                for (let i = 0; i < this.uris.length; i++) {
                    const uri = yield this.uris[i].decrypt(orgId, encKey);
                    view.uris.push(uri);
                }
            }
            return view;
        });
    }
    toLoginData() {
        const l = new _data_loginData__WEBPACK_IMPORTED_MODULE_1__[/* LoginData */ "a"]();
        l.passwordRevisionDate = this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;
        l.autofillOnPageLoad = this.autofillOnPageLoad;
        this.buildDataModel(this, l, {
            username: null,
            password: null,
            totp: null,
        });
        if (this.uris != null && this.uris.length > 0) {
            l.uris = [];
            this.uris.forEach(u => {
                l.uris.push(u.toLoginUriData());
            });
        }
        return l;
    }
}


/***/ }),

/***/ 192:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginUri; });
/* harmony import */ var _data_loginUriData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(274);
/* harmony import */ var _view_loginUriView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(100);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);



class LoginUri extends _domainBase__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.match = obj.match;
        this.buildDomainModel(this, obj, {
            uri: null,
        }, alreadyEncrypted, []);
    }
    decrypt(orgId, encKey) {
        return this.decryptObj(new _view_loginUriView__WEBPACK_IMPORTED_MODULE_1__[/* LoginUriView */ "a"](this), {
            uri: null,
        }, orgId, encKey);
    }
    toLoginUriData() {
        const u = new _data_loginUriData__WEBPACK_IMPORTED_MODULE_0__[/* LoginUriData */ "a"]();
        this.buildDataModel(this, u, {
            uri: null,
        }, ['match']);
        return u;
    }
}


/***/ }),

/***/ 193:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNote; });
/* harmony import */ var _data_secureNoteData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(276);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _view_secureNoteView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(114);



class SecureNote extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.type = obj.type;
    }
    decrypt(orgId, encKey) {
        return Promise.resolve(new _view_secureNoteView__WEBPACK_IMPORTED_MODULE_2__[/* SecureNoteView */ "a"](this));
    }
    toSecureNoteData() {
        const n = new _data_secureNoteData__WEBPACK_IMPORTED_MODULE_0__[/* SecureNoteData */ "a"]();
        n.type = this.type;
        return n;
    }
}


/***/ }),

/***/ 194:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ TwoFactorProviders; });
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ auth_service_AuthService; });

// EXTERNAL MODULE: ./jslib/common/src/enums/hashPurpose.ts
var hashPurpose = __webpack_require__(81);

// EXTERNAL MODULE: ./jslib/common/src/enums/twoFactorProviderType.ts
var twoFactorProviderType = __webpack_require__(14);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/authResult.ts
class AuthResult {
    constructor() {
        this.twoFactor = false;
        this.captchaSiteKey = '';
        this.resetMasterPassword = false;
        this.forcePasswordReset = false;
        this.twoFactorProviders = null;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/request/account/setKeyConnectorKeyRequest.ts
class SetKeyConnectorKeyRequest {
    constructor(key, kdf, kdfIterations, orgIdentifier, keys) {
        this.key = key;
        this.kdf = kdf;
        this.kdfIterations = kdfIterations;
        this.orgIdentifier = orgIdentifier;
        this.keys = keys;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/request/deviceRequest.ts
class DeviceRequest {
    constructor(appId, platformUtilsService) {
        this.type = platformUtilsService.getDevice();
        this.name = platformUtilsService.getDeviceString();
        this.identifier = appId;
        this.pushToken = null;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/request/keyConnectorUserKeyRequest.ts
var keyConnectorUserKeyRequest = __webpack_require__(172);

// EXTERNAL MODULE: ./jslib/common/src/models/request/keysRequest.ts
var keysRequest = __webpack_require__(116);

// CONCATENATED MODULE: ./jslib/common/src/models/request/preloginRequest.ts
class PreloginRequest {
    constructor(email) {
        this.email = email;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/misc/utils.ts
var utils = __webpack_require__(6);

// CONCATENATED MODULE: ./jslib/common/src/models/request/tokenRequest.ts

class tokenRequest_TokenRequest {
    constructor(credentials, codes, clientIdClientSecret, provider, token, remember, captchaResponse, device) {
        this.provider = provider;
        this.token = token;
        this.remember = remember;
        this.captchaResponse = captchaResponse;
        if (credentials != null && credentials.length > 1) {
            this.email = credentials[0];
            this.masterPasswordHash = credentials[1];
        }
        else if (codes != null && codes.length > 2) {
            this.code = codes[0];
            this.codeVerifier = codes[1];
            this.redirectUri = codes[2];
        }
        else if (clientIdClientSecret != null && clientIdClientSecret.length > 1) {
            this.clientId = clientIdClientSecret[0];
            this.clientSecret = clientIdClientSecret[1];
        }
        this.device = device != null ? device : null;
    }
    toIdentityToken(clientId) {
        const obj = {
            scope: 'api offline_access',
            client_id: clientId,
        };
        if (this.clientSecret != null) {
            obj.scope = clientId.startsWith('organization') ? 'api.organization' : 'api';
            obj.grant_type = 'client_credentials';
            obj.client_secret = this.clientSecret;
        }
        else if (this.masterPasswordHash != null && this.email != null) {
            obj.grant_type = 'password';
            obj.username = this.email;
            obj.password = this.masterPasswordHash;
        }
        else if (this.code != null && this.codeVerifier != null && this.redirectUri != null) {
            obj.grant_type = 'authorization_code';
            obj.code = this.code;
            obj.code_verifier = this.codeVerifier;
            obj.redirect_uri = this.redirectUri;
        }
        else {
            throw new Error('must provide credentials or codes');
        }
        if (this.device) {
            obj.deviceType = this.device.type;
            obj.deviceIdentifier = this.device.identifier;
            obj.deviceName = this.device.name;
            // no push tokens for browser apps yet
            // obj.devicePushToken = this.device.pushToken;
        }
        if (this.token && this.provider != null) {
            obj.twoFactorToken = this.token;
            obj.twoFactorProvider = this.provider;
            obj.twoFactorRemember = this.remember ? '1' : '0';
        }
        if (this.captchaResponse != null) {
            obj.captchaResponse = this.captchaResponse;
        }
        return obj;
    }
    alterIdentityTokenHeaders(headers) {
        if (this.clientSecret == null && this.masterPasswordHash != null && this.email != null) {
            headers.set('Auth-Email', utils["a" /* Utils */].fromUtf8ToUrlB64(this.email));
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/auth.service.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










const TwoFactorProviders = {
    [twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator,
        name: null,
        description: null,
        priority: 1,
        sort: 1,
        premium: false,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey,
        name: null,
        description: null,
        priority: 3,
        sort: 2,
        premium: true,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].Duo]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].Duo,
        name: 'Duo',
        description: null,
        priority: 2,
        sort: 3,
        premium: true,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo,
        name: 'Duo (Organization)',
        description: null,
        priority: 10,
        sort: 4,
        premium: false,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].Email]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].Email,
        name: null,
        description: null,
        priority: 0,
        sort: 6,
        premium: false,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].WebAuthn]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].WebAuthn,
        name: null,
        description: null,
        priority: 4,
        sort: 5,
        premium: true,
    },
};
class auth_service_AuthService {
    constructor(cryptoService, apiService, userService, tokenService, appIdService, i18nService, platformUtilsService, messagingService, vaultTimeoutService, logService, cryptoFunctionService, environmentService, keyConnectorService, setCryptoKeys = true) {
        this.cryptoService = cryptoService;
        this.apiService = apiService;
        this.userService = userService;
        this.tokenService = tokenService;
        this.appIdService = appIdService;
        this.i18nService = i18nService;
        this.platformUtilsService = platformUtilsService;
        this.messagingService = messagingService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.logService = logService;
        this.cryptoFunctionService = cryptoFunctionService;
        this.environmentService = environmentService;
        this.keyConnectorService = keyConnectorService;
        this.setCryptoKeys = setCryptoKeys;
        this.selectedTwoFactorProviderType = null;
    }
    init() {
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Email].name = this.i18nService.t('emailTitle');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Email].description = this.i18nService.t('emailDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator].name = this.i18nService.t('authenticatorAppTitle');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator].description =
            this.i18nService.t('authenticatorAppDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Duo].description = this.i18nService.t('duoDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo].name =
            'Duo (' + this.i18nService.t('organization') + ')';
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo].description =
            this.i18nService.t('duoOrganizationDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].WebAuthn].name = this.i18nService.t('webAuthnTitle');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].WebAuthn].description = this.i18nService.t('webAuthnDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey].name = this.i18nService.t('yubiKeyTitle');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey].description = this.i18nService.t('yubiKeyDesc');
    }
    logIn(email, masterPassword, captchaToken) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            const key = yield this.makePreloginKey(masterPassword, email);
            const hashedPassword = yield this.cryptoService.hashPassword(masterPassword, key);
            const localHashedPassword = yield this.cryptoService.hashPassword(masterPassword, key, hashPurpose["a" /* HashPurpose */].LocalAuthorization);
            return yield this.logInHelper(email, hashedPassword, localHashedPassword, null, null, null, null, null, key, null, null, null, captchaToken, null);
        });
    }
    logInSso(code, codeVerifier, redirectUrl, orgId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            return yield this.logInHelper(null, null, null, code, codeVerifier, redirectUrl, null, null, null, null, null, null, null, orgId);
        });
    }
    logInApiKey(clientId, clientSecret) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            return yield this.logInHelper(null, null, null, null, null, null, clientId, clientSecret, null, null, null, null, null, null);
        });
    }
    logInTwoFactor(twoFactorProvider, twoFactorToken, remember) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.logInHelper(this.email, this.masterPasswordHash, this.localMasterPasswordHash, this.code, this.codeVerifier, this.ssoRedirectUrl, this.clientId, this.clientSecret, this.key, twoFactorProvider, twoFactorToken, remember, this.captchaToken, null);
        });
    }
    logInComplete(email, masterPassword, twoFactorProvider, twoFactorToken, remember, captchaToken) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            const key = yield this.makePreloginKey(masterPassword, email);
            const hashedPassword = yield this.cryptoService.hashPassword(masterPassword, key);
            const localHashedPassword = yield this.cryptoService.hashPassword(masterPassword, key, hashPurpose["a" /* HashPurpose */].LocalAuthorization);
            return yield this.logInHelper(email, hashedPassword, localHashedPassword, null, null, null, null, null, key, twoFactorProvider, twoFactorToken, remember, captchaToken, null);
        });
    }
    logInSsoComplete(code, codeVerifier, redirectUrl, twoFactorProvider, twoFactorToken, remember) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            return yield this.logInHelper(null, null, null, code, codeVerifier, redirectUrl, null, null, null, twoFactorProvider, twoFactorToken, remember, null, null);
        });
    }
    logInApiKeyComplete(clientId, clientSecret, twoFactorProvider, twoFactorToken, remember) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            return yield this.logInHelper(null, null, null, null, null, null, clientId, clientSecret, null, twoFactorProvider, twoFactorToken, remember, null, null);
        });
    }
    logOut(callback) {
        callback();
        this.messagingService.send('loggedOut');
    }
    getSupportedTwoFactorProviders(win) {
        const providers = [];
        if (this.twoFactorProvidersData == null) {
            return providers;
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo) &&
            this.platformUtilsService.supportsDuo()) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator)) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey)) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].Duo) && this.platformUtilsService.supportsDuo()) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Duo]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].WebAuthn) && this.platformUtilsService.supportsWebAuthn(win)) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].WebAuthn]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].Email)) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Email]);
        }
        return providers;
    }
    getDefaultTwoFactorProvider(webAuthnSupported) {
        if (this.twoFactorProvidersData == null) {
            return null;
        }
        if (this.selectedTwoFactorProviderType != null &&
            this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)) {
            return this.selectedTwoFactorProviderType;
        }
        let providerType = null;
        let providerPriority = -1;
        this.twoFactorProvidersData.forEach((value, type) => {
            const provider = TwoFactorProviders[type];
            if (provider != null && provider.priority > providerPriority) {
                if (type === twoFactorProviderType["a" /* TwoFactorProviderType */].WebAuthn && !webAuthnSupported) {
                    return;
                }
                providerType = type;
                providerPriority = provider.priority;
            }
        });
        return providerType;
    }
    makePreloginKey(masterPassword, email) {
        return __awaiter(this, void 0, void 0, function* () {
            email = email.trim().toLowerCase();
            let kdf = null;
            let kdfIterations = null;
            try {
                const preloginResponse = yield this.apiService.postPrelogin(new PreloginRequest(email));
                if (preloginResponse != null) {
                    kdf = preloginResponse.kdf;
                    kdfIterations = preloginResponse.kdfIterations;
                }
            }
            catch (e) {
                if (e == null || e.statusCode !== 404) {
                    throw e;
                }
            }
            return this.cryptoService.makeKey(masterPassword, email, kdf, kdfIterations);
        });
    }
    authingWithApiKey() {
        return this.clientId != null && this.clientSecret != null;
    }
    authingWithSso() {
        return this.code != null && this.codeVerifier != null && this.ssoRedirectUrl != null;
    }
    authingWithPassword() {
        return this.email != null && this.masterPasswordHash != null;
    }
    logInHelper(email, hashedPassword, localHashedPassword, code, codeVerifier, redirectUrl, clientId, clientSecret, key, twoFactorProvider, twoFactorToken, remember, captchaToken, orgId) {
        return __awaiter(this, void 0, void 0, function* () {
            const storedTwoFactorToken = yield this.tokenService.getTwoFactorToken(email);
            const appId = yield this.appIdService.getAppId();
            const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);
            let emailPassword = [];
            let codeCodeVerifier = [];
            let clientIdClientSecret = [null, null];
            if (email != null && hashedPassword != null) {
                emailPassword = [email, hashedPassword];
            }
            else {
                emailPassword = null;
            }
            if (code != null && codeVerifier != null && redirectUrl != null) {
                codeCodeVerifier = [code, codeVerifier, redirectUrl];
            }
            else {
                codeCodeVerifier = null;
            }
            if (clientId != null && clientSecret != null) {
                clientIdClientSecret = [clientId, clientSecret];
            }
            else {
                clientIdClientSecret = null;
            }
            let request;
            if (twoFactorToken != null && twoFactorProvider != null) {
                request = new tokenRequest_TokenRequest(emailPassword, codeCodeVerifier, clientIdClientSecret, twoFactorProvider, twoFactorToken, remember, captchaToken, deviceRequest);
            }
            else if (storedTwoFactorToken != null) {
                request = new tokenRequest_TokenRequest(emailPassword, codeCodeVerifier, clientIdClientSecret, twoFactorProviderType["a" /* TwoFactorProviderType */].Remember, storedTwoFactorToken, false, captchaToken, deviceRequest);
            }
            else {
                request = new tokenRequest_TokenRequest(emailPassword, codeCodeVerifier, clientIdClientSecret, null, null, false, captchaToken, deviceRequest);
            }
            const response = yield this.apiService.postIdentityToken(request);
            this.clearState();
            const result = new AuthResult();
            result.captchaSiteKey = response.siteKey;
            if (!!result.captchaSiteKey) {
                return result;
            }
            result.twoFactor = !!response.twoFactorProviders2;
            if (result.twoFactor) {
                // two factor required
                this.email = email;
                this.masterPasswordHash = hashedPassword;
                this.localMasterPasswordHash = localHashedPassword;
                this.code = code;
                this.codeVerifier = codeVerifier;
                this.ssoRedirectUrl = redirectUrl;
                this.clientId = clientId;
                this.clientSecret = clientSecret;
                this.key = this.setCryptoKeys ? key : null;
                const twoFactorResponse = response;
                this.twoFactorProvidersData = twoFactorResponse.twoFactorProviders2;
                result.twoFactorProviders = twoFactorResponse.twoFactorProviders2;
                this.captchaToken = twoFactorResponse.captchaToken;
                return result;
            }
            const tokenResponse = response;
            result.resetMasterPassword = tokenResponse.resetMasterPassword;
            result.forcePasswordReset = tokenResponse.forcePasswordReset;
            if (tokenResponse.twoFactorToken != null) {
                yield this.tokenService.setTwoFactorToken(tokenResponse.twoFactorToken, email);
            }
            yield this.tokenService.setTokens(tokenResponse.accessToken, tokenResponse.refreshToken, clientIdClientSecret);
            yield this.userService.setInformation(this.tokenService.getUserId(), this.tokenService.getEmail(), tokenResponse.kdf, tokenResponse.kdfIterations);
            if (this.setCryptoKeys) {
                if (key != null) {
                    yield this.cryptoService.setKey(key);
                }
                if (localHashedPassword != null) {
                    yield this.cryptoService.setKeyHash(localHashedPassword);
                }
                // Skip this step during SSO new user flow. No key is returned from server.
                if (code == null || tokenResponse.key != null) {
                    if (tokenResponse.keyConnectorUrl != null) {
                        yield this.keyConnectorService.getAndSetKey(tokenResponse.keyConnectorUrl);
                    }
                    else if (tokenResponse.apiUseKeyConnector) {
                        const keyConnectorUrl = this.environmentService.getKeyConnectorUrl();
                        yield this.keyConnectorService.getAndSetKey(keyConnectorUrl);
                    }
                    yield this.cryptoService.setEncKey(tokenResponse.key);
                    // User doesn't have a key pair yet (old account), let's generate one for them
                    if (tokenResponse.privateKey == null) {
                        try {
                            const keyPair = yield this.cryptoService.makeKeyPair();
                            yield this.apiService.postAccountKeys(new keysRequest["a" /* KeysRequest */](keyPair[0], keyPair[1].encryptedString));
                            tokenResponse.privateKey = keyPair[1].encryptedString;
                        }
                        catch (e) {
                            this.logService.error(e);
                        }
                    }
                    yield this.cryptoService.setEncPrivateKey(tokenResponse.privateKey);
                }
                else if (tokenResponse.keyConnectorUrl != null) {
                    const password = yield this.cryptoFunctionService.randomBytes(64);
                    const k = yield this.cryptoService.makeKey(utils["a" /* Utils */].fromBufferToB64(password), this.tokenService.getEmail(), tokenResponse.kdf, tokenResponse.kdfIterations);
                    const keyConnectorRequest = new keyConnectorUserKeyRequest["a" /* KeyConnectorUserKeyRequest */](k.encKeyB64);
                    yield this.cryptoService.setKey(k);
                    const encKey = yield this.cryptoService.makeEncKey(k);
                    yield this.cryptoService.setEncKey(encKey[1].encryptedString);
                    const [pubKey, privKey] = yield this.cryptoService.makeKeyPair();
                    try {
                        yield this.apiService.postUserKeyToKeyConnector(tokenResponse.keyConnectorUrl, keyConnectorRequest);
                    }
                    catch (e) {
                        throw new Error('Unable to reach key connector');
                    }
                    const keys = new keysRequest["a" /* KeysRequest */](pubKey, privKey.encryptedString);
                    const setPasswordRequest = new SetKeyConnectorKeyRequest(encKey[1].encryptedString, tokenResponse.kdf, tokenResponse.kdfIterations, orgId, keys);
                    yield this.apiService.postSetKeyConnectorKey(setPasswordRequest);
                }
            }
            if (this.vaultTimeoutService != null) {
                this.vaultTimeoutService.biometricLocked = false;
            }
            this.messagingService.send('loggedIn');
            return result;
        });
    }
    clearState() {
        this.key = null;
        this.email = null;
        this.masterPasswordHash = null;
        this.localMasterPasswordHash = null;
        this.code = null;
        this.codeVerifier = null;
        this.ssoRedirectUrl = null;
        this.clientId = null;
        this.clientSecret = null;
        this.twoFactorProvidersData = null;
        this.selectedTwoFactorProviderType = null;
    }
}


/***/ }),

/***/ 195:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return sequentialize; });
/**
 * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time
 *
 * If a promise was returned from a previous call to this function, that hasn't yet resolved it will
 * be returned, instead of calling the original function again
 *
 * Results are not cached, once the promise has returned, the next call will result in a fresh call
 *
 * Read more at https://github.com/bitwarden/jslib/pull/7
 */
function sequentialize(cacheKey) {
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor.value;
        const caches = new Map();
        const getCache = (obj) => {
            let cache = caches.get(obj);
            if (cache != null) {
                return cache;
            }
            cache = new Map();
            caches.set(obj, cache);
            return cache;
        };
        return {
            value: function (...args) {
                const cache = getCache(this);
                const argsCacheKey = cacheKey(args);
                let response = cache.get(argsCacheKey);
                if (response != null) {
                    return response;
                }
                const onFinally = () => {
                    cache.delete(argsCacheKey);
                    if (cache.size === 0) {
                        caches.delete(this);
                    }
                };
                response = originalMethod.apply(this, args).then((val) => {
                    onFinally();
                    return val;
                }).catch((err) => {
                    onFinally();
                    throw err;
                });
                cache.set(argsCacheKey, response);
                return response;
            },
        };
    };
}


/***/ }),

/***/ 20:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export LinkedMetadata */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return linkedFieldOption; });
class LinkedMetadata {
    constructor(propertyKey, _i18nKey) {
        this.propertyKey = propertyKey;
        this._i18nKey = _i18nKey;
    }
    get i18nKey() {
        var _a;
        return (_a = this._i18nKey) !== null && _a !== void 0 ? _a : this.propertyKey;
    }
}
/**
 * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it
 *    available as a Linked custom field option.
 * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.
 * @param i18nKey - The i18n key used to describe the decorated class property in the UI. If it is null, then the name
 *    of the class property will be used as the i18n key.
 */
function linkedFieldOption(id, i18nKey) {
    return (prototype, propertyKey) => {
        if (prototype.linkedFieldOptions == null) {
            prototype.linkedFieldOptions = new Map();
        }
        prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, i18nKey));
    };
}


/***/ }),

/***/ 21:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EncString; });
/* harmony import */ var _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class EncString {
    constructor(encryptedStringOrType, data, iv, mac) {
        if (data != null) {
            // data and header
            const encType = encryptedStringOrType;
            if (iv != null) {
                this.encryptedString = encType + '.' + iv + '|' + data;
            }
            else {
                this.encryptedString = encType + '.' + data;
            }
            // mac
            if (mac != null) {
                this.encryptedString += ('|' + mac);
            }
            this.encryptionType = encType;
            this.data = data;
            this.iv = iv;
            this.mac = mac;
            return;
        }
        this.encryptedString = encryptedStringOrType;
        if (!this.encryptedString) {
            return;
        }
        const headerPieces = this.encryptedString.split('.');
        let encPieces = null;
        if (headerPieces.length === 2) {
            try {
                this.encryptionType = parseInt(headerPieces[0], null);
                encPieces = headerPieces[1].split('|');
            }
            catch (e) {
                return;
            }
        }
        else {
            encPieces = this.encryptedString.split('|');
            this.encryptionType = encPieces.length === 3 ? _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc128_HmacSha256_B64 :
                _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_B64;
        }
        switch (this.encryptionType) {
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc128_HmacSha256_B64:
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_HmacSha256_B64:
                if (encPieces.length !== 3) {
                    return;
                }
                this.iv = encPieces[0];
                this.data = encPieces[1];
                this.mac = encPieces[2];
                break;
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_B64:
                if (encPieces.length !== 2) {
                    return;
                }
                this.iv = encPieces[0];
                this.data = encPieces[1];
                break;
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].Rsa2048_OaepSha256_B64:
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].Rsa2048_OaepSha1_B64:
                if (encPieces.length !== 1) {
                    return;
                }
                this.data = encPieces[0];
                break;
            default:
                return;
        }
    }
    decrypt(orgId, key = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.decryptedValue != null) {
                return this.decryptedValue;
            }
            let cryptoService;
            const containerService = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].global.bitwardenContainerService;
            if (containerService) {
                cryptoService = containerService.getCryptoService();
            }
            else {
                throw new Error('global bitwardenContainerService not initialized.');
            }
            try {
                if (key == null) {
                    key = yield cryptoService.getOrgKey(orgId);
                }
                this.decryptedValue = yield cryptoService.decryptToUtf8(this, key);
            }
            catch (e) {
                this.decryptedValue = '[error: cannot decrypt]';
            }
            return this.decryptedValue;
        });
    }
}


/***/ }),

/***/ 215:
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = 215;

/***/ }),

/***/ 222:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNoteType; });
var SecureNoteType;
(function (SecureNoteType) {
    SecureNoteType[SecureNoteType["Generic"] = 0] = "Generic";
})(SecureNoteType || (SecureNoteType = {}));


/***/ }),

/***/ 223:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendView; });
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _sendFileView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(138);
/* harmony import */ var _sendTextView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(139);



class SendView {
    constructor(s) {
        this.id = null;
        this.accessId = null;
        this.name = null;
        this.notes = null;
        this.type = null;
        this.text = new _sendTextView__WEBPACK_IMPORTED_MODULE_2__[/* SendTextView */ "a"]();
        this.file = new _sendFileView__WEBPACK_IMPORTED_MODULE_1__[/* SendFileView */ "a"]();
        this.maxAccessCount = null;
        this.accessCount = 0;
        this.revisionDate = null;
        this.deletionDate = null;
        this.expirationDate = null;
        this.password = null;
        this.disabled = false;
        this.hideEmail = false;
        if (!s) {
            return;
        }
        this.id = s.id;
        this.accessId = s.accessId;
        this.type = s.type;
        this.maxAccessCount = s.maxAccessCount;
        this.accessCount = s.accessCount;
        this.revisionDate = s.revisionDate;
        this.deletionDate = s.deletionDate;
        this.expirationDate = s.expirationDate;
        this.disabled = s.disabled;
        this.password = s.password;
        this.hideEmail = s.hideEmail;
    }
    get urlB64Key() {
        return _misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].fromBufferToUrlB64(this.key);
    }
    get maxAccessCountReached() {
        if (this.maxAccessCount == null) {
            return false;
        }
        return this.accessCount >= this.maxAccessCount;
    }
    get expired() {
        if (this.expirationDate == null) {
            return false;
        }
        return this.expirationDate <= new Date();
    }
    get pendingDelete() {
        return this.deletionDate <= new Date();
    }
}


/***/ }),

/***/ 224:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BrowserMessagingService; });
class BrowserMessagingService {
    send(subscriber, arg = {}) {
        const message = Object.assign({}, { command: subscriber }, arg);
        chrome.runtime.sendMessage(message);
    }
}


/***/ }),

/***/ 225:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StateService; });
class StateService {
    constructor() {
        this.state = {};
    }
    get(key) {
        if (this.state.hasOwnProperty(key)) {
            return Promise.resolve(this.state[key]);
        }
        return Promise.resolve(null);
    }
    save(key, obj) {
        this.state[key] = obj;
        return Promise.resolve();
    }
    remove(key) {
        delete this.state[key];
        return Promise.resolve();
    }
    purge() {
        this.state = {};
        return Promise.resolve();
    }
}


/***/ }),

/***/ 226:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SearchService; });
/* harmony import */ var lunr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(118);
/* harmony import */ var lunr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lunr__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _enums_fieldType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52);
/* harmony import */ var _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(33);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class SearchService {
    constructor(cipherService, logService, i18nService) {
        this.cipherService = cipherService;
        this.logService = logService;
        this.i18nService = i18nService;
        this.indexedEntityId = null;
        this.indexing = false;
        this.index = null;
        this.searchableMinLength = 2;
        if (['zh-CN', 'zh-TW'].indexOf(i18nService.locale) !== -1) {
            this.searchableMinLength = 1;
        }
    }
    clearIndex() {
        this.indexedEntityId = null;
        this.index = null;
    }
    isSearchable(query) {
        const notSearchable = query == null || (this.index == null && query.length < this.searchableMinLength) ||
            (this.index != null && query.length < this.searchableMinLength && query.indexOf('>') !== 0);
        return !notSearchable;
    }
    indexCiphers(indexedEntityId, ciphers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.indexing) {
                return;
            }
            this.logService.time('search indexing');
            this.indexing = true;
            this.indexedEntityId = indexedEntityId;
            this.index = null;
            const builder = new lunr__WEBPACK_IMPORTED_MODULE_0__["Builder"]();
            builder.ref('id');
            builder.field('shortid', { boost: 100, extractor: (c) => c.id.substr(0, 8) });
            builder.field('name', { boost: 10 });
            builder.field('subtitle', {
                boost: 5,
                extractor: (c) => {
                    if (c.subTitle != null && c.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Card) {
                        return c.subTitle.replace(/\*/g, '');
                    }
                    return c.subTitle;
                },
            });
            builder.field('notes');
            builder.field('login.username', {
                extractor: (c) => c.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Login && c.login != null ? c.login.username : null,
            });
            builder.field('login.uris', { boost: 2, extractor: (c) => this.uriExtractor(c) });
            builder.field('fields', { extractor: (c) => this.fieldExtractor(c, false) });
            builder.field('fields_joined', { extractor: (c) => this.fieldExtractor(c, true) });
            builder.field('attachments', { extractor: (c) => this.attachmentExtractor(c, false) });
            builder.field('attachments_joined', { extractor: (c) => this.attachmentExtractor(c, true) });
            builder.field('organizationid', { extractor: (c) => c.organizationId });
            ciphers = ciphers || (yield this.cipherService.getAllDecrypted());
            ciphers.forEach(c => builder.add(c));
            this.index = builder.build();
            this.indexing = false;
            this.logService.timeEnd('search indexing');
        });
    }
    searchCiphers(query, filter = null, ciphers = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            if (query != null) {
                query = query.trim().toLowerCase();
            }
            if (query === '') {
                query = null;
            }
            if (ciphers == null) {
                ciphers = yield this.cipherService.getAllDecrypted();
            }
            if (filter != null && Array.isArray(filter) && filter.length > 0) {
                ciphers = ciphers.filter(c => filter.every(f => f == null || f(c)));
            }
            else if (filter != null) {
                ciphers = ciphers.filter(filter);
            }
            if (!this.isSearchable(query)) {
                return ciphers;
            }
            if (this.indexing) {
                yield new Promise(r => setTimeout(r, 250));
                if (this.indexing) {
                    yield new Promise(r => setTimeout(r, 500));
                }
            }
            const index = this.getIndexForSearch();
            if (index == null) {
                // Fall back to basic search if index is not available
                return this.searchCiphersBasic(ciphers, query);
            }
            const ciphersMap = new Map();
            ciphers.forEach(c => ciphersMap.set(c.id, c));
            let searchResults = null;
            const isQueryString = query != null && query.length > 1 && query.indexOf('>') === 0;
            if (isQueryString) {
                try {
                    searchResults = index.search(query.substr(1).trim());
                }
                catch (e) {
                    this.logService.error(e);
                }
            }
            else {
                // tslint:disable-next-line
                const soWild = lunr__WEBPACK_IMPORTED_MODULE_0__["Query"].wildcard.LEADING | lunr__WEBPACK_IMPORTED_MODULE_0__["Query"].wildcard.TRAILING;
                searchResults = index.query(q => {
                    lunr__WEBPACK_IMPORTED_MODULE_0__["tokenizer"](query).forEach(token => {
                        const t = token.toString();
                        q.term(t, { fields: ['name'], wildcard: soWild });
                        q.term(t, { fields: ['subtitle'], wildcard: soWild });
                        q.term(t, { fields: ['login.uris'], wildcard: soWild });
                        q.term(t, {});
                    });
                });
            }
            if (searchResults != null) {
                searchResults.forEach(r => {
                    if (ciphersMap.has(r.ref)) {
                        results.push(ciphersMap.get(r.ref));
                    }
                });
            }
            return results;
        });
    }
    searchCiphersBasic(ciphers, query, deleted = false) {
        query = query.trim().toLowerCase();
        return ciphers.filter(c => {
            if (deleted !== c.isDeleted) {
                return false;
            }
            if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            if (query.length >= 8 && c.id.startsWith(query)) {
                return true;
            }
            if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            if (c.login && c.login.uri != null && c.login.uri.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            return false;
        });
    }
    searchSends(sends, query) {
        query = query.trim().toLocaleLowerCase();
        return sends.filter(s => {
            var _a, _b, _c;
            if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            if (query.length >= 8 && (s.id.startsWith(query) || s.accessId.toLocaleLowerCase().startsWith(query) || (((_a = s.file) === null || _a === void 0 ? void 0 : _a.id) != null && s.file.id.startsWith(query)))) {
                return true;
            }
            if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            if (((_b = s.text) === null || _b === void 0 ? void 0 : _b.text) != null && s.text.text.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            if (((_c = s.file) === null || _c === void 0 ? void 0 : _c.fileName) != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {
                return true;
            }
        });
    }
    getIndexForSearch() {
        return this.index;
    }
    fieldExtractor(c, joined) {
        if (!c.hasFields) {
            return null;
        }
        let fields = [];
        c.fields.forEach(f => {
            if (f.name != null) {
                fields.push(f.name);
            }
            if (f.type === _enums_fieldType__WEBPACK_IMPORTED_MODULE_2__[/* FieldType */ "a"].Text && f.value != null) {
                fields.push(f.value);
            }
        });
        fields = fields.filter(f => f.trim() !== '');
        if (fields.length === 0) {
            return null;
        }
        return joined ? fields.join(' ') : fields;
    }
    attachmentExtractor(c, joined) {
        if (!c.hasAttachments) {
            return null;
        }
        let attachments = [];
        c.attachments.forEach(a => {
            if (a != null && a.fileName != null) {
                if (joined && a.fileName.indexOf('.') > -1) {
                    attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf('.')));
                }
                else {
                    attachments.push(a.fileName);
                }
            }
        });
        attachments = attachments.filter(f => f.trim() !== '');
        if (attachments.length === 0) {
            return null;
        }
        return joined ? attachments.join(' ') : attachments;
    }
    uriExtractor(c) {
        if (c.type !== _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Login || c.login == null || !c.login.hasUris) {
            return null;
        }
        const uris = [];
        c.login.uris.forEach(u => {
            if (u.uri == null || u.uri === '') {
                return;
            }
            if (u.hostname != null) {
                uris.push(u.hostname);
                return;
            }
            let uri = u.uri;
            if (u.match !== _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_3__[/* UriMatchType */ "a"].RegularExpression) {
                const protocolIndex = uri.indexOf('://');
                if (protocolIndex > -1) {
                    uri = uri.substr(protocolIndex + 3);
                }
                const queryIndex = uri.search(/\?|&|#/);
                if (queryIndex > -1) {
                    uri = uri.substring(0, queryIndex);
                }
            }
            uris.push(uri);
        });
        return uris.length > 0 ? uris : null;
    }
}


/***/ }),

/***/ 228:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PasswordHistoryView; });
class PasswordHistoryView {
    constructor(ph) {
        this.password = null;
        this.lastUsedDate = null;
        if (!ph) {
            return;
        }
        this.lastUsedDate = ph.lastUsedDate;
    }
}


/***/ }),

/***/ 23:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PopupUtilsService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _browser_browserApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);
/* harmony import */ var jslib_common_abstractions_platformUtils_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);





class PopupUtilsService {
    constructor(platformUtilsService) {
        this.platformUtilsService = platformUtilsService;
    }
    inSidebar(win) {
        return win.location.search !== '' && win.location.search.indexOf('uilocation=sidebar') > -1;
    }
    inTab(win) {
        return win.location.search !== '' && win.location.search.indexOf('uilocation=tab') > -1;
    }
    inPopout(win) {
        return win.location.search !== '' && win.location.search.indexOf('uilocation=popout') > -1;
    }
    inPopup(win) {
        return win.location.search === '' || win.location.search.indexOf('uilocation=') === -1 ||
            win.location.search.indexOf('uilocation=popup') > -1;
    }
    getContentScrollY(win, scrollingContainer = 'content') {
        const content = win.document.getElementsByTagName(scrollingContainer)[0];
        return content.scrollTop;
    }
    setContentScrollY(win, scrollY, scrollingContainer = 'content') {
        if (scrollY != null) {
            const content = win.document.getElementsByTagName(scrollingContainer)[0];
            content.scrollTop = scrollY;
        }
    }
    popOut(win, href = null) {
        if (href === null) {
            href = win.location.href;
        }
        if ((typeof chrome !== 'undefined') && chrome.windows && chrome.windows.create) {
            if (href.indexOf('?uilocation=') > -1) {
                href = href.replace('uilocation=popup', 'uilocation=popout')
                    .replace('uilocation=tab', 'uilocation=popout')
                    .replace('uilocation=sidebar', 'uilocation=popout');
            }
            else {
                const hrefParts = href.split('#');
                href = hrefParts[0] + '?uilocation=popout' + (hrefParts.length > 0 ? '#' + hrefParts[1] : '');
            }
            const bodyRect = document.querySelector('body').getBoundingClientRect();
            chrome.windows.create({
                url: href,
                type: 'popup',
                width: Math.round(bodyRect.width ? bodyRect.width + 60 : 375),
                height: Math.round(bodyRect.height || 600),
            });
            if (this.inPopup(win)) {
                _browser_browserApi__WEBPACK_IMPORTED_MODULE_1__[/* BrowserApi */ "a"].closePopup(win);
            }
        }
        else if ((typeof chrome !== 'undefined') && chrome.tabs && chrome.tabs.create) {
            href = href.replace('uilocation=popup', 'uilocation=tab')
                .replace('uilocation=popout', 'uilocation=tab')
                .replace('uilocation=sidebar', 'uilocation=tab');
            chrome.tabs.create({
                url: href,
            });
        }
    }
}
PopupUtilsService.ɵfac = function PopupUtilsService_Factory(t) { return new (t || PopupUtilsService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ "nc"](jslib_common_abstractions_platformUtils_service__WEBPACK_IMPORTED_MODULE_2__[/* PlatformUtilsService */ "a"])); };
PopupUtilsService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdefineInjectable */ "Zb"]({ token: PopupUtilsService, factory: PopupUtilsService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵsetClassMetadata */ "Lb"](PopupUtilsService, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ "A"]
    }], function () { return [{ type: jslib_common_abstractions_platformUtils_service__WEBPACK_IMPORTED_MODULE_2__[/* PlatformUtilsService */ "a"] }]; }, null); })();


/***/ }),

/***/ 259:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MasterPasswordPolicyOptions; });
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);

class MasterPasswordPolicyOptions extends _domainBase__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {
    constructor() {
        super(...arguments);
        this.minComplexity = 0;
        this.minLength = 0;
        this.requireUpper = false;
        this.requireLower = false;
        this.requireNumbers = false;
        this.requireSpecial = false;
    }
}


/***/ }),

/***/ 263:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

class CardApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.cardholderName = this.getResponseProperty('CardholderName');
        this.brand = this.getResponseProperty('Brand');
        this.number = this.getResponseProperty('Number');
        this.expMonth = this.getResponseProperty('ExpMonth');
        this.expYear = this.getResponseProperty('ExpYear');
        this.code = this.getResponseProperty('Code');
    }
}


/***/ }),

/***/ 264:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FieldApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

class FieldApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.type = this.getResponseProperty('Type');
        this.name = this.getResponseProperty('Name');
        this.value = this.getResponseProperty('Value');
        this.linkedId = this.getResponseProperty('linkedId');
    }
}


/***/ }),

/***/ 265:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IdentityApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

class IdentityApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.title = this.getResponseProperty('Title');
        this.firstName = this.getResponseProperty('FirstName');
        this.middleName = this.getResponseProperty('MiddleName');
        this.lastName = this.getResponseProperty('LastName');
        this.address1 = this.getResponseProperty('Address1');
        this.address2 = this.getResponseProperty('Address2');
        this.address3 = this.getResponseProperty('Address3');
        this.city = this.getResponseProperty('City');
        this.state = this.getResponseProperty('State');
        this.postalCode = this.getResponseProperty('PostalCode');
        this.country = this.getResponseProperty('Country');
        this.company = this.getResponseProperty('Company');
        this.email = this.getResponseProperty('Email');
        this.phone = this.getResponseProperty('Phone');
        this.ssn = this.getResponseProperty('SSN');
        this.username = this.getResponseProperty('Username');
        this.passportNumber = this.getResponseProperty('PassportNumber');
        this.licenseNumber = this.getResponseProperty('LicenseNumber');
    }
}


/***/ }),

/***/ 266:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var _loginUriApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(267);


class LoginApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.username = this.getResponseProperty('Username');
        this.password = this.getResponseProperty('Password');
        this.passwordRevisionDate = this.getResponseProperty('PasswordRevisionDate');
        this.totp = this.getResponseProperty('Totp');
        this.autofillOnPageLoad = this.getResponseProperty('AutofillOnPageLoad');
        const uris = this.getResponseProperty('Uris');
        if (uris != null) {
            this.uris = uris.map((u) => new _loginUriApi__WEBPACK_IMPORTED_MODULE_1__[/* LoginUriApi */ "a"](u));
        }
    }
}


/***/ }),

/***/ 267:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginUriApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

class LoginUriApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        this.match = null;
        if (data == null) {
            return;
        }
        this.uri = this.getResponseProperty('Uri');
        const match = this.getResponseProperty('Match');
        this.match = match != null ? match : null;
    }
}


/***/ }),

/***/ 268:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNoteApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

class SecureNoteApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.type = this.getResponseProperty('Type');
    }
}


/***/ }),

/***/ 269:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AttachmentData; });
class AttachmentData {
    constructor(response) {
        if (response == null) {
            return;
        }
        this.id = response.id;
        this.url = response.url;
        this.fileName = response.fileName;
        this.key = response.key;
        this.size = response.size;
        this.sizeName = response.sizeName;
    }
}


/***/ }),

/***/ 270:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardData; });
class CardData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.cardholderName = data.cardholderName;
        this.brand = data.brand;
        this.number = data.number;
        this.expMonth = data.expMonth;
        this.expYear = data.expYear;
        this.code = data.code;
    }
}


/***/ }),

/***/ 271:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FieldData; });
class FieldData {
    constructor(response) {
        if (response == null) {
            return;
        }
        this.type = response.type;
        this.name = response.name;
        this.value = response.value;
        this.linkedId = response.linkedId;
    }
}


/***/ }),

/***/ 272:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IdentityData; });
class IdentityData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.title = data.title;
        this.firstName = data.firstName;
        this.middleName = data.middleName;
        this.lastName = data.lastName;
        this.address1 = data.address1;
        this.address2 = data.address2;
        this.address3 = data.address3;
        this.city = data.city;
        this.state = data.state;
        this.postalCode = data.postalCode;
        this.country = data.country;
        this.company = data.company;
        this.email = data.email;
        this.phone = data.phone;
        this.ssn = data.ssn;
        this.username = data.username;
        this.passportNumber = data.passportNumber;
        this.licenseNumber = data.licenseNumber;
    }
}


/***/ }),

/***/ 273:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginData; });
/* harmony import */ var _loginUriData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(274);

class LoginData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.username = data.username;
        this.password = data.password;
        this.passwordRevisionDate = data.passwordRevisionDate;
        this.totp = data.totp;
        this.autofillOnPageLoad = data.autofillOnPageLoad;
        if (data.uris) {
            this.uris = data.uris.map(u => new _loginUriData__WEBPACK_IMPORTED_MODULE_0__[/* LoginUriData */ "a"](u));
        }
    }
}


/***/ }),

/***/ 274:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginUriData; });
class LoginUriData {
    constructor(data) {
        this.match = null;
        if (data == null) {
            return;
        }
        this.uri = data.uri;
        this.match = data.match;
    }
}


/***/ }),

/***/ 275:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PasswordHistoryData; });
class PasswordHistoryData {
    constructor(response) {
        if (response == null) {
            return;
        }
        this.password = response.password;
        this.lastUsedDate = response.lastUsedDate;
    }
}


/***/ }),

/***/ 276:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNoteData; });
class SecureNoteData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.type = data.type;
    }
}


/***/ }),

/***/ 277:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Password; });
/* harmony import */ var _data_passwordHistoryData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(275);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(228);



class Password extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            password: null,
        }, alreadyEncrypted);
        this.lastUsedDate = new Date(obj.lastUsedDate);
    }
    decrypt(orgId, encKey) {
        return this.decryptObj(new _view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_2__[/* PasswordHistoryView */ "a"](this), {
            password: null,
        }, orgId, encKey);
    }
    toPasswordHistoryData() {
        const ph = new _data_passwordHistoryData__WEBPACK_IMPORTED_MODULE_0__[/* PasswordHistoryData */ "a"]();
        ph.lastUsedDate = this.lastUsedDate.toISOString();
        this.buildDataModel(this, ph, {
            password: null,
        });
        return ph;
    }
}


/***/ }),

/***/ 278:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendFile; });
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);
/* harmony import */ var _view_sendFileView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(138);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class SendFile extends _domainBase__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.size = obj.size;
        this.buildDomainModel(this, obj, {
            id: null,
            sizeName: null,
            fileName: null,
        }, alreadyEncrypted, ['id', 'sizeName']);
    }
    decrypt(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = yield this.decryptObj(new _view_sendFileView__WEBPACK_IMPORTED_MODULE_1__[/* SendFileView */ "a"](this), {
                fileName: null,
            }, null, key);
            return view;
        });
    }
}


/***/ }),

/***/ 279:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendText; });
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);
/* harmony import */ var _view_sendTextView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(139);


class SendText extends _domainBase__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.hidden = obj.hidden;
        this.buildDomainModel(this, obj, {
            text: null,
        }, alreadyEncrypted, []);
    }
    decrypt(key) {
        return this.decryptObj(new _view_sendTextView__WEBPACK_IMPORTED_MODULE_1__[/* SendTextView */ "a"](this), {
            text: null,
        }, null, key);
    }
}


/***/ }),

/***/ 28:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EncryptionType; });
var EncryptionType;
(function (EncryptionType) {
    EncryptionType[EncryptionType["AesCbc256_B64"] = 0] = "AesCbc256_B64";
    EncryptionType[EncryptionType["AesCbc128_HmacSha256_B64"] = 1] = "AesCbc128_HmacSha256_B64";
    EncryptionType[EncryptionType["AesCbc256_HmacSha256_B64"] = 2] = "AesCbc256_HmacSha256_B64";
    EncryptionType[EncryptionType["Rsa2048_OaepSha256_B64"] = 3] = "Rsa2048_OaepSha256_B64";
    EncryptionType[EncryptionType["Rsa2048_OaepSha1_B64"] = 4] = "Rsa2048_OaepSha1_B64";
    EncryptionType[EncryptionType["Rsa2048_OaepSha256_HmacSha256_B64"] = 5] = "Rsa2048_OaepSha256_HmacSha256_B64";
    EncryptionType[EncryptionType["Rsa2048_OaepSha1_HmacSha256_B64"] = 6] = "Rsa2048_OaepSha1_HmacSha256_B64";
})(EncryptionType || (EncryptionType = {}));


/***/ }),

/***/ 280:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ attachment_Attachment; });

// EXTERNAL MODULE: ./jslib/common/src/models/data/attachmentData.ts
var attachmentData = __webpack_require__(269);

// CONCATENATED MODULE: ./jslib/common/src/models/view/attachmentView.ts
class AttachmentView {
    constructor(a) {
        this.id = null;
        this.url = null;
        this.size = null;
        this.sizeName = null;
        this.fileName = null;
        this.key = null;
        if (!a) {
            return;
        }
        this.id = a.id;
        this.url = a.url;
        this.size = a.size;
        this.sizeName = a.sizeName;
    }
    get fileSize() {
        try {
            if (this.size != null) {
                return parseInt(this.size, null);
            }
        }
        catch (_a) {
            // Invalid file size.
        }
        return 0;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/domain/domainBase.ts
var domainBase = __webpack_require__(32);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/symmetricCryptoKey.ts
var symmetricCryptoKey = __webpack_require__(66);

// EXTERNAL MODULE: ./jslib/common/src/misc/utils.ts
var utils = __webpack_require__(6);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/attachment.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class attachment_Attachment extends domainBase["a" /* default */] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.size = obj.size;
        this.buildDomainModel(this, obj, {
            id: null,
            url: null,
            sizeName: null,
            fileName: null,
            key: null,
        }, alreadyEncrypted, ['id', 'url', 'sizeName']);
    }
    decrypt(orgId, encKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = yield this.decryptObj(new AttachmentView(this), {
                fileName: null,
            }, orgId, encKey);
            if (this.key != null) {
                let cryptoService;
                const containerService = utils["a" /* Utils */].global.bitwardenContainerService;
                if (containerService) {
                    cryptoService = containerService.getCryptoService();
                }
                else {
                    throw new Error('global bitwardenContainerService not initialized.');
                }
                try {
                    const orgKey = yield cryptoService.getOrgKey(orgId);
                    const decValue = yield cryptoService.decryptToBytes(this.key, orgKey !== null && orgKey !== void 0 ? orgKey : encKey);
                    view.key = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decValue);
                }
                catch (e) {
                    // TODO: error?
                }
            }
            return view;
        });
    }
    toAttachmentData() {
        const a = new attachmentData["a" /* AttachmentData */]();
        a.size = this.size;
        this.buildDataModel(this, a, {
            id: null,
            url: null,
            sizeName: null,
            fileName: null,
            key: null,
        }, ['id', 'url', 'sizeName']);
        return a;
    }
}


/***/ }),

/***/ 285:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Send; });
/* harmony import */ var _enums_sendType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var _view_sendView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(223);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32);
/* harmony import */ var _sendFile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(278);
/* harmony import */ var _sendText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(279);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class Send extends _domainBase__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            id: null,
            accessId: null,
            userId: null,
            name: null,
            notes: null,
            key: null,
        }, alreadyEncrypted, ['id', 'accessId', 'userId']);
        this.type = obj.type;
        this.maxAccessCount = obj.maxAccessCount;
        this.accessCount = obj.accessCount;
        this.password = obj.password;
        this.disabled = obj.disabled;
        this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;
        this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;
        this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;
        this.hideEmail = obj.hideEmail;
        switch (this.type) {
            case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].Text:
                this.text = new _sendText__WEBPACK_IMPORTED_MODULE_5__[/* SendText */ "a"](obj.text, alreadyEncrypted);
                break;
            case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].File:
                this.file = new _sendFile__WEBPACK_IMPORTED_MODULE_4__[/* SendFile */ "a"](obj.file, alreadyEncrypted);
                break;
            default:
                break;
        }
    }
    decrypt() {
        return __awaiter(this, void 0, void 0, function* () {
            const model = new _view_sendView__WEBPACK_IMPORTED_MODULE_2__[/* SendView */ "a"](this);
            let cryptoService;
            const containerService = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].global.bitwardenContainerService;
            if (containerService) {
                cryptoService = containerService.getCryptoService();
            }
            else {
                throw new Error('global bitwardenContainerService not initialized.');
            }
            try {
                model.key = yield cryptoService.decryptToBytes(this.key, null);
                model.cryptoKey = yield cryptoService.makeSendKey(model.key);
            }
            catch (e) {
                // TODO: error?
            }
            yield this.decryptObj(model, {
                name: null,
                notes: null,
            }, null, model.cryptoKey);
            switch (this.type) {
                case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].File:
                    model.file = yield this.file.decrypt(model.cryptoKey);
                    break;
                case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].Text:
                    model.text = yield this.text.decrypt(model.cryptoKey);
                    break;
                default:
                    break;
            }
            return model;
        });
    }
}


/***/ }),

/***/ 3:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PlatformUtilsService; });
class PlatformUtilsService {
}


/***/ }),

/***/ 32:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Domain; });
/* harmony import */ var _encString__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class Domain {
    buildDomainModel(domain, dataObj, map, alreadyEncrypted, notEncList = []) {
        for (const prop in map) {
            if (!map.hasOwnProperty(prop)) {
                continue;
            }
            const objProp = dataObj[(map[prop] || prop)];
            if (alreadyEncrypted === true || notEncList.indexOf(prop) > -1) {
                domain[prop] = objProp ? objProp : null;
            }
            else {
                domain[prop] = objProp ? new _encString__WEBPACK_IMPORTED_MODULE_0__[/* EncString */ "a"](objProp) : null;
            }
        }
    }
    buildDataModel(domain, dataObj, map, notEncStringList = []) {
        for (const prop in map) {
            if (!map.hasOwnProperty(prop)) {
                continue;
            }
            const objProp = domain[(map[prop] || prop)];
            if (notEncStringList.indexOf(prop) > -1) {
                dataObj[prop] = objProp != null ? objProp : null;
            }
            else {
                dataObj[prop] = objProp != null ? objProp.encryptedString : null;
            }
        }
    }
    decryptObj(viewModel, map, orgId, key = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            const self = this;
            for (const prop in map) {
                if (!map.hasOwnProperty(prop)) {
                    continue;
                }
                // tslint:disable-next-line
                (function (theProp) {
                    const p = Promise.resolve().then(() => {
                        const mapProp = map[theProp] || theProp;
                        if (self[mapProp]) {
                            return self[mapProp].decrypt(orgId, key);
                        }
                        return null;
                    }).then((val) => {
                        viewModel[theProp] = val;
                    });
                    promises.push(p);
                })(prop);
            }
            yield Promise.all(promises);
            return viewModel;
        });
    }
}


/***/ }),

/***/ 33:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UriMatchType; });
var UriMatchType;
(function (UriMatchType) {
    UriMatchType[UriMatchType["Domain"] = 0] = "Domain";
    UriMatchType[UriMatchType["Host"] = 1] = "Host";
    UriMatchType[UriMatchType["StartsWith"] = 2] = "StartsWith";
    UriMatchType[UriMatchType["Exact"] = 3] = "Exact";
    UriMatchType[UriMatchType["RegularExpression"] = 4] = "RegularExpression";
    UriMatchType[UriMatchType["Never"] = 5] = "Never";
})(UriMatchType || (UriMatchType = {}));


/***/ }),

/***/ 340:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 344:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherBulkDeleteRequest; });
class CipherBulkDeleteRequest {
    constructor(ids, organizationId) {
        this.ids = ids == null ? [] : ids;
        this.organizationId = organizationId;
    }
}


/***/ }),

/***/ 38:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DeviceType; });
var DeviceType;
(function (DeviceType) {
    DeviceType[DeviceType["Android"] = 0] = "Android";
    DeviceType[DeviceType["iOS"] = 1] = "iOS";
    DeviceType[DeviceType["ChromeExtension"] = 2] = "ChromeExtension";
    DeviceType[DeviceType["FirefoxExtension"] = 3] = "FirefoxExtension";
    DeviceType[DeviceType["OperaExtension"] = 4] = "OperaExtension";
    DeviceType[DeviceType["EdgeExtension"] = 5] = "EdgeExtension";
    DeviceType[DeviceType["WindowsDesktop"] = 6] = "WindowsDesktop";
    DeviceType[DeviceType["MacOsDesktop"] = 7] = "MacOsDesktop";
    DeviceType[DeviceType["LinuxDesktop"] = 8] = "LinuxDesktop";
    DeviceType[DeviceType["ChromeBrowser"] = 9] = "ChromeBrowser";
    DeviceType[DeviceType["FirefoxBrowser"] = 10] = "FirefoxBrowser";
    DeviceType[DeviceType["OperaBrowser"] = 11] = "OperaBrowser";
    DeviceType[DeviceType["EdgeBrowser"] = 12] = "EdgeBrowser";
    DeviceType[DeviceType["IEBrowser"] = 13] = "IEBrowser";
    DeviceType[DeviceType["UnknownBrowser"] = 14] = "UnknownBrowser";
    DeviceType[DeviceType["AndroidAmazon"] = 15] = "AndroidAmazon";
    DeviceType[DeviceType["UWP"] = 16] = "UWP";
    DeviceType[DeviceType["SafariBrowser"] = 17] = "SafariBrowser";
    DeviceType[DeviceType["VivaldiBrowser"] = 18] = "VivaldiBrowser";
    DeviceType[DeviceType["VivaldiExtension"] = 19] = "VivaldiExtension";
    DeviceType[DeviceType["SafariExtension"] = 20] = "SafariExtension";
})(DeviceType || (DeviceType = {}));


/***/ }),

/***/ 45:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendType; });
var SendType;
(function (SendType) {
    SendType[SendType["Text"] = 0] = "Text";
    SendType[SendType["File"] = 1] = "File";
})(SendType || (SendType = {}));


/***/ }),

/***/ 460:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherService; });
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var _enums_fieldType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52);
/* harmony import */ var _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(33);
/* harmony import */ var _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92);
/* harmony import */ var _models_domain_attachment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(280);
/* harmony import */ var _models_domain_card__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(188);
/* harmony import */ var _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(119);
/* harmony import */ var _models_domain_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(189);
/* harmony import */ var _models_domain_identity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(190);
/* harmony import */ var _models_domain_login__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(191);
/* harmony import */ var _models_domain_loginUri__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(192);
/* harmony import */ var _models_domain_password__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(277);
/* harmony import */ var _models_domain_secureNote__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(193);
/* harmony import */ var _models_request_cipherBulkDeleteRequest__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(344);
/* harmony import */ var _models_request_cipherBulkMoveRequest__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(461);
/* harmony import */ var _models_request_cipherBulkRestoreRequest__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(462);
/* harmony import */ var _models_request_cipherBulkShareRequest__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(474);
/* harmony import */ var _models_request_cipherCollectionsRequest__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(463);
/* harmony import */ var _models_request_cipherCreateRequest__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(464);
/* harmony import */ var _models_request_cipherRequest__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(141);
/* harmony import */ var _models_request_cipherShareRequest__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(465);
/* harmony import */ var _models_response_errorResponse__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(71);
/* harmony import */ var _models_view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(228);
/* harmony import */ var _models_domain_sortedCiphersCache__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(466);
/* harmony import */ var _constants_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(9);
/* harmony import */ var _misc_sequentialize__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(195);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(6);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



























const Keys = {
    ciphersPrefix: 'ciphers_',
    localData: 'sitesLocalData',
    neverDomains: 'neverDomains',
};
const DomainMatchBlacklist = new Map([
    ['google.com', new Set(['script.google.com'])],
]);
class CipherService {
    constructor(cryptoService, userService, settingsService, apiService, fileUploadService, storageService, i18nService, searchService, logService) {
        this.cryptoService = cryptoService;
        this.userService = userService;
        this.settingsService = settingsService;
        this.apiService = apiService;
        this.fileUploadService = fileUploadService;
        this.storageService = storageService;
        this.i18nService = i18nService;
        this.searchService = searchService;
        this.logService = logService;
        this.sortedCiphersCache = new _models_domain_sortedCiphersCache__WEBPACK_IMPORTED_MODULE_23__[/* SortedCiphersCache */ "a"](this.sortCiphersByLastUsed);
    }
    get decryptedCipherCache() {
        return this._decryptedCipherCache;
    }
    set decryptedCipherCache(value) {
        this._decryptedCipherCache = value;
        if (this.searchService != null) {
            if (value == null) {
                this.searchService().clearIndex();
            }
            else {
                this.searchService().indexCiphers();
            }
        }
    }
    clearCache() {
        this.decryptedCipherCache = null;
        this.sortedCiphersCache.clear();
    }
    encrypt(model, key, originalCipher = null) {
        return __awaiter(this, void 0, void 0, function* () {
            // Adjust password history
            if (model.id != null) {
                if (originalCipher == null) {
                    originalCipher = yield this.get(model.id);
                }
                if (originalCipher != null) {
                    const existingCipher = yield originalCipher.decrypt();
                    model.passwordHistory = existingCipher.passwordHistory || [];
                    if (model.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login && existingCipher.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login) {
                        if (existingCipher.login.password != null && existingCipher.login.password !== '' &&
                            existingCipher.login.password !== model.login.password) {
                            const ph = new _models_view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_22__[/* PasswordHistoryView */ "a"]();
                            ph.password = existingCipher.login.password;
                            ph.lastUsedDate = model.login.passwordRevisionDate = new Date();
                            model.passwordHistory.splice(0, 0, ph);
                        }
                        else {
                            model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;
                        }
                    }
                    if (existingCipher.hasFields) {
                        const existingHiddenFields = existingCipher.fields.filter(f => f.type === _enums_fieldType__WEBPACK_IMPORTED_MODULE_1__[/* FieldType */ "a"].Hidden &&
                            f.name != null && f.name !== '' && f.value != null && f.value !== '');
                        const hiddenFields = model.fields == null ? [] :
                            model.fields.filter(f => f.type === _enums_fieldType__WEBPACK_IMPORTED_MODULE_1__[/* FieldType */ "a"].Hidden && f.name != null && f.name !== '');
                        existingHiddenFields.forEach(ef => {
                            const matchedField = hiddenFields.find(f => f.name === ef.name);
                            if (matchedField == null || matchedField.value !== ef.value) {
                                const ph = new _models_view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_22__[/* PasswordHistoryView */ "a"]();
                                ph.password = ef.name + ': ' + ef.value;
                                ph.lastUsedDate = new Date();
                                model.passwordHistory.splice(0, 0, ph);
                            }
                        });
                    }
                }
                if (model.passwordHistory != null && model.passwordHistory.length === 0) {
                    model.passwordHistory = null;
                }
                else if (model.passwordHistory != null && model.passwordHistory.length > 5) {
                    // only save last 5 history
                    model.passwordHistory = model.passwordHistory.slice(0, 5);
                }
            }
            const cipher = new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"]();
            cipher.id = model.id;
            cipher.folderId = model.folderId;
            cipher.favorite = model.favorite;
            cipher.organizationId = model.organizationId;
            cipher.type = model.type;
            cipher.collectionIds = model.collectionIds;
            cipher.revisionDate = model.revisionDate;
            cipher.reprompt = model.reprompt;
            if (key == null && cipher.organizationId != null) {
                key = yield this.cryptoService.getOrgKey(cipher.organizationId);
                if (key == null) {
                    throw new Error('Cannot encrypt cipher for organization. No key.');
                }
            }
            yield Promise.all([
                this.encryptObjProperty(model, cipher, {
                    name: null,
                    notes: null,
                }, key),
                this.encryptCipherData(cipher, model, key),
                this.encryptFields(model.fields, key).then(fields => {
                    cipher.fields = fields;
                }),
                this.encryptPasswordHistories(model.passwordHistory, key).then(ph => {
                    cipher.passwordHistory = ph;
                }),
                this.encryptAttachments(model.attachments, key).then(attachments => {
                    cipher.attachments = attachments;
                }),
            ]);
            return cipher;
        });
    }
    encryptAttachments(attachmentsModel, key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (attachmentsModel == null || attachmentsModel.length === 0) {
                return null;
            }
            const promises = [];
            const encAttachments = [];
            attachmentsModel.forEach((model) => __awaiter(this, void 0, void 0, function* () {
                const attachment = new _models_domain_attachment__WEBPACK_IMPORTED_MODULE_4__[/* Attachment */ "a"]();
                attachment.id = model.id;
                attachment.size = model.size;
                attachment.sizeName = model.sizeName;
                attachment.url = model.url;
                const promise = this.encryptObjProperty(model, attachment, {
                    fileName: null,
                }, key).then(() => __awaiter(this, void 0, void 0, function* () {
                    if (model.key != null) {
                        attachment.key = yield this.cryptoService.encrypt(model.key.key, key);
                    }
                    encAttachments.push(attachment);
                }));
                promises.push(promise);
            }));
            yield Promise.all(promises);
            return encAttachments;
        });
    }
    encryptFields(fieldsModel, key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!fieldsModel || !fieldsModel.length) {
                return null;
            }
            const self = this;
            const encFields = [];
            yield fieldsModel.reduce((promise, field) => {
                return promise.then(() => {
                    return self.encryptField(field, key);
                }).then((encField) => {
                    encFields.push(encField);
                });
            }, Promise.resolve());
            return encFields;
        });
    }
    encryptField(fieldModel, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const field = new _models_domain_field__WEBPACK_IMPORTED_MODULE_7__[/* Field */ "a"]();
            field.type = fieldModel.type;
            field.linkedId = fieldModel.linkedId;
            // normalize boolean type field values
            if (fieldModel.type === _enums_fieldType__WEBPACK_IMPORTED_MODULE_1__[/* FieldType */ "a"].Boolean && fieldModel.value !== 'true') {
                fieldModel.value = 'false';
            }
            yield this.encryptObjProperty(fieldModel, field, {
                name: null,
                value: null,
            }, key);
            return field;
        });
    }
    encryptPasswordHistories(phModels, key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!phModels || !phModels.length) {
                return null;
            }
            const self = this;
            const encPhs = [];
            yield phModels.reduce((promise, ph) => {
                return promise.then(() => {
                    return self.encryptPasswordHistory(ph, key);
                }).then((encPh) => {
                    encPhs.push(encPh);
                });
            }, Promise.resolve());
            return encPhs;
        });
    }
    encryptPasswordHistory(phModel, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const ph = new _models_domain_password__WEBPACK_IMPORTED_MODULE_11__[/* Password */ "a"]();
            ph.lastUsedDate = phModel.lastUsedDate;
            yield this.encryptObjProperty(phModel, ph, {
                password: null,
            }, key);
            return ph;
        });
    }
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const localData = yield this.storageService.get(Keys.localData);
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null || !ciphers.hasOwnProperty(id)) {
                return null;
            }
            return new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"](ciphers[id], false, localData ? localData[id] : null);
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const localData = yield this.storageService.get(Keys.localData);
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            const response = [];
            for (const id in ciphers) {
                if (ciphers.hasOwnProperty(id)) {
                    response.push(new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"](ciphers[id], false, localData ? localData[id] : null));
                }
            }
            return response;
        });
    }
    getAllDecrypted() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.decryptedCipherCache != null) {
                const userId = yield this.userService.getUserId();
                if (this.searchService != null && ((_a = this.searchService().indexedEntityId) !== null && _a !== void 0 ? _a : userId) !== userId) {
                    yield this.searchService().indexCiphers(userId, this.decryptedCipherCache);
                }
                return this.decryptedCipherCache;
            }
            const decCiphers = [];
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                throw new Error('No key.');
            }
            const promises = [];
            const ciphers = yield this.getAll();
            ciphers.forEach(cipher => {
                promises.push(cipher.decrypt().then(c => decCiphers.push(c)));
            });
            yield Promise.all(promises);
            decCiphers.sort(this.getLocaleSortingFunction());
            this.decryptedCipherCache = decCiphers;
            return this.decryptedCipherCache;
        });
    }
    getAllDecryptedForGrouping(groupingId, folder = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const ciphers = yield this.getAllDecrypted();
            return ciphers.filter(cipher => {
                if (cipher.isDeleted) {
                    return false;
                }
                if (folder && cipher.folderId === groupingId) {
                    return true;
                }
                else if (!folder && cipher.collectionIds != null && cipher.collectionIds.indexOf(groupingId) > -1) {
                    return true;
                }
                return false;
            });
        });
    }
    getAllDecryptedForUrl(url, includeOtherTypes, defaultMatch = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (url == null && includeOtherTypes == null) {
                return Promise.resolve([]);
            }
            const domain = _misc_utils__WEBPACK_IMPORTED_MODULE_26__[/* Utils */ "a"].getDomain(url);
            const eqDomainsPromise = domain == null ? Promise.resolve([]) :
                this.settingsService.getEquivalentDomains().then((eqDomains) => {
                    let matches = [];
                    eqDomains.forEach(eqDomain => {
                        if (eqDomain.length && eqDomain.indexOf(domain) >= 0) {
                            matches = matches.concat(eqDomain);
                        }
                    });
                    if (!matches.length) {
                        matches.push(domain);
                    }
                    return matches;
                });
            const result = yield Promise.all([eqDomainsPromise, this.getAllDecrypted()]);
            const matchingDomains = result[0];
            const ciphers = result[1];
            if (defaultMatch == null) {
                defaultMatch = yield this.storageService.get(_constants_service__WEBPACK_IMPORTED_MODULE_24__[/* ConstantsService */ "a"].defaultUriMatch);
                if (defaultMatch == null) {
                    defaultMatch = _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Domain;
                }
            }
            return ciphers.filter(cipher => {
                if (cipher.deletedDate != null) {
                    return false;
                }
                if (includeOtherTypes != null && includeOtherTypes.indexOf(cipher.type) > -1) {
                    return true;
                }
                if (url != null && cipher.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login && cipher.login.uris != null) {
                    for (let i = 0; i < cipher.login.uris.length; i++) {
                        const u = cipher.login.uris[i];
                        if (u.uri == null) {
                            continue;
                        }
                        const match = u.match == null ? defaultMatch : u.match;
                        switch (match) {
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Domain:
                                if (domain != null && u.domain != null && matchingDomains.indexOf(u.domain) > -1) {
                                    if (DomainMatchBlacklist.has(u.domain)) {
                                        const domainUrlHost = _misc_utils__WEBPACK_IMPORTED_MODULE_26__[/* Utils */ "a"].getHost(url);
                                        if (!DomainMatchBlacklist.get(u.domain).has(domainUrlHost)) {
                                            return true;
                                        }
                                    }
                                    else {
                                        return true;
                                    }
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Host:
                                const urlHost = _misc_utils__WEBPACK_IMPORTED_MODULE_26__[/* Utils */ "a"].getHost(url);
                                if (urlHost != null && urlHost === _misc_utils__WEBPACK_IMPORTED_MODULE_26__[/* Utils */ "a"].getHost(u.uri)) {
                                    return true;
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Exact:
                                if (url === u.uri) {
                                    return true;
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].StartsWith:
                                if (url.startsWith(u.uri)) {
                                    return true;
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].RegularExpression:
                                try {
                                    const regex = new RegExp(u.uri, 'i');
                                    if (regex.test(url)) {
                                        return true;
                                    }
                                }
                                catch (e) {
                                    this.logService.error(e);
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Never:
                            default:
                                break;
                        }
                    }
                }
                return false;
            });
        });
    }
    getAllFromApiForOrganization(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const ciphers = yield this.apiService.getCiphersOrganization(organizationId);
            if (ciphers != null && ciphers.data != null && ciphers.data.length) {
                const decCiphers = [];
                const promises = [];
                ciphers.data.forEach(r => {
                    const data = new _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"](r);
                    const cipher = new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"](data);
                    promises.push(cipher.decrypt().then(c => decCiphers.push(c)));
                });
                yield Promise.all(promises);
                decCiphers.sort(this.getLocaleSortingFunction());
                return decCiphers;
            }
            else {
                return [];
            }
        });
    }
    getLastUsedForUrl(url, autofillOnPageLoad = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getCipherForUrl(url, true, false, autofillOnPageLoad);
        });
    }
    getLastLaunchedForUrl(url, autofillOnPageLoad = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getCipherForUrl(url, false, true, autofillOnPageLoad);
        });
    }
    getNextCipherForUrl(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getCipherForUrl(url, false, false, false);
        });
    }
    updateLastUsedIndexForUrl(url) {
        this.sortedCiphersCache.updateLastUsedIndex(url);
    }
    updateLastUsedDate(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let ciphersLocalData = yield this.storageService.get(Keys.localData);
            if (!ciphersLocalData) {
                ciphersLocalData = {};
            }
            if (ciphersLocalData[id]) {
                ciphersLocalData[id].lastUsedDate = new Date().getTime();
            }
            else {
                ciphersLocalData[id] = {
                    lastUsedDate: new Date().getTime(),
                };
            }
            yield this.storageService.save(Keys.localData, ciphersLocalData);
            if (this.decryptedCipherCache == null) {
                return;
            }
            for (let i = 0; i < this.decryptedCipherCache.length; i++) {
                const cached = this.decryptedCipherCache[i];
                if (cached.id === id) {
                    cached.localData = ciphersLocalData[id];
                    break;
                }
            }
        });
    }
    updateLastLaunchedDate(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let ciphersLocalData = yield this.storageService.get(Keys.localData);
            if (!ciphersLocalData) {
                ciphersLocalData = {};
            }
            if (ciphersLocalData[id]) {
                ciphersLocalData[id].lastLaunched = new Date().getTime();
            }
            else {
                ciphersLocalData[id] = {
                    lastUsedDate: new Date().getTime(),
                };
            }
            yield this.storageService.save(Keys.localData, ciphersLocalData);
            if (this.decryptedCipherCache == null) {
                return;
            }
            for (let i = 0; i < this.decryptedCipherCache.length; i++) {
                const cached = this.decryptedCipherCache[i];
                if (cached.id === id) {
                    cached.localData = ciphersLocalData[id];
                    break;
                }
            }
        });
    }
    saveNeverDomain(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            if (domain == null) {
                return;
            }
            let domains = yield this.storageService.get(Keys.neverDomains);
            if (!domains) {
                domains = {};
            }
            domains[domain] = null;
            yield this.storageService.save(Keys.neverDomains, domains);
        });
    }
    saveWithServer(cipher) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            if (cipher.id == null) {
                if (cipher.collectionIds != null) {
                    const request = new _models_request_cipherCreateRequest__WEBPACK_IMPORTED_MODULE_18__[/* CipherCreateRequest */ "a"](cipher);
                    response = yield this.apiService.postCipherCreate(request);
                }
                else {
                    const request = new _models_request_cipherRequest__WEBPACK_IMPORTED_MODULE_19__[/* CipherRequest */ "a"](cipher);
                    response = yield this.apiService.postCipher(request);
                }
                cipher.id = response.id;
            }
            else {
                const request = new _models_request_cipherRequest__WEBPACK_IMPORTED_MODULE_19__[/* CipherRequest */ "a"](cipher);
                response = yield this.apiService.putCipher(cipher.id, request);
            }
            const userId = yield this.userService.getUserId();
            const data = new _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"](response, userId, cipher.collectionIds);
            yield this.upsert(data);
        });
    }
    shareWithServer(cipher, organizationId, collectionIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const attachmentPromises = [];
            if (cipher.attachments != null) {
                cipher.attachments.forEach(attachment => {
                    if (attachment.key == null) {
                        attachmentPromises.push(this.shareAttachmentWithServer(attachment, cipher.id, organizationId));
                    }
                });
            }
            yield Promise.all(attachmentPromises);
            cipher.organizationId = organizationId;
            cipher.collectionIds = collectionIds;
            const encCipher = yield this.encrypt(cipher);
            const request = new _models_request_cipherShareRequest__WEBPACK_IMPORTED_MODULE_20__[/* CipherShareRequest */ "a"](encCipher);
            const response = yield this.apiService.putShareCipher(cipher.id, request);
            const userId = yield this.userService.getUserId();
            const data = new _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"](response, userId, collectionIds);
            yield this.upsert(data);
        });
    }
    shareManyWithServer(ciphers, organizationId, collectionIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            const encCiphers = [];
            for (const cipher of ciphers) {
                cipher.organizationId = organizationId;
                cipher.collectionIds = collectionIds;
                promises.push(this.encrypt(cipher).then(c => {
                    encCiphers.push(c);
                }));
            }
            yield Promise.all(promises);
            const request = new _models_request_cipherBulkShareRequest__WEBPACK_IMPORTED_MODULE_16__[/* CipherBulkShareRequest */ "a"](encCiphers, collectionIds);
            yield this.apiService.putShareCiphers(request);
            const userId = yield this.userService.getUserId();
            yield this.upsert(encCiphers.map(c => c.toCipherData(userId)));
        });
    }
    saveAttachmentWithServer(cipher, unencryptedFile, admin = false) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsArrayBuffer(unencryptedFile);
            reader.onload = (evt) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const cData = yield this.saveAttachmentRawWithServer(cipher, unencryptedFile.name, evt.target.result, admin);
                    resolve(cData);
                }
                catch (e) {
                    reject(e);
                }
            });
            reader.onerror = evt => {
                reject('Error reading file.');
            };
        });
    }
    saveAttachmentRawWithServer(cipher, filename, data, admin = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield this.cryptoService.getOrgKey(cipher.organizationId);
            const encFileName = yield this.cryptoService.encrypt(filename, key);
            const dataEncKey = yield this.cryptoService.makeEncKey(key);
            const encData = yield this.cryptoService.encryptToBytes(data, dataEncKey[0]);
            const request = {
                key: dataEncKey[1].encryptedString,
                fileName: encFileName.encryptedString,
                fileSize: encData.buffer.byteLength,
                adminRequest: admin,
            };
            let response;
            try {
                const uploadDataResponse = yield this.apiService.postCipherAttachment(cipher.id, request);
                response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;
                yield this.fileUploadService.uploadCipherAttachment(admin, uploadDataResponse, encFileName, encData);
            }
            catch (e) {
                if (e instanceof _models_response_errorResponse__WEBPACK_IMPORTED_MODULE_21__[/* ErrorResponse */ "a"] && e.statusCode === 404 || e.statusCode === 405) {
                    response = yield this.legacyServerAttachmentFileUpload(admin, cipher.id, encFileName, encData, dataEncKey[1]);
                }
                else if (e instanceof _models_response_errorResponse__WEBPACK_IMPORTED_MODULE_21__[/* ErrorResponse */ "a"]) {
                    throw new Error(e.getSingleMessage());
                }
                else {
                    throw e;
                }
            }
            const userId = yield this.userService.getUserId();
            const cData = new _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"](response, userId, cipher.collectionIds);
            if (!admin) {
                yield this.upsert(cData);
            }
            return new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"](cData);
        });
    }
    /**
     * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.
     * This method still exists for backward compatibility with old server versions.
     */
    legacyServerAttachmentFileUpload(admin, cipherId, encFileName, encData, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const fd = new FormData();
            try {
                const blob = new Blob([encData.buffer], { type: 'application/octet-stream' });
                fd.append('key', key.encryptedString);
                fd.append('data', blob, encFileName.encryptedString);
            }
            catch (e) {
                if (_misc_utils__WEBPACK_IMPORTED_MODULE_26__[/* Utils */ "a"].isNode && !_misc_utils__WEBPACK_IMPORTED_MODULE_26__[/* Utils */ "a"].isBrowser) {
                    fd.append('key', key.encryptedString);
                    fd.append('data', Buffer.from(encData.buffer), {
                        filepath: encFileName.encryptedString,
                        contentType: 'application/octet-stream',
                    });
                }
                else {
                    throw e;
                }
            }
            let response;
            try {
                if (admin) {
                    response = yield this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);
                }
                else {
                    response = yield this.apiService.postCipherAttachmentLegacy(cipherId, fd);
                }
            }
            catch (e) {
                throw new Error(e.getSingleMessage());
            }
            return response;
        });
    }
    saveCollectionsWithServer(cipher) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new _models_request_cipherCollectionsRequest__WEBPACK_IMPORTED_MODULE_17__[/* CipherCollectionsRequest */ "a"](cipher.collectionIds);
            yield this.apiService.putCipherCollections(cipher.id, request);
            const userId = yield this.userService.getUserId();
            const data = cipher.toCipherData(userId);
            yield this.upsert(data);
        });
    }
    upsert(cipher) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                ciphers = {};
            }
            if (cipher instanceof _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"]) {
                const c = cipher;
                ciphers[c.id] = c;
            }
            else {
                cipher.forEach(c => {
                    ciphers[c.id] = c;
                });
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    replace(ciphers) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    clear(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(Keys.ciphersPrefix + userId);
            this.clearCache();
        });
    }
    moveManyWithServer(ids, folderId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.putMoveCiphers(new _models_request_cipherBulkMoveRequest__WEBPACK_IMPORTED_MODULE_14__[/* CipherBulkMoveRequest */ "a"](ids, folderId));
            const userId = yield this.userService.getUserId();
            let ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                ciphers = {};
            }
            ids.forEach(id => {
                if (ciphers.hasOwnProperty(id)) {
                    ciphers[id].folderId = folderId;
                }
            });
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                return;
            }
            if (typeof id === 'string') {
                if (ciphers[id] == null) {
                    return;
                }
                delete ciphers[id];
            }
            else {
                id.forEach(i => {
                    delete ciphers[i];
                });
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    deleteWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.deleteCipher(id);
            yield this.delete(id);
        });
    }
    deleteManyWithServer(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.deleteManyCiphers(new _models_request_cipherBulkDeleteRequest__WEBPACK_IMPORTED_MODULE_13__[/* CipherBulkDeleteRequest */ "a"](ids));
            yield this.delete(ids);
        });
    }
    deleteAttachment(id, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {
                return;
            }
            for (let i = 0; i < ciphers[id].attachments.length; i++) {
                if (ciphers[id].attachments[i].id === attachmentId) {
                    ciphers[id].attachments.splice(i, 1);
                }
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    deleteAttachmentWithServer(id, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.apiService.deleteCipherAttachment(id, attachmentId);
            }
            catch (e) {
                return Promise.reject(e.getSingleMessage());
            }
            yield this.deleteAttachment(id, attachmentId);
        });
    }
    sortCiphersByLastUsed(a, b) {
        const aLastUsed = a.localData && a.localData.lastUsedDate ? a.localData.lastUsedDate : null;
        const bLastUsed = b.localData && b.localData.lastUsedDate ? b.localData.lastUsedDate : null;
        const bothNotNull = aLastUsed != null && bLastUsed != null;
        if (bothNotNull && aLastUsed < bLastUsed) {
            return 1;
        }
        if (aLastUsed != null && bLastUsed == null) {
            return -1;
        }
        if (bothNotNull && aLastUsed > bLastUsed) {
            return -1;
        }
        if (bLastUsed != null && aLastUsed == null) {
            return 1;
        }
        return 0;
    }
    sortCiphersByLastUsedThenName(a, b) {
        const result = this.sortCiphersByLastUsed(a, b);
        if (result !== 0) {
            return result;
        }
        return this.getLocaleSortingFunction()(a, b);
    }
    getLocaleSortingFunction() {
        return (a, b) => {
            let aName = a.name;
            let bName = b.name;
            if (aName == null && bName != null) {
                return -1;
            }
            if (aName != null && bName == null) {
                return 1;
            }
            if (aName == null && bName == null) {
                return 0;
            }
            const result = this.i18nService.collator ? this.i18nService.collator.compare(aName, bName) :
                aName.localeCompare(bName);
            if (result !== 0 || a.type !== _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login || b.type !== _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login) {
                return result;
            }
            if (a.login.username != null) {
                aName += a.login.username;
            }
            if (b.login.username != null) {
                bName += b.login.username;
            }
            return this.i18nService.collator ? this.i18nService.collator.compare(aName, bName) :
                aName.localeCompare(bName);
        };
    }
    softDelete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                return;
            }
            const setDeletedDate = (cipherId) => {
                if (ciphers[cipherId] == null) {
                    return;
                }
                ciphers[cipherId].deletedDate = new Date().toISOString();
            };
            if (typeof id === 'string') {
                setDeletedDate(id);
            }
            else {
                id.forEach(setDeletedDate);
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    softDeleteWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.putDeleteCipher(id);
            yield this.softDelete(id);
        });
    }
    softDeleteManyWithServer(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.putDeleteManyCiphers(new _models_request_cipherBulkDeleteRequest__WEBPACK_IMPORTED_MODULE_13__[/* CipherBulkDeleteRequest */ "a"](ids));
            yield this.softDelete(ids);
        });
    }
    restore(cipher) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                return;
            }
            const clearDeletedDate = (c) => {
                if (ciphers[c.id] == null) {
                    return;
                }
                ciphers[c.id].deletedDate = null;
                ciphers[c.id].revisionDate = c.revisionDate;
            };
            if (cipher.constructor.name === 'Array') {
                cipher.forEach(clearDeletedDate);
            }
            else {
                clearDeletedDate(cipher);
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    restoreWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.apiService.putRestoreCipher(id);
            yield this.restore({ id: id, revisionDate: response.revisionDate });
        });
    }
    restoreManyWithServer(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.apiService.putRestoreManyCiphers(new _models_request_cipherBulkRestoreRequest__WEBPACK_IMPORTED_MODULE_15__[/* CipherBulkRestoreRequest */ "a"](ids));
            const restores = [];
            for (const cipher of response.data) {
                restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });
            }
            yield this.restore(restores);
        });
    }
    // Helpers
    shareAttachmentWithServer(attachmentView, cipherId, organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const attachmentResponse = yield this.apiService.nativeFetch(new Request(attachmentView.url, { cache: 'no-store' }));
            if (attachmentResponse.status !== 200) {
                throw Error('Failed to download attachment: ' + attachmentResponse.status.toString());
            }
            const buf = yield attachmentResponse.arrayBuffer();
            const decBuf = yield this.cryptoService.decryptFromBytes(buf, null);
            const key = yield this.cryptoService.getOrgKey(organizationId);
            const encFileName = yield this.cryptoService.encrypt(attachmentView.fileName, key);
            const dataEncKey = yield this.cryptoService.makeEncKey(key);
            const encData = yield this.cryptoService.encryptToBytes(decBuf, dataEncKey[0]);
            const fd = new FormData();
            try {
                const blob = new Blob([encData.buffer], { type: 'application/octet-stream' });
                fd.append('key', dataEncKey[1].encryptedString);
                fd.append('data', blob, encFileName.encryptedString);
            }
            catch (e) {
                if (_misc_utils__WEBPACK_IMPORTED_MODULE_26__[/* Utils */ "a"].isNode && !_misc_utils__WEBPACK_IMPORTED_MODULE_26__[/* Utils */ "a"].isBrowser) {
                    fd.append('key', dataEncKey[1].encryptedString);
                    fd.append('data', Buffer.from(encData.buffer), {
                        filepath: encFileName.encryptedString,
                        contentType: 'application/octet-stream',
                    });
                }
                else {
                    throw e;
                }
            }
            try {
                yield this.apiService.postShareCipherAttachment(cipherId, attachmentView.id, fd, organizationId);
            }
            catch (e) {
                throw new Error(e.getSingleMessage());
            }
        });
    }
    encryptObjProperty(model, obj, map, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            const self = this;
            for (const prop in map) {
                if (!map.hasOwnProperty(prop)) {
                    continue;
                }
                // tslint:disable-next-line
                (function (theProp, theObj) {
                    const p = Promise.resolve().then(() => {
                        const modelProp = model[(map[theProp] || theProp)];
                        if (modelProp && modelProp !== '') {
                            return self.cryptoService.encrypt(modelProp, key);
                        }
                        return null;
                    }).then((val) => {
                        theObj[theProp] = val;
                    });
                    promises.push(p);
                })(prop, obj);
            }
            yield Promise.all(promises);
        });
    }
    encryptCipherData(cipher, model, key) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (cipher.type) {
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                    cipher.login = new _models_domain_login__WEBPACK_IMPORTED_MODULE_9__[/* Login */ "a"]();
                    cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;
                    cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;
                    yield this.encryptObjProperty(model.login, cipher.login, {
                        username: null,
                        password: null,
                        totp: null,
                    }, key);
                    if (model.login.uris != null) {
                        cipher.login.uris = [];
                        for (let i = 0; i < model.login.uris.length; i++) {
                            const loginUri = new _models_domain_loginUri__WEBPACK_IMPORTED_MODULE_10__[/* LoginUri */ "a"]();
                            loginUri.match = model.login.uris[i].match;
                            yield this.encryptObjProperty(model.login.uris[i], loginUri, {
                                uri: null,
                            }, key);
                            cipher.login.uris.push(loginUri);
                        }
                    }
                    return;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                    cipher.secureNote = new _models_domain_secureNote__WEBPACK_IMPORTED_MODULE_12__[/* SecureNote */ "a"]();
                    cipher.secureNote.type = model.secureNote.type;
                    return;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                    cipher.card = new _models_domain_card__WEBPACK_IMPORTED_MODULE_5__[/* Card */ "a"]();
                    yield this.encryptObjProperty(model.card, cipher.card, {
                        cardholderName: null,
                        brand: null,
                        number: null,
                        expMonth: null,
                        expYear: null,
                        code: null,
                    }, key);
                    return;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                    cipher.identity = new _models_domain_identity__WEBPACK_IMPORTED_MODULE_8__[/* Identity */ "a"]();
                    yield this.encryptObjProperty(model.identity, cipher.identity, {
                        title: null,
                        firstName: null,
                        middleName: null,
                        lastName: null,
                        address1: null,
                        address2: null,
                        address3: null,
                        city: null,
                        state: null,
                        postalCode: null,
                        country: null,
                        company: null,
                        email: null,
                        phone: null,
                        ssn: null,
                        username: null,
                        passportNumber: null,
                        licenseNumber: null,
                    }, key);
                    return;
                default:
                    throw new Error('Unknown cipher type.');
            }
        });
    }
    getCipherForUrl(url, lastUsed, lastLaunched, autofillOnPageLoad) {
        return __awaiter(this, void 0, void 0, function* () {
            const cacheKey = autofillOnPageLoad ? 'autofillOnPageLoad-' + url : url;
            if (!this.sortedCiphersCache.isCached(cacheKey)) {
                let ciphers = yield this.getAllDecryptedForUrl(url);
                if (!ciphers) {
                    return null;
                }
                if (autofillOnPageLoad) {
                    const autofillOnPageLoadDefault = yield this.storageService.get(_constants_service__WEBPACK_IMPORTED_MODULE_24__[/* ConstantsService */ "a"].autoFillOnPageLoadDefaultKey);
                    ciphers = ciphers.filter(cipher => cipher.login.autofillOnPageLoad ||
                        (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false));
                    if (ciphers.length === 0) {
                        return null;
                    }
                }
                this.sortedCiphersCache.addCiphers(cacheKey, ciphers);
            }
            if (lastLaunched) {
                return this.sortedCiphersCache.getLastLaunched(cacheKey);
            }
            else if (lastUsed) {
                return this.sortedCiphersCache.getLastUsed(cacheKey);
            }
            else {
                return this.sortedCiphersCache.getNext(cacheKey);
            }
        });
    }
}
__decorate([
    Object(_misc_sequentialize__WEBPACK_IMPORTED_MODULE_25__[/* sequentialize */ "a"])(() => 'getAllDecrypted'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CipherService.prototype, "getAllDecrypted", null);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(79).Buffer))

/***/ }),

/***/ 461:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherBulkMoveRequest; });
class CipherBulkMoveRequest {
    constructor(ids, folderId) {
        this.ids = ids == null ? [] : ids;
        this.folderId = folderId;
    }
}


/***/ }),

/***/ 462:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherBulkRestoreRequest; });
class CipherBulkRestoreRequest {
    constructor(ids) {
        this.ids = ids == null ? [] : ids;
    }
}


/***/ }),

/***/ 463:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherCollectionsRequest; });
class CipherCollectionsRequest {
    constructor(collectionIds) {
        this.collectionIds = collectionIds == null ? [] : collectionIds;
    }
}


/***/ }),

/***/ 464:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherCreateRequest; });
/* harmony import */ var _cipherRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(141);

class CipherCreateRequest {
    constructor(cipher) {
        this.cipher = new _cipherRequest__WEBPACK_IMPORTED_MODULE_0__[/* CipherRequest */ "a"](cipher);
        this.collectionIds = cipher.collectionIds;
    }
}


/***/ }),

/***/ 465:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherShareRequest; });
/* harmony import */ var _cipherRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(141);

class CipherShareRequest {
    constructor(cipher) {
        this.cipher = new _cipherRequest__WEBPACK_IMPORTED_MODULE_0__[/* CipherRequest */ "a"](cipher);
        this.collectionIds = cipher.collectionIds;
    }
}


/***/ }),

/***/ 466:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SortedCiphersCache; });
const CacheTTL = 3000;
class SortedCiphersCache {
    constructor(comparator) {
        this.comparator = comparator;
        this.sortedCiphersByUrl = new Map();
        this.timeouts = new Map();
    }
    isCached(url) {
        return this.sortedCiphersByUrl.has(url);
    }
    addCiphers(url, ciphers) {
        ciphers.sort(this.comparator);
        this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));
        this.resetTimer(url);
    }
    getLastUsed(url) {
        this.resetTimer(url);
        return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;
    }
    getLastLaunched(url) {
        return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;
    }
    getNext(url) {
        this.resetTimer(url);
        return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;
    }
    updateLastUsedIndex(url) {
        if (this.isCached(url)) {
            this.sortedCiphersByUrl.get(url).updateLastUsedIndex();
        }
    }
    clear() {
        this.sortedCiphersByUrl.clear();
        this.timeouts.clear();
    }
    resetTimer(url) {
        clearTimeout(this.timeouts.get(url));
        this.timeouts.set(url, setTimeout(() => {
            this.sortedCiphersByUrl.delete(url);
            this.timeouts.delete(url);
        }, CacheTTL));
    }
}
class Ciphers {
    constructor(ciphers) {
        this.ciphers = ciphers;
        this.lastUsedIndex = -1;
    }
    getLastUsed() {
        this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);
        return this.ciphers[this.lastUsedIndex];
    }
    getLastLaunched() {
        const usedCiphers = this.ciphers.filter(cipher => { var _a; return (_a = cipher.localData) === null || _a === void 0 ? void 0 : _a.lastLaunched; });
        const sortedCiphers = usedCiphers.sort((x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf());
        return sortedCiphers[0];
    }
    getNextIndex() {
        return (this.lastUsedIndex + 1) % this.ciphers.length;
    }
    getNext() {
        return this.ciphers[this.getNextIndex()];
    }
    updateLastUsedIndex() {
        this.lastUsedIndex = this.getNextIndex();
    }
}


/***/ }),

/***/ 467:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BitwardenFileUploadService; });
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class BitwardenFileUploadService {
    constructor(apiService) {
        this.apiService = apiService;
    }
    upload(encryptedFileName, encryptedFileData, apiCall) {
        return __awaiter(this, void 0, void 0, function* () {
            const fd = new FormData();
            try {
                const blob = new Blob([encryptedFileData.buffer], { type: 'application/octet-stream' });
                fd.append('data', blob, encryptedFileName);
            }
            catch (e) {
                if (_misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].isNode && !_misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].isBrowser) {
                    fd.append('data', Buffer.from(encryptedFileData.buffer), {
                        filepath: encryptedFileName,
                        contentType: 'application/octet-stream',
                    });
                }
                else {
                    throw e;
                }
            }
            yield apiCall(fd);
        });
    }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(79).Buffer))

/***/ }),

/***/ 470:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendService; });
/* harmony import */ var _models_data_sendData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(174);
/* harmony import */ var _models_request_sendRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(471);
/* harmony import */ var _models_response_errorResponse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(71);
/* harmony import */ var _models_domain_send__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(285);
/* harmony import */ var _models_domain_sendFile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(278);
/* harmony import */ var _models_domain_sendText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(279);
/* harmony import */ var _enums_sendType__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(45);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








const Keys = {
    sendsPrefix: 'sends_',
};
class SendService {
    constructor(cryptoService, userService, apiService, fileUploadService, storageService, i18nService, cryptoFunctionService) {
        this.cryptoService = cryptoService;
        this.userService = userService;
        this.apiService = apiService;
        this.fileUploadService = fileUploadService;
        this.storageService = storageService;
        this.i18nService = i18nService;
        this.cryptoFunctionService = cryptoFunctionService;
    }
    clearCache() {
        this.decryptedSendCache = null;
    }
    encrypt(model, file, password, key) {
        return __awaiter(this, void 0, void 0, function* () {
            let fileData = null;
            const send = new _models_domain_send__WEBPACK_IMPORTED_MODULE_3__[/* Send */ "a"]();
            send.id = model.id;
            send.type = model.type;
            send.disabled = model.disabled;
            send.hideEmail = model.hideEmail;
            send.maxAccessCount = model.maxAccessCount;
            if (model.key == null) {
                model.key = yield this.cryptoFunctionService.randomBytes(16);
                model.cryptoKey = yield this.cryptoService.makeSendKey(model.key);
            }
            if (password != null) {
                const passwordHash = yield this.cryptoFunctionService.pbkdf2(password, model.key, 'sha256', 100000);
                send.password = _misc_utils__WEBPACK_IMPORTED_MODULE_7__[/* Utils */ "a"].fromBufferToB64(passwordHash);
            }
            send.key = yield this.cryptoService.encrypt(model.key, key);
            send.name = yield this.cryptoService.encrypt(model.name, model.cryptoKey);
            send.notes = yield this.cryptoService.encrypt(model.notes, model.cryptoKey);
            if (send.type === _enums_sendType__WEBPACK_IMPORTED_MODULE_6__[/* SendType */ "a"].Text) {
                send.text = new _models_domain_sendText__WEBPACK_IMPORTED_MODULE_5__[/* SendText */ "a"]();
                send.text.text = yield this.cryptoService.encrypt(model.text.text, model.cryptoKey);
                send.text.hidden = model.text.hidden;
            }
            else if (send.type === _enums_sendType__WEBPACK_IMPORTED_MODULE_6__[/* SendType */ "a"].File) {
                send.file = new _models_domain_sendFile__WEBPACK_IMPORTED_MODULE_4__[/* SendFile */ "a"]();
                if (file != null) {
                    if (file instanceof ArrayBuffer) {
                        const [name, data] = yield this.encryptFileData(model.file.fileName, file, model.cryptoKey);
                        send.file.fileName = name;
                        fileData = data;
                    }
                    else {
                        fileData = yield this.parseFile(send, file, model.cryptoKey);
                    }
                }
            }
            return [send, fileData];
        });
    }
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const sends = yield this.storageService.get(Keys.sendsPrefix + userId);
            if (sends == null || !sends.hasOwnProperty(id)) {
                return null;
            }
            return new _models_domain_send__WEBPACK_IMPORTED_MODULE_3__[/* Send */ "a"](sends[id]);
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const sends = yield this.storageService.get(Keys.sendsPrefix + userId);
            const response = [];
            for (const id in sends) {
                if (sends.hasOwnProperty(id)) {
                    response.push(new _models_domain_send__WEBPACK_IMPORTED_MODULE_3__[/* Send */ "a"](sends[id]));
                }
            }
            return response;
        });
    }
    getAllDecrypted() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.decryptedSendCache != null) {
                return this.decryptedSendCache;
            }
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                throw new Error('No key.');
            }
            const decSends = [];
            const promises = [];
            const sends = yield this.getAll();
            sends.forEach(send => {
                promises.push(send.decrypt().then(f => decSends.push(f)));
            });
            yield Promise.all(promises);
            decSends.sort(_misc_utils__WEBPACK_IMPORTED_MODULE_7__[/* Utils */ "a"].getSortFunction(this.i18nService, 'name'));
            this.decryptedSendCache = decSends;
            return this.decryptedSendCache;
        });
    }
    saveWithServer(sendData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const request = new _models_request_sendRequest__WEBPACK_IMPORTED_MODULE_1__[/* SendRequest */ "a"](sendData[0], (_a = sendData[1]) === null || _a === void 0 ? void 0 : _a.buffer.byteLength);
            let response;
            if (sendData[0].id == null) {
                if (sendData[0].type === _enums_sendType__WEBPACK_IMPORTED_MODULE_6__[/* SendType */ "a"].Text) {
                    response = yield this.apiService.postSend(request);
                }
                else {
                    try {
                        const uploadDataResponse = yield this.apiService.postFileTypeSend(request);
                        response = uploadDataResponse.sendResponse;
                        yield this.fileUploadService.uploadSendFile(uploadDataResponse, sendData[0].file.fileName, sendData[1]);
                    }
                    catch (e) {
                        if (e instanceof _models_response_errorResponse__WEBPACK_IMPORTED_MODULE_2__[/* ErrorResponse */ "a"] && e.statusCode === 404) {
                            response = yield this.legacyServerSendFileUpload(sendData, request);
                        }
                        else if (e instanceof _models_response_errorResponse__WEBPACK_IMPORTED_MODULE_2__[/* ErrorResponse */ "a"]) {
                            throw new Error(e.getSingleMessage());
                        }
                        else {
                            throw e;
                        }
                    }
                }
                sendData[0].id = response.id;
                sendData[0].accessId = response.accessId;
            }
            else {
                response = yield this.apiService.putSend(sendData[0].id, request);
            }
            const userId = yield this.userService.getUserId();
            const data = new _models_data_sendData__WEBPACK_IMPORTED_MODULE_0__[/* SendData */ "a"](response, userId);
            yield this.upsert(data);
        });
    }
    /**
     * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.
     * This method still exists for backward compatibility with old server versions.
     */
    legacyServerSendFileUpload(sendData, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const fd = new FormData();
            try {
                const blob = new Blob([sendData[1].buffer], { type: 'application/octet-stream' });
                fd.append('model', JSON.stringify(request));
                fd.append('data', blob, sendData[0].file.fileName.encryptedString);
            }
            catch (e) {
                if (_misc_utils__WEBPACK_IMPORTED_MODULE_7__[/* Utils */ "a"].isNode && !_misc_utils__WEBPACK_IMPORTED_MODULE_7__[/* Utils */ "a"].isBrowser) {
                    fd.append('model', JSON.stringify(request));
                    fd.append('data', Buffer.from(sendData[1].buffer), {
                        filepath: sendData[0].file.fileName.encryptedString,
                        contentType: 'application/octet-stream',
                    });
                }
                else {
                    throw e;
                }
            }
            return yield this.apiService.postSendFileLegacy(fd);
        });
    }
    upsert(send) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let sends = yield this.storageService.get(Keys.sendsPrefix + userId);
            if (sends == null) {
                sends = {};
            }
            if (send instanceof _models_data_sendData__WEBPACK_IMPORTED_MODULE_0__[/* SendData */ "a"]) {
                const s = send;
                sends[s.id] = s;
            }
            else {
                send.forEach(s => {
                    sends[s.id] = s;
                });
            }
            yield this.storageService.save(Keys.sendsPrefix + userId, sends);
            this.decryptedSendCache = null;
        });
    }
    replace(sends) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(Keys.sendsPrefix + userId, sends);
            this.decryptedSendCache = null;
        });
    }
    clear(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(Keys.sendsPrefix + userId);
            this.decryptedSendCache = null;
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const sends = yield this.storageService.get(Keys.sendsPrefix + userId);
            if (sends == null) {
                return;
            }
            if (typeof id === 'string') {
                if (sends[id] == null) {
                    return;
                }
                delete sends[id];
            }
            else {
                id.forEach(i => {
                    delete sends[i];
                });
            }
            yield this.storageService.save(Keys.sendsPrefix + userId, sends);
            this.decryptedSendCache = null;
        });
    }
    deleteWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.deleteSend(id);
            yield this.delete(id);
        });
    }
    removePasswordWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.apiService.putSendRemovePassword(id);
            const userId = yield this.userService.getUserId();
            const data = new _models_data_sendData__WEBPACK_IMPORTED_MODULE_0__[/* SendData */ "a"](response, userId);
            yield this.upsert(data);
        });
    }
    parseFile(send, file, key) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsArrayBuffer(file);
            reader.onload = (evt) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const [name, data] = yield this.encryptFileData(file.name, evt.target.result, key);
                    send.file.fileName = name;
                    resolve(data);
                }
                catch (e) {
                    reject(e);
                }
            });
            reader.onerror = evt => {
                reject('Error reading file.');
            };
        });
    }
    encryptFileData(fileName, data, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const encFileName = yield this.cryptoService.encrypt(fileName, key);
            const encFileData = yield this.cryptoService.encryptToBytes(data, key);
            return [encFileName, encFileData];
        });
    }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(79).Buffer))

/***/ }),

/***/ 471:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendRequest; });
/* harmony import */ var _enums_sendType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45);
/* harmony import */ var _api_sendFileApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(186);
/* harmony import */ var _api_sendTextApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(187);



class SendRequest {
    constructor(send, fileLength) {
        this.type = send.type;
        this.fileLength = fileLength;
        this.name = send.name ? send.name.encryptedString : null;
        this.notes = send.notes ? send.notes.encryptedString : null;
        this.maxAccessCount = send.maxAccessCount;
        this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;
        this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;
        this.key = send.key != null ? send.key.encryptedString : null;
        this.password = send.password;
        this.disabled = send.disabled;
        this.hideEmail = send.hideEmail;
        switch (this.type) {
            case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].Text:
                this.text = new _api_sendTextApi__WEBPACK_IMPORTED_MODULE_2__[/* SendTextApi */ "a"]();
                this.text.text = send.text.text != null ? send.text.text.encryptedString : null;
                this.text.hidden = send.text.hidden;
                break;
            case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].File:
                this.file = new _api_sendFileApi__WEBPACK_IMPORTED_MODULE_1__[/* SendFileApi */ "a"]();
                this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;
                break;
            default:
                break;
        }
    }
}


/***/ }),

/***/ 474:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ cipherBulkShareRequest_CipherBulkShareRequest; });

// EXTERNAL MODULE: ./jslib/common/src/models/request/cipherRequest.ts + 1 modules
var cipherRequest = __webpack_require__(141);

// CONCATENATED MODULE: ./jslib/common/src/models/request/cipherWithIdRequest.ts

class cipherWithIdRequest_CipherWithIdRequest extends cipherRequest["a" /* CipherRequest */] {
    constructor(cipher) {
        super(cipher);
        this.id = cipher.id;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/request/cipherBulkShareRequest.ts

class cipherBulkShareRequest_CipherBulkShareRequest {
    constructor(ciphers, collectionIds) {
        if (ciphers != null) {
            this.ciphers = [];
            ciphers.forEach(c => {
                this.ciphers.push(new cipherWithIdRequest_CipherWithIdRequest(c));
            });
        }
        this.collectionIds = collectionIds;
    }
}


/***/ }),

/***/ 48:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherRepromptType; });
var CipherRepromptType;
(function (CipherRepromptType) {
    CipherRepromptType[CipherRepromptType["None"] = 0] = "None";
    CipherRepromptType[CipherRepromptType["Password"] = 1] = "Password";
})(CipherRepromptType || (CipherRepromptType = {}));


/***/ }),

/***/ 49:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EventType; });
var EventType;
(function (EventType) {
    EventType[EventType["User_LoggedIn"] = 1000] = "User_LoggedIn";
    EventType[EventType["User_ChangedPassword"] = 1001] = "User_ChangedPassword";
    EventType[EventType["User_Updated2fa"] = 1002] = "User_Updated2fa";
    EventType[EventType["User_Disabled2fa"] = 1003] = "User_Disabled2fa";
    EventType[EventType["User_Recovered2fa"] = 1004] = "User_Recovered2fa";
    EventType[EventType["User_FailedLogIn"] = 1005] = "User_FailedLogIn";
    EventType[EventType["User_FailedLogIn2fa"] = 1006] = "User_FailedLogIn2fa";
    EventType[EventType["User_ClientExportedVault"] = 1007] = "User_ClientExportedVault";
    EventType[EventType["User_UpdatedTempPassword"] = 1008] = "User_UpdatedTempPassword";
    EventType[EventType["User_MigratedKeyToKeyConnector"] = 1009] = "User_MigratedKeyToKeyConnector";
    EventType[EventType["Cipher_Created"] = 1100] = "Cipher_Created";
    EventType[EventType["Cipher_Updated"] = 1101] = "Cipher_Updated";
    EventType[EventType["Cipher_Deleted"] = 1102] = "Cipher_Deleted";
    EventType[EventType["Cipher_AttachmentCreated"] = 1103] = "Cipher_AttachmentCreated";
    EventType[EventType["Cipher_AttachmentDeleted"] = 1104] = "Cipher_AttachmentDeleted";
    EventType[EventType["Cipher_Shared"] = 1105] = "Cipher_Shared";
    EventType[EventType["Cipher_UpdatedCollections"] = 1106] = "Cipher_UpdatedCollections";
    EventType[EventType["Cipher_ClientViewed"] = 1107] = "Cipher_ClientViewed";
    EventType[EventType["Cipher_ClientToggledPasswordVisible"] = 1108] = "Cipher_ClientToggledPasswordVisible";
    EventType[EventType["Cipher_ClientToggledHiddenFieldVisible"] = 1109] = "Cipher_ClientToggledHiddenFieldVisible";
    EventType[EventType["Cipher_ClientToggledCardCodeVisible"] = 1110] = "Cipher_ClientToggledCardCodeVisible";
    EventType[EventType["Cipher_ClientCopiedPassword"] = 1111] = "Cipher_ClientCopiedPassword";
    EventType[EventType["Cipher_ClientCopiedHiddenField"] = 1112] = "Cipher_ClientCopiedHiddenField";
    EventType[EventType["Cipher_ClientCopiedCardCode"] = 1113] = "Cipher_ClientCopiedCardCode";
    EventType[EventType["Cipher_ClientAutofilled"] = 1114] = "Cipher_ClientAutofilled";
    EventType[EventType["Cipher_SoftDeleted"] = 1115] = "Cipher_SoftDeleted";
    EventType[EventType["Cipher_Restored"] = 1116] = "Cipher_Restored";
    EventType[EventType["Cipher_ClientToggledCardNumberVisible"] = 1117] = "Cipher_ClientToggledCardNumberVisible";
    EventType[EventType["Collection_Created"] = 1300] = "Collection_Created";
    EventType[EventType["Collection_Updated"] = 1301] = "Collection_Updated";
    EventType[EventType["Collection_Deleted"] = 1302] = "Collection_Deleted";
    EventType[EventType["Group_Created"] = 1400] = "Group_Created";
    EventType[EventType["Group_Updated"] = 1401] = "Group_Updated";
    EventType[EventType["Group_Deleted"] = 1402] = "Group_Deleted";
    EventType[EventType["OrganizationUser_Invited"] = 1500] = "OrganizationUser_Invited";
    EventType[EventType["OrganizationUser_Confirmed"] = 1501] = "OrganizationUser_Confirmed";
    EventType[EventType["OrganizationUser_Updated"] = 1502] = "OrganizationUser_Updated";
    EventType[EventType["OrganizationUser_Removed"] = 1503] = "OrganizationUser_Removed";
    EventType[EventType["OrganizationUser_UpdatedGroups"] = 1504] = "OrganizationUser_UpdatedGroups";
    EventType[EventType["OrganizationUser_UnlinkedSso"] = 1505] = "OrganizationUser_UnlinkedSso";
    EventType[EventType["OrganizationUser_ResetPassword_Enroll"] = 1506] = "OrganizationUser_ResetPassword_Enroll";
    EventType[EventType["OrganizationUser_ResetPassword_Withdraw"] = 1507] = "OrganizationUser_ResetPassword_Withdraw";
    EventType[EventType["OrganizationUser_AdminResetPassword"] = 1508] = "OrganizationUser_AdminResetPassword";
    EventType[EventType["OrganizationUser_ResetSsoLink"] = 1509] = "OrganizationUser_ResetSsoLink";
    EventType[EventType["OrganizationUser_FirstSsoLogin"] = 1510] = "OrganizationUser_FirstSsoLogin";
    EventType[EventType["Organization_Updated"] = 1600] = "Organization_Updated";
    EventType[EventType["Organization_PurgedVault"] = 1601] = "Organization_PurgedVault";
    // Organization_ClientExportedVault = 1602,
    EventType[EventType["Organization_VaultAccessed"] = 1603] = "Organization_VaultAccessed";
    EventType[EventType["Organization_EnabledSso"] = 1604] = "Organization_EnabledSso";
    EventType[EventType["Organization_DisabledSso"] = 1605] = "Organization_DisabledSso";
    EventType[EventType["Organization_EnabledKeyConnector"] = 1606] = "Organization_EnabledKeyConnector";
    EventType[EventType["Organization_DisabledKeyConnector"] = 1607] = "Organization_DisabledKeyConnector";
    EventType[EventType["Policy_Updated"] = 1700] = "Policy_Updated";
    EventType[EventType["ProviderUser_Invited"] = 1800] = "ProviderUser_Invited";
    EventType[EventType["ProviderUser_Confirmed"] = 1801] = "ProviderUser_Confirmed";
    EventType[EventType["ProviderUser_Updated"] = 1802] = "ProviderUser_Updated";
    EventType[EventType["ProviderUser_Removed"] = 1803] = "ProviderUser_Removed";
    EventType[EventType["ProviderOrganization_Created"] = 1900] = "ProviderOrganization_Created";
    EventType[EventType["ProviderOrganization_Added"] = 1901] = "ProviderOrganization_Added";
    EventType[EventType["ProviderOrganization_Removed"] = 1902] = "ProviderOrganization_Removed";
    EventType[EventType["ProviderOrganization_VaultAccessed"] = 1903] = "ProviderOrganization_VaultAccessed";
})(EventType || (EventType = {}));


/***/ }),

/***/ 52:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FieldType; });
var FieldType;
(function (FieldType) {
    FieldType[FieldType["Text"] = 0] = "Text";
    FieldType[FieldType["Hidden"] = 1] = "Hidden";
    FieldType[FieldType["Boolean"] = 2] = "Boolean";
    FieldType[FieldType["Linked"] = 3] = "Linked";
})(FieldType || (FieldType = {}));


/***/ }),

/***/ 56:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PolicyType; });
var PolicyType;
(function (PolicyType) {
    PolicyType[PolicyType["TwoFactorAuthentication"] = 0] = "TwoFactorAuthentication";
    PolicyType[PolicyType["MasterPassword"] = 1] = "MasterPassword";
    PolicyType[PolicyType["PasswordGenerator"] = 2] = "PasswordGenerator";
    PolicyType[PolicyType["SingleOrg"] = 3] = "SingleOrg";
    PolicyType[PolicyType["RequireSso"] = 4] = "RequireSso";
    PolicyType[PolicyType["PersonalOwnership"] = 5] = "PersonalOwnership";
    PolicyType[PolicyType["DisableSend"] = 6] = "DisableSend";
    PolicyType[PolicyType["SendOptions"] = 7] = "SendOptions";
    PolicyType[PolicyType["ResetPassword"] = 8] = "ResetPassword";
    PolicyType[PolicyType["MaximumVaultTimeout"] = 9] = "MaximumVaultTimeout";
    PolicyType[PolicyType["DisablePersonalVaultExport"] = 10] = "DisablePersonalVaultExport";
})(PolicyType || (PolicyType = {}));


/***/ }),

/***/ 6:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global, Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Utils; });
/* harmony import */ var tldjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60);
/* harmony import */ var tldjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tldjs__WEBPACK_IMPORTED_MODULE_0__);

// tslint:disable-next-line
const nodeURL = typeof window === 'undefined' ? __webpack_require__(216) : null;
class Utils {
    static init() {
        if (Utils.inited) {
            return;
        }
        Utils.inited = true;
        Utils.isNode = typeof process !== 'undefined' && process.release != null &&
            process.release.name === 'node';
        Utils.isBrowser = typeof window !== 'undefined';
        Utils.isNativeScript = !Utils.isNode && !Utils.isBrowser;
        Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);
        Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);
        Utils.global = Utils.isNativeScript ? global : (Utils.isNode && !Utils.isBrowser ? global : window);
    }
    static fromB64ToArray(str) {
        if (Utils.isNode || Utils.isNativeScript) {
            return new Uint8Array(Buffer.from(str, 'base64'));
        }
        else {
            const binaryString = window.atob(str);
            const bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes;
        }
    }
    static fromUrlB64ToArray(str) {
        return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));
    }
    static fromHexToArray(str) {
        if (Utils.isNode || Utils.isNativeScript) {
            return new Uint8Array(Buffer.from(str, 'hex'));
        }
        else {
            const bytes = new Uint8Array(str.length / 2);
            for (let i = 0; i < str.length; i += 2) {
                bytes[i / 2] = parseInt(str.substr(i, 2), 16);
            }
            return bytes;
        }
    }
    static fromUtf8ToArray(str) {
        if (Utils.isNode || Utils.isNativeScript) {
            return new Uint8Array(Buffer.from(str, 'utf8'));
        }
        else {
            const strUtf8 = unescape(encodeURIComponent(str));
            const arr = new Uint8Array(strUtf8.length);
            for (let i = 0; i < strUtf8.length; i++) {
                arr[i] = strUtf8.charCodeAt(i);
            }
            return arr;
        }
    }
    static fromByteStringToArray(str) {
        const arr = new Uint8Array(str.length);
        for (let i = 0; i < str.length; i++) {
            arr[i] = str.charCodeAt(i);
        }
        return arr;
    }
    static fromBufferToB64(buffer) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(buffer).toString('base64');
        }
        else {
            let binary = '';
            const bytes = new Uint8Array(buffer);
            for (let i = 0; i < bytes.byteLength; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }
    }
    static fromBufferToUrlB64(buffer) {
        return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));
    }
    static fromB64toUrlB64(b64Str) {
        return b64Str.replace(/\+/g, '-')
            .replace(/\//g, '_')
            .replace(/=/g, '');
    }
    static fromBufferToUtf8(buffer) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(buffer).toString('utf8');
        }
        else {
            const bytes = new Uint8Array(buffer);
            const encodedString = String.fromCharCode.apply(null, bytes);
            return decodeURIComponent(escape(encodedString));
        }
    }
    static fromBufferToByteString(buffer) {
        return String.fromCharCode.apply(null, new Uint8Array(buffer));
    }
    // ref: https://stackoverflow.com/a/40031979/1090359
    static fromBufferToHex(buffer) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(buffer).toString('hex');
        }
        else {
            const bytes = new Uint8Array(buffer);
            return Array.prototype.map.call(bytes, (x) => ('00' + x.toString(16)).slice(-2)).join('');
        }
    }
    static fromUrlB64ToB64(urlB64Str) {
        let output = urlB64Str.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0:
                break;
            case 2:
                output += '==';
                break;
            case 3:
                output += '=';
                break;
            default:
                throw new Error('Illegal base64url string!');
        }
        return output;
    }
    static fromUrlB64ToUtf8(urlB64Str) {
        return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));
    }
    static fromUtf8ToB64(utfStr) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(utfStr, 'utf8').toString('base64');
        }
        else {
            return decodeURIComponent(escape(window.btoa(utfStr)));
        }
    }
    static fromUtf8ToUrlB64(utfStr) {
        return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));
    }
    static fromB64ToUtf8(b64Str) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(b64Str, 'base64').toString('utf8');
        }
        else {
            return decodeURIComponent(escape(window.atob(b64Str)));
        }
    }
    // ref: http://stackoverflow.com/a/2117523/1090359
    static newGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
            // tslint:disable-next-line
            const r = Math.random() * 16 | 0;
            // tslint:disable-next-line
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    static isGuid(id) {
        return RegExp(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/, 'i').test(id);
    }
    static getHostname(uriString) {
        const url = Utils.getUrl(uriString);
        try {
            return url != null && url.hostname !== '' ? url.hostname : null;
        }
        catch (_a) {
            return null;
        }
    }
    static getHost(uriString) {
        const url = Utils.getUrl(uriString);
        try {
            return url != null && url.host !== '' ? url.host : null;
        }
        catch (_a) {
            return null;
        }
    }
    static getDomain(uriString) {
        if (uriString == null) {
            return null;
        }
        uriString = uriString.trim();
        if (uriString === '') {
            return null;
        }
        if (uriString.startsWith('data:')) {
            return null;
        }
        let httpUrl = uriString.startsWith('http://') || uriString.startsWith('https://');
        if (!httpUrl && uriString.indexOf('://') < 0 && Utils.tldEndingRegex.test(uriString) &&
            uriString.indexOf('@') < 0) {
            uriString = 'http://' + uriString;
            httpUrl = true;
        }
        if (httpUrl) {
            try {
                const url = Utils.getUrlObject(uriString);
                const validHostname = (tldjs__WEBPACK_IMPORTED_MODULE_0__ === null || tldjs__WEBPACK_IMPORTED_MODULE_0__ === void 0 ? void 0 : tldjs__WEBPACK_IMPORTED_MODULE_0__["isValid"]) != null ? tldjs__WEBPACK_IMPORTED_MODULE_0__["isValid"](url.hostname) : true;
                if (!validHostname) {
                    return null;
                }
                if (url.hostname === 'localhost' || Utils.validIpAddress(url.hostname)) {
                    return url.hostname;
                }
                const urlDomain = tldjs__WEBPACK_IMPORTED_MODULE_0__ != null && tldjs__WEBPACK_IMPORTED_MODULE_0__["getDomain"] != null ? tldjs__WEBPACK_IMPORTED_MODULE_0__["getDomain"](url.hostname) : null;
                return urlDomain != null ? urlDomain : url.hostname;
            }
            catch (e) {
                // Invalid domain, try another approach below.
            }
        }
        try {
            const domain = tldjs__WEBPACK_IMPORTED_MODULE_0__ != null && tldjs__WEBPACK_IMPORTED_MODULE_0__["getDomain"] != null ? tldjs__WEBPACK_IMPORTED_MODULE_0__["getDomain"](uriString) : null;
            if (domain != null) {
                return domain;
            }
        }
        catch (_a) {
            return null;
        }
        return null;
    }
    static getQueryParams(uriString) {
        const url = Utils.getUrl(uriString);
        if (url == null || url.search == null || url.search === '') {
            return null;
        }
        const map = new Map();
        const pairs = (url.search[0] === '?' ? url.search.substr(1) : url.search).split('&');
        pairs.forEach(pair => {
            const parts = pair.split('=');
            if (parts.length < 1) {
                return;
            }
            map.set(decodeURIComponent(parts[0]).toLowerCase(), parts[1] == null ? '' : decodeURIComponent(parts[1]));
        });
        return map;
    }
    static getSortFunction(i18nService, prop) {
        return (a, b) => {
            if (a[prop] == null && b[prop] != null) {
                return -1;
            }
            if (a[prop] != null && b[prop] == null) {
                return 1;
            }
            if (a[prop] == null && b[prop] == null) {
                return 0;
            }
            return i18nService.collator ? i18nService.collator.compare(a[prop], b[prop]) :
                a[prop].localeCompare(b[prop]);
        };
    }
    static isNullOrWhitespace(str) {
        return str == null || typeof str !== 'string' || str.trim() === '';
    }
    static nameOf(name) {
        return name;
    }
    static assign(target, source) {
        return Object.assign(target, source);
    }
    static iterateEnum(obj) {
        return Object.keys(obj).filter(k => Number.isNaN(+k)).map(k => obj[k]);
    }
    static getUrl(uriString) {
        if (uriString == null) {
            return null;
        }
        uriString = uriString.trim();
        if (uriString === '') {
            return null;
        }
        let url = Utils.getUrlObject(uriString);
        if (url == null) {
            const hasHttpProtocol = uriString.indexOf('http://') === 0 || uriString.indexOf('https://') === 0;
            if (!hasHttpProtocol && uriString.indexOf('.') > -1) {
                url = Utils.getUrlObject('http://' + uriString);
            }
        }
        return url;
    }
    static camelToPascalCase(s) {
        return s.charAt(0).toUpperCase() + s.slice(1);
    }
    static validIpAddress(ipString) {
        // tslint:disable-next-line
        const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        return ipRegex.test(ipString);
    }
    static isMobile(win) {
        let mobile = false;
        (a => {
            // tslint:disable-next-line
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
                mobile = true;
            }
        })(win.navigator.userAgent || win.navigator.vendor || win.opera);
        return mobile || win.navigator.userAgent.match(/iPad/i) != null;
    }
    static isAppleMobile(win) {
        return win.navigator.userAgent.match(/iPhone/i) != null || win.navigator.userAgent.match(/iPad/i) != null;
    }
    static getUrlObject(uriString) {
        try {
            if (nodeURL != null) {
                return nodeURL.URL ? new nodeURL.URL(uriString) : nodeURL.parse(uriString);
            }
            else if (typeof URL === 'function') {
                return new URL(uriString);
            }
            else if (window != null) {
                const hasProtocol = uriString.indexOf('://') > -1;
                if (!hasProtocol && uriString.indexOf('.') > -1) {
                    uriString = 'http://' + uriString;
                }
                else if (!hasProtocol) {
                    return null;
                }
                const anchor = window.document.createElement('a');
                anchor.href = uriString;
                return anchor;
            }
        }
        catch (e) {
            // Ignore error
        }
        return null;
    }
}
Utils.inited = false;
Utils.isNativeScript = false;
Utils.isNode = false;
Utils.isBrowser = true;
Utils.isMobileBrowser = false;
Utils.isAppleMobileBrowser = false;
Utils.global = null;
Utils.tldEndingRegex = /.*\.(com|net|org|edu|uk|gov|ca|de|jp|fr|au|ru|ch|io|es|us|co|xyz|info|ly|mil)$/;
// Transpiled version of /\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.
Utils.regexpEmojiPresentation = /(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])/g;
Utils.init();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(98), __webpack_require__(67), __webpack_require__(79).Buffer))

/***/ }),

/***/ 66:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SymmetricCryptoKey; });
/* harmony import */ var _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);


class SymmetricCryptoKey {
    constructor(key, encType) {
        if (key == null) {
            throw new Error('Must provide key');
        }
        if (encType == null) {
            if (key.byteLength === 32) {
                encType = _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_B64;
            }
            else if (key.byteLength === 64) {
                encType = _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_HmacSha256_B64;
            }
            else {
                throw new Error('Unable to determine encType.');
            }
        }
        this.key = key;
        this.encType = encType;
        if (encType === _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_B64 && key.byteLength === 32) {
            this.encKey = key;
            this.macKey = null;
        }
        else if (encType === _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc128_HmacSha256_B64 && key.byteLength === 32) {
            this.encKey = key.slice(0, 16);
            this.macKey = key.slice(16, 32);
        }
        else if (encType === _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_HmacSha256_B64 && key.byteLength === 64) {
            this.encKey = key.slice(0, 32);
            this.macKey = key.slice(32, 64);
        }
        else {
            throw new Error('Unsupported encType/key length.');
        }
        if (this.key != null) {
            this.keyB64 = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].fromBufferToB64(this.key);
        }
        if (this.encKey != null) {
            this.encKeyB64 = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].fromBufferToB64(this.encKey);
        }
        if (this.macKey != null) {
            this.macKeyB64 = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].fromBufferToB64(this.macKey);
        }
    }
}


/***/ }),

/***/ 71:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ErrorResponse; });
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _baseResponse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);


class ErrorResponse extends _baseResponse__WEBPACK_IMPORTED_MODULE_1__[/* BaseResponse */ "a"] {
    constructor(response, status, identityResponse) {
        var _a, _b;
        super(response);
        let errorModel = null;
        if (response != null) {
            const responseErrorModel = this.getResponseProperty('ErrorModel');
            if (responseErrorModel && identityResponse) {
                errorModel = responseErrorModel;
            }
            else {
                errorModel = response;
            }
        }
        if (errorModel) {
            this.message = this.getResponseProperty('Message', errorModel);
            this.validationErrors = this.getResponseProperty('ValidationErrors', errorModel);
            this.captchaSiteKey = (_b = (_a = this.validationErrors) === null || _a === void 0 ? void 0 : _a.HCaptcha_SiteKey) === null || _b === void 0 ? void 0 : _b[0];
            this.captchaRequired = !_misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].isNullOrWhitespace(this.captchaSiteKey);
        }
        else {
            if (status === 429) {
                this.message = 'Rate limit exceeded. Try again later.';
            }
        }
        this.statusCode = status;
    }
    getSingleMessage() {
        if (this.validationErrors == null) {
            return this.message;
        }
        for (const key in this.validationErrors) {
            if (!this.validationErrors.hasOwnProperty(key)) {
                continue;
            }
            if (this.validationErrors[key].length) {
                return this.validationErrors[key][0];
            }
        }
        return this.message;
    }
    getAllMessages() {
        const messages = [];
        if (this.validationErrors == null) {
            return messages;
        }
        for (const key in this.validationErrors) {
            if (!this.validationErrors.hasOwnProperty(key)) {
                continue;
            }
            this.validationErrors[key].forEach((item) => {
                let prefix = '';
                if (key.indexOf('[') > -1 && key.indexOf(']') > -1) {
                    const lastSep = key.lastIndexOf('.');
                    prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + ': ';
                }
                messages.push(prefix + item);
            });
        }
        return messages;
    }
}


/***/ }),

/***/ 729:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 731:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 76:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ItemView; });
class ItemView {
}


/***/ }),

/***/ 761:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./jslib/common/src/enums/cipherRepromptType.ts
var cipherRepromptType = __webpack_require__(48);

// EXTERNAL MODULE: ./jslib/common/src/enums/cipherType.ts
var cipherType = __webpack_require__(10);

// EXTERNAL MODULE: ./jslib/common/src/enums/deviceType.ts
var deviceType = __webpack_require__(38);

// EXTERNAL MODULE: ./jslib/common/src/misc/utils.ts
var utils = __webpack_require__(6);

// EXTERNAL MODULE: ./jslib/common/src/models/response/baseResponse.ts
var baseResponse = __webpack_require__(8);

// CONCATENATED MODULE: ./jslib/common/src/models/response/apiKeyResponse.ts

class apiKeyResponse_ApiKeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.apiKey = this.getResponseProperty('ApiKey');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/attachmentResponse.ts

class attachmentResponse_AttachmentResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.url = this.getResponseProperty('Url');
        this.fileName = this.getResponseProperty('FileName');
        this.key = this.getResponseProperty('Key');
        this.size = this.getResponseProperty('Size');
        this.sizeName = this.getResponseProperty('SizeName');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/passwordHistoryResponse.ts

class passwordHistoryResponse_PasswordHistoryResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.password = this.getResponseProperty('Password');
        this.lastUsedDate = this.getResponseProperty('LastUsedDate');
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/api/cardApi.ts
var cardApi = __webpack_require__(263);

// EXTERNAL MODULE: ./jslib/common/src/models/api/fieldApi.ts
var fieldApi = __webpack_require__(264);

// EXTERNAL MODULE: ./jslib/common/src/models/api/identityApi.ts
var identityApi = __webpack_require__(265);

// EXTERNAL MODULE: ./jslib/common/src/models/api/loginApi.ts
var loginApi = __webpack_require__(266);

// EXTERNAL MODULE: ./jslib/common/src/models/api/secureNoteApi.ts
var secureNoteApi = __webpack_require__(268);

// CONCATENATED MODULE: ./jslib/common/src/models/response/cipherResponse.ts









class cipherResponse_CipherResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.folderId = this.getResponseProperty('FolderId') || null;
        this.type = this.getResponseProperty('Type');
        this.name = this.getResponseProperty('Name');
        this.notes = this.getResponseProperty('Notes');
        this.favorite = this.getResponseProperty('Favorite') || false;
        this.edit = !!this.getResponseProperty('Edit');
        if (this.getResponseProperty('ViewPassword') == null) {
            this.viewPassword = true;
        }
        else {
            this.viewPassword = this.getResponseProperty('ViewPassword');
        }
        this.organizationUseTotp = this.getResponseProperty('OrganizationUseTotp');
        this.revisionDate = this.getResponseProperty('RevisionDate');
        this.collectionIds = this.getResponseProperty('CollectionIds');
        this.deletedDate = this.getResponseProperty('DeletedDate');
        const login = this.getResponseProperty('Login');
        if (login != null) {
            this.login = new loginApi["a" /* LoginApi */](login);
        }
        const card = this.getResponseProperty('Card');
        if (card != null) {
            this.card = new cardApi["a" /* CardApi */](card);
        }
        const identity = this.getResponseProperty('Identity');
        if (identity != null) {
            this.identity = new identityApi["a" /* IdentityApi */](identity);
        }
        const secureNote = this.getResponseProperty('SecureNote');
        if (secureNote != null) {
            this.secureNote = new secureNoteApi["a" /* SecureNoteApi */](secureNote);
        }
        const fields = this.getResponseProperty('Fields');
        if (fields != null) {
            this.fields = fields.map((f) => new fieldApi["a" /* FieldApi */](f));
        }
        const attachments = this.getResponseProperty('Attachments');
        if (attachments != null) {
            this.attachments = attachments.map((a) => new attachmentResponse_AttachmentResponse(a));
        }
        const passwordHistory = this.getResponseProperty('PasswordHistory');
        if (passwordHistory != null) {
            this.passwordHistory = passwordHistory.map((h) => new passwordHistoryResponse_PasswordHistoryResponse(h));
        }
        this.reprompt = this.getResponseProperty('Reprompt') || cipherRepromptType["a" /* CipherRepromptType */].None;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/attachmentUploadDataResponse.ts


class attachmentUploadDataResponse_AttachmentUploadDataResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.url = null;
        this.attachmentId = this.getResponseProperty('AttachmentId');
        this.fileUploadType = this.getResponseProperty('FileUploadType');
        const cipherResponse = this.getResponseProperty('CipherResponse');
        const cipherMiniResponse = this.getResponseProperty('CipherMiniResponse');
        this.cipherResponse = cipherResponse == null ? null : new cipherResponse_CipherResponse(cipherResponse);
        this.cipherMiniResponse = cipherMiniResponse == null ? null : new cipherResponse_CipherResponse(cipherMiniResponse);
        this.url = this.getResponseProperty('Url');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/billingResponse.ts

class billingResponse_BillingResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.invoices = [];
        this.transactions = [];
        this.balance = this.getResponseProperty('Balance');
        const paymentSource = this.getResponseProperty('PaymentSource');
        const transactions = this.getResponseProperty('Transactions');
        const invoices = this.getResponseProperty('Invoices');
        this.paymentSource = paymentSource == null ? null : new billingResponse_BillingSourceResponse(paymentSource);
        if (transactions != null) {
            this.transactions = transactions.map((t) => new billingResponse_BillingTransactionResponse(t));
        }
        if (invoices != null) {
            this.invoices = invoices.map((i) => new billingResponse_BillingInvoiceResponse(i));
        }
    }
}
class billingResponse_BillingSourceResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.type = this.getResponseProperty('Type');
        this.cardBrand = this.getResponseProperty('CardBrand');
        this.description = this.getResponseProperty('Description');
        this.needsVerification = this.getResponseProperty('NeedsVerification');
    }
}
class billingResponse_BillingInvoiceResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.url = this.getResponseProperty('Url');
        this.pdfUrl = this.getResponseProperty('PdfUrl');
        this.number = this.getResponseProperty('Number');
        this.paid = this.getResponseProperty('Paid');
        this.date = this.getResponseProperty('Date');
        this.amount = this.getResponseProperty('Amount');
    }
}
class billingResponse_BillingTransactionResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.createdDate = this.getResponseProperty('CreatedDate');
        this.amount = this.getResponseProperty('Amount');
        this.refunded = this.getResponseProperty('Refunded');
        this.partiallyRefunded = this.getResponseProperty('PartiallyRefunded');
        this.refundedAmount = this.getResponseProperty('RefundedAmount');
        this.type = this.getResponseProperty('Type');
        this.paymentMethodType = this.getResponseProperty('PaymentMethodType');
        this.details = this.getResponseProperty('Details');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/breachAccountResponse.ts

class breachAccountResponse_BreachAccountResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.addedDate = this.getResponseProperty('AddedDate');
        this.breachDate = this.getResponseProperty('BreachDate');
        this.dataClasses = this.getResponseProperty('DataClasses');
        this.description = this.getResponseProperty('Description');
        this.domain = this.getResponseProperty('Domain');
        this.isActive = this.getResponseProperty('IsActive');
        this.isVerified = this.getResponseProperty('IsVerified');
        this.logoPath = this.getResponseProperty('LogoPath');
        this.modifiedDate = this.getResponseProperty('ModifiedDate');
        this.name = this.getResponseProperty('Name');
        this.pwnCount = this.getResponseProperty('PwnCount');
        this.title = this.getResponseProperty('Title');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/selectionReadOnlyResponse.ts

class selectionReadOnlyResponse_SelectionReadOnlyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.readOnly = this.getResponseProperty('ReadOnly');
        this.hidePasswords = this.getResponseProperty('HidePasswords');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/collectionResponse.ts


class collectionResponse_CollectionResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.name = this.getResponseProperty('Name');
        this.externalId = this.getResponseProperty('ExternalId');
    }
}
class CollectionDetailsResponse extends collectionResponse_CollectionResponse {
    constructor(response) {
        super(response);
        this.readOnly = this.getResponseProperty('ReadOnly') || false;
    }
}
class collectionResponse_CollectionGroupDetailsResponse extends collectionResponse_CollectionResponse {
    constructor(response) {
        super(response);
        this.groups = [];
        const groups = this.getResponseProperty('Groups');
        if (groups != null) {
            this.groups = groups.map((g) => new selectionReadOnlyResponse_SelectionReadOnlyResponse(g));
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/globalDomainResponse.ts

class globalDomainResponse_GlobalDomainResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.type = this.getResponseProperty('Type');
        this.domains = this.getResponseProperty('Domains');
        this.excluded = this.getResponseProperty('Excluded');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/domainsResponse.ts


class domainsResponse_DomainsResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.globalEquivalentDomains = [];
        this.equivalentDomains = this.getResponseProperty('EquivalentDomains');
        const globalEquivalentDomains = this.getResponseProperty('GlobalEquivalentDomains');
        if (globalEquivalentDomains != null) {
            this.globalEquivalentDomains = globalEquivalentDomains.map((d) => new globalDomainResponse_GlobalDomainResponse(d));
        }
        else {
            this.globalEquivalentDomains = [];
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/emergencyAccessResponse.ts


class emergencyAccessResponse_EmergencyAccessGranteeDetailsResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.granteeId = this.getResponseProperty('GranteeId');
        this.name = this.getResponseProperty('Name');
        this.email = this.getResponseProperty('Email');
        this.type = this.getResponseProperty('Type');
        this.status = this.getResponseProperty('Status');
        this.waitTimeDays = this.getResponseProperty('WaitTimeDays');
        this.creationDate = this.getResponseProperty('CreationDate');
    }
}
class emergencyAccessResponse_EmergencyAccessGrantorDetailsResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.grantorId = this.getResponseProperty('GrantorId');
        this.name = this.getResponseProperty('Name');
        this.email = this.getResponseProperty('Email');
        this.type = this.getResponseProperty('Type');
        this.status = this.getResponseProperty('Status');
        this.waitTimeDays = this.getResponseProperty('WaitTimeDays');
        this.creationDate = this.getResponseProperty('CreationDate');
    }
}
class emergencyAccessResponse_EmergencyAccessTakeoverResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.keyEncrypted = this.getResponseProperty('KeyEncrypted');
        this.kdf = this.getResponseProperty('Kdf');
        this.kdfIterations = this.getResponseProperty('KdfIterations');
    }
}
class emergencyAccessResponse_EmergencyAccessViewResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.ciphers = [];
        this.keyEncrypted = this.getResponseProperty('KeyEncrypted');
        const ciphers = this.getResponseProperty('Ciphers');
        if (ciphers != null) {
            this.ciphers = ciphers.map((c) => new cipherResponse_CipherResponse(c));
        }
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/response/errorResponse.ts
var errorResponse = __webpack_require__(71);

// CONCATENATED MODULE: ./jslib/common/src/models/response/eventResponse.ts

class eventResponse_EventResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.type = this.getResponseProperty('Type');
        this.userId = this.getResponseProperty('UserId');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.providerId = this.getResponseProperty('ProviderId');
        this.cipherId = this.getResponseProperty('CipherId');
        this.collectionId = this.getResponseProperty('CollectionId');
        this.groupId = this.getResponseProperty('GroupId');
        this.policyId = this.getResponseProperty('PolicyId');
        this.organizationUserId = this.getResponseProperty('OrganizationUserId');
        this.providerUserId = this.getResponseProperty('ProviderUserId');
        this.providerOrganizationId = this.getResponseProperty('ProviderOrganizationId');
        this.actingUserId = this.getResponseProperty('ActingUserId');
        this.date = this.getResponseProperty('Date');
        this.deviceType = this.getResponseProperty('DeviceType');
        this.ipAddress = this.getResponseProperty('IpAddress');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/folderResponse.ts

class folderResponse_FolderResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.name = this.getResponseProperty('Name');
        this.revisionDate = this.getResponseProperty('RevisionDate');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/groupResponse.ts


class groupResponse_GroupResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.name = this.getResponseProperty('Name');
        this.accessAll = this.getResponseProperty('AccessAll');
        this.externalId = this.getResponseProperty('ExternalId');
    }
}
class groupResponse_GroupDetailsResponse extends groupResponse_GroupResponse {
    constructor(response) {
        super(response);
        this.collections = [];
        const collections = this.getResponseProperty('Collections');
        if (collections != null) {
            this.collections = collections.map((c) => new selectionReadOnlyResponse_SelectionReadOnlyResponse(c));
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/identityCaptchaResponse.ts

class identityCaptchaResponse_IdentityCaptchaResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.siteKey = this.getResponseProperty('HCaptcha_SiteKey');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/identityTokenResponse.ts

class identityTokenResponse_IdentityTokenResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.accessToken = response.access_token;
        this.expiresIn = response.expires_in;
        this.refreshToken = response.refresh_token;
        this.tokenType = response.token_type;
        this.resetMasterPassword = this.getResponseProperty('ResetMasterPassword');
        this.privateKey = this.getResponseProperty('PrivateKey');
        this.key = this.getResponseProperty('Key');
        this.twoFactorToken = this.getResponseProperty('TwoFactorToken');
        this.kdf = this.getResponseProperty('Kdf');
        this.kdfIterations = this.getResponseProperty('KdfIterations');
        this.forcePasswordReset = this.getResponseProperty('ForcePasswordReset');
        this.apiUseKeyConnector = this.getResponseProperty('ApiUseKeyConnector');
        this.keyConnectorUrl = this.getResponseProperty('KeyConnectorUrl');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/identityTwoFactorResponse.ts

class identityTwoFactorResponse_IdentityTwoFactorResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.twoFactorProviders2 = new Map();
        this.captchaToken = this.getResponseProperty('CaptchaBypassToken');
        this.twoFactorProviders = this.getResponseProperty('TwoFactorProviders');
        const twoFactorProviders2 = this.getResponseProperty('TwoFactorProviders2');
        if (twoFactorProviders2 != null) {
            for (const prop in twoFactorProviders2) {
                if (twoFactorProviders2.hasOwnProperty(prop)) {
                    this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);
                }
            }
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/listResponse.ts

class listResponse_ListResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response, t) {
        super(response);
        const data = this.getResponseProperty('Data');
        this.data = data == null ? [] : data.map((dr) => new t(dr));
        this.continuationToken = this.getResponseProperty('ContinuationToken');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/api/ssoConfigApi.ts

var SsoType;
(function (SsoType) {
    SsoType[SsoType["OpenIdConnect"] = 1] = "OpenIdConnect";
    SsoType[SsoType["Saml2"] = 2] = "Saml2";
})(SsoType || (SsoType = {}));
var OpenIdConnectRedirectBehavior;
(function (OpenIdConnectRedirectBehavior) {
    OpenIdConnectRedirectBehavior[OpenIdConnectRedirectBehavior["RedirectGet"] = 0] = "RedirectGet";
    OpenIdConnectRedirectBehavior[OpenIdConnectRedirectBehavior["FormPost"] = 1] = "FormPost";
})(OpenIdConnectRedirectBehavior || (OpenIdConnectRedirectBehavior = {}));
var Saml2BindingType;
(function (Saml2BindingType) {
    Saml2BindingType[Saml2BindingType["HttpRedirect"] = 1] = "HttpRedirect";
    Saml2BindingType[Saml2BindingType["HttpPost"] = 2] = "HttpPost";
    Saml2BindingType[Saml2BindingType["Artifact"] = 4] = "Artifact";
})(Saml2BindingType || (Saml2BindingType = {}));
var Saml2NameIdFormat;
(function (Saml2NameIdFormat) {
    Saml2NameIdFormat[Saml2NameIdFormat["NotConfigured"] = 0] = "NotConfigured";
    Saml2NameIdFormat[Saml2NameIdFormat["Unspecified"] = 1] = "Unspecified";
    Saml2NameIdFormat[Saml2NameIdFormat["EmailAddress"] = 2] = "EmailAddress";
    Saml2NameIdFormat[Saml2NameIdFormat["X509SubjectName"] = 3] = "X509SubjectName";
    Saml2NameIdFormat[Saml2NameIdFormat["WindowsDomainQualifiedName"] = 4] = "WindowsDomainQualifiedName";
    Saml2NameIdFormat[Saml2NameIdFormat["KerberosPrincipalName"] = 5] = "KerberosPrincipalName";
    Saml2NameIdFormat[Saml2NameIdFormat["EntityIdentifier"] = 6] = "EntityIdentifier";
    Saml2NameIdFormat[Saml2NameIdFormat["Persistent"] = 7] = "Persistent";
    Saml2NameIdFormat[Saml2NameIdFormat["Transient"] = 8] = "Transient";
})(Saml2NameIdFormat || (Saml2NameIdFormat = {}));
var Saml2SigningBehavior;
(function (Saml2SigningBehavior) {
    Saml2SigningBehavior[Saml2SigningBehavior["IfIdpWantAuthnRequestsSigned"] = 0] = "IfIdpWantAuthnRequestsSigned";
    Saml2SigningBehavior[Saml2SigningBehavior["Always"] = 1] = "Always";
    Saml2SigningBehavior[Saml2SigningBehavior["Never"] = 3] = "Never";
})(Saml2SigningBehavior || (Saml2SigningBehavior = {}));
class ssoConfigApi_SsoConfigApi extends baseResponse["a" /* BaseResponse */] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.configType = this.getResponseProperty('ConfigType');
        this.keyConnectorEnabled = this.getResponseProperty('KeyConnectorEnabled');
        this.keyConnectorUrl = this.getResponseProperty('KeyConnectorUrl');
        this.authority = this.getResponseProperty('Authority');
        this.clientId = this.getResponseProperty('ClientId');
        this.clientSecret = this.getResponseProperty('ClientSecret');
        this.metadataAddress = this.getResponseProperty('MetadataAddress');
        this.redirectBehavior = this.getResponseProperty('RedirectBehavior');
        this.getClaimsFromUserInfoEndpoint = this.getResponseProperty('GetClaimsFromUserInfoEndpoint');
        this.additionalScopes = this.getResponseProperty('AdditionalScopes');
        this.additionalUserIdClaimTypes = this.getResponseProperty('AdditionalUserIdClaimTypes');
        this.additionalEmailClaimTypes = this.getResponseProperty('AdditionalEmailClaimTypes');
        this.additionalNameClaimTypes = this.getResponseProperty('AdditionalNameClaimTypes');
        this.acrValues = this.getResponseProperty('AcrValues');
        this.expectedReturnAcrValue = this.getResponseProperty('ExpectedReturnAcrValue');
        this.spNameIdFormat = this.getResponseProperty('SpNameIdFormat');
        this.spOutboundSigningAlgorithm = this.getResponseProperty('SpOutboundSigningAlgorithm');
        this.spSigningBehavior = this.getResponseProperty('SpSigningBehavior');
        this.spMinIncomingSigningAlgorithm = this.getResponseProperty('SpMinIncomingSigningAlgorithm');
        this.spWantAssertionsSigned = this.getResponseProperty('SpWantAssertionsSigned');
        this.spValidateCertificates = this.getResponseProperty('SpValidateCertificates');
        this.idpEntityId = this.getResponseProperty('IdpEntityId');
        this.idpBindingType = this.getResponseProperty('IdpBindingType');
        this.idpSingleSignOnServiceUrl = this.getResponseProperty('IdpSingleSignOnServiceUrl');
        this.idpSingleLogoutServiceUrl = this.getResponseProperty('IdpSingleLogoutServiceUrl');
        this.idpArtifactResolutionServiceUrl = this.getResponseProperty('IdpArtifactResolutionServiceUrl');
        this.idpX509PublicCert = this.getResponseProperty('IdpX509PublicCert');
        this.idpOutboundSigningAlgorithm = this.getResponseProperty('IdpOutboundSigningAlgorithm');
        this.idpAllowUnsolicitedAuthnResponse = this.getResponseProperty('IdpAllowUnsolicitedAuthnResponse');
        this.idpDisableOutboundLogoutRequests = this.getResponseProperty('IdpDisableOutboundLogoutRequests');
        this.idpWantAuthnRequestsSigned = this.getResponseProperty('IdpWantAuthnRequestsSigned');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/organization/organizationSsoResponse.ts


class organizationSsoResponse_OrganizationSsoResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.data = new ssoConfigApi_SsoConfigApi(this.getResponseProperty('Data'));
        this.urls = new organizationSsoResponse_SsoUrls(this.getResponseProperty('Urls'));
    }
}
class organizationSsoResponse_SsoUrls extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.callbackPath = this.getResponseProperty('CallbackPath');
        this.signedOutCallbackPath = this.getResponseProperty('SignedOutCallbackPath');
        this.spEntityId = this.getResponseProperty('SpEntityId');
        this.spMetadataUrl = this.getResponseProperty('SpMetadataUrl');
        this.spAcsUrl = this.getResponseProperty('SpAcsUrl');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/organizationAutoEnrollStatusResponse.ts

class organizationAutoEnrollStatusResponse_OrganizationAutoEnrollStatusResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.resetPasswordEnabled = this.getResponseProperty('ResetPasswordEnabled');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/keysResponse.ts

class keysResponse_KeysResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.privateKey = this.getResponseProperty('PrivateKey');
        this.publicKey = this.getResponseProperty('PublicKey');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/organizationKeysResponse.ts

class organizationKeysResponse_OrganizationKeysResponse extends keysResponse_KeysResponse {
    constructor(response) {
        super(response);
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/planResponse.ts

class planResponse_PlanResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.type = this.getResponseProperty('Type');
        this.product = this.getResponseProperty('Product');
        this.name = this.getResponseProperty('Name');
        this.isAnnual = this.getResponseProperty('IsAnnual');
        this.nameLocalizationKey = this.getResponseProperty('NameLocalizationKey');
        this.descriptionLocalizationKey = this.getResponseProperty('DescriptionLocalizationKey');
        this.canBeUsedByBusiness = this.getResponseProperty('CanBeUsedByBusiness');
        this.baseSeats = this.getResponseProperty('BaseSeats');
        this.baseStorageGb = this.getResponseProperty('BaseStorageGb');
        this.maxCollections = this.getResponseProperty('MaxCollections');
        this.maxUsers = this.getResponseProperty('MaxUsers');
        this.hasAdditionalSeatsOption = this.getResponseProperty('HasAdditionalSeatsOption');
        this.maxAdditionalSeats = this.getResponseProperty('MaxAdditionalSeats');
        this.hasAdditionalStorageOption = this.getResponseProperty('HasAdditionalStorageOption');
        this.maxAdditionalStorage = this.getResponseProperty('MaxAdditionalStorage');
        this.hasPremiumAccessOption = this.getResponseProperty('HasPremiumAccessOption');
        this.trialPeriodDays = this.getResponseProperty('TrialPeriodDays');
        this.hasSelfHost = this.getResponseProperty('HasSelfHost');
        this.hasPolicies = this.getResponseProperty('HasPolicies');
        this.hasGroups = this.getResponseProperty('HasGroups');
        this.hasDirectory = this.getResponseProperty('HasDirectory');
        this.hasEvents = this.getResponseProperty('HasEvents');
        this.hasTotp = this.getResponseProperty('HasTotp');
        this.has2fa = this.getResponseProperty('Has2fa');
        this.hasApi = this.getResponseProperty('HasApi');
        this.hasSso = this.getResponseProperty('HasSso');
        this.hasResetPassword = this.getResponseProperty('HasResetPassword');
        this.usersGetPremium = this.getResponseProperty('UsersGetPremium');
        this.upgradeSortOrder = this.getResponseProperty('UpgradeSortOrder');
        this.displaySortOrder = this.getResponseProperty('SortOrder');
        this.legacyYear = this.getResponseProperty('LegacyYear');
        this.disabled = this.getResponseProperty('Disabled');
        this.stripePlanId = this.getResponseProperty('StripePlanId');
        this.stripeSeatPlanId = this.getResponseProperty('StripeSeatPlanId');
        this.stripeStoragePlanId = this.getResponseProperty('StripeStoragePlanId');
        this.stripePremiumAccessPlanId = this.getResponseProperty('StripePremiumAccessPlanId');
        this.basePrice = this.getResponseProperty('BasePrice');
        this.seatPrice = this.getResponseProperty('SeatPrice');
        this.additionalStoragePricePerGb = this.getResponseProperty('AdditionalStoragePricePerGb');
        this.premiumAccessOptionPrice = this.getResponseProperty('PremiumAccessOptionPrice');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/organizationResponse.ts


class organizationResponse_OrganizationResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.identifier = this.getResponseProperty('Identifier');
        this.name = this.getResponseProperty('Name');
        this.businessName = this.getResponseProperty('BusinessName');
        this.businessAddress1 = this.getResponseProperty('BusinessAddress1');
        this.businessAddress2 = this.getResponseProperty('BusinessAddress2');
        this.businessAddress3 = this.getResponseProperty('BusinessAddress3');
        this.businessCountry = this.getResponseProperty('BusinessCountry');
        this.businessTaxNumber = this.getResponseProperty('BusinessTaxNumber');
        this.billingEmail = this.getResponseProperty('BillingEmail');
        const plan = this.getResponseProperty('Plan');
        this.plan = plan == null ? null : new planResponse_PlanResponse(plan);
        this.planType = this.getResponseProperty('PlanType');
        this.seats = this.getResponseProperty('Seats');
        this.maxAutoscaleSeats = this.getResponseProperty('MaxAutoscaleSeats');
        this.maxCollections = this.getResponseProperty('MaxCollections');
        this.maxStorageGb = this.getResponseProperty('MaxStorageGb');
        this.useGroups = this.getResponseProperty('UseGroups');
        this.useDirectory = this.getResponseProperty('UseDirectory');
        this.useEvents = this.getResponseProperty('UseEvents');
        this.useTotp = this.getResponseProperty('UseTotp');
        this.use2fa = this.getResponseProperty('Use2fa');
        this.useApi = this.getResponseProperty('UseApi');
        this.useResetPassword = this.getResponseProperty('UseResetPassword');
        this.hasPublicAndPrivateKeys = this.getResponseProperty('HasPublicAndPrivateKeys');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/subscriptionResponse.ts

class subscriptionResponse_SubscriptionResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.storageName = this.getResponseProperty('StorageName');
        this.storageGb = this.getResponseProperty('StorageGb');
        this.maxStorageGb = this.getResponseProperty('MaxStorageGb');
        this.license = this.getResponseProperty('License');
        this.expiration = this.getResponseProperty('Expiration');
        this.usingInAppPurchase = this.getResponseProperty('UsingInAppPurchase');
        const subscription = this.getResponseProperty('Subscription');
        const upcomingInvoice = this.getResponseProperty('UpcomingInvoice');
        this.subscription = subscription == null ? null : new subscriptionResponse_BillingSubscriptionResponse(subscription);
        this.upcomingInvoice = upcomingInvoice == null ? null :
            new subscriptionResponse_BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);
    }
}
class subscriptionResponse_BillingSubscriptionResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.items = [];
        this.trialEndDate = this.getResponseProperty('TrialStartDate');
        this.trialEndDate = this.getResponseProperty('TrialEndDate');
        this.periodStartDate = this.getResponseProperty('PeriodStartDate');
        this.periodEndDate = this.getResponseProperty('PeriodEndDate');
        this.cancelledDate = this.getResponseProperty('CancelledDate');
        this.cancelAtEndDate = this.getResponseProperty('CancelAtEndDate');
        this.status = this.getResponseProperty('Status');
        this.cancelled = this.getResponseProperty('Cancelled');
        const items = this.getResponseProperty('Items');
        if (items != null) {
            this.items = items.map((i) => new subscriptionResponse_BillingSubscriptionItemResponse(i));
        }
    }
}
class subscriptionResponse_BillingSubscriptionItemResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.name = this.getResponseProperty('Name');
        this.amount = this.getResponseProperty('Amount');
        this.quantity = this.getResponseProperty('Quantity');
        this.interval = this.getResponseProperty('Interval');
        this.sponsoredSubscriptionItem = this.getResponseProperty('SponsoredSubscriptionItem');
    }
}
class subscriptionResponse_BillingSubscriptionUpcomingInvoiceResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.date = this.getResponseProperty('Date');
        this.amount = this.getResponseProperty('Amount');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/organizationSubscriptionResponse.ts


class organizationSubscriptionResponse_OrganizationSubscriptionResponse extends organizationResponse_OrganizationResponse {
    constructor(response) {
        super(response);
        this.storageName = this.getResponseProperty('StorageName');
        this.storageGb = this.getResponseProperty('StorageGb');
        const subscription = this.getResponseProperty('Subscription');
        this.subscription = subscription == null ? null : new subscriptionResponse_BillingSubscriptionResponse(subscription);
        const upcomingInvoice = this.getResponseProperty('UpcomingInvoice');
        this.upcomingInvoice = upcomingInvoice == null ? null :
            new subscriptionResponse_BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);
        this.expiration = this.getResponseProperty('Expiration');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/organizationUserBulkPublicKeyResponse.ts

class organizationUserBulkPublicKeyResponse_OrganizationUserBulkPublicKeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.key = this.getResponseProperty('Key');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/organizationUserBulkResponse.ts

class organizationUserBulkResponse_OrganizationUserBulkResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.error = this.getResponseProperty('Error');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/api/permissionsApi.ts

class permissionsApi_PermissionsApi extends baseResponse["a" /* BaseResponse */] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return this;
        }
        this.accessEventLogs = this.getResponseProperty('AccessEventLogs');
        this.accessImportExport = this.getResponseProperty('AccessImportExport');
        this.accessReports = this.getResponseProperty('AccessReports');
        // For backwards compatibility with Server <= 1.43.0
        this.manageAllCollections = this.getResponseProperty('ManageAllCollections');
        this.manageAssignedCollections = this.getResponseProperty('ManageAssignedCollections');
        this.createNewCollections = this.getResponseProperty('CreateNewCollections');
        this.editAnyCollection = this.getResponseProperty('EditAnyCollection');
        this.deleteAnyCollection = this.getResponseProperty('DeleteAnyCollection');
        this.editAssignedCollections = this.getResponseProperty('EditAssignedCollections');
        this.deleteAssignedCollections = this.getResponseProperty('DeleteAssignedCollections');
        this.manageCiphers = this.getResponseProperty('ManageCiphers');
        this.manageGroups = this.getResponseProperty('ManageGroups');
        this.manageSso = this.getResponseProperty('ManageSso');
        this.managePolicies = this.getResponseProperty('ManagePolicies');
        this.manageUsers = this.getResponseProperty('ManageUsers');
        this.manageResetPassword = this.getResponseProperty('ManageResetPassword');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/organizationUserResponse.ts



class organizationUserResponse_OrganizationUserResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.type = this.getResponseProperty('Type');
        this.status = this.getResponseProperty('Status');
        this.permissions = new permissionsApi_PermissionsApi(this.getResponseProperty('Permissions'));
        this.accessAll = this.getResponseProperty('AccessAll');
        this.resetPasswordEnrolled = this.getResponseProperty('ResetPasswordEnrolled');
    }
}
class OrganizationUserUserDetailsResponse extends organizationUserResponse_OrganizationUserResponse {
    constructor(response) {
        var _a;
        super(response);
        this.name = this.getResponseProperty('Name');
        this.email = this.getResponseProperty('Email');
        this.twoFactorEnabled = this.getResponseProperty('TwoFactorEnabled');
        this.usesKeyConnector = (_a = this.getResponseProperty('UsesKeyConnector')) !== null && _a !== void 0 ? _a : false;
    }
}
class organizationUserResponse_OrganizationUserDetailsResponse extends organizationUserResponse_OrganizationUserResponse {
    constructor(response) {
        super(response);
        this.collections = [];
        const collections = this.getResponseProperty('Collections');
        if (collections != null) {
            this.collections = collections.map((c) => new selectionReadOnlyResponse_SelectionReadOnlyResponse(c));
        }
    }
}
class organizationUserResponse_OrganizationUserResetPasswordDetailsReponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.kdf = this.getResponseProperty('Kdf');
        this.kdfIterations = this.getResponseProperty('KdfIterations');
        this.resetPasswordKey = this.getResponseProperty('ResetPasswordKey');
        this.encryptedPrivateKey = this.getResponseProperty('EncryptedPrivateKey');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/profileOrganizationResponse.ts


class profileOrganizationResponse_ProfileOrganizationResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        var _a, _b;
        super(response);
        this.id = this.getResponseProperty('Id');
        this.name = this.getResponseProperty('Name');
        this.usePolicies = this.getResponseProperty('UsePolicies');
        this.useGroups = this.getResponseProperty('UseGroups');
        this.useDirectory = this.getResponseProperty('UseDirectory');
        this.useEvents = this.getResponseProperty('UseEvents');
        this.useTotp = this.getResponseProperty('UseTotp');
        this.use2fa = this.getResponseProperty('Use2fa');
        this.useApi = this.getResponseProperty('UseApi');
        this.useSso = this.getResponseProperty('UseSso');
        this.useKeyConnector = (_a = this.getResponseProperty('UseKeyConnector')) !== null && _a !== void 0 ? _a : false;
        this.useResetPassword = this.getResponseProperty('UseResetPassword');
        this.selfHost = this.getResponseProperty('SelfHost');
        this.usersGetPremium = this.getResponseProperty('UsersGetPremium');
        this.seats = this.getResponseProperty('Seats');
        this.maxCollections = this.getResponseProperty('MaxCollections');
        this.maxStorageGb = this.getResponseProperty('MaxStorageGb');
        this.key = this.getResponseProperty('Key');
        this.hasPublicAndPrivateKeys = this.getResponseProperty('HasPublicAndPrivateKeys');
        this.status = this.getResponseProperty('Status');
        this.type = this.getResponseProperty('Type');
        this.enabled = this.getResponseProperty('Enabled');
        this.ssoBound = this.getResponseProperty('SsoBound');
        this.identifier = this.getResponseProperty('Identifier');
        this.permissions = new permissionsApi_PermissionsApi(this.getResponseProperty('permissions'));
        this.resetPasswordEnrolled = this.getResponseProperty('ResetPasswordEnrolled');
        this.userId = this.getResponseProperty('UserId');
        this.providerId = this.getResponseProperty('ProviderId');
        this.providerName = this.getResponseProperty('ProviderName');
        this.familySponsorshipFriendlyName = this.getResponseProperty('FamilySponsorshipFriendlyName');
        this.familySponsorshipAvailable = this.getResponseProperty('FamilySponsorshipAvailable');
        this.planProductType = this.getResponseProperty('PlanProductType');
        this.keyConnectorEnabled = (_b = this.getResponseProperty('KeyConnectorEnabled')) !== null && _b !== void 0 ? _b : false;
        this.keyConnectorUrl = this.getResponseProperty('KeyConnectorUrl');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/profileProviderOrganizationResponse.ts

class profileProviderOrganizationResponse_ProfileProviderOrganizationResponse extends profileOrganizationResponse_ProfileOrganizationResponse {
    constructor(response) {
        super(response);
        this.keyConnectorEnabled = false;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/profileProviderResponse.ts


class profileProviderResponse_ProfileProviderResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.name = this.getResponseProperty('Name');
        this.key = this.getResponseProperty('Key');
        this.status = this.getResponseProperty('Status');
        this.type = this.getResponseProperty('Type');
        this.enabled = this.getResponseProperty('Enabled');
        this.permissions = new permissionsApi_PermissionsApi(this.getResponseProperty('permissions'));
        this.userId = this.getResponseProperty('UserId');
        this.useEvents = this.getResponseProperty('UseEvents');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/profileResponse.ts




class profileResponse_ProfileResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        var _a, _b;
        super(response);
        this.organizations = [];
        this.providers = [];
        this.providerOrganizations = [];
        this.id = this.getResponseProperty('Id');
        this.name = this.getResponseProperty('Name');
        this.email = this.getResponseProperty('Email');
        this.emailVerified = this.getResponseProperty('EmailVerified');
        this.masterPasswordHint = this.getResponseProperty('MasterPasswordHint');
        this.premium = this.getResponseProperty('Premium');
        this.culture = this.getResponseProperty('Culture');
        this.twoFactorEnabled = this.getResponseProperty('TwoFactorEnabled');
        this.key = this.getResponseProperty('Key');
        this.privateKey = this.getResponseProperty('PrivateKey');
        this.securityStamp = this.getResponseProperty('SecurityStamp');
        this.forcePasswordReset = (_a = this.getResponseProperty('ForcePasswordReset')) !== null && _a !== void 0 ? _a : false;
        this.usesKeyConnector = (_b = this.getResponseProperty('UsesKeyConnector')) !== null && _b !== void 0 ? _b : false;
        const organizations = this.getResponseProperty('Organizations');
        if (organizations != null) {
            this.organizations = organizations.map((o) => new profileOrganizationResponse_ProfileOrganizationResponse(o));
        }
        const providers = this.getResponseProperty('Providers');
        if (providers != null) {
            this.providers = providers.map((o) => new profileProviderResponse_ProfileProviderResponse(o));
        }
        const providerOrganizations = this.getResponseProperty('ProviderOrganizations');
        if (providerOrganizations != null) {
            this.providerOrganizations = providerOrganizations.map((o) => new profileProviderOrganizationResponse_ProfileProviderOrganizationResponse(o));
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/paymentResponse.ts


class paymentResponse_PaymentResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        const userProfile = this.getResponseProperty('UserProfile');
        if (userProfile != null) {
            this.userProfile = new profileResponse_ProfileResponse(userProfile);
        }
        this.paymentIntentClientSecret = this.getResponseProperty('PaymentIntentClientSecret');
        this.success = this.getResponseProperty('Success');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/policyResponse.ts

class policyResponse_PolicyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.type = this.getResponseProperty('Type');
        this.data = this.getResponseProperty('Data');
        this.enabled = this.getResponseProperty('Enabled');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/preloginResponse.ts

class preloginResponse_PreloginResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.kdf = this.getResponseProperty('Kdf');
        this.kdfIterations = this.getResponseProperty('KdfIterations');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/provider/providerOrganizationResponse.ts

class providerOrganizationResponse_ProviderOrganizationResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.providerId = this.getResponseProperty('ProviderId');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.key = this.getResponseProperty('Key');
        this.settings = this.getResponseProperty('Settings');
        this.creationDate = this.getResponseProperty('CreationDate');
        this.revisionDate = this.getResponseProperty('RevisionDate');
    }
}
class ProviderOrganizationOrganizationDetailsResponse extends providerOrganizationResponse_ProviderOrganizationResponse {
    constructor(response) {
        super(response);
        this.organizationName = this.getResponseProperty('OrganizationName');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/provider/providerResponse.ts

class providerResponse_ProviderResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.name = this.getResponseProperty('Name');
        this.businessName = this.getResponseProperty('BusinessName');
        this.billingEmail = this.getResponseProperty('BillingEmail');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/provider/providerUserBulkPublicKeyResponse.ts

class providerUserBulkPublicKeyResponse_ProviderUserBulkPublicKeyResponse extends organizationUserBulkPublicKeyResponse_OrganizationUserBulkPublicKeyResponse {
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/provider/providerUserBulkResponse.ts

class providerUserBulkResponse_ProviderUserBulkResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.error = this.getResponseProperty('Error');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/provider/providerUserResponse.ts


class providerUserResponse_ProviderUserResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.type = this.getResponseProperty('Type');
        this.status = this.getResponseProperty('Status');
        this.permissions = new permissionsApi_PermissionsApi(this.getResponseProperty('Permissions'));
    }
}
class ProviderUserUserDetailsResponse extends providerUserResponse_ProviderUserResponse {
    constructor(response) {
        super(response);
        this.name = this.getResponseProperty('Name');
        this.email = this.getResponseProperty('Email');
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/api/sendFileApi.ts
var sendFileApi = __webpack_require__(186);

// EXTERNAL MODULE: ./jslib/common/src/models/api/sendTextApi.ts
var sendTextApi = __webpack_require__(187);

// CONCATENATED MODULE: ./jslib/common/src/models/response/sendAccessResponse.ts



class sendAccessResponse_SendAccessResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.type = this.getResponseProperty('Type');
        this.name = this.getResponseProperty('Name');
        const text = this.getResponseProperty('Text');
        if (text != null) {
            this.text = new sendTextApi["a" /* SendTextApi */](text);
        }
        const file = this.getResponseProperty('File');
        if (file != null) {
            this.file = new sendFileApi["a" /* SendFileApi */](file);
        }
        this.expirationDate = this.getResponseProperty('ExpirationDate');
        this.creatorIdentifier = this.getResponseProperty('CreatorIdentifier');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/sendFileDownloadDataResponse.ts

class sendFileDownloadDataResponse_SendFileDownloadDataResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = null;
        this.url = null;
        this.id = this.getResponseProperty('Id');
        this.url = this.getResponseProperty('Url');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/sendResponse.ts



class sendResponse_SendResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.accessId = this.getResponseProperty('AccessId');
        this.type = this.getResponseProperty('Type');
        this.name = this.getResponseProperty('Name');
        this.notes = this.getResponseProperty('Notes');
        this.key = this.getResponseProperty('Key');
        this.maxAccessCount = this.getResponseProperty('MaxAccessCount');
        this.accessCount = this.getResponseProperty('AccessCount');
        this.revisionDate = this.getResponseProperty('RevisionDate');
        this.expirationDate = this.getResponseProperty('ExpirationDate');
        this.deletionDate = this.getResponseProperty('DeletionDate');
        this.password = this.getResponseProperty('Password');
        this.disable = this.getResponseProperty('Disabled') || false;
        this.hideEmail = this.getResponseProperty('HideEmail') || false;
        const text = this.getResponseProperty('Text');
        if (text != null) {
            this.text = new sendTextApi["a" /* SendTextApi */](text);
        }
        const file = this.getResponseProperty('File');
        if (file != null) {
            this.file = new sendFileApi["a" /* SendFileApi */](file);
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/sendFileUploadDataResponse.ts


class sendFileUploadDataResponse_SendFileUploadDataResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.url = null;
        this.fileUploadType = this.getResponseProperty('FileUploadType');
        const sendResponse = this.getResponseProperty('SendResponse');
        this.sendResponse = sendResponse == null ? null : new sendResponse_SendResponse(sendResponse);
        this.url = this.getResponseProperty('Url');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/syncResponse.ts








class syncResponse_SyncResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.folders = [];
        this.collections = [];
        this.ciphers = [];
        this.policies = [];
        this.sends = [];
        const profile = this.getResponseProperty('Profile');
        if (profile != null) {
            this.profile = new profileResponse_ProfileResponse(profile);
        }
        const folders = this.getResponseProperty('Folders');
        if (folders != null) {
            this.folders = folders.map((f) => new folderResponse_FolderResponse(f));
        }
        const collections = this.getResponseProperty('Collections');
        if (collections != null) {
            this.collections = collections.map((c) => new CollectionDetailsResponse(c));
        }
        const ciphers = this.getResponseProperty('Ciphers');
        if (ciphers != null) {
            this.ciphers = ciphers.map((c) => new cipherResponse_CipherResponse(c));
        }
        const domains = this.getResponseProperty('Domains');
        if (domains != null) {
            this.domains = new domainsResponse_DomainsResponse(domains);
        }
        const policies = this.getResponseProperty('Policies');
        if (policies != null) {
            this.policies = policies.map((p) => new policyResponse_PolicyResponse(p));
        }
        const sends = this.getResponseProperty('Sends');
        if (sends != null) {
            this.sends = sends.map((s) => new sendResponse_SendResponse(s));
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/taxInfoResponse.ts

class taxInfoResponse_TaxInfoResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.taxId = this.getResponseProperty('TaxIdNumber');
        this.taxIdType = this.getResponseProperty('TaxIdType');
        this.line1 = this.getResponseProperty('Line1');
        this.line2 = this.getResponseProperty('Line2');
        this.city = this.getResponseProperty('City');
        this.state = this.getResponseProperty('State');
        this.postalCode = this.getResponseProperty('PostalCode');
        this.country = this.getResponseProperty('Country');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/taxRateResponse.ts

class taxRateResponse_TaxRateResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.country = this.getResponseProperty('Country');
        this.state = this.getResponseProperty('State');
        this.postalCode = this.getResponseProperty('PostalCode');
        this.rate = this.getResponseProperty('Rate');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/twoFactorAuthenticatorResponse.ts

class twoFactorAuthenticatorResponse_TwoFactorAuthenticatorResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.key = this.getResponseProperty('Key');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/twoFactorDuoResponse.ts

class twoFactorDuoResponse_TwoFactorDuoResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.host = this.getResponseProperty('Host');
        this.secretKey = this.getResponseProperty('SecretKey');
        this.integrationKey = this.getResponseProperty('IntegrationKey');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/twoFactorEmailResponse.ts

class twoFactorEmailResponse_TwoFactorEmailResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.email = this.getResponseProperty('Email');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/twoFactorProviderResponse.ts

class twoFactorProviderResponse_TwoFactorProviderResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.type = this.getResponseProperty('Type');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/twoFactorRescoverResponse.ts

class twoFactorRescoverResponse_TwoFactorRecoverResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.code = this.getResponseProperty('Code');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/twoFactorWebAuthnResponse.ts


class twoFactorWebAuthnResponse_TwoFactorWebAuthnResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        const keys = this.getResponseProperty('Keys');
        this.keys = keys == null ? null : keys.map((k) => new twoFactorWebAuthnResponse_KeyResponse(k));
    }
}
class twoFactorWebAuthnResponse_KeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.name = this.getResponseProperty('Name');
        this.id = this.getResponseProperty('Id');
        this.migrated = this.getResponseProperty('Migrated');
    }
}
class twoFactorWebAuthnResponse_ChallengeResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.attestation = this.getResponseProperty('attestation');
        this.authenticatorSelection = this.getResponseProperty('authenticatorSelection');
        this.challenge = utils["a" /* Utils */].fromUrlB64ToArray(this.getResponseProperty('challenge'));
        this.excludeCredentials = this.getResponseProperty('excludeCredentials').map((c) => {
            c.id = utils["a" /* Utils */].fromUrlB64ToArray(c.id).buffer;
            return c;
        });
        this.extensions = this.getResponseProperty('extensions');
        this.pubKeyCredParams = this.getResponseProperty('pubKeyCredParams');
        this.rp = this.getResponseProperty('rp');
        this.timeout = this.getResponseProperty('timeout');
        const user = this.getResponseProperty('user');
        user.id = utils["a" /* Utils */].fromUrlB64ToArray(user.id);
        this.user = user;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/twoFactorYubiKeyResponse.ts

class twoFactorYubiKeyResponse_TwoFactorYubiKeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.key1 = this.getResponseProperty('Key1');
        this.key2 = this.getResponseProperty('Key2');
        this.key3 = this.getResponseProperty('Key3');
        this.key4 = this.getResponseProperty('Key4');
        this.key5 = this.getResponseProperty('Key5');
        this.nfc = this.getResponseProperty('Nfc');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/userKeyResponse.ts

class userKeyResponse_UserKeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.userId = this.getResponseProperty('UserId');
        this.publicKey = this.getResponseProperty('PublicKey');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/response/keyConnectorUserKeyResponse.ts

class keyConnectorUserKeyResponse_KeyConnectorUserKeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.key = this.getResponseProperty('Key');
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/api.service.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
























































class api_service_ApiService {
    constructor(tokenService, platformUtilsService, environmentService, logoutCallback, customUserAgent = null) {
        this.tokenService = tokenService;
        this.platformUtilsService = platformUtilsService;
        this.environmentService = environmentService;
        this.logoutCallback = logoutCallback;
        this.customUserAgent = customUserAgent;
        this.isWebClient = false;
        this.isDesktopClient = false;
        this.device = platformUtilsService.getDevice();
        this.deviceType = this.device.toString();
        this.isWebClient = this.device === deviceType["a" /* DeviceType */].IEBrowser || this.device === deviceType["a" /* DeviceType */].ChromeBrowser ||
            this.device === deviceType["a" /* DeviceType */].EdgeBrowser || this.device === deviceType["a" /* DeviceType */].FirefoxBrowser ||
            this.device === deviceType["a" /* DeviceType */].OperaBrowser || this.device === deviceType["a" /* DeviceType */].SafariBrowser ||
            this.device === deviceType["a" /* DeviceType */].UnknownBrowser || this.device === deviceType["a" /* DeviceType */].VivaldiBrowser;
        this.isDesktopClient = this.device === deviceType["a" /* DeviceType */].WindowsDesktop || this.device === deviceType["a" /* DeviceType */].MacOsDesktop ||
            this.device === deviceType["a" /* DeviceType */].LinuxDesktop;
    }
    // Auth APIs
    postIdentityToken(request) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const headers = new Headers({
                'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
                'Accept': 'application/json',
                'Device-Type': this.deviceType,
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            request.alterIdentityTokenHeaders(headers);
            const response = yield this.fetch(new Request(this.environmentService.getIdentityUrl() + '/connect/token', {
                body: this.qsStringify(request.toIdentityToken((_a = request.clientId) !== null && _a !== void 0 ? _a : this.platformUtilsService.identityClientId)),
                credentials: this.getCredentials(),
                cache: 'no-store',
                headers: headers,
                method: 'POST',
            }));
            let responseJson = null;
            if (this.isJsonResponse(response)) {
                responseJson = yield response.json();
            }
            if (responseJson != null) {
                if (response.status === 200) {
                    return new identityTokenResponse_IdentityTokenResponse(responseJson);
                }
                else if (response.status === 400 && responseJson.TwoFactorProviders2 &&
                    Object.keys(responseJson.TwoFactorProviders2).length) {
                    yield this.tokenService.clearTwoFactorToken(request.email);
                    return new identityTwoFactorResponse_IdentityTwoFactorResponse(responseJson);
                }
                else if (response.status === 400 && responseJson.HCaptcha_SiteKey &&
                    Object.keys(responseJson.HCaptcha_SiteKey).length) {
                    return new identityCaptchaResponse_IdentityCaptchaResponse(responseJson);
                }
            }
            return Promise.reject(new errorResponse["a" /* ErrorResponse */](responseJson, response.status, true));
        });
    }
    refreshIdentityToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.doAuthRefresh();
            }
            catch (e) {
                return Promise.reject(null);
            }
        });
    }
    // Account APIs
    getProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/profile', null, true, true);
            return new profileResponse_ProfileResponse(r);
        });
    }
    getUserBilling() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/billing', null, true, true);
            return new billingResponse_BillingResponse(r);
        });
    }
    getUserSubscription() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/subscription', null, true, true);
            return new subscriptionResponse_SubscriptionResponse(r);
        });
    }
    getTaxInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/tax', null, true, true);
            return new taxInfoResponse_TaxInfoResponse(r);
        });
    }
    putProfile(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/accounts/profile', request, true, true);
            return new profileResponse_ProfileResponse(r);
        });
    }
    putTaxInfo(request) {
        return this.send('PUT', '/accounts/tax', request, true, false);
    }
    postPrelogin(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/prelogin', request, false, true);
            return new preloginResponse_PreloginResponse(r);
        });
    }
    postEmailToken(request) {
        return this.send('POST', '/accounts/email-token', request, true, false);
    }
    postEmail(request) {
        return this.send('POST', '/accounts/email', request, true, false);
    }
    postPassword(request) {
        return this.send('POST', '/accounts/password', request, true, false);
    }
    setPassword(request) {
        return this.send('POST', '/accounts/set-password', request, true, false);
    }
    postSetKeyConnectorKey(request) {
        return this.send('POST', '/accounts/set-key-connector-key', request, true, false);
    }
    postSecurityStamp(request) {
        return this.send('POST', '/accounts/security-stamp', request, true, false);
    }
    deleteAccount(request) {
        return this.send('DELETE', '/accounts', request, true, false);
    }
    getAccountRevisionDate() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/revision-date', null, true, true);
            return r;
        });
    }
    postPasswordHint(request) {
        return this.send('POST', '/accounts/password-hint', request, false, false);
    }
    postRegister(request) {
        return this.send('POST', '/accounts/register', request, false, false);
    }
    postPremium(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/premium', data, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postIapCheck(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('POST', '/accounts/iap-check', request, true, false);
        });
    }
    postReinstatePremium() {
        return this.send('POST', '/accounts/reinstate-premium', null, true, false);
    }
    postCancelPremium() {
        return this.send('POST', '/accounts/cancel-premium', null, true, false);
    }
    postAccountStorage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/storage', request, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postAccountPayment(request) {
        return this.send('POST', '/accounts/payment', request, true, false);
    }
    postAccountLicense(data) {
        return this.send('POST', '/accounts/license', data, true, false);
    }
    postAccountKeys(request) {
        return this.send('POST', '/accounts/keys', request, true, false);
    }
    postAccountKey(request) {
        return this.send('POST', '/accounts/key', request, true, false);
    }
    postAccountVerifyEmail() {
        return this.send('POST', '/accounts/verify-email', null, true, false);
    }
    postAccountVerifyEmailToken(request) {
        return this.send('POST', '/accounts/verify-email-token', request, false, false);
    }
    postAccountVerifyPassword(request) {
        return this.send('POST', '/accounts/verify-password', request, true, false);
    }
    postAccountRecoverDelete(request) {
        return this.send('POST', '/accounts/delete-recover', request, false, false);
    }
    postAccountRecoverDeleteToken(request) {
        return this.send('POST', '/accounts/delete-recover-token', request, false, false);
    }
    postAccountKdf(request) {
        return this.send('POST', '/accounts/kdf', request, true, false);
    }
    deleteSsoUser(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('DELETE', '/accounts/sso/' + organizationId, null, true, false);
        });
    }
    getSsoUserIdentifier() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('GET', '/accounts/sso/user-identifier', null, true, true);
        });
    }
    postUserApiKey(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/api-key', request, true, true);
            return new apiKeyResponse_ApiKeyResponse(r);
        });
    }
    postUserRotateApiKey(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/rotate-api-key', request, true, true);
            return new apiKeyResponse_ApiKeyResponse(r);
        });
    }
    putUpdateTempPassword(request) {
        return this.send('PUT', '/accounts/update-temp-password', request, true, false);
    }
    postAccountRequestOTP() {
        return this.send('POST', '/accounts/request-otp', null, true, false);
    }
    postAccountVerifyOTP(request) {
        return this.send('POST', '/accounts/verify-otp', request, true, false);
    }
    postConvertToKeyConnector() {
        return this.send('POST', '/accounts/convert-to-key-connector', null, true, false);
    }
    // Folder APIs
    getFolder(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/folders/' + id, null, true, true);
            return new folderResponse_FolderResponse(r);
        });
    }
    postFolder(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/folders', request, true, true);
            return new folderResponse_FolderResponse(r);
        });
    }
    putFolder(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/folders/' + id, request, true, true);
            return new folderResponse_FolderResponse(r);
        });
    }
    deleteFolder(id) {
        return this.send('DELETE', '/folders/' + id, null, true, false);
    }
    // Send APIs
    getSend(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/sends/' + id, null, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    postSendAccess(id, request, apiUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const addSendIdHeader = (headers) => {
                headers.set('Send-Id', id);
            };
            const r = yield this.send('POST', '/sends/access/' + id, request, false, true, apiUrl, addSendIdHeader);
            return new sendAccessResponse_SendAccessResponse(r);
        });
    }
    getSendFileDownloadData(send, request, apiUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const addSendIdHeader = (headers) => {
                headers.set('Send-Id', send.id);
            };
            const r = yield this.send('POST', '/sends/' + send.id + '/access/file/' + send.file.id, request, false, true, apiUrl, addSendIdHeader);
            return new sendFileDownloadDataResponse_SendFileDownloadDataResponse(r);
        });
    }
    getSends() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/sends', null, true, true);
            return new listResponse_ListResponse(r, sendResponse_SendResponse);
        });
    }
    postSend(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/sends', request, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    postFileTypeSend(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/sends/file/v2', request, true, true);
            return new sendFileUploadDataResponse_SendFileUploadDataResponse(r);
        });
    }
    renewSendFileUploadUrl(sendId, fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/sends/' + sendId + '/file/' + fileId, null, true, true);
            return new sendFileUploadDataResponse_SendFileUploadDataResponse(r);
        });
    }
    postSendFile(sendId, fileId, data) {
        return this.send('POST', '/sends/' + sendId + '/file/' + fileId, data, true, false);
    }
    /**
     * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.
     * This method still exists for backward compatibility with old server versions.
     */
    postSendFileLegacy(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/sends/file', data, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    putSend(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/sends/' + id, request, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    putSendRemovePassword(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/sends/' + id + '/remove-password', null, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    deleteSend(id) {
        return this.send('DELETE', '/sends/' + id, null, true, false);
    }
    // Cipher APIs
    getCipher(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/ciphers/' + id, null, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    getCipherAdmin(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/ciphers/' + id + '/admin', null, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    getCiphersOrganization(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/ciphers/organization-details?organizationId=' + organizationId, null, true, true);
            return new listResponse_ListResponse(r, cipherResponse_CipherResponse);
        });
    }
    postCipher(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    postCipherCreate(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/create', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    postCipherAdmin(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/admin', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    putCipher(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/' + id, request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    putCipherAdmin(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/' + id + '/admin', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    deleteCipher(id) {
        return this.send('DELETE', '/ciphers/' + id, null, true, false);
    }
    deleteCipherAdmin(id) {
        return this.send('DELETE', '/ciphers/' + id + '/admin', null, true, false);
    }
    deleteManyCiphers(request) {
        return this.send('DELETE', '/ciphers', request, true, false);
    }
    deleteManyCiphersAdmin(request) {
        return this.send('DELETE', '/ciphers/admin', request, true, false);
    }
    putMoveCiphers(request) {
        return this.send('PUT', '/ciphers/move', request, true, false);
    }
    putShareCipher(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/' + id + '/share', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    putShareCiphers(request) {
        return this.send('PUT', '/ciphers/share', request, true, false);
    }
    putCipherCollections(id, request) {
        return this.send('PUT', '/ciphers/' + id + '/collections', request, true, false);
    }
    putCipherCollectionsAdmin(id, request) {
        return this.send('PUT', '/ciphers/' + id + '/collections-admin', request, true, false);
    }
    postPurgeCiphers(request, organizationId = null) {
        let path = '/ciphers/purge';
        if (organizationId != null) {
            path += '?organizationId=' + organizationId;
        }
        return this.send('POST', path, request, true, false);
    }
    postImportCiphers(request) {
        return this.send('POST', '/ciphers/import', request, true, false);
    }
    postImportOrganizationCiphers(organizationId, request) {
        return this.send('POST', '/ciphers/import-organization?organizationId=' + organizationId, request, true, false);
    }
    putDeleteCipher(id) {
        return this.send('PUT', '/ciphers/' + id + '/delete', null, true, false);
    }
    putDeleteCipherAdmin(id) {
        return this.send('PUT', '/ciphers/' + id + '/delete-admin', null, true, false);
    }
    putDeleteManyCiphers(request) {
        return this.send('PUT', '/ciphers/delete', request, true, false);
    }
    putDeleteManyCiphersAdmin(request) {
        return this.send('PUT', '/ciphers/delete-admin', request, true, false);
    }
    putRestoreCipher(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/' + id + '/restore', null, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    putRestoreCipherAdmin(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/' + id + '/restore-admin', null, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    putRestoreManyCiphers(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/restore', request, true, true);
            return new listResponse_ListResponse(r, cipherResponse_CipherResponse);
        });
    }
    // Attachments APIs
    getAttachmentData(cipherId, attachmentId, emergencyAccessId) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = (emergencyAccessId != null ?
                '/emergency-access/' + emergencyAccessId + '/' :
                '/ciphers/') + cipherId + '/attachment/' + attachmentId;
            const r = yield this.send('GET', path, null, true, true);
            return new attachmentResponse_AttachmentResponse(r);
        });
    }
    postCipherAttachment(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/' + id + '/attachment/v2', request, true, true);
            return new attachmentUploadDataResponse_AttachmentUploadDataResponse(r);
        });
    }
    /**
     * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.
     * This method still exists for backward compatibility with old server versions.
     */
    postCipherAttachmentLegacy(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/' + id + '/attachment', data, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    /**
     * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.
     * This method still exists for backward compatibility with old server versions.
     */
    postCipherAttachmentAdminLegacy(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/' + id + '/attachment-admin', data, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    deleteCipherAttachment(id, attachmentId) {
        return this.send('DELETE', '/ciphers/' + id + '/attachment/' + attachmentId, null, true, false);
    }
    deleteCipherAttachmentAdmin(id, attachmentId) {
        return this.send('DELETE', '/ciphers/' + id + '/attachment/' + attachmentId + '/admin', null, true, false);
    }
    postShareCipherAttachment(id, attachmentId, data, organizationId) {
        return this.send('POST', '/ciphers/' + id + '/attachment/' +
            attachmentId + '/share?organizationId=' + organizationId, data, true, false);
    }
    renewAttachmentUploadUrl(id, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/ciphers/' + id + '/attachment/' + attachmentId + '/renew', null, true, true);
            return new attachmentUploadDataResponse_AttachmentUploadDataResponse(r);
        });
    }
    postAttachmentFile(id, attachmentId, data) {
        return this.send('POST', '/ciphers/' + id + '/attachment/' + attachmentId, data, true, false);
    }
    // Collections APIs
    getCollectionDetails(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/collections/' + id + '/details', null, true, true);
            return new collectionResponse_CollectionGroupDetailsResponse(r);
        });
    }
    getUserCollections() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/collections', null, true, true);
            return new listResponse_ListResponse(r, collectionResponse_CollectionResponse);
        });
    }
    getCollections(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/collections', null, true, true);
            return new listResponse_ListResponse(r, collectionResponse_CollectionResponse);
        });
    }
    getCollectionUsers(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/collections/' + id + '/users', null, true, true);
            return r.map((dr) => new selectionReadOnlyResponse_SelectionReadOnlyResponse(dr));
        });
    }
    postCollection(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/collections', request, true, true);
            return new collectionResponse_CollectionResponse(r);
        });
    }
    putCollection(organizationId, id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/collections/' + id, request, true, true);
            return new collectionResponse_CollectionResponse(r);
        });
    }
    putCollectionUsers(organizationId, id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.send('PUT', '/organizations/' + organizationId + '/collections/' + id + '/users', request, true, false);
        });
    }
    deleteCollection(organizationId, id) {
        return this.send('DELETE', '/organizations/' + organizationId + '/collections/' + id, null, true, false);
    }
    deleteCollectionUser(organizationId, id, organizationUserId) {
        return this.send('DELETE', '/organizations/' + organizationId + '/collections/' + id + '/user/' + organizationUserId, null, true, false);
    }
    // Groups APIs
    getGroupDetails(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/groups/' + id + '/details', null, true, true);
            return new groupResponse_GroupDetailsResponse(r);
        });
    }
    getGroups(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/groups', null, true, true);
            return new listResponse_ListResponse(r, groupResponse_GroupResponse);
        });
    }
    getGroupUsers(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/groups/' + id + '/users', null, true, true);
            return r;
        });
    }
    postGroup(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/groups', request, true, true);
            return new groupResponse_GroupResponse(r);
        });
    }
    putGroup(organizationId, id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/groups/' + id, request, true, true);
            return new groupResponse_GroupResponse(r);
        });
    }
    putGroupUsers(organizationId, id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.send('PUT', '/organizations/' + organizationId + '/groups/' + id + '/users', request, true, false);
        });
    }
    deleteGroup(organizationId, id) {
        return this.send('DELETE', '/organizations/' + organizationId + '/groups/' + id, null, true, false);
    }
    deleteGroupUser(organizationId, id, organizationUserId) {
        return this.send('DELETE', '/organizations/' + organizationId + '/groups/' + id + '/user/' + organizationUserId, null, true, false);
    }
    // Policy APIs
    getPolicy(organizationId, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/policies/' + type, null, true, true);
            return new policyResponse_PolicyResponse(r);
        });
    }
    getPolicies(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/policies', null, true, true);
            return new listResponse_ListResponse(r, policyResponse_PolicyResponse);
        });
    }
    getPoliciesByToken(organizationId, token, email, organizationUserId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/policies/token?' +
                'token=' + encodeURIComponent(token) + '&email=' + encodeURIComponent(email) +
                '&organizationUserId=' + organizationUserId, null, false, true);
            return new listResponse_ListResponse(r, policyResponse_PolicyResponse);
        });
    }
    putPolicy(organizationId, type, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/policies/' + type, request, true, true);
            return new policyResponse_PolicyResponse(r);
        });
    }
    // Organization User APIs
    getOrganizationUser(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/users/' + id, null, true, true);
            return new organizationUserResponse_OrganizationUserDetailsResponse(r);
        });
    }
    getOrganizationUserGroups(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/users/' + id + '/groups', null, true, true);
            return r;
        });
    }
    getOrganizationUsers(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/users', null, true, true);
            return new listResponse_ListResponse(r, OrganizationUserUserDetailsResponse);
        });
    }
    getOrganizationUserResetPasswordDetails(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/users/' + id +
                '/reset-password-details', null, true, true);
            return new organizationUserResponse_OrganizationUserResetPasswordDetailsReponse(r);
        });
    }
    getOrganizationAutoEnrollStatus(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + identifier + '/auto-enroll-status', null, true, true);
            return new organizationAutoEnrollStatusResponse_OrganizationAutoEnrollStatusResponse(r);
        });
    }
    postOrganizationUserInvite(organizationId, request) {
        return this.send('POST', '/organizations/' + organizationId + '/users/invite', request, true, false);
    }
    postOrganizationUserReinvite(organizationId, id) {
        return this.send('POST', '/organizations/' + organizationId + '/users/' + id + '/reinvite', null, true, false);
    }
    postManyOrganizationUserReinvite(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/users/reinvite', request, true, true);
            return new listResponse_ListResponse(r, organizationUserBulkResponse_OrganizationUserBulkResponse);
        });
    }
    postOrganizationUserAccept(organizationId, id, request) {
        return this.send('POST', '/organizations/' + organizationId + '/users/' + id + '/accept', request, true, false);
    }
    postOrganizationUserConfirm(organizationId, id, request) {
        return this.send('POST', '/organizations/' + organizationId + '/users/' + id + '/confirm', request, true, false);
    }
    postOrganizationUsersPublicKey(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/users/public-keys', request, true, true);
            return new listResponse_ListResponse(r, organizationUserBulkPublicKeyResponse_OrganizationUserBulkPublicKeyResponse);
        });
    }
    postOrganizationUserBulkConfirm(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/users/confirm', request, true, true);
            return new listResponse_ListResponse(r, organizationUserBulkResponse_OrganizationUserBulkResponse);
        });
    }
    putOrganizationUser(organizationId, id, request) {
        return this.send('PUT', '/organizations/' + organizationId + '/users/' + id, request, true, false);
    }
    putOrganizationUserGroups(organizationId, id, request) {
        return this.send('PUT', '/organizations/' + organizationId + '/users/' + id + '/groups', request, true, false);
    }
    putOrganizationUserResetPasswordEnrollment(organizationId, userId, request) {
        return this.send('PUT', '/organizations/' + organizationId + '/users/' + userId + '/reset-password-enrollment', request, true, false);
    }
    putOrganizationUserResetPassword(organizationId, id, request) {
        return this.send('PUT', '/organizations/' + organizationId + '/users/' + id + '/reset-password', request, true, false);
    }
    deleteOrganizationUser(organizationId, id) {
        return this.send('DELETE', '/organizations/' + organizationId + '/users/' + id, null, true, false);
    }
    deleteManyOrganizationUsers(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('DELETE', '/organizations/' + organizationId + '/users', request, true, true);
            return new listResponse_ListResponse(r, organizationUserBulkResponse_OrganizationUserBulkResponse);
        });
    }
    // Plan APIs
    getPlans() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/plans/', null, true, true);
            return new listResponse_ListResponse(r, planResponse_PlanResponse);
        });
    }
    postImportDirectory(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('POST', '/organizations/' + organizationId + '/import', request, true, false);
        });
    }
    postPublicImportDirectory(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('POST', '/public/organization/import', request, true, false);
        });
    }
    getTaxRates() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/plans/sales-tax-rates/', null, true, true);
            return new listResponse_ListResponse(r, taxRateResponse_TaxRateResponse);
        });
    }
    // Settings APIs
    getSettingsDomains() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/settings/domains', null, true, true);
            return new domainsResponse_DomainsResponse(r);
        });
    }
    putSettingsDomains(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/settings/domains', request, true, true);
            return new domainsResponse_DomainsResponse(r);
        });
    }
    // Sync APIs
    getSync() {
        return __awaiter(this, void 0, void 0, function* () {
            const path = this.isDesktopClient || this.isWebClient ? '/sync?excludeDomains=true' : '/sync';
            const r = yield this.send('GET', path, null, true, true);
            return new syncResponse_SyncResponse(r);
        });
    }
    // Two-factor APIs
    getTwoFactorProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/two-factor', null, true, true);
            return new listResponse_ListResponse(r, twoFactorProviderResponse_TwoFactorProviderResponse);
        });
    }
    getTwoFactorOrganizationProviders(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/two-factor', null, true, true);
            return new listResponse_ListResponse(r, twoFactorProviderResponse_TwoFactorProviderResponse);
        });
    }
    getTwoFactorAuthenticator(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-authenticator', request, true, true);
            return new twoFactorAuthenticatorResponse_TwoFactorAuthenticatorResponse(r);
        });
    }
    getTwoFactorEmail(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-email', request, true, true);
            return new twoFactorEmailResponse_TwoFactorEmailResponse(r);
        });
    }
    getTwoFactorDuo(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-duo', request, true, true);
            return new twoFactorDuoResponse_TwoFactorDuoResponse(r);
        });
    }
    getTwoFactorOrganizationDuo(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/two-factor/get-duo', request, true, true);
            return new twoFactorDuoResponse_TwoFactorDuoResponse(r);
        });
    }
    getTwoFactorYubiKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-yubikey', request, true, true);
            return new twoFactorYubiKeyResponse_TwoFactorYubiKeyResponse(r);
        });
    }
    getTwoFactorWebAuthn(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-webauthn', request, true, true);
            return new twoFactorWebAuthnResponse_TwoFactorWebAuthnResponse(r);
        });
    }
    getTwoFactorWebAuthnChallenge(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-webauthn-challenge', request, true, true);
            return new twoFactorWebAuthnResponse_ChallengeResponse(r);
        });
    }
    getTwoFactorRecover(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-recover', request, true, true);
            return new twoFactorRescoverResponse_TwoFactorRecoverResponse(r);
        });
    }
    putTwoFactorAuthenticator(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/authenticator', request, true, true);
            return new twoFactorAuthenticatorResponse_TwoFactorAuthenticatorResponse(r);
        });
    }
    putTwoFactorEmail(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/email', request, true, true);
            return new twoFactorEmailResponse_TwoFactorEmailResponse(r);
        });
    }
    putTwoFactorDuo(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/duo', request, true, true);
            return new twoFactorDuoResponse_TwoFactorDuoResponse(r);
        });
    }
    putTwoFactorOrganizationDuo(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/two-factor/duo', request, true, true);
            return new twoFactorDuoResponse_TwoFactorDuoResponse(r);
        });
    }
    putTwoFactorYubiKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/yubikey', request, true, true);
            return new twoFactorYubiKeyResponse_TwoFactorYubiKeyResponse(r);
        });
    }
    putTwoFactorWebAuthn(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = request.deviceResponse.response;
            const data = Object.assign({}, request);
            data.deviceResponse = {
                id: request.deviceResponse.id,
                rawId: btoa(request.deviceResponse.id),
                type: request.deviceResponse.type,
                extensions: request.deviceResponse.getClientExtensionResults(),
                response: {
                    AttestationObject: utils["a" /* Utils */].fromBufferToB64(response.attestationObject),
                    clientDataJson: utils["a" /* Utils */].fromBufferToB64(response.clientDataJSON),
                },
            };
            const r = yield this.send('PUT', '/two-factor/webauthn', data, true, true);
            return new twoFactorWebAuthnResponse_TwoFactorWebAuthnResponse(r);
        });
    }
    deleteTwoFactorWebAuthn(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('DELETE', '/two-factor/webauthn', request, true, true);
            return new twoFactorWebAuthnResponse_TwoFactorWebAuthnResponse(r);
        });
    }
    putTwoFactorDisable(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/disable', request, true, true);
            return new twoFactorProviderResponse_TwoFactorProviderResponse(r);
        });
    }
    putTwoFactorOrganizationDisable(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/two-factor/disable', request, true, true);
            return new twoFactorProviderResponse_TwoFactorProviderResponse(r);
        });
    }
    postTwoFactorRecover(request) {
        return this.send('POST', '/two-factor/recover', request, false, false);
    }
    postTwoFactorEmailSetup(request) {
        return this.send('POST', '/two-factor/send-email', request, true, false);
    }
    postTwoFactorEmail(request) {
        return this.send('POST', '/two-factor/send-email-login', request, false, false);
    }
    // Emergency Access APIs
    getEmergencyAccessTrusted() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/emergency-access/trusted', null, true, true);
            return new listResponse_ListResponse(r, emergencyAccessResponse_EmergencyAccessGranteeDetailsResponse);
        });
    }
    getEmergencyAccessGranted() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/emergency-access/granted', null, true, true);
            return new listResponse_ListResponse(r, emergencyAccessResponse_EmergencyAccessGrantorDetailsResponse);
        });
    }
    getEmergencyAccess(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/emergency-access/' + id, null, true, true);
            return new emergencyAccessResponse_EmergencyAccessGranteeDetailsResponse(r);
        });
    }
    getEmergencyGrantorPolicies(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/emergency-access/' + id + '/policies', null, true, true);
            return new listResponse_ListResponse(r, policyResponse_PolicyResponse);
        });
    }
    putEmergencyAccess(id, request) {
        return this.send('PUT', '/emergency-access/' + id, request, true, false);
    }
    deleteEmergencyAccess(id) {
        return this.send('DELETE', '/emergency-access/' + id, null, true, false);
    }
    postEmergencyAccessInvite(request) {
        return this.send('POST', '/emergency-access/invite', request, true, false);
    }
    postEmergencyAccessReinvite(id) {
        return this.send('POST', '/emergency-access/' + id + '/reinvite', null, true, false);
    }
    postEmergencyAccessAccept(id, request) {
        return this.send('POST', '/emergency-access/' + id + '/accept', request, true, false);
    }
    postEmergencyAccessConfirm(id, request) {
        return this.send('POST', '/emergency-access/' + id + '/confirm', request, true, false);
    }
    postEmergencyAccessInitiate(id) {
        return this.send('POST', '/emergency-access/' + id + '/initiate', null, true, false);
    }
    postEmergencyAccessApprove(id) {
        return this.send('POST', '/emergency-access/' + id + '/approve', null, true, false);
    }
    postEmergencyAccessReject(id) {
        return this.send('POST', '/emergency-access/' + id + '/reject', null, true, false);
    }
    postEmergencyAccessTakeover(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/emergency-access/' + id + '/takeover', null, true, true);
            return new emergencyAccessResponse_EmergencyAccessTakeoverResponse(r);
        });
    }
    postEmergencyAccessPassword(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/emergency-access/' + id + '/password', request, true, true);
        });
    }
    postEmergencyAccessView(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/emergency-access/' + id + '/view', null, true, true);
            return new emergencyAccessResponse_EmergencyAccessViewResponse(r);
        });
    }
    // Organization APIs
    getOrganization(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id, null, true, true);
            return new organizationResponse_OrganizationResponse(r);
        });
    }
    getOrganizationBilling(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id + '/billing', null, true, true);
            return new billingResponse_BillingResponse(r);
        });
    }
    getOrganizationSubscription(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id + '/subscription', null, true, true);
            return new organizationSubscriptionResponse_OrganizationSubscriptionResponse(r);
        });
    }
    getOrganizationLicense(id, installationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('GET', '/organizations/' + id + '/license?installationId=' + installationId, null, true, true);
        });
    }
    getOrganizationTaxInfo(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id + '/tax', null, true, true);
            return new taxInfoResponse_TaxInfoResponse(r);
        });
    }
    getOrganizationSso(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id + '/sso', null, true, true);
            return new organizationSsoResponse_OrganizationSsoResponse(r);
        });
    }
    postOrganization(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations', request, true, true);
            return new organizationResponse_OrganizationResponse(r);
        });
    }
    putOrganization(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + id, request, true, true);
            return new organizationResponse_OrganizationResponse(r);
        });
    }
    putOrganizationTaxInfo(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('PUT', '/organizations/' + id + '/tax', request, true, false);
        });
    }
    postLeaveOrganization(id) {
        return this.send('POST', '/organizations/' + id + '/leave', null, true, false);
    }
    postOrganizationLicense(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/license', data, true, true);
            return new organizationResponse_OrganizationResponse(r);
        });
    }
    postOrganizationLicenseUpdate(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('POST', '/organizations/' + id + '/license', data, true, false);
        });
    }
    postOrganizationApiKey(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/api-key', request, true, true);
            return new apiKeyResponse_ApiKeyResponse(r);
        });
    }
    postOrganizationRotateApiKey(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/rotate-api-key', request, true, true);
            return new apiKeyResponse_ApiKeyResponse(r);
        });
    }
    postOrganizationSso(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/sso', request, true, true);
            return new organizationSsoResponse_OrganizationSsoResponse(r);
        });
    }
    postOrganizationUpgrade(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/upgrade', request, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postOrganizationUpdateSubscription(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('POST', '/organizations/' + id + '/subscription', request, true, false);
        });
    }
    postOrganizationSeat(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/seat', request, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postOrganizationStorage(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/storage', request, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postOrganizationPayment(id, request) {
        return this.send('POST', '/organizations/' + id + '/payment', request, true, false);
    }
    postOrganizationVerifyBank(id, request) {
        return this.send('POST', '/organizations/' + id + '/verify-bank', request, true, false);
    }
    postOrganizationCancel(id) {
        return this.send('POST', '/organizations/' + id + '/cancel', null, true, false);
    }
    postOrganizationReinstate(id) {
        return this.send('POST', '/organizations/' + id + '/reinstate', null, true, false);
    }
    deleteOrganization(id, request) {
        return this.send('DELETE', '/organizations/' + id, request, true, false);
    }
    getOrganizationKeys(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id + '/keys', null, true, true);
            return new organizationKeysResponse_OrganizationKeysResponse(r);
        });
    }
    postOrganizationKeys(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/keys', request, true, true);
            return new organizationKeysResponse_OrganizationKeysResponse(r);
        });
    }
    // Provider APIs
    postProviderSetup(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/providers/' + id + '/setup', request, true, true);
            return new providerResponse_ProviderResponse(r);
        });
    }
    getProvider(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/providers/' + id, null, true, true);
            return new providerResponse_ProviderResponse(r);
        });
    }
    putProvider(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/providers/' + id, request, true, true);
            return new providerResponse_ProviderResponse(r);
        });
    }
    // Provider User APIs
    getProviderUsers(providerId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/providers/' + providerId + '/users', null, true, true);
            return new listResponse_ListResponse(r, ProviderUserUserDetailsResponse);
        });
    }
    getProviderUser(providerId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/providers/' + providerId + '/users/' + id, null, true, true);
            return new providerUserResponse_ProviderUserResponse(r);
        });
    }
    postProviderUserInvite(providerId, request) {
        return this.send('POST', '/providers/' + providerId + '/users/invite', request, true, false);
    }
    postProviderUserReinvite(providerId, id) {
        return this.send('POST', '/providers/' + providerId + '/users/' + id + '/reinvite', null, true, false);
    }
    postManyProviderUserReinvite(providerId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/providers/' + providerId + '/users/reinvite', request, true, true);
            return new listResponse_ListResponse(r, providerUserBulkResponse_ProviderUserBulkResponse);
        });
    }
    postProviderUserBulkConfirm(providerId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/providers/' + providerId + '/users/confirm', request, true, true);
            return new listResponse_ListResponse(r, providerUserBulkResponse_ProviderUserBulkResponse);
        });
    }
    deleteManyProviderUsers(providerId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('DELETE', '/providers/' + providerId + '/users', request, true, true);
            return new listResponse_ListResponse(r, providerUserBulkResponse_ProviderUserBulkResponse);
        });
    }
    postProviderUserAccept(providerId, id, request) {
        return this.send('POST', '/providers/' + providerId + '/users/' + id + '/accept', request, true, false);
    }
    postProviderUserConfirm(providerId, id, request) {
        return this.send('POST', '/providers/' + providerId + '/users/' + id + '/confirm', request, true, false);
    }
    postProviderUsersPublicKey(providerId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/providers/' + providerId + '/users/public-keys', request, true, true);
            return new listResponse_ListResponse(r, providerUserBulkPublicKeyResponse_ProviderUserBulkPublicKeyResponse);
        });
    }
    putProviderUser(providerId, id, request) {
        return this.send('PUT', '/providers/' + providerId + '/users/' + id, request, true, false);
    }
    deleteProviderUser(providerId, id) {
        return this.send('DELETE', '/providers/' + providerId + '/users/' + id, null, true, false);
    }
    // Provider Organization APIs
    getProviderClients(providerId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/providers/' + providerId + '/organizations', null, true, true);
            return new listResponse_ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);
        });
    }
    postProviderAddOrganization(providerId, request) {
        return this.send('POST', '/providers/' + providerId + '/organizations/add', request, true, false);
    }
    postProviderCreateOrganization(providerId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/providers/' + providerId + '/organizations', request, true, true);
            return new providerOrganizationResponse_ProviderOrganizationResponse(r);
        });
    }
    deleteProviderOrganization(providerId, id) {
        return this.send('DELETE', '/providers/' + providerId + '/organizations/' + id, null, true, false);
    }
    // Event APIs
    getEvents(start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    getEventsCipher(id, start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/ciphers/' + id + '/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    getEventsOrganization(id, start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/organizations/' + id + '/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    getEventsOrganizationUser(organizationId, id, start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/organizations/' + organizationId + '/users/' + id + '/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    getEventsProvider(id, start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/providers/' + id + '/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    getEventsProviderUser(providerId, id, start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/providers/' + providerId + '/users/' + id + '/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    postEventsCollect(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const authHeader = yield this.getActiveBearerToken();
            const headers = new Headers({
                'Device-Type': this.deviceType,
                'Authorization': 'Bearer ' + authHeader,
                'Content-Type': 'application/json; charset=utf-8',
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const response = yield this.fetch(new Request(this.environmentService.getEventsUrl() + '/collect', {
                cache: 'no-store',
                credentials: this.getCredentials(),
                method: 'POST',
                body: JSON.stringify(request),
                headers: headers,
            }));
            if (response.status !== 200) {
                return Promise.reject('Event post failed.');
            }
        });
    }
    // User APIs
    getUserPublicKey(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/users/' + id + '/public-key', null, true, true);
            return new userKeyResponse_UserKeyResponse(r);
        });
    }
    // HIBP APIs
    getHibpBreach(username) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/hibp/breach?username=' + username, null, true, true);
            return r.map((a) => new breachAccountResponse_BreachAccountResponse(a));
        });
    }
    // Misc
    postBitPayInvoice(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/bitpay-invoice', request, true, true);
            return r;
        });
    }
    postSetupPayment() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/setup-payment', null, true, true);
            return r;
        });
    }
    // Key Connector
    getUserKeyFromKeyConnector(keyConnectorUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const authHeader = yield this.getActiveBearerToken();
            const response = yield this.fetch(new Request(keyConnectorUrl + '/user-keys', {
                cache: 'no-store',
                method: 'GET',
                headers: new Headers({
                    'Accept': 'application/json',
                    'Authorization': 'Bearer ' + authHeader,
                }),
            }));
            if (response.status !== 200) {
                const error = yield this.handleError(response, false, true);
                return Promise.reject(error);
            }
            return new keyConnectorUserKeyResponse_KeyConnectorUserKeyResponse(yield response.json());
        });
    }
    postUserKeyToKeyConnector(keyConnectorUrl, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const authHeader = yield this.getActiveBearerToken();
            const response = yield this.fetch(new Request(keyConnectorUrl + '/user-keys', {
                cache: 'no-store',
                method: 'POST',
                headers: new Headers({
                    'Accept': 'application/json',
                    'Authorization': 'Bearer ' + authHeader,
                    'Content-Type': 'application/json; charset=utf-8',
                }),
                body: JSON.stringify(request),
            }));
            if (response.status !== 200) {
                const error = yield this.handleError(response, false, true);
                return Promise.reject(error);
            }
        });
    }
    getKeyConnectorAlive(keyConnectorUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.fetch(new Request(keyConnectorUrl + '/alive', {
                cache: 'no-store',
                method: 'GET',
                headers: new Headers({
                    'Accept': 'application/json',
                    'Content-Type': 'application/json; charset=utf-8',
                }),
            }));
            if (response.status !== 200) {
                const error = yield this.handleError(response, false, true);
                return Promise.reject(error);
            }
        });
    }
    // Helpers
    getActiveBearerToken() {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield this.tokenService.getToken();
            if (this.tokenService.tokenNeedsRefresh()) {
                yield this.doAuthRefresh();
                accessToken = yield this.tokenService.getToken();
            }
            return accessToken;
        });
    }
    fetch(request) {
        if (request.method === 'GET') {
            request.headers.set('Cache-Control', 'no-store');
            request.headers.set('Pragma', 'no-cache');
        }
        return this.nativeFetch(request);
    }
    nativeFetch(request) {
        return fetch(request);
    }
    preValidateSso(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            if (identifier == null || identifier === '') {
                throw new Error('Organization Identifier was not provided.');
            }
            const headers = new Headers({
                'Accept': 'application/json',
                'Device-Type': this.deviceType,
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const path = `/account/prevalidate?domainHint=${encodeURIComponent(identifier)}`;
            const response = yield this.fetch(new Request(this.environmentService.getIdentityUrl() + path, {
                cache: 'no-store',
                credentials: this.getCredentials(),
                headers: headers,
                method: 'GET',
            }));
            if (response.status === 200) {
                return true;
            }
            else {
                const error = yield this.handleError(response, false, true);
                return Promise.reject(error);
            }
        });
    }
    postCreateSponsorship(sponsoredOrgId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.send('POST', '/organization/sponsorship/' + sponsoredOrgId + '/families-for-enterprise', request, true, false);
        });
    }
    deleteRevokeSponsorship(sponsoringOrganizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.send('DELETE', '/organization/sponsorship/' + sponsoringOrganizationId, null, true, false);
        });
    }
    deleteRemoveSponsorship(sponsoringOrgId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.send('DELETE', '/organization/sponsorship/sponsored/' + sponsoringOrgId, null, true, false);
        });
    }
    postRedeemSponsorship(sponsorshipToken, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.send('POST', '/organization/sponsorship/redeem?sponsorshipToken=' + encodeURIComponent(sponsorshipToken), request, true, false);
        });
    }
    postResendSponsorshipOffer(sponsoringOrgId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.send('POST', '/organization/sponsorship/' + sponsoringOrgId + '/families-for-enterprise/resend', null, true, false);
        });
    }
    doAuthRefresh() {
        return __awaiter(this, void 0, void 0, function* () {
            const refreshToken = yield this.tokenService.getRefreshToken();
            if (refreshToken != null && refreshToken !== '') {
                return this.doRefreshToken();
            }
            const clientId = yield this.tokenService.getClientId();
            const clientSecret = yield this.tokenService.getClientSecret();
            if (!utils["a" /* Utils */].isNullOrWhitespace(clientId) && !utils["a" /* Utils */].isNullOrWhitespace(clientSecret)) {
                return this.doApiTokenRefresh();
            }
            throw new Error('Cannot refresh token, no refresh token or api keys are stored');
        });
    }
    doApiTokenRefresh() {
        return __awaiter(this, void 0, void 0, function* () {
            const clientId = yield this.tokenService.getClientId();
            const clientSecret = yield this.tokenService.getClientSecret();
            if (utils["a" /* Utils */].isNullOrWhitespace(clientId) || utils["a" /* Utils */].isNullOrWhitespace(clientSecret) || this.apiKeyRefresh == null) {
                throw new Error();
            }
            yield this.apiKeyRefresh(clientId, clientSecret);
        });
    }
    doRefreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const refreshToken = yield this.tokenService.getRefreshToken();
            if (refreshToken == null || refreshToken === '') {
                throw new Error();
            }
            const headers = new Headers({
                'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
                'Accept': 'application/json',
                'Device-Type': this.deviceType,
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const decodedToken = this.tokenService.decodeToken();
            const response = yield this.fetch(new Request(this.environmentService.getIdentityUrl() + '/connect/token', {
                body: this.qsStringify({
                    grant_type: 'refresh_token',
                    client_id: decodedToken.client_id,
                    refresh_token: refreshToken,
                }),
                cache: 'no-store',
                credentials: this.getCredentials(),
                headers: headers,
                method: 'POST',
            }));
            if (response.status === 200) {
                const responseJson = yield response.json();
                const tokenResponse = new identityTokenResponse_IdentityTokenResponse(responseJson);
                yield this.tokenService.setTokens(tokenResponse.accessToken, tokenResponse.refreshToken, null);
            }
            else {
                const error = yield this.handleError(response, true, true);
                return Promise.reject(error);
            }
        });
    }
    send(method, path, body, authed, hasResponse, apiUrl, alterHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            apiUrl = utils["a" /* Utils */].isNullOrWhitespace(apiUrl) ? this.environmentService.getApiUrl() : apiUrl;
            const requestUrl = apiUrl + path;
            // Prevent directory traversal from malicious paths
            if (new URL(requestUrl).href !== requestUrl) {
                return Promise.reject('Invalid request url path.');
            }
            const headers = new Headers({
                'Device-Type': this.deviceType,
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const requestInit = {
                cache: 'no-store',
                credentials: this.getCredentials(),
                method: method,
            };
            if (authed) {
                const authHeader = yield this.getActiveBearerToken();
                headers.set('Authorization', 'Bearer ' + authHeader);
            }
            if (body != null) {
                if (typeof body === 'string') {
                    requestInit.body = body;
                    headers.set('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');
                }
                else if (typeof body === 'object') {
                    if (body instanceof FormData) {
                        requestInit.body = body;
                    }
                    else {
                        headers.set('Content-Type', 'application/json; charset=utf-8');
                        requestInit.body = JSON.stringify(body);
                    }
                }
            }
            if (hasResponse) {
                headers.set('Accept', 'application/json');
            }
            if (alterHeaders != null) {
                alterHeaders(headers);
            }
            requestInit.headers = headers;
            const response = yield this.fetch(new Request(requestUrl, requestInit));
            if (hasResponse && response.status === 200) {
                const responseJson = yield response.json();
                return responseJson;
            }
            else if (response.status !== 200) {
                const error = yield this.handleError(response, false, authed);
                return Promise.reject(error);
            }
        });
    }
    handleError(response, tokenError, authed) {
        return __awaiter(this, void 0, void 0, function* () {
            if (authed && ((tokenError && response.status === 400) || response.status === 401 || response.status === 403)) {
                yield this.logoutCallback(true);
                return null;
            }
            let responseJson = null;
            if (this.isJsonResponse(response)) {
                responseJson = yield response.json();
            }
            else if (this.isTextResponse(response)) {
                responseJson = { Message: yield response.text() };
            }
            return new errorResponse["a" /* ErrorResponse */](responseJson, response.status, tokenError);
        });
    }
    qsStringify(params) {
        return Object.keys(params).map(key => {
            return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
        }).join('&');
    }
    getCredentials() {
        if (!this.isWebClient || this.environmentService.hasBaseUrl()) {
            return 'include';
        }
        return undefined;
    }
    addEventParameters(base, start, end, token) {
        if (start != null) {
            base += ('?start=' + start);
        }
        if (end != null) {
            base += (base.indexOf('?') > -1 ? '&' : '?');
            base += ('end=' + end);
        }
        if (token != null) {
            base += (base.indexOf('?') > -1 ? '&' : '?');
            base += ('continuationToken=' + token);
        }
        return base;
    }
    isJsonResponse(response) {
        const typeHeader = response.headers.get('content-type');
        return typeHeader != null && typeHeader.indexOf('application/json') > -1;
    }
    isTextResponse(response) {
        const typeHeader = response.headers.get('content-type');
        return typeHeader != null && typeHeader.indexOf('text') > -1;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/appId.service.ts
var appId_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class appId_service_AppIdService {
    constructor(storageService) {
        this.storageService = storageService;
    }
    getAppId() {
        return this.makeAndGetAppId('appId');
    }
    getAnonymousAppId() {
        return this.makeAndGetAppId('anonymousAppId');
    }
    makeAndGetAppId(key) {
        return appId_service_awaiter(this, void 0, void 0, function* () {
            const existingId = yield this.storageService.get(key);
            if (existingId != null) {
                return existingId;
            }
            const guid = utils["a" /* Utils */].newGuid();
            yield this.storageService.save(key, guid);
            return guid;
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/misc/throttle.ts
/**
 * Use as a Decorator on async functions, it will limit how many times the function can be
 * in-flight at a time.
 *
 * Calls beyond the limit will be queued, and run when one of the active calls finishes
 */
function throttle(limit, throttleKey) {
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor.value;
        const allThrottles = new Map();
        const getThrottles = (obj) => {
            let throttles = allThrottles.get(obj);
            if (throttles != null) {
                return throttles;
            }
            throttles = new Map();
            allThrottles.set(obj, throttles);
            return throttles;
        };
        return {
            value: function (...args) {
                const throttles = getThrottles(this);
                const argsThrottleKey = throttleKey(args);
                let queue = throttles.get(argsThrottleKey);
                if (queue == null) {
                    queue = [];
                    throttles.set(argsThrottleKey, queue);
                }
                return new Promise((resolve, reject) => {
                    const exec = () => {
                        const onFinally = () => {
                            queue.splice(queue.indexOf(exec), 1);
                            if (queue.length >= limit) {
                                queue[limit - 1]();
                            }
                            else if (queue.length === 0) {
                                throttles.delete(argsThrottleKey);
                                if (throttles.size === 0) {
                                    allThrottles.delete(this);
                                }
                            }
                        };
                        originalMethod.apply(this, args).then((val) => {
                            onFinally();
                            return val;
                        }).catch((err) => {
                            onFinally();
                            throw err;
                        }).then(resolve, reject);
                    };
                    queue.push(exec);
                    if (queue.length <= limit) {
                        exec();
                    }
                });
            },
        };
    };
}

// CONCATENATED MODULE: ./jslib/common/src/services/audit.service.ts
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var audit_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const PwnedPasswordsApi = 'https://api.pwnedpasswords.com/range/';
class audit_service_AuditService {
    constructor(cryptoFunctionService, apiService) {
        this.cryptoFunctionService = cryptoFunctionService;
        this.apiService = apiService;
    }
    passwordLeaked(password) {
        return audit_service_awaiter(this, void 0, void 0, function* () {
            const hashBytes = yield this.cryptoFunctionService.hash(password, 'sha1');
            const hash = utils["a" /* Utils */].fromBufferToHex(hashBytes).toUpperCase();
            const hashStart = hash.substr(0, 5);
            const hashEnding = hash.substr(5);
            const response = yield this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));
            const leakedHashes = yield response.text();
            const match = leakedHashes.split(/\r?\n/).find(v => {
                return v.split(':')[0] === hashEnding;
            });
            return match != null ? parseInt(match.split(':')[1], 10) : 0;
        });
    }
    breachedAccounts(username) {
        return audit_service_awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.apiService.getHibpBreach(username);
            }
            catch (e) {
                const error = e;
                if (error.statusCode === 404) {
                    return [];
                }
                throw new Error();
            }
        });
    }
}
__decorate([
    throttle(100, () => 'passwordLeaked'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], audit_service_AuditService.prototype, "passwordLeaked", null);

// EXTERNAL MODULE: ./jslib/common/src/services/auth.service.ts + 5 modules
var auth_service = __webpack_require__(194);

// EXTERNAL MODULE: ./jslib/common/src/services/cipher.service.ts
var cipher_service = __webpack_require__(460);

// CONCATENATED MODULE: ./jslib/common/src/models/data/collectionData.ts
class CollectionData {
    constructor(response) {
        this.id = response.id;
        this.organizationId = response.organizationId;
        this.name = response.name;
        this.externalId = response.externalId;
        this.readOnly = response.readOnly;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/view/collectionView.ts

class collectionView_CollectionView {
    constructor(c) {
        this.id = null;
        this.organizationId = null;
        this.name = null;
        this.externalId = null;
        this.readOnly = null;
        this.hidePasswords = null;
        if (!c) {
            return;
        }
        this.id = c.id;
        this.organizationId = c.organizationId;
        this.externalId = c.externalId;
        if (c instanceof collection_Collection) {
            this.readOnly = c.readOnly;
            this.hidePasswords = c.hidePasswords;
        }
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/domain/domainBase.ts
var domainBase = __webpack_require__(32);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/collection.ts


class collection_Collection extends domainBase["a" /* default */] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            id: null,
            organizationId: null,
            name: null,
            externalId: null,
            readOnly: null,
            hidePasswords: null,
        }, alreadyEncrypted, ['id', 'organizationId', 'externalId', 'readOnly', 'hidePasswords']);
    }
    decrypt() {
        return this.decryptObj(new collectionView_CollectionView(this), {
            name: null,
        }, this.organizationId);
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/domain/treeNode.ts
class TreeNode {
    constructor(node, name, parent) {
        this.children = [];
        this.parent = parent;
        this.node = node;
        this.node.name = name;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/misc/serviceUtils.ts

class serviceUtils_ServiceUtils {
    static nestedTraverse(nodeTree, partIndex, parts, obj, parent, delimiter) {
        if (parts.length <= partIndex) {
            return;
        }
        const end = partIndex === parts.length - 1;
        const partName = parts[partIndex];
        for (let i = 0; i < nodeTree.length; i++) {
            if (nodeTree[i].node.name !== parts[partIndex]) {
                continue;
            }
            if (end && nodeTree[i].node.id !== obj.id) {
                // Another node with the same name.
                nodeTree.push(new TreeNode(obj, partName, parent));
                return;
            }
            serviceUtils_ServiceUtils.nestedTraverse(nodeTree[i].children, partIndex + 1, parts, obj, nodeTree[i].node, delimiter);
            return;
        }
        if (nodeTree.filter(n => n.node.name === partName).length === 0) {
            if (end) {
                nodeTree.push(new TreeNode(obj, partName, parent));
                return;
            }
            const newPartName = parts[partIndex] + delimiter + parts[partIndex + 1];
            serviceUtils_ServiceUtils.nestedTraverse(nodeTree, 0, [newPartName, ...parts.slice(partIndex + 2)], obj, parent, delimiter);
        }
    }
    static getTreeNodeObject(nodeTree, id) {
        for (let i = 0; i < nodeTree.length; i++) {
            if (nodeTree[i].node.id === id) {
                return nodeTree[i];
            }
            else if (nodeTree[i].children != null) {
                const node = serviceUtils_ServiceUtils.getTreeNodeObject(nodeTree[i].children, id);
                if (node !== null) {
                    return node;
                }
            }
        }
        return null;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/collection.service.ts
var collection_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





const Keys = {
    collectionsPrefix: 'collections_',
};
const NestingDelimiter = '/';
class collection_service_CollectionService {
    constructor(cryptoService, userService, storageService, i18nService) {
        this.cryptoService = cryptoService;
        this.userService = userService;
        this.storageService = storageService;
        this.i18nService = i18nService;
    }
    clearCache() {
        this.decryptedCollectionCache = null;
    }
    encrypt(model) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            if (model.organizationId == null) {
                throw new Error('Collection has no organization id.');
            }
            const key = yield this.cryptoService.getOrgKey(model.organizationId);
            if (key == null) {
                throw new Error('No key for this collection\'s organization.');
            }
            const collection = new collection_Collection();
            collection.id = model.id;
            collection.organizationId = model.organizationId;
            collection.readOnly = model.readOnly;
            collection.name = yield this.cryptoService.encrypt(model.name, key);
            return collection;
        });
    }
    decryptMany(collections) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            if (collections == null) {
                return [];
            }
            const decCollections = [];
            const promises = [];
            collections.forEach(collection => {
                promises.push(collection.decrypt().then(c => decCollections.push(c)));
            });
            yield Promise.all(promises);
            return decCollections.sort(utils["a" /* Utils */].getSortFunction(this.i18nService, 'name'));
        });
    }
    get(id) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const collections = yield this.storageService.get(Keys.collectionsPrefix + userId);
            if (collections == null || !collections.hasOwnProperty(id)) {
                return null;
            }
            return new collection_Collection(collections[id]);
        });
    }
    getAll() {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const collections = yield this.storageService.get(Keys.collectionsPrefix + userId);
            const response = [];
            for (const id in collections) {
                if (collections.hasOwnProperty(id)) {
                    response.push(new collection_Collection(collections[id]));
                }
            }
            return response;
        });
    }
    getAllDecrypted() {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            if (this.decryptedCollectionCache != null) {
                return this.decryptedCollectionCache;
            }
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                throw new Error('No key.');
            }
            const collections = yield this.getAll();
            this.decryptedCollectionCache = yield this.decryptMany(collections);
            return this.decryptedCollectionCache;
        });
    }
    getAllNested(collections = null) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            if (collections == null) {
                collections = yield this.getAllDecrypted();
            }
            const nodes = [];
            collections.forEach(c => {
                const collectionCopy = new collectionView_CollectionView();
                collectionCopy.id = c.id;
                collectionCopy.organizationId = c.organizationId;
                const parts = c.name != null ? c.name.replace(/^\/+|\/+$/g, '').split(NestingDelimiter) : [];
                serviceUtils_ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);
            });
            return nodes;
        });
    }
    getNested(id) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const collections = yield this.getAllNested();
            return serviceUtils_ServiceUtils.getTreeNodeObject(collections, id);
        });
    }
    upsert(collection) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let collections = yield this.storageService.get(Keys.collectionsPrefix + userId);
            if (collections == null) {
                collections = {};
            }
            if (collection instanceof CollectionData) {
                const c = collection;
                collections[c.id] = c;
            }
            else {
                collection.forEach(c => {
                    collections[c.id] = c;
                });
            }
            yield this.storageService.save(Keys.collectionsPrefix + userId, collections);
            this.decryptedCollectionCache = null;
        });
    }
    replace(collections) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(Keys.collectionsPrefix + userId, collections);
            this.decryptedCollectionCache = null;
        });
    }
    clear(userId) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(Keys.collectionsPrefix + userId);
            this.decryptedCollectionCache = null;
        });
    }
    delete(id) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const collections = yield this.storageService.get(Keys.collectionsPrefix + userId);
            if (collections == null) {
                return;
            }
            if (typeof id === 'string') {
                const i = id;
                delete collections[id];
            }
            else {
                id.forEach(i => {
                    delete collections[i];
                });
            }
            yield this.storageService.save(Keys.collectionsPrefix + userId, collections);
            this.decryptedCollectionCache = null;
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/enums/logLevelType.ts
var LogLevelType;
(function (LogLevelType) {
    LogLevelType[LogLevelType["Debug"] = 0] = "Debug";
    LogLevelType[LogLevelType["Info"] = 1] = "Info";
    LogLevelType[LogLevelType["Warning"] = 2] = "Warning";
    LogLevelType[LogLevelType["Error"] = 3] = "Error";
})(LogLevelType || (LogLevelType = {}));

// EXTERNAL MODULE: ./node_modules/browser-hrtime/dist/hrtime.js
var hrtime = __webpack_require__(345);

// CONCATENATED MODULE: ./jslib/common/src/services/consoleLog.service.ts


class consoleLog_service_ConsoleLogService {
    constructor(isDev, filter = null) {
        this.isDev = isDev;
        this.filter = filter;
        this.timersMap = new Map();
    }
    debug(message) {
        if (!this.isDev) {
            return;
        }
        this.write(LogLevelType.Debug, message);
    }
    info(message) {
        this.write(LogLevelType.Info, message);
    }
    warning(message) {
        this.write(LogLevelType.Warning, message);
    }
    error(message) {
        this.write(LogLevelType.Error, message);
    }
    write(level, message) {
        if (this.filter != null && this.filter(level)) {
            return;
        }
        switch (level) {
            case LogLevelType.Debug:
                // tslint:disable-next-line
                console.log(message);
                break;
            case LogLevelType.Info:
                // tslint:disable-next-line
                console.log(message);
                break;
            case LogLevelType.Warning:
                // tslint:disable-next-line
                console.warn(message);
                break;
            case LogLevelType.Error:
                // tslint:disable-next-line
                console.error(message);
                break;
            default:
                break;
        }
    }
    time(label = 'default') {
        if (!this.timersMap.has(label)) {
            this.timersMap.set(label, hrtime());
        }
    }
    timeEnd(label = 'default') {
        const elapsed = hrtime(this.timersMap.get(label));
        this.timersMap.delete(label);
        this.write(LogLevelType.Info, `${label}: ${elapsed[0] * 1000 + elapsed[1] / 10e6}ms`);
        return elapsed;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/services/constants.service.ts
var constants_service = __webpack_require__(9);

// CONCATENATED MODULE: ./jslib/common/src/services/container.service.ts
class ContainerService {
    constructor(cryptoService) {
        this.cryptoService = cryptoService;
    }
    // deprecated, use attachToGlobal instead
    attachToWindow(win) {
        this.attachToGlobal(win);
    }
    attachToGlobal(global) {
        if (!global.bitwardenContainerService) {
            global.bitwardenContainerService = this;
        }
    }
    getCryptoService() {
        return this.cryptoService;
    }
}

// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js
var Subject = __webpack_require__(30);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/environmentUrls.ts
class EnvironmentUrls {
}

// CONCATENATED MODULE: ./jslib/common/src/services/environment.service.ts
var environment_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class environment_service_EnvironmentService {
    constructor(storageService) {
        this.storageService = storageService;
        this.urlsSubject = new Subject["a" /* Subject */]();
        this.urls = this.urlsSubject; // tslint:disable-line
    }
    hasBaseUrl() {
        return this.baseUrl != null;
    }
    getNotificationsUrl() {
        if (this.notificationsUrl != null) {
            return this.notificationsUrl;
        }
        if (this.baseUrl != null) {
            return this.baseUrl + '/notifications';
        }
        return 'https://notifications.bitwarden.com';
    }
    getWebVaultUrl() {
        if (this.webVaultUrl != null) {
            return this.webVaultUrl;
        }
        if (this.baseUrl) {
            return this.baseUrl;
        }
        return 'https://vault.bitwarden.com';
    }
    getSendUrl() {
        return this.getWebVaultUrl() === 'https://vault.bitwarden.com'
            ? 'https://send.bitwarden.com/#'
            : this.getWebVaultUrl() + '/#/send/';
    }
    getIconsUrl() {
        if (this.iconsUrl != null) {
            return this.iconsUrl;
        }
        if (this.baseUrl) {
            return this.baseUrl + '/icons';
        }
        return 'https://icons.bitwarden.net';
    }
    getApiUrl() {
        if (this.apiUrl != null) {
            return this.apiUrl;
        }
        if (this.baseUrl) {
            return this.baseUrl + '/api';
        }
        return 'https://api.bitwarden.com';
    }
    getIdentityUrl() {
        if (this.identityUrl != null) {
            return this.identityUrl;
        }
        if (this.baseUrl) {
            return this.baseUrl + '/identity';
        }
        return 'https://identity.bitwarden.com';
    }
    getEventsUrl() {
        if (this.eventsUrl != null) {
            return this.eventsUrl;
        }
        if (this.baseUrl) {
            return this.baseUrl + '/events';
        }
        return 'https://events.bitwarden.com';
    }
    getKeyConnectorUrl() {
        return this.keyConnectorUrl;
    }
    setUrlsFromStorage() {
        return environment_service_awaiter(this, void 0, void 0, function* () {
            const urlsObj = yield this.storageService.get(constants_service["a" /* ConstantsService */].environmentUrlsKey);
            const urls = urlsObj || {
                base: null,
                api: null,
                identity: null,
                icons: null,
                notifications: null,
                events: null,
                webVault: null,
                keyConnector: null,
            };
            const envUrls = new EnvironmentUrls();
            if (urls.base) {
                this.baseUrl = envUrls.base = urls.base;
                return;
            }
            this.webVaultUrl = urls.webVault;
            this.apiUrl = envUrls.api = urls.api;
            this.identityUrl = envUrls.identity = urls.identity;
            this.iconsUrl = urls.icons;
            this.notificationsUrl = urls.notifications;
            this.eventsUrl = envUrls.events = urls.events;
            this.keyConnectorUrl = urls.keyConnector;
        });
    }
    setUrls(urls, saveSettings = true) {
        return environment_service_awaiter(this, void 0, void 0, function* () {
            urls.base = this.formatUrl(urls.base);
            urls.webVault = this.formatUrl(urls.webVault);
            urls.api = this.formatUrl(urls.api);
            urls.identity = this.formatUrl(urls.identity);
            urls.icons = this.formatUrl(urls.icons);
            urls.notifications = this.formatUrl(urls.notifications);
            urls.events = this.formatUrl(urls.events);
            urls.keyConnector = this.formatUrl(urls.keyConnector);
            if (saveSettings) {
                yield this.storageService.save(constants_service["a" /* ConstantsService */].environmentUrlsKey, {
                    base: urls.base,
                    api: urls.api,
                    identity: urls.identity,
                    webVault: urls.webVault,
                    icons: urls.icons,
                    notifications: urls.notifications,
                    events: urls.events,
                    keyConnector: urls.keyConnector,
                });
            }
            this.baseUrl = urls.base;
            this.webVaultUrl = urls.webVault;
            this.apiUrl = urls.api;
            this.identityUrl = urls.identity;
            this.iconsUrl = urls.icons;
            this.notificationsUrl = urls.notifications;
            this.eventsUrl = urls.events;
            this.keyConnectorUrl = urls.keyConnector;
            this.urlsSubject.next(urls);
            return urls;
        });
    }
    getUrls() {
        return {
            base: this.baseUrl,
            webVault: this.webVaultUrl,
            api: this.apiUrl,
            identity: this.identityUrl,
            icons: this.iconsUrl,
            notifications: this.notificationsUrl,
            events: this.eventsUrl,
            keyConnector: this.keyConnectorUrl,
        };
    }
    formatUrl(url) {
        if (url == null || url === '') {
            return null;
        }
        url = url.replace(/\/+$/g, '');
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            url = 'https://' + url;
        }
        return url.trim();
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/data/eventData.ts
class EventData {
}

// CONCATENATED MODULE: ./jslib/common/src/models/request/eventRequest.ts
class EventRequest {
}

// CONCATENATED MODULE: ./jslib/common/src/services/event.service.ts
var event_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class event_service_EventService {
    constructor(storageService, apiService, userService, cipherService, logService) {
        this.storageService = storageService;
        this.apiService = apiService;
        this.userService = userService;
        this.cipherService = cipherService;
        this.logService = logService;
        this.inited = false;
    }
    init(checkOnInterval) {
        if (this.inited) {
            return;
        }
        this.inited = true;
        if (checkOnInterval) {
            this.uploadEvents();
            setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds
        }
    }
    collect(eventType, cipherId = null, uploadImmediately = false) {
        return event_service_awaiter(this, void 0, void 0, function* () {
            const authed = yield this.userService.isAuthenticated();
            if (!authed) {
                return;
            }
            const organizations = yield this.userService.getAllOrganizations();
            if (organizations == null) {
                return;
            }
            const orgIds = new Set(organizations.filter(o => o.useEvents).map(o => o.id));
            if (orgIds.size === 0) {
                return;
            }
            if (cipherId != null) {
                const cipher = yield this.cipherService.get(cipherId);
                if (cipher == null || cipher.organizationId == null || !orgIds.has(cipher.organizationId)) {
                    return;
                }
            }
            let eventCollection = yield this.storageService.get(constants_service["a" /* ConstantsService */].eventCollectionKey);
            if (eventCollection == null) {
                eventCollection = [];
            }
            const event = new EventData();
            event.type = eventType;
            event.cipherId = cipherId;
            event.date = new Date().toISOString();
            eventCollection.push(event);
            yield this.storageService.save(constants_service["a" /* ConstantsService */].eventCollectionKey, eventCollection);
            if (uploadImmediately) {
                yield this.uploadEvents();
            }
        });
    }
    uploadEvents() {
        return event_service_awaiter(this, void 0, void 0, function* () {
            const authed = yield this.userService.isAuthenticated();
            if (!authed) {
                return;
            }
            const eventCollection = yield this.storageService.get(constants_service["a" /* ConstantsService */].eventCollectionKey);
            if (eventCollection == null || eventCollection.length === 0) {
                return;
            }
            const request = eventCollection.map(e => {
                const req = new EventRequest();
                req.type = e.type;
                req.cipherId = e.cipherId;
                req.date = e.date;
                return req;
            });
            try {
                yield this.apiService.postEventsCollect(request);
                this.clearEvents();
            }
            catch (e) {
                this.logService.error(e);
            }
        });
    }
    clearEvents() {
        return event_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(constants_service["a" /* ConstantsService */].eventCollectionKey);
        });
    }
}

// EXTERNAL MODULE: ./node_modules/papaparse/papaparse.min.js
var papaparse_min = __webpack_require__(284);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/cipher.ts
var domain_cipher = __webpack_require__(119);

// EXTERNAL MODULE: ./jslib/common/src/models/data/cipherData.ts
var cipherData = __webpack_require__(92);

// EXTERNAL MODULE: ./jslib/common/src/models/view/cipherView.ts
var cipherView = __webpack_require__(80);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/encString.ts
var domain_encString = __webpack_require__(21);

// EXTERNAL MODULE: ./jslib/common/src/models/view/cardView.ts
var cardView = __webpack_require__(107);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/card.ts
var domain_card = __webpack_require__(188);

// CONCATENATED MODULE: ./jslib/common/src/models/export/card.ts



class card_Card {
    constructor(o) {
        var _a, _b, _c, _d, _e, _f;
        if (o == null) {
            return;
        }
        if (o instanceof cardView["a" /* CardView */]) {
            this.cardholderName = o.cardholderName;
            this.brand = o.brand;
            this.number = o.number;
            this.expMonth = o.expMonth;
            this.expYear = o.expYear;
            this.code = o.code;
        }
        else {
            this.cardholderName = (_a = o.cardholderName) === null || _a === void 0 ? void 0 : _a.encryptedString;
            this.brand = (_b = o.brand) === null || _b === void 0 ? void 0 : _b.encryptedString;
            this.number = (_c = o.number) === null || _c === void 0 ? void 0 : _c.encryptedString;
            this.expMonth = (_d = o.expMonth) === null || _d === void 0 ? void 0 : _d.encryptedString;
            this.expYear = (_e = o.expYear) === null || _e === void 0 ? void 0 : _e.encryptedString;
            this.code = (_f = o.code) === null || _f === void 0 ? void 0 : _f.encryptedString;
        }
    }
    static template() {
        const req = new card_Card();
        req.cardholderName = 'John Doe';
        req.brand = 'visa';
        req.number = '4242424242424242';
        req.expMonth = '04';
        req.expYear = '2023';
        req.code = '123';
        return req;
    }
    static toView(req, view = new cardView["a" /* CardView */]()) {
        view.cardholderName = req.cardholderName;
        view.brand = req.brand;
        view.number = req.number;
        view.expMonth = req.expMonth;
        view.expYear = req.expYear;
        view.code = req.code;
        return view;
    }
    static toDomain(req, domain = new domain_card["a" /* Card */]()) {
        domain.cardholderName = req.cardholderName != null ? new domain_encString["a" /* EncString */](req.cardholderName) : null;
        domain.brand = req.brand != null ? new domain_encString["a" /* EncString */](req.brand) : null;
        domain.number = req.number != null ? new domain_encString["a" /* EncString */](req.number) : null;
        domain.expMonth = req.expMonth != null ? new domain_encString["a" /* EncString */](req.expMonth) : null;
        domain.expYear = req.expYear != null ? new domain_encString["a" /* EncString */](req.expYear) : null;
        domain.code = req.code != null ? new domain_encString["a" /* EncString */](req.code) : null;
        return domain;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/enums/fieldType.ts
var fieldType = __webpack_require__(52);

// EXTERNAL MODULE: ./jslib/common/src/models/view/fieldView.ts
var fieldView = __webpack_require__(151);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/field.ts
var domain_field = __webpack_require__(189);

// CONCATENATED MODULE: ./jslib/common/src/models/export/field.ts




class field_Field {
    constructor(o) {
        var _a, _b;
        if (o == null) {
            return;
        }
        if (o instanceof fieldView["a" /* FieldView */]) {
            this.name = o.name;
            this.value = o.value;
        }
        else {
            this.name = (_a = o.name) === null || _a === void 0 ? void 0 : _a.encryptedString;
            this.value = (_b = o.value) === null || _b === void 0 ? void 0 : _b.encryptedString;
        }
        this.type = o.type;
        this.linkedId = o.linkedId;
    }
    static template() {
        const req = new field_Field();
        req.name = 'Field name';
        req.value = 'Some value';
        req.type = fieldType["a" /* FieldType */].Text;
        return req;
    }
    static toView(req, view = new fieldView["a" /* FieldView */]()) {
        view.type = req.type;
        view.value = req.value;
        view.name = req.name;
        view.linkedId = req.linkedId;
        return view;
    }
    static toDomain(req, domain = new domain_field["a" /* Field */]()) {
        domain.type = req.type;
        domain.value = req.value != null ? new domain_encString["a" /* EncString */](req.value) : null;
        domain.name = req.name != null ? new domain_encString["a" /* EncString */](req.name) : null;
        domain.linkedId = req.linkedId;
        return domain;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/view/identityView.ts
var identityView = __webpack_require__(108);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/identity.ts
var domain_identity = __webpack_require__(190);

// CONCATENATED MODULE: ./jslib/common/src/models/export/identity.ts



class identity_Identity {
    constructor(o) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        if (o == null) {
            return;
        }
        if (o instanceof identityView["a" /* IdentityView */]) {
            this.title = o.title;
            this.firstName = o.firstName;
            this.middleName = o.middleName;
            this.lastName = o.lastName;
            this.address1 = o.address1;
            this.address2 = o.address2;
            this.address3 = o.address3;
            this.city = o.city;
            this.state = o.state;
            this.postalCode = o.postalCode;
            this.country = o.country;
            this.company = o.company;
            this.email = o.email;
            this.phone = o.phone;
            this.ssn = o.ssn;
            this.username = o.username;
            this.passportNumber = o.passportNumber;
            this.licenseNumber = o.licenseNumber;
        }
        else {
            this.title = (_a = o.title) === null || _a === void 0 ? void 0 : _a.encryptedString;
            this.firstName = (_b = o.firstName) === null || _b === void 0 ? void 0 : _b.encryptedString;
            this.middleName = (_c = o.middleName) === null || _c === void 0 ? void 0 : _c.encryptedString;
            this.lastName = (_d = o.lastName) === null || _d === void 0 ? void 0 : _d.encryptedString;
            this.address1 = (_e = o.address1) === null || _e === void 0 ? void 0 : _e.encryptedString;
            this.address2 = (_f = o.address2) === null || _f === void 0 ? void 0 : _f.encryptedString;
            this.address3 = (_g = o.address3) === null || _g === void 0 ? void 0 : _g.encryptedString;
            this.city = (_h = o.city) === null || _h === void 0 ? void 0 : _h.encryptedString;
            this.state = (_j = o.state) === null || _j === void 0 ? void 0 : _j.encryptedString;
            this.postalCode = (_k = o.postalCode) === null || _k === void 0 ? void 0 : _k.encryptedString;
            this.country = (_l = o.country) === null || _l === void 0 ? void 0 : _l.encryptedString;
            this.company = (_m = o.company) === null || _m === void 0 ? void 0 : _m.encryptedString;
            this.email = (_o = o.email) === null || _o === void 0 ? void 0 : _o.encryptedString;
            this.phone = (_p = o.phone) === null || _p === void 0 ? void 0 : _p.encryptedString;
            this.ssn = (_q = o.ssn) === null || _q === void 0 ? void 0 : _q.encryptedString;
            this.username = (_r = o.username) === null || _r === void 0 ? void 0 : _r.encryptedString;
            this.passportNumber = (_s = o.passportNumber) === null || _s === void 0 ? void 0 : _s.encryptedString;
            this.licenseNumber = (_t = o.licenseNumber) === null || _t === void 0 ? void 0 : _t.encryptedString;
        }
    }
    static template() {
        const req = new identity_Identity();
        req.title = 'Mr';
        req.firstName = 'John';
        req.middleName = 'William';
        req.lastName = 'Doe';
        req.address1 = '123 Any St';
        req.address2 = 'Apt #123';
        req.address3 = null;
        req.city = 'New York';
        req.state = 'NY';
        req.postalCode = '10001';
        req.country = 'US';
        req.company = 'Acme Inc.';
        req.email = 'john@company.com';
        req.phone = '5555551234';
        req.ssn = '000-123-4567';
        req.username = 'jdoe';
        req.passportNumber = 'US-123456789';
        req.licenseNumber = 'D123-12-123-12333';
        return req;
    }
    static toView(req, view = new identityView["a" /* IdentityView */]()) {
        view.title = req.title;
        view.firstName = req.firstName;
        view.middleName = req.middleName;
        view.lastName = req.lastName;
        view.address1 = req.address1;
        view.address2 = req.address2;
        view.address3 = req.address3;
        view.city = req.city;
        view.state = req.state;
        view.postalCode = req.postalCode;
        view.country = req.country;
        view.company = req.company;
        view.email = req.email;
        view.phone = req.phone;
        view.ssn = req.ssn;
        view.username = req.username;
        view.passportNumber = req.passportNumber;
        view.licenseNumber = req.licenseNumber;
        return view;
    }
    static toDomain(req, domain = new domain_identity["a" /* Identity */]()) {
        domain.title = req.title != null ? new domain_encString["a" /* EncString */](req.title) : null;
        domain.firstName = req.firstName != null ? new domain_encString["a" /* EncString */](req.firstName) : null;
        domain.middleName = req.middleName != null ? new domain_encString["a" /* EncString */](req.middleName) : null;
        domain.lastName = req.lastName != null ? new domain_encString["a" /* EncString */](req.lastName) : null;
        domain.address1 = req.address1 != null ? new domain_encString["a" /* EncString */](req.address1) : null;
        domain.address2 = req.address2 != null ? new domain_encString["a" /* EncString */](req.address2) : null;
        domain.address3 = req.address3 != null ? new domain_encString["a" /* EncString */](req.address3) : null;
        domain.city = req.city != null ? new domain_encString["a" /* EncString */](req.city) : null;
        domain.state = req.state != null ? new domain_encString["a" /* EncString */](req.state) : null;
        domain.postalCode = req.postalCode != null ? new domain_encString["a" /* EncString */](req.postalCode) : null;
        domain.country = req.country != null ? new domain_encString["a" /* EncString */](req.country) : null;
        domain.company = req.company != null ? new domain_encString["a" /* EncString */](req.company) : null;
        domain.email = req.email != null ? new domain_encString["a" /* EncString */](req.email) : null;
        domain.phone = req.phone != null ? new domain_encString["a" /* EncString */](req.phone) : null;
        domain.ssn = req.ssn != null ? new domain_encString["a" /* EncString */](req.ssn) : null;
        domain.username = req.username != null ? new domain_encString["a" /* EncString */](req.username) : null;
        domain.passportNumber = req.passportNumber != null ? new domain_encString["a" /* EncString */](req.passportNumber) : null;
        domain.licenseNumber = req.licenseNumber != null ? new domain_encString["a" /* EncString */](req.licenseNumber) : null;
        return domain;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/view/loginUriView.ts
var loginUriView = __webpack_require__(100);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/loginUri.ts
var domain_loginUri = __webpack_require__(192);

// CONCATENATED MODULE: ./jslib/common/src/models/export/loginUri.ts



class loginUri_LoginUri {
    constructor(o) {
        var _a;
        this.match = null;
        if (o == null) {
            return;
        }
        if (o instanceof loginUriView["a" /* LoginUriView */]) {
            this.uri = o.uri;
        }
        else {
            this.uri = (_a = o.uri) === null || _a === void 0 ? void 0 : _a.encryptedString;
        }
        this.match = o.match;
    }
    static template() {
        const req = new loginUri_LoginUri();
        req.uri = 'https://google.com';
        req.match = null;
        return req;
    }
    static toView(req, view = new loginUriView["a" /* LoginUriView */]()) {
        view.uri = req.uri;
        view.match = req.match;
        return view;
    }
    static toDomain(req, domain = new domain_loginUri["a" /* LoginUri */]()) {
        domain.uri = req.uri != null ? new domain_encString["a" /* EncString */](req.uri) : null;
        domain.match = req.match;
        return domain;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/view/loginView.ts
var loginView = __webpack_require__(88);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/login.ts
var domain_login = __webpack_require__(191);

// CONCATENATED MODULE: ./jslib/common/src/models/export/login.ts




class login_Login {
    constructor(o) {
        var _a, _b, _c;
        if (o == null) {
            return;
        }
        if (o.uris != null) {
            if (o instanceof loginView["a" /* LoginView */]) {
                this.uris = o.uris.map(u => new loginUri_LoginUri(u));
            }
            else {
                this.uris = o.uris.map(u => new loginUri_LoginUri(u));
            }
        }
        if (o instanceof loginView["a" /* LoginView */]) {
            this.username = o.username;
            this.password = o.password;
            this.totp = o.totp;
        }
        else {
            this.username = (_a = o.username) === null || _a === void 0 ? void 0 : _a.encryptedString;
            this.password = (_b = o.password) === null || _b === void 0 ? void 0 : _b.encryptedString;
            this.totp = (_c = o.totp) === null || _c === void 0 ? void 0 : _c.encryptedString;
        }
    }
    static template() {
        const req = new login_Login();
        req.uris = [];
        req.username = 'jdoe';
        req.password = 'myp@ssword123';
        req.totp = 'JBSWY3DPEHPK3PXP';
        return req;
    }
    static toView(req, view = new loginView["a" /* LoginView */]()) {
        if (req.uris != null) {
            view.uris = req.uris.map(u => loginUri_LoginUri.toView(u));
        }
        view.username = req.username;
        view.password = req.password;
        view.totp = req.totp;
        return view;
    }
    static toDomain(req, domain = new domain_login["a" /* Login */]()) {
        if (req.uris != null) {
            domain.uris = req.uris.map(u => loginUri_LoginUri.toDomain(u));
        }
        domain.username = req.username != null ? new domain_encString["a" /* EncString */](req.username) : null;
        domain.password = req.password != null ? new domain_encString["a" /* EncString */](req.password) : null;
        domain.totp = req.totp != null ? new domain_encString["a" /* EncString */](req.totp) : null;
        return domain;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/enums/secureNoteType.ts
var secureNoteType = __webpack_require__(222);

// EXTERNAL MODULE: ./jslib/common/src/models/view/secureNoteView.ts
var secureNoteView = __webpack_require__(114);

// EXTERNAL MODULE: ./jslib/common/src/models/domain/secureNote.ts
var domain_secureNote = __webpack_require__(193);

// CONCATENATED MODULE: ./jslib/common/src/models/export/secureNote.ts



class secureNote_SecureNote {
    constructor(o) {
        if (o == null) {
            return;
        }
        this.type = o.type;
    }
    static template() {
        const req = new secureNote_SecureNote();
        req.type = secureNoteType["a" /* SecureNoteType */].Generic;
        return req;
    }
    static toView(req, view = new secureNoteView["a" /* SecureNoteView */]()) {
        view.type = req.type;
        return view;
    }
    static toDomain(req, view = new domain_secureNote["a" /* SecureNote */]()) {
        view.type = req.type;
        return view;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/export/cipher.ts










class cipher_Cipher {
    static template() {
        const req = new cipher_Cipher();
        req.organizationId = null;
        req.collectionIds = null;
        req.folderId = null;
        req.type = cipherType["a" /* CipherType */].Login;
        req.name = 'Item name';
        req.notes = 'Some notes about this item.';
        req.favorite = false;
        req.fields = [];
        req.login = null;
        req.secureNote = null;
        req.card = null;
        req.identity = null;
        req.reprompt = cipherRepromptType["a" /* CipherRepromptType */].None;
        return req;
    }
    static toView(req, view = new cipherView["a" /* CipherView */]()) {
        var _a, _b, _c;
        view.type = req.type;
        view.folderId = req.folderId;
        if (view.organizationId == null) {
            view.organizationId = req.organizationId;
        }
        if (view.collectionIds || req.collectionIds) {
            const set = new Set(((_a = view.collectionIds) !== null && _a !== void 0 ? _a : []).concat((_b = req.collectionIds) !== null && _b !== void 0 ? _b : []));
            view.collectionIds = Array.from(set.values());
        }
        view.name = req.name;
        view.notes = req.notes;
        view.favorite = req.favorite;
        view.reprompt = (_c = req.reprompt) !== null && _c !== void 0 ? _c : cipherRepromptType["a" /* CipherRepromptType */].None;
        if (req.fields != null) {
            view.fields = req.fields.map(f => field_Field.toView(f));
        }
        switch (req.type) {
            case cipherType["a" /* CipherType */].Login:
                view.login = login_Login.toView(req.login);
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                view.secureNote = secureNote_SecureNote.toView(req.secureNote);
                break;
            case cipherType["a" /* CipherType */].Card:
                view.card = card_Card.toView(req.card);
                break;
            case cipherType["a" /* CipherType */].Identity:
                view.identity = identity_Identity.toView(req.identity);
                break;
        }
        return view;
    }
    static toDomain(req, domain = new domain_cipher["a" /* Cipher */]()) {
        var _a;
        domain.type = req.type;
        domain.folderId = req.folderId;
        if (domain.organizationId == null) {
            domain.organizationId = req.organizationId;
        }
        domain.name = req.name != null ? new domain_encString["a" /* EncString */](req.name) : null;
        domain.notes = req.notes != null ? new domain_encString["a" /* EncString */](req.notes) : null;
        domain.favorite = req.favorite;
        domain.reprompt = (_a = req.reprompt) !== null && _a !== void 0 ? _a : cipherRepromptType["a" /* CipherRepromptType */].None;
        if (req.fields != null) {
            domain.fields = req.fields.map(f => field_Field.toDomain(f));
        }
        switch (req.type) {
            case cipherType["a" /* CipherType */].Login:
                domain.login = login_Login.toDomain(req.login);
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                domain.secureNote = secureNote_SecureNote.toDomain(req.secureNote);
                break;
            case cipherType["a" /* CipherType */].Card:
                domain.card = card_Card.toDomain(req.card);
                break;
            case cipherType["a" /* CipherType */].Identity:
                domain.identity = identity_Identity.toDomain(req.identity);
                break;
        }
        return domain;
    }
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        var _a, _b;
        this.organizationId = o.organizationId;
        this.folderId = o.folderId;
        this.type = o.type;
        this.reprompt = o.reprompt;
        if (o instanceof cipherView["a" /* CipherView */]) {
            this.name = o.name;
            this.notes = o.notes;
        }
        else {
            this.name = (_a = o.name) === null || _a === void 0 ? void 0 : _a.encryptedString;
            this.notes = (_b = o.notes) === null || _b === void 0 ? void 0 : _b.encryptedString;
        }
        this.favorite = o.favorite;
        if (o.fields != null) {
            if (o instanceof cipherView["a" /* CipherView */]) {
                this.fields = o.fields.map(f => new field_Field(f));
            }
            else {
                this.fields = o.fields.map(f => new field_Field(f));
            }
        }
        switch (o.type) {
            case cipherType["a" /* CipherType */].Login:
                this.login = new login_Login(o.login);
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                this.secureNote = new secureNote_SecureNote(o.secureNote);
                break;
            case cipherType["a" /* CipherType */].Card:
                this.card = new card_Card(o.card);
                break;
            case cipherType["a" /* CipherType */].Identity:
                this.identity = new identity_Identity(o.identity);
                break;
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/export/cipherWithIds.ts

class cipherWithIds_CipherWithIds extends cipher_Cipher {
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.id = o.id;
        super.build(o);
        this.collectionIds = o.collectionIds;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/export/collection.ts



class export_collection_Collection {
    static template() {
        const req = new export_collection_Collection();
        req.organizationId = '00000000-0000-0000-0000-000000000000';
        req.name = 'Collection name';
        req.externalId = null;
        return req;
    }
    static toView(req, view = new collectionView_CollectionView()) {
        view.name = req.name;
        view.externalId = req.externalId;
        if (view.organizationId == null) {
            view.organizationId = req.organizationId;
        }
        return view;
    }
    static toDomain(req, domain = new collection_Collection()) {
        domain.name = req.name != null ? new domain_encString["a" /* EncString */](req.name) : null;
        domain.externalId = req.externalId;
        if (domain.organizationId == null) {
            domain.organizationId = req.organizationId;
        }
        return domain;
    }
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        var _a;
        this.organizationId = o.organizationId;
        if (o instanceof collectionView_CollectionView) {
            this.name = o.name;
        }
        else {
            this.name = (_a = o.name) === null || _a === void 0 ? void 0 : _a.encryptedString;
        }
        this.externalId = o.externalId;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/export/collectionWithId.ts

class collectionWithId_CollectionWithId extends export_collection_Collection {
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.id = o.id;
        super.build(o);
    }
}

// EXTERNAL MODULE: ./jslib/common/src/enums/eventType.ts
var enums_eventType = __webpack_require__(49);

// CONCATENATED MODULE: ./jslib/common/src/models/export/event.ts

class event_Event {
    constructor(event) {
        this.message = event.humanReadableMessage;
        this.appIcon = event.appIcon;
        this.appName = event.appName;
        this.userId = event.userId;
        this.userName = event.userName;
        this.userEmail = event.userEmail;
        this.date = event.date;
        this.ip = event.ip;
        this.type = enums_eventType["a" /* EventType */][event.type];
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/view/folderView.ts
var folderView = __webpack_require__(117);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/folder.ts


class folder_Folder extends domainBase["a" /* default */] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            id: null,
            name: null,
        }, alreadyEncrypted, ['id']);
        this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;
    }
    decrypt() {
        return this.decryptObj(new folderView["a" /* FolderView */](this), {
            name: null,
        }, null);
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/export/folder.ts



class export_folder_Folder {
    static template() {
        const req = new export_folder_Folder();
        req.name = 'Folder name';
        return req;
    }
    static toView(req, view = new folderView["a" /* FolderView */]()) {
        view.name = req.name;
        return view;
    }
    static toDomain(req, domain = new folder_Folder()) {
        domain.name = req.name != null ? new domain_encString["a" /* EncString */](req.name) : null;
        return domain;
    }
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        var _a;
        if (o instanceof folderView["a" /* FolderView */]) {
            this.name = o.name;
        }
        else {
            this.name = (_a = o.name) === null || _a === void 0 ? void 0 : _a.encryptedString;
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/export/folderWithId.ts

class folderWithId_FolderWithId extends export_folder_Folder {
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.id = o.id;
        super.build(o);
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/export.service.ts
var export_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class export_service_ExportService {
    constructor(folderService, cipherService, apiService, cryptoService) {
        this.folderService = folderService;
        this.cipherService = cipherService;
        this.apiService = apiService;
        this.cryptoService = cryptoService;
    }
    getExport(format = 'csv') {
        return export_service_awaiter(this, void 0, void 0, function* () {
            if (format === 'encrypted_json') {
                return this.getEncryptedExport();
            }
            else {
                return this.getDecryptedExport(format);
            }
        });
    }
    getOrganizationExport(organizationId, format = 'csv') {
        return export_service_awaiter(this, void 0, void 0, function* () {
            if (format === 'encrypted_json') {
                return this.getOrganizationEncryptedExport(organizationId);
            }
            else {
                return this.getOrganizationDecryptedExport(organizationId, format);
            }
        });
    }
    getEventExport(events) {
        return export_service_awaiter(this, void 0, void 0, function* () {
            return papaparse_min["unparse"](events.map(e => new event_Event(e)));
        });
    }
    getFileName(prefix = null, extension = 'csv') {
        const now = new Date();
        const dateString = now.getFullYear() + '' + this.padNumber(now.getMonth() + 1, 2) + '' + this.padNumber(now.getDate(), 2) +
            this.padNumber(now.getHours(), 2) + '' + this.padNumber(now.getMinutes(), 2) +
            this.padNumber(now.getSeconds(), 2);
        return 'bitwarden' + (prefix ? ('_' + prefix) : '') + '_export_' + dateString + '.' + extension;
    }
    getDecryptedExport(format) {
        return export_service_awaiter(this, void 0, void 0, function* () {
            let decFolders = [];
            let decCiphers = [];
            const promises = [];
            promises.push(this.folderService.getAllDecrypted().then(folders => {
                decFolders = folders;
            }));
            promises.push(this.cipherService.getAllDecrypted().then(ciphers => {
                decCiphers = ciphers.filter(f => f.deletedDate == null);
            }));
            yield Promise.all(promises);
            if (format === 'csv') {
                const foldersMap = new Map();
                decFolders.forEach(f => {
                    if (f.id != null) {
                        foldersMap.set(f.id, f);
                    }
                });
                const exportCiphers = [];
                decCiphers.forEach(c => {
                    // only export logins and secure notes
                    if (c.type !== cipherType["a" /* CipherType */].Login && c.type !== cipherType["a" /* CipherType */].SecureNote) {
                        return;
                    }
                    if (c.organizationId != null) {
                        return;
                    }
                    const cipher = {};
                    cipher.folder = c.folderId != null && foldersMap.has(c.folderId) ?
                        foldersMap.get(c.folderId).name : null;
                    cipher.favorite = c.favorite ? 1 : null;
                    this.buildCommonCipher(cipher, c);
                    exportCiphers.push(cipher);
                });
                return papaparse_min["unparse"](exportCiphers);
            }
            else {
                const jsonDoc = {
                    encrypted: false,
                    folders: [],
                    items: [],
                };
                decFolders.forEach(f => {
                    if (f.id == null) {
                        return;
                    }
                    const folder = new folderWithId_FolderWithId();
                    folder.build(f);
                    jsonDoc.folders.push(folder);
                });
                decCiphers.forEach(c => {
                    if (c.organizationId != null) {
                        return;
                    }
                    const cipher = new cipherWithIds_CipherWithIds();
                    cipher.build(c);
                    cipher.collectionIds = null;
                    jsonDoc.items.push(cipher);
                });
                return JSON.stringify(jsonDoc, null, '  ');
            }
        });
    }
    getEncryptedExport() {
        return export_service_awaiter(this, void 0, void 0, function* () {
            let folders = [];
            let ciphers = [];
            const promises = [];
            promises.push(this.folderService.getAll().then(f => {
                folders = f;
            }));
            promises.push(this.cipherService.getAll().then(c => {
                ciphers = c.filter(f => f.deletedDate == null);
            }));
            yield Promise.all(promises);
            const encKeyValidation = yield this.cryptoService.encrypt(utils["a" /* Utils */].newGuid());
            const jsonDoc = {
                encrypted: true,
                encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,
                folders: [],
                items: [],
            };
            folders.forEach(f => {
                if (f.id == null) {
                    return;
                }
                const folder = new folderWithId_FolderWithId();
                folder.build(f);
                jsonDoc.folders.push(folder);
            });
            ciphers.forEach(c => {
                if (c.organizationId != null) {
                    return;
                }
                const cipher = new cipherWithIds_CipherWithIds();
                cipher.build(c);
                cipher.collectionIds = null;
                jsonDoc.items.push(cipher);
            });
            return JSON.stringify(jsonDoc, null, '  ');
        });
    }
    getOrganizationDecryptedExport(organizationId, format) {
        return export_service_awaiter(this, void 0, void 0, function* () {
            const decCollections = [];
            const decCiphers = [];
            const promises = [];
            promises.push(this.apiService.getCollections(organizationId).then(collections => {
                const collectionPromises = [];
                if (collections != null && collections.data != null && collections.data.length > 0) {
                    collections.data.forEach(c => {
                        const collection = new collection_Collection(new CollectionData(c));
                        collectionPromises.push(collection.decrypt().then(decCol => {
                            decCollections.push(decCol);
                        }));
                    });
                }
                return Promise.all(collectionPromises);
            }));
            promises.push(this.apiService.getCiphersOrganization(organizationId).then(ciphers => {
                const cipherPromises = [];
                if (ciphers != null && ciphers.data != null && ciphers.data.length > 0) {
                    ciphers.data.filter(c => c.deletedDate === null).forEach(c => {
                        const cipher = new domain_cipher["a" /* Cipher */](new cipherData["a" /* CipherData */](c));
                        cipherPromises.push(cipher.decrypt().then(decCipher => {
                            decCiphers.push(decCipher);
                        }));
                    });
                }
                return Promise.all(cipherPromises);
            }));
            yield Promise.all(promises);
            if (format === 'csv') {
                const collectionsMap = new Map();
                decCollections.forEach(c => {
                    collectionsMap.set(c.id, c);
                });
                const exportCiphers = [];
                decCiphers.forEach(c => {
                    // only export logins and secure notes
                    if (c.type !== cipherType["a" /* CipherType */].Login && c.type !== cipherType["a" /* CipherType */].SecureNote) {
                        return;
                    }
                    const cipher = {};
                    cipher.collections = [];
                    if (c.collectionIds != null) {
                        cipher.collections = c.collectionIds.filter(id => collectionsMap.has(id))
                            .map(id => collectionsMap.get(id).name);
                    }
                    this.buildCommonCipher(cipher, c);
                    exportCiphers.push(cipher);
                });
                return papaparse_min["unparse"](exportCiphers);
            }
            else {
                const jsonDoc = {
                    encrypted: false,
                    collections: [],
                    items: [],
                };
                decCollections.forEach(c => {
                    const collection = new collectionWithId_CollectionWithId();
                    collection.build(c);
                    jsonDoc.collections.push(collection);
                });
                decCiphers.forEach(c => {
                    const cipher = new cipherWithIds_CipherWithIds();
                    cipher.build(c);
                    jsonDoc.items.push(cipher);
                });
                return JSON.stringify(jsonDoc, null, '  ');
            }
        });
    }
    getOrganizationEncryptedExport(organizationId) {
        return export_service_awaiter(this, void 0, void 0, function* () {
            const collections = [];
            const ciphers = [];
            const promises = [];
            promises.push(this.apiService.getCollections(organizationId).then(c => {
                const collectionPromises = [];
                if (c != null && c.data != null && c.data.length > 0) {
                    c.data.forEach(r => {
                        const collection = new collection_Collection(new CollectionData(r));
                        collections.push(collection);
                    });
                }
                return Promise.all(collectionPromises);
            }));
            promises.push(this.apiService.getCiphersOrganization(organizationId).then(c => {
                const cipherPromises = [];
                if (c != null && c.data != null && c.data.length > 0) {
                    c.data.filter(item => item.deletedDate === null).forEach(item => {
                        const cipher = new domain_cipher["a" /* Cipher */](new cipherData["a" /* CipherData */](item));
                        ciphers.push(cipher);
                    });
                }
                return Promise.all(cipherPromises);
            }));
            yield Promise.all(promises);
            const orgKey = yield this.cryptoService.getOrgKey(organizationId);
            const encKeyValidation = yield this.cryptoService.encrypt(utils["a" /* Utils */].newGuid(), orgKey);
            const jsonDoc = {
                encrypted: true,
                encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,
                collections: [],
                items: [],
            };
            collections.forEach(c => {
                const collection = new collectionWithId_CollectionWithId();
                collection.build(c);
                jsonDoc.collections.push(collection);
            });
            ciphers.forEach(c => {
                const cipher = new cipherWithIds_CipherWithIds();
                cipher.build(c);
                jsonDoc.items.push(cipher);
            });
            return JSON.stringify(jsonDoc, null, '  ');
        });
    }
    padNumber(num, width, padCharacter = '0') {
        const numString = num.toString();
        return numString.length >= width ? numString :
            new Array(width - numString.length + 1).join(padCharacter) + numString;
    }
    buildCommonCipher(cipher, c) {
        cipher.type = null;
        cipher.name = c.name;
        cipher.notes = c.notes;
        cipher.fields = null;
        cipher.reprompt = c.reprompt;
        // Login props
        cipher.login_uri = null;
        cipher.login_username = null;
        cipher.login_password = null;
        cipher.login_totp = null;
        if (c.fields) {
            c.fields.forEach((f) => {
                if (!cipher.fields) {
                    cipher.fields = '';
                }
                else {
                    cipher.fields += '\n';
                }
                cipher.fields += ((f.name || '') + ': ' + f.value);
            });
        }
        switch (c.type) {
            case cipherType["a" /* CipherType */].Login:
                cipher.type = 'login';
                cipher.login_username = c.login.username;
                cipher.login_password = c.login.password;
                cipher.login_totp = c.login.totp;
                if (c.login.uris) {
                    cipher.login_uri = [];
                    c.login.uris.forEach(u => {
                        cipher.login_uri.push(u.uri);
                    });
                }
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                cipher.type = 'note';
                break;
            default:
                return;
        }
        return cipher;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/enums/fileUploadType.ts
var FileUploadType;
(function (FileUploadType) {
    FileUploadType[FileUploadType["Direct"] = 0] = "Direct";
    FileUploadType[FileUploadType["Azure"] = 1] = "Azure";
})(FileUploadType || (FileUploadType = {}));

// CONCATENATED MODULE: ./jslib/common/src/services/azureFileUpload.service.ts
var azureFileUpload_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

const MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB
const MAX_BLOCKS_PER_BLOB = 50000;
class azureFileUpload_service_AzureFileUploadService {
    constructor(logService) {
        this.logService = logService;
    }
    upload(url, data, renewalCallback) {
        return azureFileUpload_service_awaiter(this, void 0, void 0, function* () {
            if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {
                return yield this.azureUploadBlob(url, data);
            }
            else {
                return yield this.azureUploadBlocks(url, data, renewalCallback);
            }
        });
    }
    azureUploadBlob(url, data) {
        return azureFileUpload_service_awaiter(this, void 0, void 0, function* () {
            const urlObject = utils["a" /* Utils */].getUrl(url);
            const headers = new Headers({
                'x-ms-date': new Date().toUTCString(),
                'x-ms-version': urlObject.searchParams.get('sv'),
                'Content-Length': data.buffer.byteLength.toString(),
                'x-ms-blob-type': 'BlockBlob',
            });
            const request = new Request(url, {
                body: data.buffer,
                cache: 'no-store',
                method: 'PUT',
                headers: headers,
            });
            const blobResponse = yield fetch(request);
            if (blobResponse.status !== 201) {
                throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);
            }
        });
    }
    azureUploadBlocks(url, data, renewalCallback) {
        return azureFileUpload_service_awaiter(this, void 0, void 0, function* () {
            const baseUrl = utils["a" /* Utils */].getUrl(url);
            const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get('sv'));
            let blockIndex = 0;
            const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);
            const blocksStaged = [];
            if (numBlocks > MAX_BLOCKS_PER_BLOB) {
                throw new Error(`Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`);
            }
            try {
                while (blockIndex < numBlocks) {
                    url = yield this.renewUrlIfNecessary(url, renewalCallback);
                    const blockUrl = utils["a" /* Utils */].getUrl(url);
                    const blockId = this.encodedBlockId(blockIndex);
                    blockUrl.searchParams.append('comp', 'block');
                    blockUrl.searchParams.append('blockid', blockId);
                    const start = blockIndex * blockSize;
                    const blockData = data.buffer.slice(start, start + blockSize);
                    const blockHeaders = new Headers({
                        'x-ms-date': new Date().toUTCString(),
                        'x-ms-version': blockUrl.searchParams.get('sv'),
                        'Content-Length': blockData.byteLength.toString(),
                    });
                    const blockRequest = new Request(blockUrl.toString(), {
                        body: blockData,
                        cache: 'no-store',
                        method: 'PUT',
                        headers: blockHeaders,
                    });
                    const blockResponse = yield fetch(blockRequest);
                    if (blockResponse.status !== 201) {
                        const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;
                        this.logService.error(message + '\n' + (yield blockResponse.json()));
                        throw new Error(message);
                    }
                    blocksStaged.push(blockId);
                    blockIndex++;
                }
                url = yield this.renewUrlIfNecessary(url, renewalCallback);
                const blockListUrl = utils["a" /* Utils */].getUrl(url);
                const blockListXml = this.blockListXml(blocksStaged);
                blockListUrl.searchParams.append('comp', 'blocklist');
                const headers = new Headers({
                    'x-ms-date': new Date().toUTCString(),
                    'x-ms-version': blockListUrl.searchParams.get('sv'),
                    'Content-Length': blockListXml.length.toString(),
                });
                const request = new Request(blockListUrl.toString(), {
                    body: blockListXml,
                    cache: 'no-store',
                    method: 'PUT',
                    headers: headers,
                });
                const response = yield fetch(request);
                if (response.status !== 201) {
                    const message = `Unsuccessful block list PUT. Received status ${response.status}`;
                    this.logService.error(message + '\n' + (yield response.json()));
                    throw new Error(message);
                }
            }
            catch (e) {
                throw e;
            }
        });
    }
    renewUrlIfNecessary(url, renewalCallback) {
        var _a;
        return azureFileUpload_service_awaiter(this, void 0, void 0, function* () {
            const urlObject = utils["a" /* Utils */].getUrl(url);
            const expiry = new Date((_a = urlObject.searchParams.get('se')) !== null && _a !== void 0 ? _a : '');
            if (isNaN(expiry.getTime())) {
                expiry.setTime(Date.now() + 3600000);
            }
            if (expiry.getTime() < Date.now() + 1000) {
                return yield renewalCallback();
            }
            return url;
        });
    }
    encodedBlockId(blockIndex) {
        // Encoded blockId max size is 64, so pre-encoding max size is 48
        const utfBlockId = ('000000000000000000000000000000000000000000000000' + blockIndex.toString()).slice(-48);
        return utils["a" /* Utils */].fromUtf8ToB64(utfBlockId);
    }
    blockListXml(blockIdList) {
        let xml = '<?xml version="1.0" encoding="utf-8"?><BlockList>';
        blockIdList.forEach(blockId => {
            xml += `<Latest>${blockId}</Latest>`;
        });
        xml += '</BlockList>';
        return xml;
    }
    getMaxBlockSize(version) {
        if (Version.compare(version, '2019-12-12') >= 0) {
            return 4000 * 1024 * 1024; // 4000 MiB
        }
        else if (Version.compare(version, '2016-05-31') >= 0) {
            return 100 * 1024 * 1024; // 100 MiB
        }
        else {
            return 4 * 1024 * 1024; // 4 MiB
        }
    }
}
class Version {
    constructor(version) {
        this.year = 0;
        this.month = 0;
        this.day = 0;
        try {
            const parts = version.split('-').map(v => Number.parseInt(v, 10));
            this.year = parts[0];
            this.month = parts[1];
            this.day = parts[2];
        }
        catch (_a) {
            // Ignore error
        }
    }
    /**
     * Compares two Azure Versions against each other
     * @param a Version to compare
     * @param b Version to compare
     * @returns a number less than zero if b is newer than a, 0 if equal,
     * and greater than zero if a is newer than b
     */
    static compare(a, b) {
        if (typeof (a) === 'string') {
            a = new Version(a);
        }
        if (typeof (b) === 'string') {
            b = new Version(b);
        }
        return a.year !== b.year ? a.year - b.year :
            a.month !== b.month ? a.month - b.month :
                a.day !== b.day ? a.day - b.day :
                    0;
    }
    /**
     * Compares two Azure Versions against each other
     * @param compareTo Version to compare against
     * @returns a number less than zero if compareTo is newer, 0 if equal,
     * and greater than zero if this is greater than compareTo
     */
    compare(compareTo) {
        return Version.compare(this, compareTo);
    }
}

// EXTERNAL MODULE: ./jslib/common/src/services/bitwardenFileUpload.service.ts
var bitwardenFileUpload_service = __webpack_require__(467);

// CONCATENATED MODULE: ./jslib/common/src/services/fileUpload.service.ts
var fileUpload_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class fileUpload_service_FileUploadService {
    constructor(logService, apiService) {
        this.logService = logService;
        this.apiService = apiService;
        this.azureFileUploadService = new azureFileUpload_service_AzureFileUploadService(logService);
        this.bitwardenFileUploadService = new bitwardenFileUpload_service["a" /* BitwardenFileUploadService */](apiService);
    }
    uploadSendFile(uploadData, fileName, encryptedFileData) {
        return fileUpload_service_awaiter(this, void 0, void 0, function* () {
            try {
                switch (uploadData.fileUploadType) {
                    case FileUploadType.Direct:
                        yield this.bitwardenFileUploadService.upload(fileName.encryptedString, encryptedFileData, fd => this.apiService.postSendFile(uploadData.sendResponse.id, uploadData.sendResponse.file.id, fd));
                        break;
                    case FileUploadType.Azure:
                        const renewalCallback = () => fileUpload_service_awaiter(this, void 0, void 0, function* () {
                            const renewalResponse = yield this.apiService.renewSendFileUploadUrl(uploadData.sendResponse.id, uploadData.sendResponse.file.id);
                            return renewalResponse.url;
                        });
                        yield this.azureFileUploadService.upload(uploadData.url, encryptedFileData, renewalCallback);
                        break;
                    default:
                        throw new Error('Unknown file upload type');
                }
            }
            catch (e) {
                yield this.apiService.deleteSend(uploadData.sendResponse.id);
                throw e;
            }
        });
    }
    uploadCipherAttachment(admin, uploadData, encryptedFileName, encryptedFileData) {
        return fileUpload_service_awaiter(this, void 0, void 0, function* () {
            const response = admin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;
            try {
                switch (uploadData.fileUploadType) {
                    case FileUploadType.Direct:
                        yield this.bitwardenFileUploadService.upload(encryptedFileName.encryptedString, encryptedFileData, fd => this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, fd));
                        break;
                    case FileUploadType.Azure:
                        const renewalCallback = () => fileUpload_service_awaiter(this, void 0, void 0, function* () {
                            const renewalResponse = yield this.apiService.renewAttachmentUploadUrl(response.id, uploadData.attachmentId);
                            return renewalResponse.url;
                        });
                        yield this.azureFileUploadService.upload(uploadData.url, encryptedFileData, renewalCallback);
                        break;
                    default:
                        throw new Error('Unknown file upload type.');
                }
            }
            catch (e) {
                if (admin) {
                    yield this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);
                }
                else {
                    yield this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);
                }
                throw e;
            }
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/data/folderData.ts
class FolderData {
    constructor(response, userId) {
        this.userId = userId;
        this.name = response.name;
        this.id = response.id;
        this.revisionDate = response.revisionDate;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/request/folderRequest.ts
class FolderRequest {
    constructor(folder) {
        this.name = folder.name ? folder.name.encryptedString : null;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/folder.service.ts
var folder_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const folder_service_Keys = {
    foldersPrefix: 'folders_',
    ciphersPrefix: 'ciphers_',
};
const folder_service_NestingDelimiter = '/';
class folder_service_FolderService {
    constructor(cryptoService, userService, apiService, storageService, i18nService, cipherService) {
        this.cryptoService = cryptoService;
        this.userService = userService;
        this.apiService = apiService;
        this.storageService = storageService;
        this.i18nService = i18nService;
        this.cipherService = cipherService;
    }
    clearCache() {
        this.decryptedFolderCache = null;
    }
    encrypt(model, key) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const folder = new folder_Folder();
            folder.id = model.id;
            folder.name = yield this.cryptoService.encrypt(model.name, key);
            return folder;
        });
    }
    get(id) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const folders = yield this.storageService.get(folder_service_Keys.foldersPrefix + userId);
            if (folders == null || !folders.hasOwnProperty(id)) {
                return null;
            }
            return new folder_Folder(folders[id]);
        });
    }
    getAll() {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const folders = yield this.storageService.get(folder_service_Keys.foldersPrefix + userId);
            const response = [];
            for (const id in folders) {
                if (folders.hasOwnProperty(id)) {
                    response.push(new folder_Folder(folders[id]));
                }
            }
            return response;
        });
    }
    getAllDecrypted() {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            if (this.decryptedFolderCache != null) {
                return this.decryptedFolderCache;
            }
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                throw new Error('No key.');
            }
            const decFolders = [];
            const promises = [];
            const folders = yield this.getAll();
            folders.forEach(folder => {
                promises.push(folder.decrypt().then(f => decFolders.push(f)));
            });
            yield Promise.all(promises);
            decFolders.sort(utils["a" /* Utils */].getSortFunction(this.i18nService, 'name'));
            const noneFolder = new folderView["a" /* FolderView */]();
            noneFolder.name = this.i18nService.t('noneFolder');
            decFolders.push(noneFolder);
            this.decryptedFolderCache = decFolders;
            return this.decryptedFolderCache;
        });
    }
    getAllNested() {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const folders = yield this.getAllDecrypted();
            const nodes = [];
            folders.forEach(f => {
                const folderCopy = new folderView["a" /* FolderView */]();
                folderCopy.id = f.id;
                folderCopy.revisionDate = f.revisionDate;
                const parts = f.name != null ? f.name.replace(/^\/+|\/+$/g, '').split(folder_service_NestingDelimiter) : [];
                serviceUtils_ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, folder_service_NestingDelimiter);
            });
            return nodes;
        });
    }
    getNested(id) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const folders = yield this.getAllNested();
            return serviceUtils_ServiceUtils.getTreeNodeObject(folders, id);
        });
    }
    saveWithServer(folder) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const request = new FolderRequest(folder);
            let response;
            if (folder.id == null) {
                response = yield this.apiService.postFolder(request);
                folder.id = response.id;
            }
            else {
                response = yield this.apiService.putFolder(folder.id, request);
            }
            const userId = yield this.userService.getUserId();
            const data = new FolderData(response, userId);
            yield this.upsert(data);
        });
    }
    upsert(folder) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let folders = yield this.storageService.get(folder_service_Keys.foldersPrefix + userId);
            if (folders == null) {
                folders = {};
            }
            if (folder instanceof FolderData) {
                const f = folder;
                folders[f.id] = f;
            }
            else {
                folder.forEach(f => {
                    folders[f.id] = f;
                });
            }
            yield this.storageService.save(folder_service_Keys.foldersPrefix + userId, folders);
            this.decryptedFolderCache = null;
        });
    }
    replace(folders) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(folder_service_Keys.foldersPrefix + userId, folders);
            this.decryptedFolderCache = null;
        });
    }
    clear(userId) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(folder_service_Keys.foldersPrefix + userId);
            this.decryptedFolderCache = null;
        });
    }
    delete(id) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const folders = yield this.storageService.get(folder_service_Keys.foldersPrefix + userId);
            if (folders == null) {
                return;
            }
            if (typeof id === 'string') {
                if (folders[id] == null) {
                    return;
                }
                delete folders[id];
            }
            else {
                id.forEach(i => {
                    delete folders[i];
                });
            }
            yield this.storageService.save(folder_service_Keys.foldersPrefix + userId, folders);
            this.decryptedFolderCache = null;
            // Items in a deleted folder are re-assigned to "No Folder"
            const ciphers = yield this.storageService.get(folder_service_Keys.ciphersPrefix + userId);
            if (ciphers != null) {
                const updates = [];
                for (const cId in ciphers) {
                    if (ciphers[cId].folderId === id) {
                        ciphers[cId].folderId = null;
                        updates.push(ciphers[cId]);
                    }
                }
                if (updates.length > 0) {
                    this.cipherService.upsert(updates);
                }
            }
        });
    }
    deleteWithServer(id) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            yield this.apiService.deleteFolder(id);
            yield this.delete(id);
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/enums/organizationUserType.ts
var OrganizationUserType;
(function (OrganizationUserType) {
    OrganizationUserType[OrganizationUserType["Owner"] = 0] = "Owner";
    OrganizationUserType[OrganizationUserType["Admin"] = 1] = "Admin";
    OrganizationUserType[OrganizationUserType["User"] = 2] = "User";
    OrganizationUserType[OrganizationUserType["Manager"] = 3] = "Manager";
    OrganizationUserType[OrganizationUserType["Custom"] = 4] = "Custom";
})(OrganizationUserType || (OrganizationUserType = {}));

// EXTERNAL MODULE: ./jslib/common/src/models/domain/symmetricCryptoKey.ts
var symmetricCryptoKey = __webpack_require__(66);

// EXTERNAL MODULE: ./jslib/common/src/models/request/keyConnectorUserKeyRequest.ts
var keyConnectorUserKeyRequest = __webpack_require__(172);

// CONCATENATED MODULE: ./jslib/common/src/services/keyConnector.service.ts
var keyConnector_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const keyConnector_service_Keys = {
    usesKeyConnector: 'usesKeyConnector',
    convertAccountToKeyConnector: 'convertAccountToKeyConnector',
};
class keyConnector_service_KeyConnectorService {
    constructor(storageService, userService, cryptoService, apiService, tokenService, logService) {
        this.storageService = storageService;
        this.userService = userService;
        this.cryptoService = cryptoService;
        this.apiService = apiService;
        this.tokenService = tokenService;
        this.logService = logService;
        this.usesKeyConnector = null;
    }
    setUsesKeyConnector(usesKeyConnector) {
        this.usesKeyConnector = usesKeyConnector;
        return this.storageService.save(keyConnector_service_Keys.usesKeyConnector, usesKeyConnector);
    }
    getUsesKeyConnector() {
        var _a;
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            return (_a = this.usesKeyConnector) !== null && _a !== void 0 ? _a : (this.usesKeyConnector = yield this.storageService.get(keyConnector_service_Keys.usesKeyConnector));
        });
    }
    userNeedsMigration() {
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            const loggedInUsingSso = this.tokenService.getIsExternal();
            const requiredByOrganization = (yield this.getManagingOrganization()) != null;
            const userIsNotUsingKeyConnector = !(yield this.getUsesKeyConnector());
            return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;
        });
    }
    migrateUser() {
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            const organization = yield this.getManagingOrganization();
            const key = yield this.cryptoService.getKey();
            try {
                const keyConnectorRequest = new keyConnectorUserKeyRequest["a" /* KeyConnectorUserKeyRequest */](key.encKeyB64);
                yield this.apiService.postUserKeyToKeyConnector(organization.keyConnectorUrl, keyConnectorRequest);
            }
            catch (e) {
                throw new Error('Unable to reach key connector');
            }
            yield this.apiService.postConvertToKeyConnector();
        });
    }
    getAndSetKey(url) {
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            try {
                const userKeyResponse = yield this.apiService.getUserKeyFromKeyConnector(url);
                const keyArr = utils["a" /* Utils */].fromB64ToArray(userKeyResponse.key);
                const k = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](keyArr);
                yield this.cryptoService.setKey(k);
            }
            catch (e) {
                this.logService.error(e);
                throw new Error('Unable to reach key connector');
            }
        });
    }
    getManagingOrganization() {
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            const orgs = yield this.userService.getAllOrganizations();
            return orgs.find(o => o.keyConnectorEnabled &&
                o.type !== OrganizationUserType.Admin &&
                o.type !== OrganizationUserType.Owner &&
                !o.isProviderUser);
        });
    }
    setConvertAccountRequired(status) {
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.save(keyConnector_service_Keys.convertAccountToKeyConnector, status);
        });
    }
    getConvertAccountRequired() {
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            return yield this.storageService.get(keyConnector_service_Keys.convertAccountToKeyConnector);
        });
    }
    removeConvertAccountRequired() {
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(keyConnector_service_Keys.convertAccountToKeyConnector);
        });
    }
    clear() {
        return keyConnector_service_awaiter(this, void 0, void 0, function* () {
            yield this.removeConvertAccountRequired();
        });
    }
}

// EXTERNAL MODULE: ./node_modules/@microsoft/signalr/dist/esm/index.js + 17 modules
var esm = __webpack_require__(39);

// EXTERNAL MODULE: ./node_modules/@microsoft/signalr-protocol-msgpack/dist/esm/index.js + 3 modules
var dist_esm = __webpack_require__(473);

// CONCATENATED MODULE: ./jslib/common/src/enums/notificationType.ts
var NotificationType;
(function (NotificationType) {
    NotificationType[NotificationType["SyncCipherUpdate"] = 0] = "SyncCipherUpdate";
    NotificationType[NotificationType["SyncCipherCreate"] = 1] = "SyncCipherCreate";
    NotificationType[NotificationType["SyncLoginDelete"] = 2] = "SyncLoginDelete";
    NotificationType[NotificationType["SyncFolderDelete"] = 3] = "SyncFolderDelete";
    NotificationType[NotificationType["SyncCiphers"] = 4] = "SyncCiphers";
    NotificationType[NotificationType["SyncVault"] = 5] = "SyncVault";
    NotificationType[NotificationType["SyncOrgKeys"] = 6] = "SyncOrgKeys";
    NotificationType[NotificationType["SyncFolderCreate"] = 7] = "SyncFolderCreate";
    NotificationType[NotificationType["SyncFolderUpdate"] = 8] = "SyncFolderUpdate";
    NotificationType[NotificationType["SyncCipherDelete"] = 9] = "SyncCipherDelete";
    NotificationType[NotificationType["SyncSettings"] = 10] = "SyncSettings";
    NotificationType[NotificationType["LogOut"] = 11] = "LogOut";
    NotificationType[NotificationType["SyncSendCreate"] = 12] = "SyncSendCreate";
    NotificationType[NotificationType["SyncSendUpdate"] = 13] = "SyncSendUpdate";
    NotificationType[NotificationType["SyncSendDelete"] = 14] = "SyncSendDelete";
})(NotificationType || (NotificationType = {}));

// CONCATENATED MODULE: ./jslib/common/src/models/response/notificationResponse.ts


class notificationResponse_NotificationResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.contextId = this.getResponseProperty('ContextId');
        this.type = this.getResponseProperty('Type');
        const payload = this.getResponseProperty('Payload');
        switch (this.type) {
            case NotificationType.SyncCipherCreate:
            case NotificationType.SyncCipherDelete:
            case NotificationType.SyncCipherUpdate:
            case NotificationType.SyncLoginDelete:
                this.payload = new notificationResponse_SyncCipherNotification(payload);
                break;
            case NotificationType.SyncFolderCreate:
            case NotificationType.SyncFolderDelete:
            case NotificationType.SyncFolderUpdate:
                this.payload = new notificationResponse_SyncFolderNotification(payload);
                break;
            case NotificationType.SyncVault:
            case NotificationType.SyncCiphers:
            case NotificationType.SyncOrgKeys:
            case NotificationType.SyncSettings:
            case NotificationType.LogOut:
                this.payload = new notificationResponse_UserNotification(payload);
                break;
            case NotificationType.SyncSendCreate:
            case NotificationType.SyncSendUpdate:
            case NotificationType.SyncSendDelete:
                this.payload = new notificationResponse_SyncSendNotification(payload);
            default:
                break;
        }
    }
}
class notificationResponse_SyncCipherNotification extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.collectionIds = this.getResponseProperty('CollectionIds');
        this.revisionDate = new Date(this.getResponseProperty('RevisionDate'));
    }
}
class notificationResponse_SyncFolderNotification extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.revisionDate = new Date(this.getResponseProperty('RevisionDate'));
    }
}
class notificationResponse_UserNotification extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.userId = this.getResponseProperty('UserId');
        this.date = new Date(this.getResponseProperty('Date'));
    }
}
class notificationResponse_SyncSendNotification extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.revisionDate = new Date(this.getResponseProperty('RevisionDate'));
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/notifications.service.ts
var notifications_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class notifications_service_NotificationsService {
    constructor(userService, syncService, appIdService, apiService, vaultTimeoutService, environmentService, logoutCallback, logService) {
        this.userService = userService;
        this.syncService = syncService;
        this.appIdService = appIdService;
        this.apiService = apiService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.environmentService = environmentService;
        this.logoutCallback = logoutCallback;
        this.logService = logService;
        this.connected = false;
        this.inited = false;
        this.inactive = false;
        this.reconnectTimer = null;
        this.environmentService.urls.subscribe(() => {
            if (!this.inited) {
                return;
            }
            this.init();
        });
    }
    init() {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            this.inited = false;
            this.url = this.environmentService.getNotificationsUrl();
            // Set notifications server URL to `https://-` to effectively disable communication
            // with the notifications server from the client app
            if (this.url === 'https://-') {
                return;
            }
            if (this.signalrConnection != null) {
                this.signalrConnection.off('ReceiveMessage');
                this.signalrConnection.off('Heartbeat');
                yield this.signalrConnection.stop();
                this.connected = false;
                this.signalrConnection = null;
            }
            this.signalrConnection = new esm["b" /* HubConnectionBuilder */]()
                .withUrl(this.url + '/hub', {
                accessTokenFactory: () => this.apiService.getActiveBearerToken(),
                skipNegotiation: true,
                transport: esm["a" /* HttpTransportType */].WebSockets,
            })
                .withHubProtocol(new dist_esm["a" /* MessagePackHubProtocol */]())
                // .configureLogging(signalR.LogLevel.Trace)
                .build();
            this.signalrConnection.on('ReceiveMessage', (data) => this.processNotification(new notificationResponse_NotificationResponse(data)));
            this.signalrConnection.on('Heartbeat', (data) => { });
            this.signalrConnection.onclose(() => {
                this.connected = false;
                this.reconnect(true);
            });
            this.inited = true;
            if (yield this.isAuthedAndUnlocked()) {
                yield this.reconnect(false);
            }
        });
    }
    updateConnection(sync = false) {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            if (!this.inited) {
                return;
            }
            try {
                if (yield this.isAuthedAndUnlocked()) {
                    yield this.reconnect(sync);
                }
                else {
                    yield this.signalrConnection.stop();
                }
            }
            catch (e) {
                this.logService.error(e.toString());
            }
        });
    }
    reconnectFromActivity() {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            this.inactive = false;
            if (this.inited && !this.connected) {
                yield this.reconnect(true);
            }
        });
    }
    disconnectFromInactivity() {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            this.inactive = true;
            if (this.inited && this.connected) {
                yield this.signalrConnection.stop();
            }
        });
    }
    processNotification(notification) {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            const appId = yield this.appIdService.getAppId();
            if (notification == null || notification.contextId === appId) {
                return;
            }
            const isAuthenticated = yield this.userService.isAuthenticated();
            const payloadUserId = notification.payload.userId || notification.payload.UserId;
            const myUserId = yield this.userService.getUserId();
            if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {
                return;
            }
            switch (notification.type) {
                case NotificationType.SyncCipherCreate:
                case NotificationType.SyncCipherUpdate:
                    yield this.syncService.syncUpsertCipher(notification.payload, notification.type === NotificationType.SyncCipherUpdate);
                    break;
                case NotificationType.SyncCipherDelete:
                case NotificationType.SyncLoginDelete:
                    yield this.syncService.syncDeleteCipher(notification.payload);
                    break;
                case NotificationType.SyncFolderCreate:
                case NotificationType.SyncFolderUpdate:
                    yield this.syncService.syncUpsertFolder(notification.payload, notification.type === NotificationType.SyncFolderUpdate);
                    break;
                case NotificationType.SyncFolderDelete:
                    yield this.syncService.syncDeleteFolder(notification.payload);
                    break;
                case NotificationType.SyncVault:
                case NotificationType.SyncCiphers:
                case NotificationType.SyncSettings:
                    if (isAuthenticated) {
                        yield this.syncService.fullSync(false);
                    }
                    break;
                case NotificationType.SyncOrgKeys:
                    if (isAuthenticated) {
                        yield this.syncService.fullSync(true);
                        // Stop so a reconnect can be made
                        yield this.signalrConnection.stop();
                    }
                    break;
                case NotificationType.LogOut:
                    if (isAuthenticated) {
                        this.logoutCallback();
                    }
                    break;
                case NotificationType.SyncSendCreate:
                case NotificationType.SyncSendUpdate:
                    yield this.syncService.syncUpsertSend(notification.payload, notification.type === NotificationType.SyncSendUpdate);
                    break;
                case NotificationType.SyncSendDelete:
                    yield this.syncService.syncDeleteSend(notification.payload);
                default:
                    break;
            }
        });
    }
    reconnect(sync) {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            if (this.reconnectTimer != null) {
                clearTimeout(this.reconnectTimer);
                this.reconnectTimer = null;
            }
            if (this.connected || !this.inited || this.inactive) {
                return;
            }
            const authedAndUnlocked = yield this.isAuthedAndUnlocked();
            if (!authedAndUnlocked) {
                return;
            }
            try {
                yield this.signalrConnection.start();
                this.connected = true;
                if (sync) {
                    yield this.syncService.fullSync(false);
                }
            }
            catch (e) {
                this.logService.error(e);
            }
            if (!this.connected) {
                this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));
            }
        });
    }
    isAuthedAndUnlocked() {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            if (yield this.userService.isAuthenticated()) {
                const locked = yield this.vaultTimeoutService.isLocked();
                return !locked;
            }
            return false;
        });
    }
    random(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
}

// EXTERNAL MODULE: ./node_modules/zxcvbn/lib/main.js
var main = __webpack_require__(469);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/generatedPasswordHistory.ts
class GeneratedPasswordHistory {
    constructor(password, date) {
        this.password = password;
        this.date = date;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/domain/passwordGeneratorPolicyOptions.ts

class passwordGeneratorPolicyOptions_PasswordGeneratorPolicyOptions extends domainBase["a" /* default */] {
    constructor() {
        super(...arguments);
        this.defaultType = '';
        this.minLength = 0;
        this.useUppercase = false;
        this.useLowercase = false;
        this.useNumbers = false;
        this.numberCount = 0;
        this.useSpecial = false;
        this.specialCount = 0;
        this.minNumberWords = 0;
        this.capitalize = false;
        this.includeNumber = false;
    }
    inEffect() {
        return this.defaultType !== '' ||
            this.minLength > 0 ||
            this.numberCount > 0 ||
            this.specialCount > 0 ||
            this.useUppercase ||
            this.useLowercase ||
            this.useNumbers ||
            this.useSpecial ||
            this.minNumberWords > 0 ||
            this.capitalize ||
            this.includeNumber;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/misc/wordlist.ts
// EFF's Long Wordlist from https://www.eff.org/dice
const EEFLongWordList = [
    'abacus',
    'abdomen',
    'abdominal',
    'abide',
    'abiding',
    'ability',
    'ablaze',
    'able',
    'abnormal',
    'abrasion',
    'abrasive',
    'abreast',
    'abridge',
    'abroad',
    'abruptly',
    'absence',
    'absentee',
    'absently',
    'absinthe',
    'absolute',
    'absolve',
    'abstain',
    'abstract',
    'absurd',
    'accent',
    'acclaim',
    'acclimate',
    'accompany',
    'account',
    'accuracy',
    'accurate',
    'accustom',
    'acetone',
    'achiness',
    'aching',
    'acid',
    'acorn',
    'acquaint',
    'acquire',
    'acre',
    'acrobat',
    'acronym',
    'acting',
    'action',
    'activate',
    'activator',
    'active',
    'activism',
    'activist',
    'activity',
    'actress',
    'acts',
    'acutely',
    'acuteness',
    'aeration',
    'aerobics',
    'aerosol',
    'aerospace',
    'afar',
    'affair',
    'affected',
    'affecting',
    'affection',
    'affidavit',
    'affiliate',
    'affirm',
    'affix',
    'afflicted',
    'affluent',
    'afford',
    'affront',
    'aflame',
    'afloat',
    'aflutter',
    'afoot',
    'afraid',
    'afterglow',
    'afterlife',
    'aftermath',
    'aftermost',
    'afternoon',
    'aged',
    'ageless',
    'agency',
    'agenda',
    'agent',
    'aggregate',
    'aghast',
    'agile',
    'agility',
    'aging',
    'agnostic',
    'agonize',
    'agonizing',
    'agony',
    'agreeable',
    'agreeably',
    'agreed',
    'agreeing',
    'agreement',
    'aground',
    'ahead',
    'ahoy',
    'aide',
    'aids',
    'aim',
    'ajar',
    'alabaster',
    'alarm',
    'albatross',
    'album',
    'alfalfa',
    'algebra',
    'algorithm',
    'alias',
    'alibi',
    'alienable',
    'alienate',
    'aliens',
    'alike',
    'alive',
    'alkaline',
    'alkalize',
    'almanac',
    'almighty',
    'almost',
    'aloe',
    'aloft',
    'aloha',
    'alone',
    'alongside',
    'aloof',
    'alphabet',
    'alright',
    'although',
    'altitude',
    'alto',
    'aluminum',
    'alumni',
    'always',
    'amaretto',
    'amaze',
    'amazingly',
    'amber',
    'ambiance',
    'ambiguity',
    'ambiguous',
    'ambition',
    'ambitious',
    'ambulance',
    'ambush',
    'amendable',
    'amendment',
    'amends',
    'amenity',
    'amiable',
    'amicably',
    'amid',
    'amigo',
    'amino',
    'amiss',
    'ammonia',
    'ammonium',
    'amnesty',
    'amniotic',
    'among',
    'amount',
    'amperage',
    'ample',
    'amplifier',
    'amplify',
    'amply',
    'amuck',
    'amulet',
    'amusable',
    'amused',
    'amusement',
    'amuser',
    'amusing',
    'anaconda',
    'anaerobic',
    'anagram',
    'anatomist',
    'anatomy',
    'anchor',
    'anchovy',
    'ancient',
    'android',
    'anemia',
    'anemic',
    'aneurism',
    'anew',
    'angelfish',
    'angelic',
    'anger',
    'angled',
    'angler',
    'angles',
    'angling',
    'angrily',
    'angriness',
    'anguished',
    'angular',
    'animal',
    'animate',
    'animating',
    'animation',
    'animator',
    'anime',
    'animosity',
    'ankle',
    'annex',
    'annotate',
    'announcer',
    'annoying',
    'annually',
    'annuity',
    'anointer',
    'another',
    'answering',
    'antacid',
    'antarctic',
    'anteater',
    'antelope',
    'antennae',
    'anthem',
    'anthill',
    'anthology',
    'antibody',
    'antics',
    'antidote',
    'antihero',
    'antiquely',
    'antiques',
    'antiquity',
    'antirust',
    'antitoxic',
    'antitrust',
    'antiviral',
    'antivirus',
    'antler',
    'antonym',
    'antsy',
    'anvil',
    'anybody',
    'anyhow',
    'anymore',
    'anyone',
    'anyplace',
    'anything',
    'anytime',
    'anyway',
    'anywhere',
    'aorta',
    'apache',
    'apostle',
    'appealing',
    'appear',
    'appease',
    'appeasing',
    'appendage',
    'appendix',
    'appetite',
    'appetizer',
    'applaud',
    'applause',
    'apple',
    'appliance',
    'applicant',
    'applied',
    'apply',
    'appointee',
    'appraisal',
    'appraiser',
    'apprehend',
    'approach',
    'approval',
    'approve',
    'apricot',
    'april',
    'apron',
    'aptitude',
    'aptly',
    'aqua',
    'aqueduct',
    'arbitrary',
    'arbitrate',
    'ardently',
    'area',
    'arena',
    'arguable',
    'arguably',
    'argue',
    'arise',
    'armadillo',
    'armband',
    'armchair',
    'armed',
    'armful',
    'armhole',
    'arming',
    'armless',
    'armoire',
    'armored',
    'armory',
    'armrest',
    'army',
    'aroma',
    'arose',
    'around',
    'arousal',
    'arrange',
    'array',
    'arrest',
    'arrival',
    'arrive',
    'arrogance',
    'arrogant',
    'arson',
    'art',
    'ascend',
    'ascension',
    'ascent',
    'ascertain',
    'ashamed',
    'ashen',
    'ashes',
    'ashy',
    'aside',
    'askew',
    'asleep',
    'asparagus',
    'aspect',
    'aspirate',
    'aspire',
    'aspirin',
    'astonish',
    'astound',
    'astride',
    'astrology',
    'astronaut',
    'astronomy',
    'astute',
    'atlantic',
    'atlas',
    'atom',
    'atonable',
    'atop',
    'atrium',
    'atrocious',
    'atrophy',
    'attach',
    'attain',
    'attempt',
    'attendant',
    'attendee',
    'attention',
    'attentive',
    'attest',
    'attic',
    'attire',
    'attitude',
    'attractor',
    'attribute',
    'atypical',
    'auction',
    'audacious',
    'audacity',
    'audible',
    'audibly',
    'audience',
    'audio',
    'audition',
    'augmented',
    'august',
    'authentic',
    'author',
    'autism',
    'autistic',
    'autograph',
    'automaker',
    'automated',
    'automatic',
    'autopilot',
    'available',
    'avalanche',
    'avatar',
    'avenge',
    'avenging',
    'avenue',
    'average',
    'aversion',
    'avert',
    'aviation',
    'aviator',
    'avid',
    'avoid',
    'await',
    'awaken',
    'award',
    'aware',
    'awhile',
    'awkward',
    'awning',
    'awoke',
    'awry',
    'axis',
    'babble',
    'babbling',
    'babied',
    'baboon',
    'backache',
    'backboard',
    'backboned',
    'backdrop',
    'backed',
    'backer',
    'backfield',
    'backfire',
    'backhand',
    'backing',
    'backlands',
    'backlash',
    'backless',
    'backlight',
    'backlit',
    'backlog',
    'backpack',
    'backpedal',
    'backrest',
    'backroom',
    'backshift',
    'backside',
    'backslid',
    'backspace',
    'backspin',
    'backstab',
    'backstage',
    'backtalk',
    'backtrack',
    'backup',
    'backward',
    'backwash',
    'backwater',
    'backyard',
    'bacon',
    'bacteria',
    'bacterium',
    'badass',
    'badge',
    'badland',
    'badly',
    'badness',
    'baffle',
    'baffling',
    'bagel',
    'bagful',
    'baggage',
    'bagged',
    'baggie',
    'bagginess',
    'bagging',
    'baggy',
    'bagpipe',
    'baguette',
    'baked',
    'bakery',
    'bakeshop',
    'baking',
    'balance',
    'balancing',
    'balcony',
    'balmy',
    'balsamic',
    'bamboo',
    'banana',
    'banish',
    'banister',
    'banjo',
    'bankable',
    'bankbook',
    'banked',
    'banker',
    'banking',
    'banknote',
    'bankroll',
    'banner',
    'bannister',
    'banshee',
    'banter',
    'barbecue',
    'barbed',
    'barbell',
    'barber',
    'barcode',
    'barge',
    'bargraph',
    'barista',
    'baritone',
    'barley',
    'barmaid',
    'barman',
    'barn',
    'barometer',
    'barrack',
    'barracuda',
    'barrel',
    'barrette',
    'barricade',
    'barrier',
    'barstool',
    'bartender',
    'barterer',
    'bash',
    'basically',
    'basics',
    'basil',
    'basin',
    'basis',
    'basket',
    'batboy',
    'batch',
    'bath',
    'baton',
    'bats',
    'battalion',
    'battered',
    'battering',
    'battery',
    'batting',
    'battle',
    'bauble',
    'bazooka',
    'blabber',
    'bladder',
    'blade',
    'blah',
    'blame',
    'blaming',
    'blanching',
    'blandness',
    'blank',
    'blaspheme',
    'blasphemy',
    'blast',
    'blatancy',
    'blatantly',
    'blazer',
    'blazing',
    'bleach',
    'bleak',
    'bleep',
    'blemish',
    'blend',
    'bless',
    'blighted',
    'blimp',
    'bling',
    'blinked',
    'blinker',
    'blinking',
    'blinks',
    'blip',
    'blissful',
    'blitz',
    'blizzard',
    'bloated',
    'bloating',
    'blob',
    'blog',
    'bloomers',
    'blooming',
    'blooper',
    'blot',
    'blouse',
    'blubber',
    'bluff',
    'bluish',
    'blunderer',
    'blunt',
    'blurb',
    'blurred',
    'blurry',
    'blurt',
    'blush',
    'blustery',
    'boaster',
    'boastful',
    'boasting',
    'boat',
    'bobbed',
    'bobbing',
    'bobble',
    'bobcat',
    'bobsled',
    'bobtail',
    'bodacious',
    'body',
    'bogged',
    'boggle',
    'bogus',
    'boil',
    'bok',
    'bolster',
    'bolt',
    'bonanza',
    'bonded',
    'bonding',
    'bondless',
    'boned',
    'bonehead',
    'boneless',
    'bonelike',
    'boney',
    'bonfire',
    'bonnet',
    'bonsai',
    'bonus',
    'bony',
    'boogeyman',
    'boogieman',
    'book',
    'boondocks',
    'booted',
    'booth',
    'bootie',
    'booting',
    'bootlace',
    'bootleg',
    'boots',
    'boozy',
    'borax',
    'boring',
    'borough',
    'borrower',
    'borrowing',
    'boss',
    'botanical',
    'botanist',
    'botany',
    'botch',
    'both',
    'bottle',
    'bottling',
    'bottom',
    'bounce',
    'bouncing',
    'bouncy',
    'bounding',
    'boundless',
    'bountiful',
    'bovine',
    'boxcar',
    'boxer',
    'boxing',
    'boxlike',
    'boxy',
    'breach',
    'breath',
    'breeches',
    'breeching',
    'breeder',
    'breeding',
    'breeze',
    'breezy',
    'brethren',
    'brewery',
    'brewing',
    'briar',
    'bribe',
    'brick',
    'bride',
    'bridged',
    'brigade',
    'bright',
    'brilliant',
    'brim',
    'bring',
    'brink',
    'brisket',
    'briskly',
    'briskness',
    'bristle',
    'brittle',
    'broadband',
    'broadcast',
    'broaden',
    'broadly',
    'broadness',
    'broadside',
    'broadways',
    'broiler',
    'broiling',
    'broken',
    'broker',
    'bronchial',
    'bronco',
    'bronze',
    'bronzing',
    'brook',
    'broom',
    'brought',
    'browbeat',
    'brownnose',
    'browse',
    'browsing',
    'bruising',
    'brunch',
    'brunette',
    'brunt',
    'brush',
    'brussels',
    'brute',
    'brutishly',
    'bubble',
    'bubbling',
    'bubbly',
    'buccaneer',
    'bucked',
    'bucket',
    'buckle',
    'buckshot',
    'buckskin',
    'bucktooth',
    'buckwheat',
    'buddhism',
    'buddhist',
    'budding',
    'buddy',
    'budget',
    'buffalo',
    'buffed',
    'buffer',
    'buffing',
    'buffoon',
    'buggy',
    'bulb',
    'bulge',
    'bulginess',
    'bulgur',
    'bulk',
    'bulldog',
    'bulldozer',
    'bullfight',
    'bullfrog',
    'bullhorn',
    'bullion',
    'bullish',
    'bullpen',
    'bullring',
    'bullseye',
    'bullwhip',
    'bully',
    'bunch',
    'bundle',
    'bungee',
    'bunion',
    'bunkbed',
    'bunkhouse',
    'bunkmate',
    'bunny',
    'bunt',
    'busboy',
    'bush',
    'busily',
    'busload',
    'bust',
    'busybody',
    'buzz',
    'cabana',
    'cabbage',
    'cabbie',
    'cabdriver',
    'cable',
    'caboose',
    'cache',
    'cackle',
    'cacti',
    'cactus',
    'caddie',
    'caddy',
    'cadet',
    'cadillac',
    'cadmium',
    'cage',
    'cahoots',
    'cake',
    'calamari',
    'calamity',
    'calcium',
    'calculate',
    'calculus',
    'caliber',
    'calibrate',
    'calm',
    'caloric',
    'calorie',
    'calzone',
    'camcorder',
    'cameo',
    'camera',
    'camisole',
    'camper',
    'campfire',
    'camping',
    'campsite',
    'campus',
    'canal',
    'canary',
    'cancel',
    'candied',
    'candle',
    'candy',
    'cane',
    'canine',
    'canister',
    'cannabis',
    'canned',
    'canning',
    'cannon',
    'cannot',
    'canola',
    'canon',
    'canopener',
    'canopy',
    'canteen',
    'canyon',
    'capable',
    'capably',
    'capacity',
    'cape',
    'capillary',
    'capital',
    'capitol',
    'capped',
    'capricorn',
    'capsize',
    'capsule',
    'caption',
    'captivate',
    'captive',
    'captivity',
    'capture',
    'caramel',
    'carat',
    'caravan',
    'carbon',
    'cardboard',
    'carded',
    'cardiac',
    'cardigan',
    'cardinal',
    'cardstock',
    'carefully',
    'caregiver',
    'careless',
    'caress',
    'caretaker',
    'cargo',
    'caring',
    'carless',
    'carload',
    'carmaker',
    'carnage',
    'carnation',
    'carnival',
    'carnivore',
    'carol',
    'carpenter',
    'carpentry',
    'carpool',
    'carport',
    'carried',
    'carrot',
    'carrousel',
    'carry',
    'cartel',
    'cartload',
    'carton',
    'cartoon',
    'cartridge',
    'cartwheel',
    'carve',
    'carving',
    'carwash',
    'cascade',
    'case',
    'cash',
    'casing',
    'casino',
    'casket',
    'cassette',
    'casually',
    'casualty',
    'catacomb',
    'catalog',
    'catalyst',
    'catalyze',
    'catapult',
    'cataract',
    'catatonic',
    'catcall',
    'catchable',
    'catcher',
    'catching',
    'catchy',
    'caterer',
    'catering',
    'catfight',
    'catfish',
    'cathedral',
    'cathouse',
    'catlike',
    'catnap',
    'catnip',
    'catsup',
    'cattail',
    'cattishly',
    'cattle',
    'catty',
    'catwalk',
    'caucasian',
    'caucus',
    'causal',
    'causation',
    'cause',
    'causing',
    'cauterize',
    'caution',
    'cautious',
    'cavalier',
    'cavalry',
    'caviar',
    'cavity',
    'cedar',
    'celery',
    'celestial',
    'celibacy',
    'celibate',
    'celtic',
    'cement',
    'census',
    'ceramics',
    'ceremony',
    'certainly',
    'certainty',
    'certified',
    'certify',
    'cesarean',
    'cesspool',
    'chafe',
    'chaffing',
    'chain',
    'chair',
    'chalice',
    'challenge',
    'chamber',
    'chamomile',
    'champion',
    'chance',
    'change',
    'channel',
    'chant',
    'chaos',
    'chaperone',
    'chaplain',
    'chapped',
    'chaps',
    'chapter',
    'character',
    'charbroil',
    'charcoal',
    'charger',
    'charging',
    'chariot',
    'charity',
    'charm',
    'charred',
    'charter',
    'charting',
    'chase',
    'chasing',
    'chaste',
    'chastise',
    'chastity',
    'chatroom',
    'chatter',
    'chatting',
    'chatty',
    'cheating',
    'cheddar',
    'cheek',
    'cheer',
    'cheese',
    'cheesy',
    'chef',
    'chemicals',
    'chemist',
    'chemo',
    'cherisher',
    'cherub',
    'chess',
    'chest',
    'chevron',
    'chevy',
    'chewable',
    'chewer',
    'chewing',
    'chewy',
    'chief',
    'chihuahua',
    'childcare',
    'childhood',
    'childish',
    'childless',
    'childlike',
    'chili',
    'chill',
    'chimp',
    'chip',
    'chirping',
    'chirpy',
    'chitchat',
    'chivalry',
    'chive',
    'chloride',
    'chlorine',
    'choice',
    'chokehold',
    'choking',
    'chomp',
    'chooser',
    'choosing',
    'choosy',
    'chop',
    'chosen',
    'chowder',
    'chowtime',
    'chrome',
    'chubby',
    'chuck',
    'chug',
    'chummy',
    'chump',
    'chunk',
    'churn',
    'chute',
    'cider',
    'cilantro',
    'cinch',
    'cinema',
    'cinnamon',
    'circle',
    'circling',
    'circular',
    'circulate',
    'circus',
    'citable',
    'citadel',
    'citation',
    'citizen',
    'citric',
    'citrus',
    'city',
    'civic',
    'civil',
    'clad',
    'claim',
    'clambake',
    'clammy',
    'clamor',
    'clamp',
    'clamshell',
    'clang',
    'clanking',
    'clapped',
    'clapper',
    'clapping',
    'clarify',
    'clarinet',
    'clarity',
    'clash',
    'clasp',
    'class',
    'clatter',
    'clause',
    'clavicle',
    'claw',
    'clay',
    'clean',
    'clear',
    'cleat',
    'cleaver',
    'cleft',
    'clench',
    'clergyman',
    'clerical',
    'clerk',
    'clever',
    'clicker',
    'client',
    'climate',
    'climatic',
    'cling',
    'clinic',
    'clinking',
    'clip',
    'clique',
    'cloak',
    'clobber',
    'clock',
    'clone',
    'cloning',
    'closable',
    'closure',
    'clothes',
    'clothing',
    'cloud',
    'clover',
    'clubbed',
    'clubbing',
    'clubhouse',
    'clump',
    'clumsily',
    'clumsy',
    'clunky',
    'clustered',
    'clutch',
    'clutter',
    'coach',
    'coagulant',
    'coastal',
    'coaster',
    'coasting',
    'coastland',
    'coastline',
    'coat',
    'coauthor',
    'cobalt',
    'cobbler',
    'cobweb',
    'cocoa',
    'coconut',
    'cod',
    'coeditor',
    'coerce',
    'coexist',
    'coffee',
    'cofounder',
    'cognition',
    'cognitive',
    'cogwheel',
    'coherence',
    'coherent',
    'cohesive',
    'coil',
    'coke',
    'cola',
    'cold',
    'coleslaw',
    'coliseum',
    'collage',
    'collapse',
    'collar',
    'collected',
    'collector',
    'collide',
    'collie',
    'collision',
    'colonial',
    'colonist',
    'colonize',
    'colony',
    'colossal',
    'colt',
    'coma',
    'come',
    'comfort',
    'comfy',
    'comic',
    'coming',
    'comma',
    'commence',
    'commend',
    'comment',
    'commerce',
    'commode',
    'commodity',
    'commodore',
    'common',
    'commotion',
    'commute',
    'commuting',
    'compacted',
    'compacter',
    'compactly',
    'compactor',
    'companion',
    'company',
    'compare',
    'compel',
    'compile',
    'comply',
    'component',
    'composed',
    'composer',
    'composite',
    'compost',
    'composure',
    'compound',
    'compress',
    'comprised',
    'computer',
    'computing',
    'comrade',
    'concave',
    'conceal',
    'conceded',
    'concept',
    'concerned',
    'concert',
    'conch',
    'concierge',
    'concise',
    'conclude',
    'concrete',
    'concur',
    'condense',
    'condiment',
    'condition',
    'condone',
    'conducive',
    'conductor',
    'conduit',
    'cone',
    'confess',
    'confetti',
    'confidant',
    'confident',
    'confider',
    'confiding',
    'configure',
    'confined',
    'confining',
    'confirm',
    'conflict',
    'conform',
    'confound',
    'confront',
    'confused',
    'confusing',
    'confusion',
    'congenial',
    'congested',
    'congrats',
    'congress',
    'conical',
    'conjoined',
    'conjure',
    'conjuror',
    'connected',
    'connector',
    'consensus',
    'consent',
    'console',
    'consoling',
    'consonant',
    'constable',
    'constant',
    'constrain',
    'constrict',
    'construct',
    'consult',
    'consumer',
    'consuming',
    'contact',
    'container',
    'contempt',
    'contend',
    'contented',
    'contently',
    'contents',
    'contest',
    'context',
    'contort',
    'contour',
    'contrite',
    'control',
    'contusion',
    'convene',
    'convent',
    'copartner',
    'cope',
    'copied',
    'copier',
    'copilot',
    'coping',
    'copious',
    'copper',
    'copy',
    'coral',
    'cork',
    'cornball',
    'cornbread',
    'corncob',
    'cornea',
    'corned',
    'corner',
    'cornfield',
    'cornflake',
    'cornhusk',
    'cornmeal',
    'cornstalk',
    'corny',
    'coronary',
    'coroner',
    'corporal',
    'corporate',
    'corral',
    'correct',
    'corridor',
    'corrode',
    'corroding',
    'corrosive',
    'corsage',
    'corset',
    'cortex',
    'cosigner',
    'cosmetics',
    'cosmic',
    'cosmos',
    'cosponsor',
    'cost',
    'cottage',
    'cotton',
    'couch',
    'cough',
    'could',
    'countable',
    'countdown',
    'counting',
    'countless',
    'country',
    'county',
    'courier',
    'covenant',
    'cover',
    'coveted',
    'coveting',
    'coyness',
    'cozily',
    'coziness',
    'cozy',
    'crabbing',
    'crabgrass',
    'crablike',
    'crabmeat',
    'cradle',
    'cradling',
    'crafter',
    'craftily',
    'craftsman',
    'craftwork',
    'crafty',
    'cramp',
    'cranberry',
    'crane',
    'cranial',
    'cranium',
    'crank',
    'crate',
    'crave',
    'craving',
    'crawfish',
    'crawlers',
    'crawling',
    'crayfish',
    'crayon',
    'crazed',
    'crazily',
    'craziness',
    'crazy',
    'creamed',
    'creamer',
    'creamlike',
    'crease',
    'creasing',
    'creatable',
    'create',
    'creation',
    'creative',
    'creature',
    'credible',
    'credibly',
    'credit',
    'creed',
    'creme',
    'creole',
    'crepe',
    'crept',
    'crescent',
    'crested',
    'cresting',
    'crestless',
    'crevice',
    'crewless',
    'crewman',
    'crewmate',
    'crib',
    'cricket',
    'cried',
    'crier',
    'crimp',
    'crimson',
    'cringe',
    'cringing',
    'crinkle',
    'crinkly',
    'crisped',
    'crisping',
    'crisply',
    'crispness',
    'crispy',
    'criteria',
    'critter',
    'croak',
    'crock',
    'crook',
    'croon',
    'crop',
    'cross',
    'crouch',
    'crouton',
    'crowbar',
    'crowd',
    'crown',
    'crucial',
    'crudely',
    'crudeness',
    'cruelly',
    'cruelness',
    'cruelty',
    'crumb',
    'crummiest',
    'crummy',
    'crumpet',
    'crumpled',
    'cruncher',
    'crunching',
    'crunchy',
    'crusader',
    'crushable',
    'crushed',
    'crusher',
    'crushing',
    'crust',
    'crux',
    'crying',
    'cryptic',
    'crystal',
    'cubbyhole',
    'cube',
    'cubical',
    'cubicle',
    'cucumber',
    'cuddle',
    'cuddly',
    'cufflink',
    'culinary',
    'culminate',
    'culpable',
    'culprit',
    'cultivate',
    'cultural',
    'culture',
    'cupbearer',
    'cupcake',
    'cupid',
    'cupped',
    'cupping',
    'curable',
    'curator',
    'curdle',
    'cure',
    'curfew',
    'curing',
    'curled',
    'curler',
    'curliness',
    'curling',
    'curly',
    'curry',
    'curse',
    'cursive',
    'cursor',
    'curtain',
    'curtly',
    'curtsy',
    'curvature',
    'curve',
    'curvy',
    'cushy',
    'cusp',
    'cussed',
    'custard',
    'custodian',
    'custody',
    'customary',
    'customer',
    'customize',
    'customs',
    'cut',
    'cycle',
    'cyclic',
    'cycling',
    'cyclist',
    'cylinder',
    'cymbal',
    'cytoplasm',
    'cytoplast',
    'dab',
    'dad',
    'daffodil',
    'dagger',
    'daily',
    'daintily',
    'dainty',
    'dairy',
    'daisy',
    'dallying',
    'dance',
    'dancing',
    'dandelion',
    'dander',
    'dandruff',
    'dandy',
    'danger',
    'dangle',
    'dangling',
    'daredevil',
    'dares',
    'daringly',
    'darkened',
    'darkening',
    'darkish',
    'darkness',
    'darkroom',
    'darling',
    'darn',
    'dart',
    'darwinism',
    'dash',
    'dastardly',
    'data',
    'datebook',
    'dating',
    'daughter',
    'daunting',
    'dawdler',
    'dawn',
    'daybed',
    'daybreak',
    'daycare',
    'daydream',
    'daylight',
    'daylong',
    'dayroom',
    'daytime',
    'dazzler',
    'dazzling',
    'deacon',
    'deafening',
    'deafness',
    'dealer',
    'dealing',
    'dealmaker',
    'dealt',
    'dean',
    'debatable',
    'debate',
    'debating',
    'debit',
    'debrief',
    'debtless',
    'debtor',
    'debug',
    'debunk',
    'decade',
    'decaf',
    'decal',
    'decathlon',
    'decay',
    'deceased',
    'deceit',
    'deceiver',
    'deceiving',
    'december',
    'decency',
    'decent',
    'deception',
    'deceptive',
    'decibel',
    'decidable',
    'decimal',
    'decimeter',
    'decipher',
    'deck',
    'declared',
    'decline',
    'decode',
    'decompose',
    'decorated',
    'decorator',
    'decoy',
    'decrease',
    'decree',
    'dedicate',
    'dedicator',
    'deduce',
    'deduct',
    'deed',
    'deem',
    'deepen',
    'deeply',
    'deepness',
    'deface',
    'defacing',
    'defame',
    'default',
    'defeat',
    'defection',
    'defective',
    'defendant',
    'defender',
    'defense',
    'defensive',
    'deferral',
    'deferred',
    'defiance',
    'defiant',
    'defile',
    'defiling',
    'define',
    'definite',
    'deflate',
    'deflation',
    'deflator',
    'deflected',
    'deflector',
    'defog',
    'deforest',
    'defraud',
    'defrost',
    'deftly',
    'defuse',
    'defy',
    'degraded',
    'degrading',
    'degrease',
    'degree',
    'dehydrate',
    'deity',
    'dejected',
    'delay',
    'delegate',
    'delegator',
    'delete',
    'deletion',
    'delicacy',
    'delicate',
    'delicious',
    'delighted',
    'delirious',
    'delirium',
    'deliverer',
    'delivery',
    'delouse',
    'delta',
    'deluge',
    'delusion',
    'deluxe',
    'demanding',
    'demeaning',
    'demeanor',
    'demise',
    'democracy',
    'democrat',
    'demote',
    'demotion',
    'demystify',
    'denatured',
    'deniable',
    'denial',
    'denim',
    'denote',
    'dense',
    'density',
    'dental',
    'dentist',
    'denture',
    'deny',
    'deodorant',
    'deodorize',
    'departed',
    'departure',
    'depict',
    'deplete',
    'depletion',
    'deplored',
    'deploy',
    'deport',
    'depose',
    'depraved',
    'depravity',
    'deprecate',
    'depress',
    'deprive',
    'depth',
    'deputize',
    'deputy',
    'derail',
    'deranged',
    'derby',
    'derived',
    'desecrate',
    'deserve',
    'deserving',
    'designate',
    'designed',
    'designer',
    'designing',
    'deskbound',
    'desktop',
    'deskwork',
    'desolate',
    'despair',
    'despise',
    'despite',
    'destiny',
    'destitute',
    'destruct',
    'detached',
    'detail',
    'detection',
    'detective',
    'detector',
    'detention',
    'detergent',
    'detest',
    'detonate',
    'detonator',
    'detoxify',
    'detract',
    'deuce',
    'devalue',
    'deviancy',
    'deviant',
    'deviate',
    'deviation',
    'deviator',
    'device',
    'devious',
    'devotedly',
    'devotee',
    'devotion',
    'devourer',
    'devouring',
    'devoutly',
    'dexterity',
    'dexterous',
    'diabetes',
    'diabetic',
    'diabolic',
    'diagnoses',
    'diagnosis',
    'diagram',
    'dial',
    'diameter',
    'diaper',
    'diaphragm',
    'diary',
    'dice',
    'dicing',
    'dictate',
    'dictation',
    'dictator',
    'difficult',
    'diffused',
    'diffuser',
    'diffusion',
    'diffusive',
    'dig',
    'dilation',
    'diligence',
    'diligent',
    'dill',
    'dilute',
    'dime',
    'diminish',
    'dimly',
    'dimmed',
    'dimmer',
    'dimness',
    'dimple',
    'diner',
    'dingbat',
    'dinghy',
    'dinginess',
    'dingo',
    'dingy',
    'dining',
    'dinner',
    'diocese',
    'dioxide',
    'diploma',
    'dipped',
    'dipper',
    'dipping',
    'directed',
    'direction',
    'directive',
    'directly',
    'directory',
    'direness',
    'dirtiness',
    'disabled',
    'disagree',
    'disallow',
    'disarm',
    'disarray',
    'disaster',
    'disband',
    'disbelief',
    'disburse',
    'discard',
    'discern',
    'discharge',
    'disclose',
    'discolor',
    'discount',
    'discourse',
    'discover',
    'discuss',
    'disdain',
    'disengage',
    'disfigure',
    'disgrace',
    'dish',
    'disinfect',
    'disjoin',
    'disk',
    'dislike',
    'disliking',
    'dislocate',
    'dislodge',
    'disloyal',
    'dismantle',
    'dismay',
    'dismiss',
    'dismount',
    'disobey',
    'disorder',
    'disown',
    'disparate',
    'disparity',
    'dispatch',
    'dispense',
    'dispersal',
    'dispersed',
    'disperser',
    'displace',
    'display',
    'displease',
    'disposal',
    'dispose',
    'disprove',
    'dispute',
    'disregard',
    'disrupt',
    'dissuade',
    'distance',
    'distant',
    'distaste',
    'distill',
    'distinct',
    'distort',
    'distract',
    'distress',
    'district',
    'distrust',
    'ditch',
    'ditto',
    'ditzy',
    'dividable',
    'divided',
    'dividend',
    'dividers',
    'dividing',
    'divinely',
    'diving',
    'divinity',
    'divisible',
    'divisibly',
    'division',
    'divisive',
    'divorcee',
    'dizziness',
    'dizzy',
    'doable',
    'docile',
    'dock',
    'doctrine',
    'document',
    'dodge',
    'dodgy',
    'doily',
    'doing',
    'dole',
    'dollar',
    'dollhouse',
    'dollop',
    'dolly',
    'dolphin',
    'domain',
    'domelike',
    'domestic',
    'dominion',
    'dominoes',
    'donated',
    'donation',
    'donator',
    'donor',
    'donut',
    'doodle',
    'doorbell',
    'doorframe',
    'doorknob',
    'doorman',
    'doormat',
    'doornail',
    'doorpost',
    'doorstep',
    'doorstop',
    'doorway',
    'doozy',
    'dork',
    'dormitory',
    'dorsal',
    'dosage',
    'dose',
    'dotted',
    'doubling',
    'douche',
    'dove',
    'down',
    'dowry',
    'doze',
    'drab',
    'dragging',
    'dragonfly',
    'dragonish',
    'dragster',
    'drainable',
    'drainage',
    'drained',
    'drainer',
    'drainpipe',
    'dramatic',
    'dramatize',
    'drank',
    'drapery',
    'drastic',
    'draw',
    'dreaded',
    'dreadful',
    'dreadlock',
    'dreamboat',
    'dreamily',
    'dreamland',
    'dreamless',
    'dreamlike',
    'dreamt',
    'dreamy',
    'drearily',
    'dreary',
    'drench',
    'dress',
    'drew',
    'dribble',
    'dried',
    'drier',
    'drift',
    'driller',
    'drilling',
    'drinkable',
    'drinking',
    'dripping',
    'drippy',
    'drivable',
    'driven',
    'driver',
    'driveway',
    'driving',
    'drizzle',
    'drizzly',
    'drone',
    'drool',
    'droop',
    'drop-down',
    'dropbox',
    'dropkick',
    'droplet',
    'dropout',
    'dropper',
    'drove',
    'drown',
    'drowsily',
    'drudge',
    'drum',
    'dry',
    'dubbed',
    'dubiously',
    'duchess',
    'duckbill',
    'ducking',
    'duckling',
    'ducktail',
    'ducky',
    'duct',
    'dude',
    'duffel',
    'dugout',
    'duh',
    'duke',
    'duller',
    'dullness',
    'duly',
    'dumping',
    'dumpling',
    'dumpster',
    'duo',
    'dupe',
    'duplex',
    'duplicate',
    'duplicity',
    'durable',
    'durably',
    'duration',
    'duress',
    'during',
    'dusk',
    'dust',
    'dutiful',
    'duty',
    'duvet',
    'dwarf',
    'dweeb',
    'dwelled',
    'dweller',
    'dwelling',
    'dwindle',
    'dwindling',
    'dynamic',
    'dynamite',
    'dynasty',
    'dyslexia',
    'dyslexic',
    'each',
    'eagle',
    'earache',
    'eardrum',
    'earflap',
    'earful',
    'earlobe',
    'early',
    'earmark',
    'earmuff',
    'earphone',
    'earpiece',
    'earplugs',
    'earring',
    'earshot',
    'earthen',
    'earthlike',
    'earthling',
    'earthly',
    'earthworm',
    'earthy',
    'earwig',
    'easeful',
    'easel',
    'easiest',
    'easily',
    'easiness',
    'easing',
    'eastbound',
    'eastcoast',
    'easter',
    'eastward',
    'eatable',
    'eaten',
    'eatery',
    'eating',
    'eats',
    'ebay',
    'ebony',
    'ebook',
    'ecard',
    'eccentric',
    'echo',
    'eclair',
    'eclipse',
    'ecologist',
    'ecology',
    'economic',
    'economist',
    'economy',
    'ecosphere',
    'ecosystem',
    'edge',
    'edginess',
    'edging',
    'edgy',
    'edition',
    'editor',
    'educated',
    'education',
    'educator',
    'eel',
    'effective',
    'effects',
    'efficient',
    'effort',
    'eggbeater',
    'egging',
    'eggnog',
    'eggplant',
    'eggshell',
    'egomaniac',
    'egotism',
    'egotistic',
    'either',
    'eject',
    'elaborate',
    'elastic',
    'elated',
    'elbow',
    'eldercare',
    'elderly',
    'eldest',
    'electable',
    'election',
    'elective',
    'elephant',
    'elevate',
    'elevating',
    'elevation',
    'elevator',
    'eleven',
    'elf',
    'eligible',
    'eligibly',
    'eliminate',
    'elite',
    'elitism',
    'elixir',
    'elk',
    'ellipse',
    'elliptic',
    'elm',
    'elongated',
    'elope',
    'eloquence',
    'eloquent',
    'elsewhere',
    'elude',
    'elusive',
    'elves',
    'email',
    'embargo',
    'embark',
    'embassy',
    'embattled',
    'embellish',
    'ember',
    'embezzle',
    'emblaze',
    'emblem',
    'embody',
    'embolism',
    'emboss',
    'embroider',
    'emcee',
    'emerald',
    'emergency',
    'emission',
    'emit',
    'emote',
    'emoticon',
    'emotion',
    'empathic',
    'empathy',
    'emperor',
    'emphases',
    'emphasis',
    'emphasize',
    'emphatic',
    'empirical',
    'employed',
    'employee',
    'employer',
    'emporium',
    'empower',
    'emptier',
    'emptiness',
    'empty',
    'emu',
    'enable',
    'enactment',
    'enamel',
    'enchanted',
    'enchilada',
    'encircle',
    'enclose',
    'enclosure',
    'encode',
    'encore',
    'encounter',
    'encourage',
    'encroach',
    'encrust',
    'encrypt',
    'endanger',
    'endeared',
    'endearing',
    'ended',
    'ending',
    'endless',
    'endnote',
    'endocrine',
    'endorphin',
    'endorse',
    'endowment',
    'endpoint',
    'endurable',
    'endurance',
    'enduring',
    'energetic',
    'energize',
    'energy',
    'enforced',
    'enforcer',
    'engaged',
    'engaging',
    'engine',
    'engorge',
    'engraved',
    'engraver',
    'engraving',
    'engross',
    'engulf',
    'enhance',
    'enigmatic',
    'enjoyable',
    'enjoyably',
    'enjoyer',
    'enjoying',
    'enjoyment',
    'enlarged',
    'enlarging',
    'enlighten',
    'enlisted',
    'enquirer',
    'enrage',
    'enrich',
    'enroll',
    'enslave',
    'ensnare',
    'ensure',
    'entail',
    'entangled',
    'entering',
    'entertain',
    'enticing',
    'entire',
    'entitle',
    'entity',
    'entomb',
    'entourage',
    'entrap',
    'entree',
    'entrench',
    'entrust',
    'entryway',
    'entwine',
    'enunciate',
    'envelope',
    'enviable',
    'enviably',
    'envious',
    'envision',
    'envoy',
    'envy',
    'enzyme',
    'epic',
    'epidemic',
    'epidermal',
    'epidermis',
    'epidural',
    'epilepsy',
    'epileptic',
    'epilogue',
    'epiphany',
    'episode',
    'equal',
    'equate',
    'equation',
    'equator',
    'equinox',
    'equipment',
    'equity',
    'equivocal',
    'eradicate',
    'erasable',
    'erased',
    'eraser',
    'erasure',
    'ergonomic',
    'errand',
    'errant',
    'erratic',
    'error',
    'erupt',
    'escalate',
    'escalator',
    'escapable',
    'escapade',
    'escapist',
    'escargot',
    'eskimo',
    'esophagus',
    'espionage',
    'espresso',
    'esquire',
    'essay',
    'essence',
    'essential',
    'establish',
    'estate',
    'esteemed',
    'estimate',
    'estimator',
    'estranged',
    'estrogen',
    'etching',
    'eternal',
    'eternity',
    'ethanol',
    'ether',
    'ethically',
    'ethics',
    'euphemism',
    'evacuate',
    'evacuee',
    'evade',
    'evaluate',
    'evaluator',
    'evaporate',
    'evasion',
    'evasive',
    'even',
    'everglade',
    'evergreen',
    'everybody',
    'everyday',
    'everyone',
    'evict',
    'evidence',
    'evident',
    'evil',
    'evoke',
    'evolution',
    'evolve',
    'exact',
    'exalted',
    'example',
    'excavate',
    'excavator',
    'exceeding',
    'exception',
    'excess',
    'exchange',
    'excitable',
    'exciting',
    'exclaim',
    'exclude',
    'excluding',
    'exclusion',
    'exclusive',
    'excretion',
    'excretory',
    'excursion',
    'excusable',
    'excusably',
    'excuse',
    'exemplary',
    'exemplify',
    'exemption',
    'exerciser',
    'exert',
    'exes',
    'exfoliate',
    'exhale',
    'exhaust',
    'exhume',
    'exile',
    'existing',
    'exit',
    'exodus',
    'exonerate',
    'exorcism',
    'exorcist',
    'expand',
    'expanse',
    'expansion',
    'expansive',
    'expectant',
    'expedited',
    'expediter',
    'expel',
    'expend',
    'expenses',
    'expensive',
    'expert',
    'expire',
    'expiring',
    'explain',
    'expletive',
    'explicit',
    'explode',
    'exploit',
    'explore',
    'exploring',
    'exponent',
    'exporter',
    'exposable',
    'expose',
    'exposure',
    'express',
    'expulsion',
    'exquisite',
    'extended',
    'extending',
    'extent',
    'extenuate',
    'exterior',
    'external',
    'extinct',
    'extortion',
    'extradite',
    'extras',
    'extrovert',
    'extrude',
    'extruding',
    'exuberant',
    'fable',
    'fabric',
    'fabulous',
    'facebook',
    'facecloth',
    'facedown',
    'faceless',
    'facelift',
    'faceplate',
    'faceted',
    'facial',
    'facility',
    'facing',
    'facsimile',
    'faction',
    'factoid',
    'factor',
    'factsheet',
    'factual',
    'faculty',
    'fade',
    'fading',
    'failing',
    'falcon',
    'fall',
    'false',
    'falsify',
    'fame',
    'familiar',
    'family',
    'famine',
    'famished',
    'fanatic',
    'fancied',
    'fanciness',
    'fancy',
    'fanfare',
    'fang',
    'fanning',
    'fantasize',
    'fantastic',
    'fantasy',
    'fascism',
    'fastball',
    'faster',
    'fasting',
    'fastness',
    'faucet',
    'favorable',
    'favorably',
    'favored',
    'favoring',
    'favorite',
    'fax',
    'feast',
    'federal',
    'fedora',
    'feeble',
    'feed',
    'feel',
    'feisty',
    'feline',
    'felt-tip',
    'feminine',
    'feminism',
    'feminist',
    'feminize',
    'femur',
    'fence',
    'fencing',
    'fender',
    'ferment',
    'fernlike',
    'ferocious',
    'ferocity',
    'ferret',
    'ferris',
    'ferry',
    'fervor',
    'fester',
    'festival',
    'festive',
    'festivity',
    'fetal',
    'fetch',
    'fever',
    'fiber',
    'fiction',
    'fiddle',
    'fiddling',
    'fidelity',
    'fidgeting',
    'fidgety',
    'fifteen',
    'fifth',
    'fiftieth',
    'fifty',
    'figment',
    'figure',
    'figurine',
    'filing',
    'filled',
    'filler',
    'filling',
    'film',
    'filter',
    'filth',
    'filtrate',
    'finale',
    'finalist',
    'finalize',
    'finally',
    'finance',
    'financial',
    'finch',
    'fineness',
    'finer',
    'finicky',
    'finished',
    'finisher',
    'finishing',
    'finite',
    'finless',
    'finlike',
    'fiscally',
    'fit',
    'five',
    'flaccid',
    'flagman',
    'flagpole',
    'flagship',
    'flagstick',
    'flagstone',
    'flail',
    'flakily',
    'flaky',
    'flame',
    'flammable',
    'flanked',
    'flanking',
    'flannels',
    'flap',
    'flaring',
    'flashback',
    'flashbulb',
    'flashcard',
    'flashily',
    'flashing',
    'flashy',
    'flask',
    'flatbed',
    'flatfoot',
    'flatly',
    'flatness',
    'flatten',
    'flattered',
    'flatterer',
    'flattery',
    'flattop',
    'flatware',
    'flatworm',
    'flavored',
    'flavorful',
    'flavoring',
    'flaxseed',
    'fled',
    'fleshed',
    'fleshy',
    'flick',
    'flier',
    'flight',
    'flinch',
    'fling',
    'flint',
    'flip',
    'flirt',
    'float',
    'flock',
    'flogging',
    'flop',
    'floral',
    'florist',
    'floss',
    'flounder',
    'flyable',
    'flyaway',
    'flyer',
    'flying',
    'flyover',
    'flypaper',
    'foam',
    'foe',
    'fog',
    'foil',
    'folic',
    'folk',
    'follicle',
    'follow',
    'fondling',
    'fondly',
    'fondness',
    'fondue',
    'font',
    'food',
    'fool',
    'footage',
    'football',
    'footbath',
    'footboard',
    'footer',
    'footgear',
    'foothill',
    'foothold',
    'footing',
    'footless',
    'footman',
    'footnote',
    'footpad',
    'footpath',
    'footprint',
    'footrest',
    'footsie',
    'footsore',
    'footwear',
    'footwork',
    'fossil',
    'foster',
    'founder',
    'founding',
    'fountain',
    'fox',
    'foyer',
    'fraction',
    'fracture',
    'fragile',
    'fragility',
    'fragment',
    'fragrance',
    'fragrant',
    'frail',
    'frame',
    'framing',
    'frantic',
    'fraternal',
    'frayed',
    'fraying',
    'frays',
    'freckled',
    'freckles',
    'freebase',
    'freebee',
    'freebie',
    'freedom',
    'freefall',
    'freehand',
    'freeing',
    'freeload',
    'freely',
    'freemason',
    'freeness',
    'freestyle',
    'freeware',
    'freeway',
    'freewill',
    'freezable',
    'freezing',
    'freight',
    'french',
    'frenzied',
    'frenzy',
    'frequency',
    'frequent',
    'fresh',
    'fretful',
    'fretted',
    'friction',
    'friday',
    'fridge',
    'fried',
    'friend',
    'frighten',
    'frightful',
    'frigidity',
    'frigidly',
    'frill',
    'fringe',
    'frisbee',
    'frisk',
    'fritter',
    'frivolous',
    'frolic',
    'from',
    'front',
    'frostbite',
    'frosted',
    'frostily',
    'frosting',
    'frostlike',
    'frosty',
    'froth',
    'frown',
    'frozen',
    'fructose',
    'frugality',
    'frugally',
    'fruit',
    'frustrate',
    'frying',
    'gab',
    'gaffe',
    'gag',
    'gainfully',
    'gaining',
    'gains',
    'gala',
    'gallantly',
    'galleria',
    'gallery',
    'galley',
    'gallon',
    'gallows',
    'gallstone',
    'galore',
    'galvanize',
    'gambling',
    'game',
    'gaming',
    'gamma',
    'gander',
    'gangly',
    'gangrene',
    'gangway',
    'gap',
    'garage',
    'garbage',
    'garden',
    'gargle',
    'garland',
    'garlic',
    'garment',
    'garnet',
    'garnish',
    'garter',
    'gas',
    'gatherer',
    'gathering',
    'gating',
    'gauging',
    'gauntlet',
    'gauze',
    'gave',
    'gawk',
    'gazing',
    'gear',
    'gecko',
    'geek',
    'geiger',
    'gem',
    'gender',
    'generic',
    'generous',
    'genetics',
    'genre',
    'gentile',
    'gentleman',
    'gently',
    'gents',
    'geography',
    'geologic',
    'geologist',
    'geology',
    'geometric',
    'geometry',
    'geranium',
    'gerbil',
    'geriatric',
    'germicide',
    'germinate',
    'germless',
    'germproof',
    'gestate',
    'gestation',
    'gesture',
    'getaway',
    'getting',
    'getup',
    'giant',
    'gibberish',
    'giblet',
    'giddily',
    'giddiness',
    'giddy',
    'gift',
    'gigabyte',
    'gigahertz',
    'gigantic',
    'giggle',
    'giggling',
    'giggly',
    'gigolo',
    'gilled',
    'gills',
    'gimmick',
    'girdle',
    'giveaway',
    'given',
    'giver',
    'giving',
    'gizmo',
    'gizzard',
    'glacial',
    'glacier',
    'glade',
    'gladiator',
    'gladly',
    'glamorous',
    'glamour',
    'glance',
    'glancing',
    'glandular',
    'glare',
    'glaring',
    'glass',
    'glaucoma',
    'glazing',
    'gleaming',
    'gleeful',
    'glider',
    'gliding',
    'glimmer',
    'glimpse',
    'glisten',
    'glitch',
    'glitter',
    'glitzy',
    'gloater',
    'gloating',
    'gloomily',
    'gloomy',
    'glorified',
    'glorifier',
    'glorify',
    'glorious',
    'glory',
    'gloss',
    'glove',
    'glowing',
    'glowworm',
    'glucose',
    'glue',
    'gluten',
    'glutinous',
    'glutton',
    'gnarly',
    'gnat',
    'goal',
    'goatskin',
    'goes',
    'goggles',
    'going',
    'goldfish',
    'goldmine',
    'goldsmith',
    'golf',
    'goliath',
    'gonad',
    'gondola',
    'gone',
    'gong',
    'good',
    'gooey',
    'goofball',
    'goofiness',
    'goofy',
    'google',
    'goon',
    'gopher',
    'gore',
    'gorged',
    'gorgeous',
    'gory',
    'gosling',
    'gossip',
    'gothic',
    'gotten',
    'gout',
    'gown',
    'grab',
    'graceful',
    'graceless',
    'gracious',
    'gradation',
    'graded',
    'grader',
    'gradient',
    'grading',
    'gradually',
    'graduate',
    'graffiti',
    'grafted',
    'grafting',
    'grain',
    'granddad',
    'grandkid',
    'grandly',
    'grandma',
    'grandpa',
    'grandson',
    'granite',
    'granny',
    'granola',
    'grant',
    'granular',
    'grape',
    'graph',
    'grapple',
    'grappling',
    'grasp',
    'grass',
    'gratified',
    'gratify',
    'grating',
    'gratitude',
    'gratuity',
    'gravel',
    'graveness',
    'graves',
    'graveyard',
    'gravitate',
    'gravity',
    'gravy',
    'gray',
    'grazing',
    'greasily',
    'greedily',
    'greedless',
    'greedy',
    'green',
    'greeter',
    'greeting',
    'grew',
    'greyhound',
    'grid',
    'grief',
    'grievance',
    'grieving',
    'grievous',
    'grill',
    'grimace',
    'grimacing',
    'grime',
    'griminess',
    'grimy',
    'grinch',
    'grinning',
    'grip',
    'gristle',
    'grit',
    'groggily',
    'groggy',
    'groin',
    'groom',
    'groove',
    'grooving',
    'groovy',
    'grope',
    'ground',
    'grouped',
    'grout',
    'grove',
    'grower',
    'growing',
    'growl',
    'grub',
    'grudge',
    'grudging',
    'grueling',
    'gruffly',
    'grumble',
    'grumbling',
    'grumbly',
    'grumpily',
    'grunge',
    'grunt',
    'guacamole',
    'guidable',
    'guidance',
    'guide',
    'guiding',
    'guileless',
    'guise',
    'gulf',
    'gullible',
    'gully',
    'gulp',
    'gumball',
    'gumdrop',
    'gumminess',
    'gumming',
    'gummy',
    'gurgle',
    'gurgling',
    'guru',
    'gush',
    'gusto',
    'gusty',
    'gutless',
    'guts',
    'gutter',
    'guy',
    'guzzler',
    'gyration',
    'habitable',
    'habitant',
    'habitat',
    'habitual',
    'hacked',
    'hacker',
    'hacking',
    'hacksaw',
    'had',
    'haggler',
    'haiku',
    'half',
    'halogen',
    'halt',
    'halved',
    'halves',
    'hamburger',
    'hamlet',
    'hammock',
    'hamper',
    'hamster',
    'hamstring',
    'handbag',
    'handball',
    'handbook',
    'handbrake',
    'handcart',
    'handclap',
    'handclasp',
    'handcraft',
    'handcuff',
    'handed',
    'handful',
    'handgrip',
    'handgun',
    'handheld',
    'handiness',
    'handiwork',
    'handlebar',
    'handled',
    'handler',
    'handling',
    'handmade',
    'handoff',
    'handpick',
    'handprint',
    'handrail',
    'handsaw',
    'handset',
    'handsfree',
    'handshake',
    'handstand',
    'handwash',
    'handwork',
    'handwoven',
    'handwrite',
    'handyman',
    'hangnail',
    'hangout',
    'hangover',
    'hangup',
    'hankering',
    'hankie',
    'hanky',
    'haphazard',
    'happening',
    'happier',
    'happiest',
    'happily',
    'happiness',
    'happy',
    'harbor',
    'hardcopy',
    'hardcore',
    'hardcover',
    'harddisk',
    'hardened',
    'hardener',
    'hardening',
    'hardhat',
    'hardhead',
    'hardiness',
    'hardly',
    'hardness',
    'hardship',
    'hardware',
    'hardwired',
    'hardwood',
    'hardy',
    'harmful',
    'harmless',
    'harmonica',
    'harmonics',
    'harmonize',
    'harmony',
    'harness',
    'harpist',
    'harsh',
    'harvest',
    'hash',
    'hassle',
    'haste',
    'hastily',
    'hastiness',
    'hasty',
    'hatbox',
    'hatchback',
    'hatchery',
    'hatchet',
    'hatching',
    'hatchling',
    'hate',
    'hatless',
    'hatred',
    'haunt',
    'haven',
    'hazard',
    'hazelnut',
    'hazily',
    'haziness',
    'hazing',
    'hazy',
    'headache',
    'headband',
    'headboard',
    'headcount',
    'headdress',
    'headed',
    'header',
    'headfirst',
    'headgear',
    'heading',
    'headlamp',
    'headless',
    'headlock',
    'headphone',
    'headpiece',
    'headrest',
    'headroom',
    'headscarf',
    'headset',
    'headsman',
    'headstand',
    'headstone',
    'headway',
    'headwear',
    'heap',
    'heat',
    'heave',
    'heavily',
    'heaviness',
    'heaving',
    'hedge',
    'hedging',
    'heftiness',
    'hefty',
    'helium',
    'helmet',
    'helper',
    'helpful',
    'helping',
    'helpless',
    'helpline',
    'hemlock',
    'hemstitch',
    'hence',
    'henchman',
    'henna',
    'herald',
    'herbal',
    'herbicide',
    'herbs',
    'heritage',
    'hermit',
    'heroics',
    'heroism',
    'herring',
    'herself',
    'hertz',
    'hesitancy',
    'hesitant',
    'hesitate',
    'hexagon',
    'hexagram',
    'hubcap',
    'huddle',
    'huddling',
    'huff',
    'hug',
    'hula',
    'hulk',
    'hull',
    'human',
    'humble',
    'humbling',
    'humbly',
    'humid',
    'humiliate',
    'humility',
    'humming',
    'hummus',
    'humongous',
    'humorist',
    'humorless',
    'humorous',
    'humpback',
    'humped',
    'humvee',
    'hunchback',
    'hundredth',
    'hunger',
    'hungrily',
    'hungry',
    'hunk',
    'hunter',
    'hunting',
    'huntress',
    'huntsman',
    'hurdle',
    'hurled',
    'hurler',
    'hurling',
    'hurray',
    'hurricane',
    'hurried',
    'hurry',
    'hurt',
    'husband',
    'hush',
    'husked',
    'huskiness',
    'hut',
    'hybrid',
    'hydrant',
    'hydrated',
    'hydration',
    'hydrogen',
    'hydroxide',
    'hyperlink',
    'hypertext',
    'hyphen',
    'hypnoses',
    'hypnosis',
    'hypnotic',
    'hypnotism',
    'hypnotist',
    'hypnotize',
    'hypocrisy',
    'hypocrite',
    'ibuprofen',
    'ice',
    'iciness',
    'icing',
    'icky',
    'icon',
    'icy',
    'idealism',
    'idealist',
    'idealize',
    'ideally',
    'idealness',
    'identical',
    'identify',
    'identity',
    'ideology',
    'idiocy',
    'idiom',
    'idly',
    'igloo',
    'ignition',
    'ignore',
    'iguana',
    'illicitly',
    'illusion',
    'illusive',
    'image',
    'imaginary',
    'imagines',
    'imaging',
    'imbecile',
    'imitate',
    'imitation',
    'immature',
    'immerse',
    'immersion',
    'imminent',
    'immobile',
    'immodest',
    'immorally',
    'immortal',
    'immovable',
    'immovably',
    'immunity',
    'immunize',
    'impaired',
    'impale',
    'impart',
    'impatient',
    'impeach',
    'impeding',
    'impending',
    'imperfect',
    'imperial',
    'impish',
    'implant',
    'implement',
    'implicate',
    'implicit',
    'implode',
    'implosion',
    'implosive',
    'imply',
    'impolite',
    'important',
    'importer',
    'impose',
    'imposing',
    'impotence',
    'impotency',
    'impotent',
    'impound',
    'imprecise',
    'imprint',
    'imprison',
    'impromptu',
    'improper',
    'improve',
    'improving',
    'improvise',
    'imprudent',
    'impulse',
    'impulsive',
    'impure',
    'impurity',
    'iodine',
    'iodize',
    'ion',
    'ipad',
    'iphone',
    'ipod',
    'irate',
    'irk',
    'iron',
    'irregular',
    'irrigate',
    'irritable',
    'irritably',
    'irritant',
    'irritate',
    'islamic',
    'islamist',
    'isolated',
    'isolating',
    'isolation',
    'isotope',
    'issue',
    'issuing',
    'italicize',
    'italics',
    'item',
    'itinerary',
    'itunes',
    'ivory',
    'ivy',
    'jab',
    'jackal',
    'jacket',
    'jackknife',
    'jackpot',
    'jailbird',
    'jailbreak',
    'jailer',
    'jailhouse',
    'jalapeno',
    'jam',
    'janitor',
    'january',
    'jargon',
    'jarring',
    'jasmine',
    'jaundice',
    'jaunt',
    'java',
    'jawed',
    'jawless',
    'jawline',
    'jaws',
    'jaybird',
    'jaywalker',
    'jazz',
    'jeep',
    'jeeringly',
    'jellied',
    'jelly',
    'jersey',
    'jester',
    'jet',
    'jiffy',
    'jigsaw',
    'jimmy',
    'jingle',
    'jingling',
    'jinx',
    'jitters',
    'jittery',
    'job',
    'jockey',
    'jockstrap',
    'jogger',
    'jogging',
    'john',
    'joining',
    'jokester',
    'jokingly',
    'jolliness',
    'jolly',
    'jolt',
    'jot',
    'jovial',
    'joyfully',
    'joylessly',
    'joyous',
    'joyride',
    'joystick',
    'jubilance',
    'jubilant',
    'judge',
    'judgingly',
    'judicial',
    'judiciary',
    'judo',
    'juggle',
    'juggling',
    'jugular',
    'juice',
    'juiciness',
    'juicy',
    'jujitsu',
    'jukebox',
    'july',
    'jumble',
    'jumbo',
    'jump',
    'junction',
    'juncture',
    'june',
    'junior',
    'juniper',
    'junkie',
    'junkman',
    'junkyard',
    'jurist',
    'juror',
    'jury',
    'justice',
    'justifier',
    'justify',
    'justly',
    'justness',
    'juvenile',
    'kabob',
    'kangaroo',
    'karaoke',
    'karate',
    'karma',
    'kebab',
    'keenly',
    'keenness',
    'keep',
    'keg',
    'kelp',
    'kennel',
    'kept',
    'kerchief',
    'kerosene',
    'kettle',
    'kick',
    'kiln',
    'kilobyte',
    'kilogram',
    'kilometer',
    'kilowatt',
    'kilt',
    'kimono',
    'kindle',
    'kindling',
    'kindly',
    'kindness',
    'kindred',
    'kinetic',
    'kinfolk',
    'king',
    'kinship',
    'kinsman',
    'kinswoman',
    'kissable',
    'kisser',
    'kissing',
    'kitchen',
    'kite',
    'kitten',
    'kitty',
    'kiwi',
    'kleenex',
    'knapsack',
    'knee',
    'knelt',
    'knickers',
    'knoll',
    'koala',
    'kooky',
    'kosher',
    'krypton',
    'kudos',
    'kung',
    'labored',
    'laborer',
    'laboring',
    'laborious',
    'labrador',
    'ladder',
    'ladies',
    'ladle',
    'ladybug',
    'ladylike',
    'lagged',
    'lagging',
    'lagoon',
    'lair',
    'lake',
    'lance',
    'landed',
    'landfall',
    'landfill',
    'landing',
    'landlady',
    'landless',
    'landline',
    'landlord',
    'landmark',
    'landmass',
    'landmine',
    'landowner',
    'landscape',
    'landside',
    'landslide',
    'language',
    'lankiness',
    'lanky',
    'lantern',
    'lapdog',
    'lapel',
    'lapped',
    'lapping',
    'laptop',
    'lard',
    'large',
    'lark',
    'lash',
    'lasso',
    'last',
    'latch',
    'late',
    'lather',
    'latitude',
    'latrine',
    'latter',
    'latticed',
    'launch',
    'launder',
    'laundry',
    'laurel',
    'lavender',
    'lavish',
    'laxative',
    'lazily',
    'laziness',
    'lazy',
    'lecturer',
    'left',
    'legacy',
    'legal',
    'legend',
    'legged',
    'leggings',
    'legible',
    'legibly',
    'legislate',
    'lego',
    'legroom',
    'legume',
    'legwarmer',
    'legwork',
    'lemon',
    'lend',
    'length',
    'lens',
    'lent',
    'leotard',
    'lesser',
    'letdown',
    'lethargic',
    'lethargy',
    'letter',
    'lettuce',
    'level',
    'leverage',
    'levers',
    'levitate',
    'levitator',
    'liability',
    'liable',
    'liberty',
    'librarian',
    'library',
    'licking',
    'licorice',
    'lid',
    'life',
    'lifter',
    'lifting',
    'liftoff',
    'ligament',
    'likely',
    'likeness',
    'likewise',
    'liking',
    'lilac',
    'lilly',
    'lily',
    'limb',
    'limeade',
    'limelight',
    'limes',
    'limit',
    'limping',
    'limpness',
    'line',
    'lingo',
    'linguini',
    'linguist',
    'lining',
    'linked',
    'linoleum',
    'linseed',
    'lint',
    'lion',
    'lip',
    'liquefy',
    'liqueur',
    'liquid',
    'lisp',
    'list',
    'litigate',
    'litigator',
    'litmus',
    'litter',
    'little',
    'livable',
    'lived',
    'lively',
    'liver',
    'livestock',
    'lividly',
    'living',
    'lizard',
    'lubricant',
    'lubricate',
    'lucid',
    'luckily',
    'luckiness',
    'luckless',
    'lucrative',
    'ludicrous',
    'lugged',
    'lukewarm',
    'lullaby',
    'lumber',
    'luminance',
    'luminous',
    'lumpiness',
    'lumping',
    'lumpish',
    'lunacy',
    'lunar',
    'lunchbox',
    'luncheon',
    'lunchroom',
    'lunchtime',
    'lung',
    'lurch',
    'lure',
    'luridness',
    'lurk',
    'lushly',
    'lushness',
    'luster',
    'lustfully',
    'lustily',
    'lustiness',
    'lustrous',
    'lusty',
    'luxurious',
    'luxury',
    'lying',
    'lyrically',
    'lyricism',
    'lyricist',
    'lyrics',
    'macarena',
    'macaroni',
    'macaw',
    'mace',
    'machine',
    'machinist',
    'magazine',
    'magenta',
    'maggot',
    'magical',
    'magician',
    'magma',
    'magnesium',
    'magnetic',
    'magnetism',
    'magnetize',
    'magnifier',
    'magnify',
    'magnitude',
    'magnolia',
    'mahogany',
    'maimed',
    'majestic',
    'majesty',
    'majorette',
    'majority',
    'makeover',
    'maker',
    'makeshift',
    'making',
    'malformed',
    'malt',
    'mama',
    'mammal',
    'mammary',
    'mammogram',
    'manager',
    'managing',
    'manatee',
    'mandarin',
    'mandate',
    'mandatory',
    'mandolin',
    'manger',
    'mangle',
    'mango',
    'mangy',
    'manhandle',
    'manhole',
    'manhood',
    'manhunt',
    'manicotti',
    'manicure',
    'manifesto',
    'manila',
    'mankind',
    'manlike',
    'manliness',
    'manly',
    'manmade',
    'manned',
    'mannish',
    'manor',
    'manpower',
    'mantis',
    'mantra',
    'manual',
    'many',
    'map',
    'marathon',
    'marauding',
    'marbled',
    'marbles',
    'marbling',
    'march',
    'mardi',
    'margarine',
    'margarita',
    'margin',
    'marigold',
    'marina',
    'marine',
    'marital',
    'maritime',
    'marlin',
    'marmalade',
    'maroon',
    'married',
    'marrow',
    'marry',
    'marshland',
    'marshy',
    'marsupial',
    'marvelous',
    'marxism',
    'mascot',
    'masculine',
    'mashed',
    'mashing',
    'massager',
    'masses',
    'massive',
    'mastiff',
    'matador',
    'matchbook',
    'matchbox',
    'matcher',
    'matching',
    'matchless',
    'material',
    'maternal',
    'maternity',
    'math',
    'mating',
    'matriarch',
    'matrimony',
    'matrix',
    'matron',
    'matted',
    'matter',
    'maturely',
    'maturing',
    'maturity',
    'mauve',
    'maverick',
    'maximize',
    'maximum',
    'maybe',
    'mayday',
    'mayflower',
    'moaner',
    'moaning',
    'mobile',
    'mobility',
    'mobilize',
    'mobster',
    'mocha',
    'mocker',
    'mockup',
    'modified',
    'modify',
    'modular',
    'modulator',
    'module',
    'moisten',
    'moistness',
    'moisture',
    'molar',
    'molasses',
    'mold',
    'molecular',
    'molecule',
    'molehill',
    'mollusk',
    'mom',
    'monastery',
    'monday',
    'monetary',
    'monetize',
    'moneybags',
    'moneyless',
    'moneywise',
    'mongoose',
    'mongrel',
    'monitor',
    'monkhood',
    'monogamy',
    'monogram',
    'monologue',
    'monopoly',
    'monorail',
    'monotone',
    'monotype',
    'monoxide',
    'monsieur',
    'monsoon',
    'monstrous',
    'monthly',
    'monument',
    'moocher',
    'moodiness',
    'moody',
    'mooing',
    'moonbeam',
    'mooned',
    'moonlight',
    'moonlike',
    'moonlit',
    'moonrise',
    'moonscape',
    'moonshine',
    'moonstone',
    'moonwalk',
    'mop',
    'morale',
    'morality',
    'morally',
    'morbidity',
    'morbidly',
    'morphine',
    'morphing',
    'morse',
    'mortality',
    'mortally',
    'mortician',
    'mortified',
    'mortify',
    'mortuary',
    'mosaic',
    'mossy',
    'most',
    'mothball',
    'mothproof',
    'motion',
    'motivate',
    'motivator',
    'motive',
    'motocross',
    'motor',
    'motto',
    'mountable',
    'mountain',
    'mounted',
    'mounting',
    'mourner',
    'mournful',
    'mouse',
    'mousiness',
    'moustache',
    'mousy',
    'mouth',
    'movable',
    'move',
    'movie',
    'moving',
    'mower',
    'mowing',
    'much',
    'muck',
    'mud',
    'mug',
    'mulberry',
    'mulch',
    'mule',
    'mulled',
    'mullets',
    'multiple',
    'multiply',
    'multitask',
    'multitude',
    'mumble',
    'mumbling',
    'mumbo',
    'mummified',
    'mummify',
    'mummy',
    'mumps',
    'munchkin',
    'mundane',
    'municipal',
    'muppet',
    'mural',
    'murkiness',
    'murky',
    'murmuring',
    'muscular',
    'museum',
    'mushily',
    'mushiness',
    'mushroom',
    'mushy',
    'music',
    'musket',
    'muskiness',
    'musky',
    'mustang',
    'mustard',
    'muster',
    'mustiness',
    'musty',
    'mutable',
    'mutate',
    'mutation',
    'mute',
    'mutilated',
    'mutilator',
    'mutiny',
    'mutt',
    'mutual',
    'muzzle',
    'myself',
    'myspace',
    'mystified',
    'mystify',
    'myth',
    'nacho',
    'nag',
    'nail',
    'name',
    'naming',
    'nanny',
    'nanometer',
    'nape',
    'napkin',
    'napped',
    'napping',
    'nappy',
    'narrow',
    'nastily',
    'nastiness',
    'national',
    'native',
    'nativity',
    'natural',
    'nature',
    'naturist',
    'nautical',
    'navigate',
    'navigator',
    'navy',
    'nearby',
    'nearest',
    'nearly',
    'nearness',
    'neatly',
    'neatness',
    'nebula',
    'nebulizer',
    'nectar',
    'negate',
    'negation',
    'negative',
    'neglector',
    'negligee',
    'negligent',
    'negotiate',
    'nemeses',
    'nemesis',
    'neon',
    'nephew',
    'nerd',
    'nervous',
    'nervy',
    'nest',
    'net',
    'neurology',
    'neuron',
    'neurosis',
    'neurotic',
    'neuter',
    'neutron',
    'never',
    'next',
    'nibble',
    'nickname',
    'nicotine',
    'niece',
    'nifty',
    'nimble',
    'nimbly',
    'nineteen',
    'ninetieth',
    'ninja',
    'nintendo',
    'ninth',
    'nuclear',
    'nuclei',
    'nucleus',
    'nugget',
    'nullify',
    'number',
    'numbing',
    'numbly',
    'numbness',
    'numeral',
    'numerate',
    'numerator',
    'numeric',
    'numerous',
    'nuptials',
    'nursery',
    'nursing',
    'nurture',
    'nutcase',
    'nutlike',
    'nutmeg',
    'nutrient',
    'nutshell',
    'nuttiness',
    'nutty',
    'nuzzle',
    'nylon',
    'oaf',
    'oak',
    'oasis',
    'oat',
    'obedience',
    'obedient',
    'obituary',
    'object',
    'obligate',
    'obliged',
    'oblivion',
    'oblivious',
    'oblong',
    'obnoxious',
    'oboe',
    'obscure',
    'obscurity',
    'observant',
    'observer',
    'observing',
    'obsessed',
    'obsession',
    'obsessive',
    'obsolete',
    'obstacle',
    'obstinate',
    'obstruct',
    'obtain',
    'obtrusive',
    'obtuse',
    'obvious',
    'occultist',
    'occupancy',
    'occupant',
    'occupier',
    'occupy',
    'ocean',
    'ocelot',
    'octagon',
    'octane',
    'october',
    'octopus',
    'ogle',
    'oil',
    'oink',
    'ointment',
    'okay',
    'old',
    'olive',
    'olympics',
    'omega',
    'omen',
    'ominous',
    'omission',
    'omit',
    'omnivore',
    'onboard',
    'oncoming',
    'ongoing',
    'onion',
    'online',
    'onlooker',
    'only',
    'onscreen',
    'onset',
    'onshore',
    'onslaught',
    'onstage',
    'onto',
    'onward',
    'onyx',
    'oops',
    'ooze',
    'oozy',
    'opacity',
    'opal',
    'open',
    'operable',
    'operate',
    'operating',
    'operation',
    'operative',
    'operator',
    'opium',
    'opossum',
    'opponent',
    'oppose',
    'opposing',
    'opposite',
    'oppressed',
    'oppressor',
    'opt',
    'opulently',
    'osmosis',
    'other',
    'otter',
    'ouch',
    'ought',
    'ounce',
    'outage',
    'outback',
    'outbid',
    'outboard',
    'outbound',
    'outbreak',
    'outburst',
    'outcast',
    'outclass',
    'outcome',
    'outdated',
    'outdoors',
    'outer',
    'outfield',
    'outfit',
    'outflank',
    'outgoing',
    'outgrow',
    'outhouse',
    'outing',
    'outlast',
    'outlet',
    'outline',
    'outlook',
    'outlying',
    'outmatch',
    'outmost',
    'outnumber',
    'outplayed',
    'outpost',
    'outpour',
    'output',
    'outrage',
    'outrank',
    'outreach',
    'outright',
    'outscore',
    'outsell',
    'outshine',
    'outshoot',
    'outsider',
    'outskirts',
    'outsmart',
    'outsource',
    'outspoken',
    'outtakes',
    'outthink',
    'outward',
    'outweigh',
    'outwit',
    'oval',
    'ovary',
    'oven',
    'overact',
    'overall',
    'overarch',
    'overbid',
    'overbill',
    'overbite',
    'overblown',
    'overboard',
    'overbook',
    'overbuilt',
    'overcast',
    'overcoat',
    'overcome',
    'overcook',
    'overcrowd',
    'overdraft',
    'overdrawn',
    'overdress',
    'overdrive',
    'overdue',
    'overeager',
    'overeater',
    'overexert',
    'overfed',
    'overfeed',
    'overfill',
    'overflow',
    'overfull',
    'overgrown',
    'overhand',
    'overhang',
    'overhaul',
    'overhead',
    'overhear',
    'overheat',
    'overhung',
    'overjoyed',
    'overkill',
    'overlabor',
    'overlaid',
    'overlap',
    'overlay',
    'overload',
    'overlook',
    'overlord',
    'overlying',
    'overnight',
    'overpass',
    'overpay',
    'overplant',
    'overplay',
    'overpower',
    'overprice',
    'overrate',
    'overreach',
    'overreact',
    'override',
    'overripe',
    'overrule',
    'overrun',
    'overshoot',
    'overshot',
    'oversight',
    'oversized',
    'oversleep',
    'oversold',
    'overspend',
    'overstate',
    'overstay',
    'overstep',
    'overstock',
    'overstuff',
    'oversweet',
    'overtake',
    'overthrow',
    'overtime',
    'overtly',
    'overtone',
    'overture',
    'overturn',
    'overuse',
    'overvalue',
    'overview',
    'overwrite',
    'owl',
    'oxford',
    'oxidant',
    'oxidation',
    'oxidize',
    'oxidizing',
    'oxygen',
    'oxymoron',
    'oyster',
    'ozone',
    'paced',
    'pacemaker',
    'pacific',
    'pacifier',
    'pacifism',
    'pacifist',
    'pacify',
    'padded',
    'padding',
    'paddle',
    'paddling',
    'padlock',
    'pagan',
    'pager',
    'paging',
    'pajamas',
    'palace',
    'palatable',
    'palm',
    'palpable',
    'palpitate',
    'paltry',
    'pampered',
    'pamperer',
    'pampers',
    'pamphlet',
    'panama',
    'pancake',
    'pancreas',
    'panda',
    'pandemic',
    'pang',
    'panhandle',
    'panic',
    'panning',
    'panorama',
    'panoramic',
    'panther',
    'pantomime',
    'pantry',
    'pants',
    'pantyhose',
    'paparazzi',
    'papaya',
    'paper',
    'paprika',
    'papyrus',
    'parabola',
    'parachute',
    'parade',
    'paradox',
    'paragraph',
    'parakeet',
    'paralegal',
    'paralyses',
    'paralysis',
    'paralyze',
    'paramedic',
    'parameter',
    'paramount',
    'parasail',
    'parasite',
    'parasitic',
    'parcel',
    'parched',
    'parchment',
    'pardon',
    'parish',
    'parka',
    'parking',
    'parkway',
    'parlor',
    'parmesan',
    'parole',
    'parrot',
    'parsley',
    'parsnip',
    'partake',
    'parted',
    'parting',
    'partition',
    'partly',
    'partner',
    'partridge',
    'party',
    'passable',
    'passably',
    'passage',
    'passcode',
    'passenger',
    'passerby',
    'passing',
    'passion',
    'passive',
    'passivism',
    'passover',
    'passport',
    'password',
    'pasta',
    'pasted',
    'pastel',
    'pastime',
    'pastor',
    'pastrami',
    'pasture',
    'pasty',
    'patchwork',
    'patchy',
    'paternal',
    'paternity',
    'path',
    'patience',
    'patient',
    'patio',
    'patriarch',
    'patriot',
    'patrol',
    'patronage',
    'patronize',
    'pauper',
    'pavement',
    'paver',
    'pavestone',
    'pavilion',
    'paving',
    'pawing',
    'payable',
    'payback',
    'paycheck',
    'payday',
    'payee',
    'payer',
    'paying',
    'payment',
    'payphone',
    'payroll',
    'pebble',
    'pebbly',
    'pecan',
    'pectin',
    'peculiar',
    'peddling',
    'pediatric',
    'pedicure',
    'pedigree',
    'pedometer',
    'pegboard',
    'pelican',
    'pellet',
    'pelt',
    'pelvis',
    'penalize',
    'penalty',
    'pencil',
    'pendant',
    'pending',
    'penholder',
    'penknife',
    'pennant',
    'penniless',
    'penny',
    'penpal',
    'pension',
    'pentagon',
    'pentagram',
    'pep',
    'perceive',
    'percent',
    'perch',
    'percolate',
    'perennial',
    'perfected',
    'perfectly',
    'perfume',
    'periscope',
    'perish',
    'perjurer',
    'perjury',
    'perkiness',
    'perky',
    'perm',
    'peroxide',
    'perpetual',
    'perplexed',
    'persecute',
    'persevere',
    'persuaded',
    'persuader',
    'pesky',
    'peso',
    'pessimism',
    'pessimist',
    'pester',
    'pesticide',
    'petal',
    'petite',
    'petition',
    'petri',
    'petroleum',
    'petted',
    'petticoat',
    'pettiness',
    'petty',
    'petunia',
    'phantom',
    'phobia',
    'phoenix',
    'phonebook',
    'phoney',
    'phonics',
    'phoniness',
    'phony',
    'phosphate',
    'photo',
    'phrase',
    'phrasing',
    'placard',
    'placate',
    'placidly',
    'plank',
    'planner',
    'plant',
    'plasma',
    'plaster',
    'plastic',
    'plated',
    'platform',
    'plating',
    'platinum',
    'platonic',
    'platter',
    'platypus',
    'plausible',
    'plausibly',
    'playable',
    'playback',
    'player',
    'playful',
    'playgroup',
    'playhouse',
    'playing',
    'playlist',
    'playmaker',
    'playmate',
    'playoff',
    'playpen',
    'playroom',
    'playset',
    'plaything',
    'playtime',
    'plaza',
    'pleading',
    'pleat',
    'pledge',
    'plentiful',
    'plenty',
    'plethora',
    'plexiglas',
    'pliable',
    'plod',
    'plop',
    'plot',
    'plow',
    'ploy',
    'pluck',
    'plug',
    'plunder',
    'plunging',
    'plural',
    'plus',
    'plutonium',
    'plywood',
    'poach',
    'pod',
    'poem',
    'poet',
    'pogo',
    'pointed',
    'pointer',
    'pointing',
    'pointless',
    'pointy',
    'poise',
    'poison',
    'poker',
    'poking',
    'polar',
    'police',
    'policy',
    'polio',
    'polish',
    'politely',
    'polka',
    'polo',
    'polyester',
    'polygon',
    'polygraph',
    'polymer',
    'poncho',
    'pond',
    'pony',
    'popcorn',
    'pope',
    'poplar',
    'popper',
    'poppy',
    'popsicle',
    'populace',
    'popular',
    'populate',
    'porcupine',
    'pork',
    'porous',
    'porridge',
    'portable',
    'portal',
    'portfolio',
    'porthole',
    'portion',
    'portly',
    'portside',
    'poser',
    'posh',
    'posing',
    'possible',
    'possibly',
    'possum',
    'postage',
    'postal',
    'postbox',
    'postcard',
    'posted',
    'poster',
    'posting',
    'postnasal',
    'posture',
    'postwar',
    'pouch',
    'pounce',
    'pouncing',
    'pound',
    'pouring',
    'pout',
    'powdered',
    'powdering',
    'powdery',
    'power',
    'powwow',
    'pox',
    'praising',
    'prance',
    'prancing',
    'pranker',
    'prankish',
    'prankster',
    'prayer',
    'praying',
    'preacher',
    'preaching',
    'preachy',
    'preamble',
    'precinct',
    'precise',
    'precision',
    'precook',
    'precut',
    'predator',
    'predefine',
    'predict',
    'preface',
    'prefix',
    'preflight',
    'preformed',
    'pregame',
    'pregnancy',
    'pregnant',
    'preheated',
    'prelaunch',
    'prelaw',
    'prelude',
    'premiere',
    'premises',
    'premium',
    'prenatal',
    'preoccupy',
    'preorder',
    'prepaid',
    'prepay',
    'preplan',
    'preppy',
    'preschool',
    'prescribe',
    'preseason',
    'preset',
    'preshow',
    'president',
    'presoak',
    'press',
    'presume',
    'presuming',
    'preteen',
    'pretended',
    'pretender',
    'pretense',
    'pretext',
    'pretty',
    'pretzel',
    'prevail',
    'prevalent',
    'prevent',
    'preview',
    'previous',
    'prewar',
    'prewashed',
    'prideful',
    'pried',
    'primal',
    'primarily',
    'primary',
    'primate',
    'primer',
    'primp',
    'princess',
    'print',
    'prior',
    'prism',
    'prison',
    'prissy',
    'pristine',
    'privacy',
    'private',
    'privatize',
    'prize',
    'proactive',
    'probable',
    'probably',
    'probation',
    'probe',
    'probing',
    'probiotic',
    'problem',
    'procedure',
    'process',
    'proclaim',
    'procreate',
    'procurer',
    'prodigal',
    'prodigy',
    'produce',
    'product',
    'profane',
    'profanity',
    'professed',
    'professor',
    'profile',
    'profound',
    'profusely',
    'progeny',
    'prognosis',
    'program',
    'progress',
    'projector',
    'prologue',
    'prolonged',
    'promenade',
    'prominent',
    'promoter',
    'promotion',
    'prompter',
    'promptly',
    'prone',
    'prong',
    'pronounce',
    'pronto',
    'proofing',
    'proofread',
    'proofs',
    'propeller',
    'properly',
    'property',
    'proponent',
    'proposal',
    'propose',
    'props',
    'prorate',
    'protector',
    'protegee',
    'proton',
    'prototype',
    'protozoan',
    'protract',
    'protrude',
    'proud',
    'provable',
    'proved',
    'proven',
    'provided',
    'provider',
    'providing',
    'province',
    'proving',
    'provoke',
    'provoking',
    'provolone',
    'prowess',
    'prowler',
    'prowling',
    'proximity',
    'proxy',
    'prozac',
    'prude',
    'prudishly',
    'prune',
    'pruning',
    'pry',
    'psychic',
    'public',
    'publisher',
    'pucker',
    'pueblo',
    'pug',
    'pull',
    'pulmonary',
    'pulp',
    'pulsate',
    'pulse',
    'pulverize',
    'puma',
    'pumice',
    'pummel',
    'punch',
    'punctual',
    'punctuate',
    'punctured',
    'pungent',
    'punisher',
    'punk',
    'pupil',
    'puppet',
    'puppy',
    'purchase',
    'pureblood',
    'purebred',
    'purely',
    'pureness',
    'purgatory',
    'purge',
    'purging',
    'purifier',
    'purify',
    'purist',
    'puritan',
    'purity',
    'purple',
    'purplish',
    'purposely',
    'purr',
    'purse',
    'pursuable',
    'pursuant',
    'pursuit',
    'purveyor',
    'pushcart',
    'pushchair',
    'pusher',
    'pushiness',
    'pushing',
    'pushover',
    'pushpin',
    'pushup',
    'pushy',
    'putdown',
    'putt',
    'puzzle',
    'puzzling',
    'pyramid',
    'pyromania',
    'python',
    'quack',
    'quadrant',
    'quail',
    'quaintly',
    'quake',
    'quaking',
    'qualified',
    'qualifier',
    'qualify',
    'quality',
    'qualm',
    'quantum',
    'quarrel',
    'quarry',
    'quartered',
    'quarterly',
    'quarters',
    'quartet',
    'quench',
    'query',
    'quicken',
    'quickly',
    'quickness',
    'quicksand',
    'quickstep',
    'quiet',
    'quill',
    'quilt',
    'quintet',
    'quintuple',
    'quirk',
    'quit',
    'quiver',
    'quizzical',
    'quotable',
    'quotation',
    'quote',
    'rabid',
    'race',
    'racing',
    'racism',
    'rack',
    'racoon',
    'radar',
    'radial',
    'radiance',
    'radiantly',
    'radiated',
    'radiation',
    'radiator',
    'radio',
    'radish',
    'raffle',
    'raft',
    'rage',
    'ragged',
    'raging',
    'ragweed',
    'raider',
    'railcar',
    'railing',
    'railroad',
    'railway',
    'raisin',
    'rake',
    'raking',
    'rally',
    'ramble',
    'rambling',
    'ramp',
    'ramrod',
    'ranch',
    'rancidity',
    'random',
    'ranged',
    'ranger',
    'ranging',
    'ranked',
    'ranking',
    'ransack',
    'ranting',
    'rants',
    'rare',
    'rarity',
    'rascal',
    'rash',
    'rasping',
    'ravage',
    'raven',
    'ravine',
    'raving',
    'ravioli',
    'ravishing',
    'reabsorb',
    'reach',
    'reacquire',
    'reaction',
    'reactive',
    'reactor',
    'reaffirm',
    'ream',
    'reanalyze',
    'reappear',
    'reapply',
    'reappoint',
    'reapprove',
    'rearrange',
    'rearview',
    'reason',
    'reassign',
    'reassure',
    'reattach',
    'reawake',
    'rebalance',
    'rebate',
    'rebel',
    'rebirth',
    'reboot',
    'reborn',
    'rebound',
    'rebuff',
    'rebuild',
    'rebuilt',
    'reburial',
    'rebuttal',
    'recall',
    'recant',
    'recapture',
    'recast',
    'recede',
    'recent',
    'recess',
    'recharger',
    'recipient',
    'recital',
    'recite',
    'reckless',
    'reclaim',
    'recliner',
    'reclining',
    'recluse',
    'reclusive',
    'recognize',
    'recoil',
    'recollect',
    'recolor',
    'reconcile',
    'reconfirm',
    'reconvene',
    'recopy',
    'record',
    'recount',
    'recoup',
    'recovery',
    'recreate',
    'rectal',
    'rectangle',
    'rectified',
    'rectify',
    'recycled',
    'recycler',
    'recycling',
    'reemerge',
    'reenact',
    'reenter',
    'reentry',
    'reexamine',
    'referable',
    'referee',
    'reference',
    'refill',
    'refinance',
    'refined',
    'refinery',
    'refining',
    'refinish',
    'reflected',
    'reflector',
    'reflex',
    'reflux',
    'refocus',
    'refold',
    'reforest',
    'reformat',
    'reformed',
    'reformer',
    'reformist',
    'refract',
    'refrain',
    'refreeze',
    'refresh',
    'refried',
    'refueling',
    'refund',
    'refurbish',
    'refurnish',
    'refusal',
    'refuse',
    'refusing',
    'refutable',
    'refute',
    'regain',
    'regalia',
    'regally',
    'reggae',
    'regime',
    'region',
    'register',
    'registrar',
    'registry',
    'regress',
    'regretful',
    'regroup',
    'regular',
    'regulate',
    'regulator',
    'rehab',
    'reheat',
    'rehire',
    'rehydrate',
    'reimburse',
    'reissue',
    'reiterate',
    'rejoice',
    'rejoicing',
    'rejoin',
    'rekindle',
    'relapse',
    'relapsing',
    'relatable',
    'related',
    'relation',
    'relative',
    'relax',
    'relay',
    'relearn',
    'release',
    'relenting',
    'reliable',
    'reliably',
    'reliance',
    'reliant',
    'relic',
    'relieve',
    'relieving',
    'relight',
    'relish',
    'relive',
    'reload',
    'relocate',
    'relock',
    'reluctant',
    'rely',
    'remake',
    'remark',
    'remarry',
    'rematch',
    'remedial',
    'remedy',
    'remember',
    'reminder',
    'remindful',
    'remission',
    'remix',
    'remnant',
    'remodeler',
    'remold',
    'remorse',
    'remote',
    'removable',
    'removal',
    'removed',
    'remover',
    'removing',
    'rename',
    'renderer',
    'rendering',
    'rendition',
    'renegade',
    'renewable',
    'renewably',
    'renewal',
    'renewed',
    'renounce',
    'renovate',
    'renovator',
    'rentable',
    'rental',
    'rented',
    'renter',
    'reoccupy',
    'reoccur',
    'reopen',
    'reorder',
    'repackage',
    'repacking',
    'repaint',
    'repair',
    'repave',
    'repaying',
    'repayment',
    'repeal',
    'repeated',
    'repeater',
    'repent',
    'rephrase',
    'replace',
    'replay',
    'replica',
    'reply',
    'reporter',
    'repose',
    'repossess',
    'repost',
    'repressed',
    'reprimand',
    'reprint',
    'reprise',
    'reproach',
    'reprocess',
    'reproduce',
    'reprogram',
    'reps',
    'reptile',
    'reptilian',
    'repugnant',
    'repulsion',
    'repulsive',
    'repurpose',
    'reputable',
    'reputably',
    'request',
    'require',
    'requisite',
    'reroute',
    'rerun',
    'resale',
    'resample',
    'rescuer',
    'reseal',
    'research',
    'reselect',
    'reseller',
    'resemble',
    'resend',
    'resent',
    'reset',
    'reshape',
    'reshoot',
    'reshuffle',
    'residence',
    'residency',
    'resident',
    'residual',
    'residue',
    'resigned',
    'resilient',
    'resistant',
    'resisting',
    'resize',
    'resolute',
    'resolved',
    'resonant',
    'resonate',
    'resort',
    'resource',
    'respect',
    'resubmit',
    'result',
    'resume',
    'resupply',
    'resurface',
    'resurrect',
    'retail',
    'retainer',
    'retaining',
    'retake',
    'retaliate',
    'retention',
    'rethink',
    'retinal',
    'retired',
    'retiree',
    'retiring',
    'retold',
    'retool',
    'retorted',
    'retouch',
    'retrace',
    'retract',
    'retrain',
    'retread',
    'retreat',
    'retrial',
    'retrieval',
    'retriever',
    'retry',
    'return',
    'retying',
    'retype',
    'reunion',
    'reunite',
    'reusable',
    'reuse',
    'reveal',
    'reveler',
    'revenge',
    'revenue',
    'reverb',
    'revered',
    'reverence',
    'reverend',
    'reversal',
    'reverse',
    'reversing',
    'reversion',
    'revert',
    'revisable',
    'revise',
    'revision',
    'revisit',
    'revivable',
    'revival',
    'reviver',
    'reviving',
    'revocable',
    'revoke',
    'revolt',
    'revolver',
    'revolving',
    'reward',
    'rewash',
    'rewind',
    'rewire',
    'reword',
    'rework',
    'rewrap',
    'rewrite',
    'rhyme',
    'ribbon',
    'ribcage',
    'rice',
    'riches',
    'richly',
    'richness',
    'rickety',
    'ricotta',
    'riddance',
    'ridden',
    'ride',
    'riding',
    'rifling',
    'rift',
    'rigging',
    'rigid',
    'rigor',
    'rimless',
    'rimmed',
    'rind',
    'rink',
    'rinse',
    'rinsing',
    'riot',
    'ripcord',
    'ripeness',
    'ripening',
    'ripping',
    'ripple',
    'rippling',
    'riptide',
    'rise',
    'rising',
    'risk',
    'risotto',
    'ritalin',
    'ritzy',
    'rival',
    'riverbank',
    'riverbed',
    'riverboat',
    'riverside',
    'riveter',
    'riveting',
    'roamer',
    'roaming',
    'roast',
    'robbing',
    'robe',
    'robin',
    'robotics',
    'robust',
    'rockband',
    'rocker',
    'rocket',
    'rockfish',
    'rockiness',
    'rocking',
    'rocklike',
    'rockslide',
    'rockstar',
    'rocky',
    'rogue',
    'roman',
    'romp',
    'rope',
    'roping',
    'roster',
    'rosy',
    'rotten',
    'rotting',
    'rotunda',
    'roulette',
    'rounding',
    'roundish',
    'roundness',
    'roundup',
    'roundworm',
    'routine',
    'routing',
    'rover',
    'roving',
    'royal',
    'rubbed',
    'rubber',
    'rubbing',
    'rubble',
    'rubdown',
    'ruby',
    'ruckus',
    'rudder',
    'rug',
    'ruined',
    'rule',
    'rumble',
    'rumbling',
    'rummage',
    'rumor',
    'runaround',
    'rundown',
    'runner',
    'running',
    'runny',
    'runt',
    'runway',
    'rupture',
    'rural',
    'ruse',
    'rush',
    'rust',
    'rut',
    'sabbath',
    'sabotage',
    'sacrament',
    'sacred',
    'sacrifice',
    'sadden',
    'saddlebag',
    'saddled',
    'saddling',
    'sadly',
    'sadness',
    'safari',
    'safeguard',
    'safehouse',
    'safely',
    'safeness',
    'saffron',
    'saga',
    'sage',
    'sagging',
    'saggy',
    'said',
    'saint',
    'sake',
    'salad',
    'salami',
    'salaried',
    'salary',
    'saline',
    'salon',
    'saloon',
    'salsa',
    'salt',
    'salutary',
    'salute',
    'salvage',
    'salvaging',
    'salvation',
    'same',
    'sample',
    'sampling',
    'sanction',
    'sanctity',
    'sanctuary',
    'sandal',
    'sandbag',
    'sandbank',
    'sandbar',
    'sandblast',
    'sandbox',
    'sanded',
    'sandfish',
    'sanding',
    'sandlot',
    'sandpaper',
    'sandpit',
    'sandstone',
    'sandstorm',
    'sandworm',
    'sandy',
    'sanitary',
    'sanitizer',
    'sank',
    'santa',
    'sapling',
    'sappiness',
    'sappy',
    'sarcasm',
    'sarcastic',
    'sardine',
    'sash',
    'sasquatch',
    'sassy',
    'satchel',
    'satiable',
    'satin',
    'satirical',
    'satisfied',
    'satisfy',
    'saturate',
    'saturday',
    'sauciness',
    'saucy',
    'sauna',
    'savage',
    'savanna',
    'saved',
    'savings',
    'savior',
    'savor',
    'saxophone',
    'say',
    'scabbed',
    'scabby',
    'scalded',
    'scalding',
    'scale',
    'scaling',
    'scallion',
    'scallop',
    'scalping',
    'scam',
    'scandal',
    'scanner',
    'scanning',
    'scant',
    'scapegoat',
    'scarce',
    'scarcity',
    'scarecrow',
    'scared',
    'scarf',
    'scarily',
    'scariness',
    'scarring',
    'scary',
    'scavenger',
    'scenic',
    'schedule',
    'schematic',
    'scheme',
    'scheming',
    'schilling',
    'schnapps',
    'scholar',
    'science',
    'scientist',
    'scion',
    'scoff',
    'scolding',
    'scone',
    'scoop',
    'scooter',
    'scope',
    'scorch',
    'scorebook',
    'scorecard',
    'scored',
    'scoreless',
    'scorer',
    'scoring',
    'scorn',
    'scorpion',
    'scotch',
    'scoundrel',
    'scoured',
    'scouring',
    'scouting',
    'scouts',
    'scowling',
    'scrabble',
    'scraggly',
    'scrambled',
    'scrambler',
    'scrap',
    'scratch',
    'scrawny',
    'screen',
    'scribble',
    'scribe',
    'scribing',
    'scrimmage',
    'script',
    'scroll',
    'scrooge',
    'scrounger',
    'scrubbed',
    'scrubber',
    'scruffy',
    'scrunch',
    'scrutiny',
    'scuba',
    'scuff',
    'sculptor',
    'sculpture',
    'scurvy',
    'scuttle',
    'secluded',
    'secluding',
    'seclusion',
    'second',
    'secrecy',
    'secret',
    'sectional',
    'sector',
    'secular',
    'securely',
    'security',
    'sedan',
    'sedate',
    'sedation',
    'sedative',
    'sediment',
    'seduce',
    'seducing',
    'segment',
    'seismic',
    'seizing',
    'seldom',
    'selected',
    'selection',
    'selective',
    'selector',
    'self',
    'seltzer',
    'semantic',
    'semester',
    'semicolon',
    'semifinal',
    'seminar',
    'semisoft',
    'semisweet',
    'senate',
    'senator',
    'send',
    'senior',
    'senorita',
    'sensation',
    'sensitive',
    'sensitize',
    'sensually',
    'sensuous',
    'sepia',
    'september',
    'septic',
    'septum',
    'sequel',
    'sequence',
    'sequester',
    'series',
    'sermon',
    'serotonin',
    'serpent',
    'serrated',
    'serve',
    'service',
    'serving',
    'sesame',
    'sessions',
    'setback',
    'setting',
    'settle',
    'settling',
    'setup',
    'sevenfold',
    'seventeen',
    'seventh',
    'seventy',
    'severity',
    'shabby',
    'shack',
    'shaded',
    'shadily',
    'shadiness',
    'shading',
    'shadow',
    'shady',
    'shaft',
    'shakable',
    'shakily',
    'shakiness',
    'shaking',
    'shaky',
    'shale',
    'shallot',
    'shallow',
    'shame',
    'shampoo',
    'shamrock',
    'shank',
    'shanty',
    'shape',
    'shaping',
    'share',
    'sharpener',
    'sharper',
    'sharpie',
    'sharply',
    'sharpness',
    'shawl',
    'sheath',
    'shed',
    'sheep',
    'sheet',
    'shelf',
    'shell',
    'shelter',
    'shelve',
    'shelving',
    'sherry',
    'shield',
    'shifter',
    'shifting',
    'shiftless',
    'shifty',
    'shimmer',
    'shimmy',
    'shindig',
    'shine',
    'shingle',
    'shininess',
    'shining',
    'shiny',
    'ship',
    'shirt',
    'shivering',
    'shock',
    'shone',
    'shoplift',
    'shopper',
    'shopping',
    'shoptalk',
    'shore',
    'shortage',
    'shortcake',
    'shortcut',
    'shorten',
    'shorter',
    'shorthand',
    'shortlist',
    'shortly',
    'shortness',
    'shorts',
    'shortwave',
    'shorty',
    'shout',
    'shove',
    'showbiz',
    'showcase',
    'showdown',
    'shower',
    'showgirl',
    'showing',
    'showman',
    'shown',
    'showoff',
    'showpiece',
    'showplace',
    'showroom',
    'showy',
    'shrank',
    'shrapnel',
    'shredder',
    'shredding',
    'shrewdly',
    'shriek',
    'shrill',
    'shrimp',
    'shrine',
    'shrink',
    'shrivel',
    'shrouded',
    'shrubbery',
    'shrubs',
    'shrug',
    'shrunk',
    'shucking',
    'shudder',
    'shuffle',
    'shuffling',
    'shun',
    'shush',
    'shut',
    'shy',
    'siamese',
    'siberian',
    'sibling',
    'siding',
    'sierra',
    'siesta',
    'sift',
    'sighing',
    'silenced',
    'silencer',
    'silent',
    'silica',
    'silicon',
    'silk',
    'silliness',
    'silly',
    'silo',
    'silt',
    'silver',
    'similarly',
    'simile',
    'simmering',
    'simple',
    'simplify',
    'simply',
    'sincere',
    'sincerity',
    'singer',
    'singing',
    'single',
    'singular',
    'sinister',
    'sinless',
    'sinner',
    'sinuous',
    'sip',
    'siren',
    'sister',
    'sitcom',
    'sitter',
    'sitting',
    'situated',
    'situation',
    'sixfold',
    'sixteen',
    'sixth',
    'sixties',
    'sixtieth',
    'sixtyfold',
    'sizable',
    'sizably',
    'size',
    'sizing',
    'sizzle',
    'sizzling',
    'skater',
    'skating',
    'skedaddle',
    'skeletal',
    'skeleton',
    'skeptic',
    'sketch',
    'skewed',
    'skewer',
    'skid',
    'skied',
    'skier',
    'skies',
    'skiing',
    'skilled',
    'skillet',
    'skillful',
    'skimmed',
    'skimmer',
    'skimming',
    'skimpily',
    'skincare',
    'skinhead',
    'skinless',
    'skinning',
    'skinny',
    'skintight',
    'skipper',
    'skipping',
    'skirmish',
    'skirt',
    'skittle',
    'skydiver',
    'skylight',
    'skyline',
    'skype',
    'skyrocket',
    'skyward',
    'slab',
    'slacked',
    'slacker',
    'slacking',
    'slackness',
    'slacks',
    'slain',
    'slam',
    'slander',
    'slang',
    'slapping',
    'slapstick',
    'slashed',
    'slashing',
    'slate',
    'slather',
    'slaw',
    'sled',
    'sleek',
    'sleep',
    'sleet',
    'sleeve',
    'slept',
    'sliceable',
    'sliced',
    'slicer',
    'slicing',
    'slick',
    'slider',
    'slideshow',
    'sliding',
    'slighted',
    'slighting',
    'slightly',
    'slimness',
    'slimy',
    'slinging',
    'slingshot',
    'slinky',
    'slip',
    'slit',
    'sliver',
    'slobbery',
    'slogan',
    'sloped',
    'sloping',
    'sloppily',
    'sloppy',
    'slot',
    'slouching',
    'slouchy',
    'sludge',
    'slug',
    'slum',
    'slurp',
    'slush',
    'sly',
    'small',
    'smartly',
    'smartness',
    'smasher',
    'smashing',
    'smashup',
    'smell',
    'smelting',
    'smile',
    'smilingly',
    'smirk',
    'smite',
    'smith',
    'smitten',
    'smock',
    'smog',
    'smoked',
    'smokeless',
    'smokiness',
    'smoking',
    'smoky',
    'smolder',
    'smooth',
    'smother',
    'smudge',
    'smudgy',
    'smuggler',
    'smuggling',
    'smugly',
    'smugness',
    'snack',
    'snagged',
    'snaking',
    'snap',
    'snare',
    'snarl',
    'snazzy',
    'sneak',
    'sneer',
    'sneeze',
    'sneezing',
    'snide',
    'sniff',
    'snippet',
    'snipping',
    'snitch',
    'snooper',
    'snooze',
    'snore',
    'snoring',
    'snorkel',
    'snort',
    'snout',
    'snowbird',
    'snowboard',
    'snowbound',
    'snowcap',
    'snowdrift',
    'snowdrop',
    'snowfall',
    'snowfield',
    'snowflake',
    'snowiness',
    'snowless',
    'snowman',
    'snowplow',
    'snowshoe',
    'snowstorm',
    'snowsuit',
    'snowy',
    'snub',
    'snuff',
    'snuggle',
    'snugly',
    'snugness',
    'speak',
    'spearfish',
    'spearhead',
    'spearman',
    'spearmint',
    'species',
    'specimen',
    'specked',
    'speckled',
    'specks',
    'spectacle',
    'spectator',
    'spectrum',
    'speculate',
    'speech',
    'speed',
    'spellbind',
    'speller',
    'spelling',
    'spendable',
    'spender',
    'spending',
    'spent',
    'spew',
    'sphere',
    'spherical',
    'sphinx',
    'spider',
    'spied',
    'spiffy',
    'spill',
    'spilt',
    'spinach',
    'spinal',
    'spindle',
    'spinner',
    'spinning',
    'spinout',
    'spinster',
    'spiny',
    'spiral',
    'spirited',
    'spiritism',
    'spirits',
    'spiritual',
    'splashed',
    'splashing',
    'splashy',
    'splatter',
    'spleen',
    'splendid',
    'splendor',
    'splice',
    'splicing',
    'splinter',
    'splotchy',
    'splurge',
    'spoilage',
    'spoiled',
    'spoiler',
    'spoiling',
    'spoils',
    'spoken',
    'spokesman',
    'sponge',
    'spongy',
    'sponsor',
    'spoof',
    'spookily',
    'spooky',
    'spool',
    'spoon',
    'spore',
    'sporting',
    'sports',
    'sporty',
    'spotless',
    'spotlight',
    'spotted',
    'spotter',
    'spotting',
    'spotty',
    'spousal',
    'spouse',
    'spout',
    'sprain',
    'sprang',
    'sprawl',
    'spray',
    'spree',
    'sprig',
    'spring',
    'sprinkled',
    'sprinkler',
    'sprint',
    'sprite',
    'sprout',
    'spruce',
    'sprung',
    'spry',
    'spud',
    'spur',
    'sputter',
    'spyglass',
    'squabble',
    'squad',
    'squall',
    'squander',
    'squash',
    'squatted',
    'squatter',
    'squatting',
    'squeak',
    'squealer',
    'squealing',
    'squeamish',
    'squeegee',
    'squeeze',
    'squeezing',
    'squid',
    'squiggle',
    'squiggly',
    'squint',
    'squire',
    'squirt',
    'squishier',
    'squishy',
    'stability',
    'stabilize',
    'stable',
    'stack',
    'stadium',
    'staff',
    'stage',
    'staging',
    'stagnant',
    'stagnate',
    'stainable',
    'stained',
    'staining',
    'stainless',
    'stalemate',
    'staleness',
    'stalling',
    'stallion',
    'stamina',
    'stammer',
    'stamp',
    'stand',
    'stank',
    'staple',
    'stapling',
    'starboard',
    'starch',
    'stardom',
    'stardust',
    'starfish',
    'stargazer',
    'staring',
    'stark',
    'starless',
    'starlet',
    'starlight',
    'starlit',
    'starring',
    'starry',
    'starship',
    'starter',
    'starting',
    'startle',
    'startling',
    'startup',
    'starved',
    'starving',
    'stash',
    'state',
    'static',
    'statistic',
    'statue',
    'stature',
    'status',
    'statute',
    'statutory',
    'staunch',
    'stays',
    'steadfast',
    'steadier',
    'steadily',
    'steadying',
    'steam',
    'steed',
    'steep',
    'steerable',
    'steering',
    'steersman',
    'stegosaur',
    'stellar',
    'stem',
    'stench',
    'stencil',
    'step',
    'stereo',
    'sterile',
    'sterility',
    'sterilize',
    'sterling',
    'sternness',
    'sternum',
    'stew',
    'stick',
    'stiffen',
    'stiffly',
    'stiffness',
    'stifle',
    'stifling',
    'stillness',
    'stilt',
    'stimulant',
    'stimulate',
    'stimuli',
    'stimulus',
    'stinger',
    'stingily',
    'stinging',
    'stingray',
    'stingy',
    'stinking',
    'stinky',
    'stipend',
    'stipulate',
    'stir',
    'stitch',
    'stock',
    'stoic',
    'stoke',
    'stole',
    'stomp',
    'stonewall',
    'stoneware',
    'stonework',
    'stoning',
    'stony',
    'stood',
    'stooge',
    'stool',
    'stoop',
    'stoplight',
    'stoppable',
    'stoppage',
    'stopped',
    'stopper',
    'stopping',
    'stopwatch',
    'storable',
    'storage',
    'storeroom',
    'storewide',
    'storm',
    'stout',
    'stove',
    'stowaway',
    'stowing',
    'straddle',
    'straggler',
    'strained',
    'strainer',
    'straining',
    'strangely',
    'stranger',
    'strangle',
    'strategic',
    'strategy',
    'stratus',
    'straw',
    'stray',
    'streak',
    'stream',
    'street',
    'strength',
    'strenuous',
    'strep',
    'stress',
    'stretch',
    'strewn',
    'stricken',
    'strict',
    'stride',
    'strife',
    'strike',
    'striking',
    'strive',
    'striving',
    'strobe',
    'strode',
    'stroller',
    'strongbox',
    'strongly',
    'strongman',
    'struck',
    'structure',
    'strudel',
    'struggle',
    'strum',
    'strung',
    'strut',
    'stubbed',
    'stubble',
    'stubbly',
    'stubborn',
    'stucco',
    'stuck',
    'student',
    'studied',
    'studio',
    'study',
    'stuffed',
    'stuffing',
    'stuffy',
    'stumble',
    'stumbling',
    'stump',
    'stung',
    'stunned',
    'stunner',
    'stunning',
    'stunt',
    'stupor',
    'sturdily',
    'sturdy',
    'styling',
    'stylishly',
    'stylist',
    'stylized',
    'stylus',
    'suave',
    'subarctic',
    'subatomic',
    'subdivide',
    'subdued',
    'subduing',
    'subfloor',
    'subgroup',
    'subheader',
    'subject',
    'sublease',
    'sublet',
    'sublevel',
    'sublime',
    'submarine',
    'submerge',
    'submersed',
    'submitter',
    'subpanel',
    'subpar',
    'subplot',
    'subprime',
    'subscribe',
    'subscript',
    'subsector',
    'subside',
    'subsiding',
    'subsidize',
    'subsidy',
    'subsoil',
    'subsonic',
    'substance',
    'subsystem',
    'subtext',
    'subtitle',
    'subtly',
    'subtotal',
    'subtract',
    'subtype',
    'suburb',
    'subway',
    'subwoofer',
    'subzero',
    'succulent',
    'such',
    'suction',
    'sudden',
    'sudoku',
    'suds',
    'sufferer',
    'suffering',
    'suffice',
    'suffix',
    'suffocate',
    'suffrage',
    'sugar',
    'suggest',
    'suing',
    'suitable',
    'suitably',
    'suitcase',
    'suitor',
    'sulfate',
    'sulfide',
    'sulfite',
    'sulfur',
    'sulk',
    'sullen',
    'sulphate',
    'sulphuric',
    'sultry',
    'superbowl',
    'superglue',
    'superhero',
    'superior',
    'superjet',
    'superman',
    'supermom',
    'supernova',
    'supervise',
    'supper',
    'supplier',
    'supply',
    'support',
    'supremacy',
    'supreme',
    'surcharge',
    'surely',
    'sureness',
    'surface',
    'surfacing',
    'surfboard',
    'surfer',
    'surgery',
    'surgical',
    'surging',
    'surname',
    'surpass',
    'surplus',
    'surprise',
    'surreal',
    'surrender',
    'surrogate',
    'surround',
    'survey',
    'survival',
    'survive',
    'surviving',
    'survivor',
    'sushi',
    'suspect',
    'suspend',
    'suspense',
    'sustained',
    'sustainer',
    'swab',
    'swaddling',
    'swagger',
    'swampland',
    'swan',
    'swapping',
    'swarm',
    'sway',
    'swear',
    'sweat',
    'sweep',
    'swell',
    'swept',
    'swerve',
    'swifter',
    'swiftly',
    'swiftness',
    'swimmable',
    'swimmer',
    'swimming',
    'swimsuit',
    'swimwear',
    'swinger',
    'swinging',
    'swipe',
    'swirl',
    'switch',
    'swivel',
    'swizzle',
    'swooned',
    'swoop',
    'swoosh',
    'swore',
    'sworn',
    'swung',
    'sycamore',
    'sympathy',
    'symphonic',
    'symphony',
    'symptom',
    'synapse',
    'syndrome',
    'synergy',
    'synopses',
    'synopsis',
    'synthesis',
    'synthetic',
    'syrup',
    'system',
    't-shirt',
    'tabasco',
    'tabby',
    'tableful',
    'tables',
    'tablet',
    'tableware',
    'tabloid',
    'tackiness',
    'tacking',
    'tackle',
    'tackling',
    'tacky',
    'taco',
    'tactful',
    'tactical',
    'tactics',
    'tactile',
    'tactless',
    'tadpole',
    'taekwondo',
    'tag',
    'tainted',
    'take',
    'taking',
    'talcum',
    'talisman',
    'tall',
    'talon',
    'tamale',
    'tameness',
    'tamer',
    'tamper',
    'tank',
    'tanned',
    'tannery',
    'tanning',
    'tantrum',
    'tapeless',
    'tapered',
    'tapering',
    'tapestry',
    'tapioca',
    'tapping',
    'taps',
    'tarantula',
    'target',
    'tarmac',
    'tarnish',
    'tarot',
    'tartar',
    'tartly',
    'tartness',
    'task',
    'tassel',
    'taste',
    'tastiness',
    'tasting',
    'tasty',
    'tattered',
    'tattle',
    'tattling',
    'tattoo',
    'taunt',
    'tavern',
    'thank',
    'that',
    'thaw',
    'theater',
    'theatrics',
    'thee',
    'theft',
    'theme',
    'theology',
    'theorize',
    'thermal',
    'thermos',
    'thesaurus',
    'these',
    'thesis',
    'thespian',
    'thicken',
    'thicket',
    'thickness',
    'thieving',
    'thievish',
    'thigh',
    'thimble',
    'thing',
    'think',
    'thinly',
    'thinner',
    'thinness',
    'thinning',
    'thirstily',
    'thirsting',
    'thirsty',
    'thirteen',
    'thirty',
    'thong',
    'thorn',
    'those',
    'thousand',
    'thrash',
    'thread',
    'threaten',
    'threefold',
    'thrift',
    'thrill',
    'thrive',
    'thriving',
    'throat',
    'throbbing',
    'throng',
    'throttle',
    'throwaway',
    'throwback',
    'thrower',
    'throwing',
    'thud',
    'thumb',
    'thumping',
    'thursday',
    'thus',
    'thwarting',
    'thyself',
    'tiara',
    'tibia',
    'tidal',
    'tidbit',
    'tidiness',
    'tidings',
    'tidy',
    'tiger',
    'tighten',
    'tightly',
    'tightness',
    'tightrope',
    'tightwad',
    'tigress',
    'tile',
    'tiling',
    'till',
    'tilt',
    'timid',
    'timing',
    'timothy',
    'tinderbox',
    'tinfoil',
    'tingle',
    'tingling',
    'tingly',
    'tinker',
    'tinkling',
    'tinsel',
    'tinsmith',
    'tint',
    'tinwork',
    'tiny',
    'tipoff',
    'tipped',
    'tipper',
    'tipping',
    'tiptoeing',
    'tiptop',
    'tiring',
    'tissue',
    'trace',
    'tracing',
    'track',
    'traction',
    'tractor',
    'trade',
    'trading',
    'tradition',
    'traffic',
    'tragedy',
    'trailing',
    'trailside',
    'train',
    'traitor',
    'trance',
    'tranquil',
    'transfer',
    'transform',
    'translate',
    'transpire',
    'transport',
    'transpose',
    'trapdoor',
    'trapeze',
    'trapezoid',
    'trapped',
    'trapper',
    'trapping',
    'traps',
    'trash',
    'travel',
    'traverse',
    'travesty',
    'tray',
    'treachery',
    'treading',
    'treadmill',
    'treason',
    'treat',
    'treble',
    'tree',
    'trekker',
    'tremble',
    'trembling',
    'tremor',
    'trench',
    'trend',
    'trespass',
    'triage',
    'trial',
    'triangle',
    'tribesman',
    'tribunal',
    'tribune',
    'tributary',
    'tribute',
    'triceps',
    'trickery',
    'trickily',
    'tricking',
    'trickle',
    'trickster',
    'tricky',
    'tricolor',
    'tricycle',
    'trident',
    'tried',
    'trifle',
    'trifocals',
    'trillion',
    'trilogy',
    'trimester',
    'trimmer',
    'trimming',
    'trimness',
    'trinity',
    'trio',
    'tripod',
    'tripping',
    'triumph',
    'trivial',
    'trodden',
    'trolling',
    'trombone',
    'trophy',
    'tropical',
    'tropics',
    'trouble',
    'troubling',
    'trough',
    'trousers',
    'trout',
    'trowel',
    'truce',
    'truck',
    'truffle',
    'trump',
    'trunks',
    'trustable',
    'trustee',
    'trustful',
    'trusting',
    'trustless',
    'truth',
    'try',
    'tubby',
    'tubeless',
    'tubular',
    'tucking',
    'tuesday',
    'tug',
    'tuition',
    'tulip',
    'tumble',
    'tumbling',
    'tummy',
    'turban',
    'turbine',
    'turbofan',
    'turbojet',
    'turbulent',
    'turf',
    'turkey',
    'turmoil',
    'turret',
    'turtle',
    'tusk',
    'tutor',
    'tutu',
    'tux',
    'tweak',
    'tweed',
    'tweet',
    'tweezers',
    'twelve',
    'twentieth',
    'twenty',
    'twerp',
    'twice',
    'twiddle',
    'twiddling',
    'twig',
    'twilight',
    'twine',
    'twins',
    'twirl',
    'twistable',
    'twisted',
    'twister',
    'twisting',
    'twisty',
    'twitch',
    'twitter',
    'tycoon',
    'tying',
    'tyke',
    'udder',
    'ultimate',
    'ultimatum',
    'ultra',
    'umbilical',
    'umbrella',
    'umpire',
    'unabashed',
    'unable',
    'unadorned',
    'unadvised',
    'unafraid',
    'unaired',
    'unaligned',
    'unaltered',
    'unarmored',
    'unashamed',
    'unaudited',
    'unawake',
    'unaware',
    'unbaked',
    'unbalance',
    'unbeaten',
    'unbend',
    'unbent',
    'unbiased',
    'unbitten',
    'unblended',
    'unblessed',
    'unblock',
    'unbolted',
    'unbounded',
    'unboxed',
    'unbraided',
    'unbridle',
    'unbroken',
    'unbuckled',
    'unbundle',
    'unburned',
    'unbutton',
    'uncanny',
    'uncapped',
    'uncaring',
    'uncertain',
    'unchain',
    'unchanged',
    'uncharted',
    'uncheck',
    'uncivil',
    'unclad',
    'unclaimed',
    'unclamped',
    'unclasp',
    'uncle',
    'unclip',
    'uncloak',
    'unclog',
    'unclothed',
    'uncoated',
    'uncoiled',
    'uncolored',
    'uncombed',
    'uncommon',
    'uncooked',
    'uncork',
    'uncorrupt',
    'uncounted',
    'uncouple',
    'uncouth',
    'uncover',
    'uncross',
    'uncrown',
    'uncrushed',
    'uncured',
    'uncurious',
    'uncurled',
    'uncut',
    'undamaged',
    'undated',
    'undaunted',
    'undead',
    'undecided',
    'undefined',
    'underage',
    'underarm',
    'undercoat',
    'undercook',
    'undercut',
    'underdog',
    'underdone',
    'underfed',
    'underfeed',
    'underfoot',
    'undergo',
    'undergrad',
    'underhand',
    'underline',
    'underling',
    'undermine',
    'undermost',
    'underpaid',
    'underpass',
    'underpay',
    'underrate',
    'undertake',
    'undertone',
    'undertook',
    'undertow',
    'underuse',
    'underwear',
    'underwent',
    'underwire',
    'undesired',
    'undiluted',
    'undivided',
    'undocked',
    'undoing',
    'undone',
    'undrafted',
    'undress',
    'undrilled',
    'undusted',
    'undying',
    'unearned',
    'unearth',
    'unease',
    'uneasily',
    'uneasy',
    'uneatable',
    'uneaten',
    'unedited',
    'unelected',
    'unending',
    'unengaged',
    'unenvied',
    'unequal',
    'unethical',
    'uneven',
    'unexpired',
    'unexposed',
    'unfailing',
    'unfair',
    'unfasten',
    'unfazed',
    'unfeeling',
    'unfiled',
    'unfilled',
    'unfitted',
    'unfitting',
    'unfixable',
    'unfixed',
    'unflawed',
    'unfocused',
    'unfold',
    'unfounded',
    'unframed',
    'unfreeze',
    'unfrosted',
    'unfrozen',
    'unfunded',
    'unglazed',
    'ungloved',
    'unglue',
    'ungodly',
    'ungraded',
    'ungreased',
    'unguarded',
    'unguided',
    'unhappily',
    'unhappy',
    'unharmed',
    'unhealthy',
    'unheard',
    'unhearing',
    'unheated',
    'unhelpful',
    'unhidden',
    'unhinge',
    'unhitched',
    'unholy',
    'unhook',
    'unicorn',
    'unicycle',
    'unified',
    'unifier',
    'uniformed',
    'uniformly',
    'unify',
    'unimpeded',
    'uninjured',
    'uninstall',
    'uninsured',
    'uninvited',
    'union',
    'uniquely',
    'unisexual',
    'unison',
    'unissued',
    'unit',
    'universal',
    'universe',
    'unjustly',
    'unkempt',
    'unkind',
    'unknotted',
    'unknowing',
    'unknown',
    'unlaced',
    'unlatch',
    'unlawful',
    'unleaded',
    'unlearned',
    'unleash',
    'unless',
    'unleveled',
    'unlighted',
    'unlikable',
    'unlimited',
    'unlined',
    'unlinked',
    'unlisted',
    'unlit',
    'unlivable',
    'unloaded',
    'unloader',
    'unlocked',
    'unlocking',
    'unlovable',
    'unloved',
    'unlovely',
    'unloving',
    'unluckily',
    'unlucky',
    'unmade',
    'unmanaged',
    'unmanned',
    'unmapped',
    'unmarked',
    'unmasked',
    'unmasking',
    'unmatched',
    'unmindful',
    'unmixable',
    'unmixed',
    'unmolded',
    'unmoral',
    'unmovable',
    'unmoved',
    'unmoving',
    'unnamable',
    'unnamed',
    'unnatural',
    'unneeded',
    'unnerve',
    'unnerving',
    'unnoticed',
    'unopened',
    'unopposed',
    'unpack',
    'unpadded',
    'unpaid',
    'unpainted',
    'unpaired',
    'unpaved',
    'unpeeled',
    'unpicked',
    'unpiloted',
    'unpinned',
    'unplanned',
    'unplanted',
    'unpleased',
    'unpledged',
    'unplowed',
    'unplug',
    'unpopular',
    'unproven',
    'unquote',
    'unranked',
    'unrated',
    'unraveled',
    'unreached',
    'unread',
    'unreal',
    'unreeling',
    'unrefined',
    'unrelated',
    'unrented',
    'unrest',
    'unretired',
    'unrevised',
    'unrigged',
    'unripe',
    'unrivaled',
    'unroasted',
    'unrobed',
    'unroll',
    'unruffled',
    'unruly',
    'unrushed',
    'unsaddle',
    'unsafe',
    'unsaid',
    'unsalted',
    'unsaved',
    'unsavory',
    'unscathed',
    'unscented',
    'unscrew',
    'unsealed',
    'unseated',
    'unsecured',
    'unseeing',
    'unseemly',
    'unseen',
    'unselect',
    'unselfish',
    'unsent',
    'unsettled',
    'unshackle',
    'unshaken',
    'unshaved',
    'unshaven',
    'unsheathe',
    'unshipped',
    'unsightly',
    'unsigned',
    'unskilled',
    'unsliced',
    'unsmooth',
    'unsnap',
    'unsocial',
    'unsoiled',
    'unsold',
    'unsolved',
    'unsorted',
    'unspoiled',
    'unspoken',
    'unstable',
    'unstaffed',
    'unstamped',
    'unsteady',
    'unsterile',
    'unstirred',
    'unstitch',
    'unstopped',
    'unstuck',
    'unstuffed',
    'unstylish',
    'unsubtle',
    'unsubtly',
    'unsuited',
    'unsure',
    'unsworn',
    'untagged',
    'untainted',
    'untaken',
    'untamed',
    'untangled',
    'untapped',
    'untaxed',
    'unthawed',
    'unthread',
    'untidy',
    'untie',
    'until',
    'untimed',
    'untimely',
    'untitled',
    'untoasted',
    'untold',
    'untouched',
    'untracked',
    'untrained',
    'untreated',
    'untried',
    'untrimmed',
    'untrue',
    'untruth',
    'unturned',
    'untwist',
    'untying',
    'unusable',
    'unused',
    'unusual',
    'unvalued',
    'unvaried',
    'unvarying',
    'unveiled',
    'unveiling',
    'unvented',
    'unviable',
    'unvisited',
    'unvocal',
    'unwanted',
    'unwarlike',
    'unwary',
    'unwashed',
    'unwatched',
    'unweave',
    'unwed',
    'unwelcome',
    'unwell',
    'unwieldy',
    'unwilling',
    'unwind',
    'unwired',
    'unwitting',
    'unwomanly',
    'unworldly',
    'unworn',
    'unworried',
    'unworthy',
    'unwound',
    'unwoven',
    'unwrapped',
    'unwritten',
    'unzip',
    'upbeat',
    'upchuck',
    'upcoming',
    'upcountry',
    'update',
    'upfront',
    'upgrade',
    'upheaval',
    'upheld',
    'uphill',
    'uphold',
    'uplifted',
    'uplifting',
    'upload',
    'upon',
    'upper',
    'upright',
    'uprising',
    'upriver',
    'uproar',
    'uproot',
    'upscale',
    'upside',
    'upstage',
    'upstairs',
    'upstart',
    'upstate',
    'upstream',
    'upstroke',
    'upswing',
    'uptake',
    'uptight',
    'uptown',
    'upturned',
    'upward',
    'upwind',
    'uranium',
    'urban',
    'urchin',
    'urethane',
    'urgency',
    'urgent',
    'urging',
    'urologist',
    'urology',
    'usable',
    'usage',
    'useable',
    'used',
    'uselessly',
    'user',
    'usher',
    'usual',
    'utensil',
    'utility',
    'utilize',
    'utmost',
    'utopia',
    'utter',
    'vacancy',
    'vacant',
    'vacate',
    'vacation',
    'vagabond',
    'vagrancy',
    'vagrantly',
    'vaguely',
    'vagueness',
    'valiant',
    'valid',
    'valium',
    'valley',
    'valuables',
    'value',
    'vanilla',
    'vanish',
    'vanity',
    'vanquish',
    'vantage',
    'vaporizer',
    'variable',
    'variably',
    'varied',
    'variety',
    'various',
    'varmint',
    'varnish',
    'varsity',
    'varying',
    'vascular',
    'vaseline',
    'vastly',
    'vastness',
    'veal',
    'vegan',
    'veggie',
    'vehicular',
    'velcro',
    'velocity',
    'velvet',
    'vendetta',
    'vending',
    'vendor',
    'veneering',
    'vengeful',
    'venomous',
    'ventricle',
    'venture',
    'venue',
    'venus',
    'verbalize',
    'verbally',
    'verbose',
    'verdict',
    'verify',
    'verse',
    'version',
    'versus',
    'vertebrae',
    'vertical',
    'vertigo',
    'very',
    'vessel',
    'vest',
    'veteran',
    'veto',
    'vexingly',
    'viability',
    'viable',
    'vibes',
    'vice',
    'vicinity',
    'victory',
    'video',
    'viewable',
    'viewer',
    'viewing',
    'viewless',
    'viewpoint',
    'vigorous',
    'village',
    'villain',
    'vindicate',
    'vineyard',
    'vintage',
    'violate',
    'violation',
    'violator',
    'violet',
    'violin',
    'viper',
    'viral',
    'virtual',
    'virtuous',
    'virus',
    'visa',
    'viscosity',
    'viscous',
    'viselike',
    'visible',
    'visibly',
    'vision',
    'visiting',
    'visitor',
    'visor',
    'vista',
    'vitality',
    'vitalize',
    'vitally',
    'vitamins',
    'vivacious',
    'vividly',
    'vividness',
    'vixen',
    'vocalist',
    'vocalize',
    'vocally',
    'vocation',
    'voice',
    'voicing',
    'void',
    'volatile',
    'volley',
    'voltage',
    'volumes',
    'voter',
    'voting',
    'voucher',
    'vowed',
    'vowel',
    'voyage',
    'wackiness',
    'wad',
    'wafer',
    'waffle',
    'waged',
    'wager',
    'wages',
    'waggle',
    'wagon',
    'wake',
    'waking',
    'walk',
    'walmart',
    'walnut',
    'walrus',
    'waltz',
    'wand',
    'wannabe',
    'wanted',
    'wanting',
    'wasabi',
    'washable',
    'washbasin',
    'washboard',
    'washbowl',
    'washcloth',
    'washday',
    'washed',
    'washer',
    'washhouse',
    'washing',
    'washout',
    'washroom',
    'washstand',
    'washtub',
    'wasp',
    'wasting',
    'watch',
    'water',
    'waviness',
    'waving',
    'wavy',
    'whacking',
    'whacky',
    'wham',
    'wharf',
    'wheat',
    'whenever',
    'whiff',
    'whimsical',
    'whinny',
    'whiny',
    'whisking',
    'whoever',
    'whole',
    'whomever',
    'whoopee',
    'whooping',
    'whoops',
    'why',
    'wick',
    'widely',
    'widen',
    'widget',
    'widow',
    'width',
    'wieldable',
    'wielder',
    'wife',
    'wifi',
    'wikipedia',
    'wildcard',
    'wildcat',
    'wilder',
    'wildfire',
    'wildfowl',
    'wildland',
    'wildlife',
    'wildly',
    'wildness',
    'willed',
    'willfully',
    'willing',
    'willow',
    'willpower',
    'wilt',
    'wimp',
    'wince',
    'wincing',
    'wind',
    'wing',
    'winking',
    'winner',
    'winnings',
    'winter',
    'wipe',
    'wired',
    'wireless',
    'wiring',
    'wiry',
    'wisdom',
    'wise',
    'wish',
    'wisplike',
    'wispy',
    'wistful',
    'wizard',
    'wobble',
    'wobbling',
    'wobbly',
    'wok',
    'wolf',
    'wolverine',
    'womanhood',
    'womankind',
    'womanless',
    'womanlike',
    'womanly',
    'womb',
    'woof',
    'wooing',
    'wool',
    'woozy',
    'word',
    'work',
    'worried',
    'worrier',
    'worrisome',
    'worry',
    'worsening',
    'worshiper',
    'worst',
    'wound',
    'woven',
    'wow',
    'wrangle',
    'wrath',
    'wreath',
    'wreckage',
    'wrecker',
    'wrecking',
    'wrench',
    'wriggle',
    'wriggly',
    'wrinkle',
    'wrinkly',
    'wrist',
    'writing',
    'written',
    'wrongdoer',
    'wronged',
    'wrongful',
    'wrongly',
    'wrongness',
    'wrought',
    'xbox',
    'xerox',
    'yahoo',
    'yam',
    'yanking',
    'yapping',
    'yard',
    'yarn',
    'yeah',
    'yearbook',
    'yearling',
    'yearly',
    'yearning',
    'yeast',
    'yelling',
    'yelp',
    'yen',
    'yesterday',
    'yiddish',
    'yield',
    'yin',
    'yippee',
    'yo-yo',
    'yodel',
    'yoga',
    'yogurt',
    'yonder',
    'yoyo',
    'yummy',
    'zap',
    'zealous',
    'zebra',
    'zen',
    'zeppelin',
    'zero',
    'zestfully',
    'zesty',
    'zigzagged',
    'zipfile',
    'zipping',
    'zippy',
    'zips',
    'zit',
    'zodiac',
    'zombie',
    'zone',
    'zoning',
    'zookeeper',
    'zoologist',
    'zoology',
    'zoom',
];

// EXTERNAL MODULE: ./jslib/common/src/enums/policyType.ts
var enums_policyType = __webpack_require__(56);

// CONCATENATED MODULE: ./jslib/common/src/services/passwordGeneration.service.ts
var passwordGeneration_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const DefaultOptions = {
    length: 14,
    ambiguous: false,
    number: true,
    minNumber: 1,
    uppercase: true,
    minUppercase: 0,
    lowercase: true,
    minLowercase: 0,
    special: false,
    minSpecial: 1,
    type: 'password',
    numWords: 3,
    wordSeparator: '-',
    capitalize: false,
    includeNumber: false,
};
const passwordGeneration_service_Keys = {
    options: 'passwordGenerationOptions',
    history: 'generatedPasswordHistory',
};
const MaxPasswordsInHistory = 100;
class passwordGeneration_service_PasswordGenerationService {
    constructor(cryptoService, storageService, policyService) {
        this.cryptoService = cryptoService;
        this.storageService = storageService;
        this.policyService = policyService;
    }
    generatePassword(options) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            // overload defaults with given options
            const o = Object.assign({}, DefaultOptions, options);
            if (o.type === 'passphrase') {
                return this.generatePassphrase(options);
            }
            // sanitize
            this.sanitizePasswordLength(o, true);
            const minLength = o.minUppercase + o.minLowercase + o.minNumber + o.minSpecial;
            if (o.length < minLength) {
                o.length = minLength;
            }
            const positions = [];
            if (o.lowercase && o.minLowercase > 0) {
                for (let i = 0; i < o.minLowercase; i++) {
                    positions.push('l');
                }
            }
            if (o.uppercase && o.minUppercase > 0) {
                for (let i = 0; i < o.minUppercase; i++) {
                    positions.push('u');
                }
            }
            if (o.number && o.minNumber > 0) {
                for (let i = 0; i < o.minNumber; i++) {
                    positions.push('n');
                }
            }
            if (o.special && o.minSpecial > 0) {
                for (let i = 0; i < o.minSpecial; i++) {
                    positions.push('s');
                }
            }
            while (positions.length < o.length) {
                positions.push('a');
            }
            // shuffle
            yield this.shuffleArray(positions);
            // build out the char sets
            let allCharSet = '';
            let lowercaseCharSet = 'abcdefghijkmnopqrstuvwxyz';
            if (o.ambiguous) {
                lowercaseCharSet += 'l';
            }
            if (o.lowercase) {
                allCharSet += lowercaseCharSet;
            }
            let uppercaseCharSet = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
            if (o.ambiguous) {
                uppercaseCharSet += 'IO';
            }
            if (o.uppercase) {
                allCharSet += uppercaseCharSet;
            }
            let numberCharSet = '23456789';
            if (o.ambiguous) {
                numberCharSet += '01';
            }
            if (o.number) {
                allCharSet += numberCharSet;
            }
            const specialCharSet = '!@#$%^&*';
            if (o.special) {
                allCharSet += specialCharSet;
            }
            let password = '';
            for (let i = 0; i < o.length; i++) {
                let positionChars;
                switch (positions[i]) {
                    case 'l':
                        positionChars = lowercaseCharSet;
                        break;
                    case 'u':
                        positionChars = uppercaseCharSet;
                        break;
                    case 'n':
                        positionChars = numberCharSet;
                        break;
                    case 's':
                        positionChars = specialCharSet;
                        break;
                    case 'a':
                        positionChars = allCharSet;
                        break;
                    default:
                        break;
                }
                const randomCharIndex = yield this.cryptoService.randomNumber(0, positionChars.length - 1);
                password += positionChars.charAt(randomCharIndex);
            }
            return password;
        });
    }
    generatePassphrase(options) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            const o = Object.assign({}, DefaultOptions, options);
            if (o.numWords == null || o.numWords <= 2) {
                o.numWords = DefaultOptions.numWords;
            }
            if (o.wordSeparator == null || o.wordSeparator.length === 0 || o.wordSeparator.length > 1) {
                o.wordSeparator = ' ';
            }
            if (o.capitalize == null) {
                o.capitalize = false;
            }
            if (o.includeNumber == null) {
                o.includeNumber = false;
            }
            const listLength = EEFLongWordList.length - 1;
            const wordList = new Array(o.numWords);
            for (let i = 0; i < o.numWords; i++) {
                const wordIndex = yield this.cryptoService.randomNumber(0, listLength);
                if (o.capitalize) {
                    wordList[i] = this.capitalize(EEFLongWordList[wordIndex]);
                }
                else {
                    wordList[i] = EEFLongWordList[wordIndex];
                }
            }
            if (o.includeNumber) {
                yield this.appendRandomNumberToRandomWord(wordList);
            }
            return wordList.join(o.wordSeparator);
        });
    }
    getOptions() {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            if (this.optionsCache == null) {
                const options = yield this.storageService.get(passwordGeneration_service_Keys.options);
                if (options == null) {
                    this.optionsCache = DefaultOptions;
                }
                else {
                    this.optionsCache = Object.assign({}, DefaultOptions, options);
                }
            }
            const enforcedOptions = yield this.enforcePasswordGeneratorPoliciesOnOptions(this.optionsCache);
            this.optionsCache = enforcedOptions[0];
            return [this.optionsCache, enforcedOptions[1]];
        });
    }
    enforcePasswordGeneratorPoliciesOnOptions(options) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            let enforcedPolicyOptions = yield this.getPasswordGeneratorPolicyOptions();
            if (enforcedPolicyOptions != null) {
                if (options.length < enforcedPolicyOptions.minLength) {
                    options.length = enforcedPolicyOptions.minLength;
                }
                if (enforcedPolicyOptions.useUppercase) {
                    options.uppercase = true;
                }
                if (enforcedPolicyOptions.useLowercase) {
                    options.lowercase = true;
                }
                if (enforcedPolicyOptions.useNumbers) {
                    options.number = true;
                }
                if (options.minNumber < enforcedPolicyOptions.numberCount) {
                    options.minNumber = enforcedPolicyOptions.numberCount;
                }
                if (enforcedPolicyOptions.useSpecial) {
                    options.special = true;
                }
                if (options.minSpecial < enforcedPolicyOptions.specialCount) {
                    options.minSpecial = enforcedPolicyOptions.specialCount;
                }
                // Must normalize these fields because the receiving call expects all options to pass the current rules
                if (options.minSpecial + options.minNumber > options.length) {
                    options.minSpecial = options.length - options.minNumber;
                }
                if (options.numWords < enforcedPolicyOptions.minNumberWords) {
                    options.numWords = enforcedPolicyOptions.minNumberWords;
                }
                if (enforcedPolicyOptions.capitalize) {
                    options.capitalize = true;
                }
                if (enforcedPolicyOptions.includeNumber) {
                    options.includeNumber = true;
                }
                // Force default type if password/passphrase selected via policy
                if (enforcedPolicyOptions.defaultType === 'password' ||
                    enforcedPolicyOptions.defaultType === 'passphrase') {
                    options.type = enforcedPolicyOptions.defaultType;
                }
            }
            else { // UI layer expects an instantiated object to prevent more explicit null checks
                enforcedPolicyOptions = new passwordGeneratorPolicyOptions_PasswordGeneratorPolicyOptions();
            }
            return [options, enforcedPolicyOptions];
        });
    }
    getPasswordGeneratorPolicyOptions() {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            const policies = this.policyService == null ? null :
                yield this.policyService.getAll(enums_policyType["a" /* PolicyType */].PasswordGenerator);
            let enforcedOptions = null;
            if (policies == null || policies.length === 0) {
                return enforcedOptions;
            }
            policies.forEach(currentPolicy => {
                if (!currentPolicy.enabled || currentPolicy.data == null) {
                    return;
                }
                if (enforcedOptions == null) {
                    enforcedOptions = new passwordGeneratorPolicyOptions_PasswordGeneratorPolicyOptions();
                }
                // Password wins in multi-org collisions
                if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== 'password') {
                    enforcedOptions.defaultType = currentPolicy.data.defaultType;
                }
                if (currentPolicy.data.minLength != null
                    && currentPolicy.data.minLength > enforcedOptions.minLength) {
                    enforcedOptions.minLength = currentPolicy.data.minLength;
                }
                if (currentPolicy.data.useUpper) {
                    enforcedOptions.useUppercase = true;
                }
                if (currentPolicy.data.useLower) {
                    enforcedOptions.useLowercase = true;
                }
                if (currentPolicy.data.useNumbers) {
                    enforcedOptions.useNumbers = true;
                }
                if (currentPolicy.data.minNumbers != null
                    && currentPolicy.data.minNumbers > enforcedOptions.numberCount) {
                    enforcedOptions.numberCount = currentPolicy.data.minNumbers;
                }
                if (currentPolicy.data.useSpecial) {
                    enforcedOptions.useSpecial = true;
                }
                if (currentPolicy.data.minSpecial != null
                    && currentPolicy.data.minSpecial > enforcedOptions.specialCount) {
                    enforcedOptions.specialCount = currentPolicy.data.minSpecial;
                }
                if (currentPolicy.data.minNumberWords != null
                    && currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords) {
                    enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;
                }
                if (currentPolicy.data.capitalize) {
                    enforcedOptions.capitalize = true;
                }
                if (currentPolicy.data.includeNumber) {
                    enforcedOptions.includeNumber = true;
                }
            });
            return enforcedOptions;
        });
    }
    saveOptions(options) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.save(passwordGeneration_service_Keys.options, options);
            this.optionsCache = options;
        });
    }
    getHistory() {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                return new Array();
            }
            if (!this.history) {
                const encrypted = yield this.storageService.get(passwordGeneration_service_Keys.history);
                this.history = yield this.decryptHistory(encrypted);
            }
            return this.history || new Array();
        });
    }
    addHistory(password) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            // Cannot add new history if no key is available
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                return;
            }
            const currentHistory = yield this.getHistory();
            // Prevent duplicates
            if (this.matchesPrevious(password, currentHistory)) {
                return;
            }
            currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));
            // Remove old items.
            if (currentHistory.length > MaxPasswordsInHistory) {
                currentHistory.pop();
            }
            const newHistory = yield this.encryptHistory(currentHistory);
            return yield this.storageService.save(passwordGeneration_service_Keys.history, newHistory);
        });
    }
    clear() {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            this.history = [];
            return yield this.storageService.remove(passwordGeneration_service_Keys.history);
        });
    }
    passwordStrength(password, userInputs = null) {
        if (password == null || password.length === 0) {
            return null;
        }
        let globalUserInputs = ['bitwarden', 'bit', 'warden'];
        if (userInputs != null && userInputs.length > 0) {
            globalUserInputs = globalUserInputs.concat(userInputs);
        }
        // Use a hash set to get rid of any duplicate user inputs
        const finalUserInputs = Array.from(new Set(globalUserInputs));
        const result = main(password, finalUserInputs);
        return result;
    }
    normalizeOptions(options, enforcedPolicyOptions) {
        options.minLowercase = 0;
        options.minUppercase = 0;
        if (!options.length || options.length < 5) {
            options.length = 5;
        }
        else if (options.length > 128) {
            options.length = 128;
        }
        if (options.length < enforcedPolicyOptions.minLength) {
            options.length = enforcedPolicyOptions.minLength;
        }
        if (!options.minNumber) {
            options.minNumber = 0;
        }
        else if (options.minNumber > options.length) {
            options.minNumber = options.length;
        }
        else if (options.minNumber > 9) {
            options.minNumber = 9;
        }
        if (options.minNumber < enforcedPolicyOptions.numberCount) {
            options.minNumber = enforcedPolicyOptions.numberCount;
        }
        if (!options.minSpecial) {
            options.minSpecial = 0;
        }
        else if (options.minSpecial > options.length) {
            options.minSpecial = options.length;
        }
        else if (options.minSpecial > 9) {
            options.minSpecial = 9;
        }
        if (options.minSpecial < enforcedPolicyOptions.specialCount) {
            options.minSpecial = enforcedPolicyOptions.specialCount;
        }
        if (options.minSpecial + options.minNumber > options.length) {
            options.minSpecial = options.length - options.minNumber;
        }
        if (options.numWords == null || options.length < 3) {
            options.numWords = 3;
        }
        else if (options.numWords > 20) {
            options.numWords = 20;
        }
        if (options.numWords < enforcedPolicyOptions.minNumberWords) {
            options.numWords = enforcedPolicyOptions.minNumberWords;
        }
        if (options.wordSeparator != null && options.wordSeparator.length > 1) {
            options.wordSeparator = options.wordSeparator[0];
        }
        this.sanitizePasswordLength(options, false);
    }
    capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    appendRandomNumberToRandomWord(wordList) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            if (wordList == null || wordList.length <= 0) {
                return;
            }
            const index = yield this.cryptoService.randomNumber(0, wordList.length - 1);
            const num = yield this.cryptoService.randomNumber(0, 9);
            wordList[index] = wordList[index] + num;
        });
    }
    encryptHistory(history) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            if (history == null || history.length === 0) {
                return Promise.resolve([]);
            }
            const promises = history.map((item) => passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
                const encrypted = yield this.cryptoService.encrypt(item.password);
                return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);
            }));
            return yield Promise.all(promises);
        });
    }
    decryptHistory(history) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            if (history == null || history.length === 0) {
                return Promise.resolve([]);
            }
            const promises = history.map((item) => passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
                const decrypted = yield this.cryptoService.decryptToUtf8(new domain_encString["a" /* EncString */](item.password));
                return new GeneratedPasswordHistory(decrypted, item.date);
            }));
            return yield Promise.all(promises);
        });
    }
    matchesPrevious(password, history) {
        if (history == null || history.length === 0) {
            return false;
        }
        return history[history.length - 1].password === password;
    }
    // ref: https://stackoverflow.com/a/12646864/1090359
    shuffleArray(array) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            for (let i = array.length - 1; i > 0; i--) {
                const j = yield this.cryptoService.randomNumber(0, i);
                [array[i], array[j]] = [array[j], array[i]];
            }
        });
    }
    sanitizePasswordLength(options, forGeneration) {
        let minUppercaseCalc = 0;
        let minLowercaseCalc = 0;
        let minNumberCalc = options.minNumber;
        let minSpecialCalc = options.minSpecial;
        if (options.uppercase && options.minUppercase <= 0) {
            minUppercaseCalc = 1;
        }
        else if (!options.uppercase) {
            minUppercaseCalc = 0;
        }
        if (options.lowercase && options.minLowercase <= 0) {
            minLowercaseCalc = 1;
        }
        else if (!options.lowercase) {
            minLowercaseCalc = 0;
        }
        if (options.number && options.minNumber <= 0) {
            minNumberCalc = 1;
        }
        else if (!options.number) {
            minNumberCalc = 0;
        }
        if (options.special && options.minSpecial <= 0) {
            minSpecialCalc = 1;
        }
        else if (!options.special) {
            minSpecialCalc = 0;
        }
        // This should never happen but is a final safety net
        if (!options.length || options.length < 1) {
            options.length = 10;
        }
        const minLength = minUppercaseCalc + minLowercaseCalc + minNumberCalc + minSpecialCalc;
        // Normalize and Generation both require this modification
        if (options.length < minLength) {
            options.length = minLength;
        }
        // Apply other changes if the options object passed in is for generation
        if (forGeneration) {
            options.minUppercase = minUppercaseCalc;
            options.minLowercase = minLowercaseCalc;
            options.minNumber = minNumberCalc;
            options.minSpecial = minSpecialCalc;
        }
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/data/policyData.ts
class PolicyData {
    constructor(response) {
        this.id = response.id;
        this.organizationId = response.organizationId;
        this.type = response.type;
        this.data = response.data;
        this.enabled = response.enabled;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/domain/masterPasswordPolicyOptions.ts
var masterPasswordPolicyOptions = __webpack_require__(259);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/policy.ts

class policy_Policy extends domainBase["a" /* default */] {
    constructor(obj) {
        super();
        if (obj == null) {
            return;
        }
        this.id = obj.id;
        this.organizationId = obj.organizationId;
        this.type = obj.type;
        this.data = obj.data;
        this.enabled = obj.enabled;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/domain/resetPasswordPolicyOptions.ts

class resetPasswordPolicyOptions_ResetPasswordPolicyOptions extends domainBase["a" /* default */] {
    constructor() {
        super(...arguments);
        this.autoEnrollEnabled = false;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/enums/organizationUserStatusType.ts
var organizationUserStatusType = __webpack_require__(137);

// CONCATENATED MODULE: ./jslib/common/src/services/policy.service.ts
var policy_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







const policy_service_Keys = {
    policiesPrefix: 'policies_',
};
class policy_service_PolicyService {
    constructor(userService, storageService, apiService) {
        this.userService = userService;
        this.storageService = storageService;
        this.apiService = apiService;
    }
    clearCache() {
        this.policyCache = null;
    }
    getAll(type) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            if (this.policyCache == null) {
                const userId = yield this.userService.getUserId();
                const policies = yield this.storageService.get(policy_service_Keys.policiesPrefix + userId);
                const response = [];
                for (const id in policies) {
                    if (policies.hasOwnProperty(id)) {
                        response.push(new policy_Policy(policies[id]));
                    }
                }
                this.policyCache = response;
            }
            if (type != null) {
                return this.policyCache.filter(p => p.type === type);
            }
            else {
                return this.policyCache;
            }
        });
    }
    getPolicyForOrganization(policyType, organizationId) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            const org = yield this.userService.getOrganization(organizationId);
            if (org === null || org === void 0 ? void 0 : org.isProviderUser) {
                const orgPolicies = yield this.apiService.getPolicies(organizationId);
                const policy = orgPolicies.data.find(p => p.organizationId === organizationId);
                if (policy == null) {
                    return null;
                }
                return new policy_Policy(new PolicyData(policy));
            }
            const policies = yield this.getAll(policyType);
            return policies.find(p => p.organizationId === organizationId);
        });
    }
    replace(policies) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(policy_service_Keys.policiesPrefix + userId, policies);
            this.policyCache = null;
        });
    }
    clear(userId) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(policy_service_Keys.policiesPrefix + userId);
            this.policyCache = null;
        });
    }
    getMasterPasswordPolicyOptions(policies) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            let enforcedOptions = null;
            if (policies == null) {
                policies = yield this.getAll(enums_policyType["a" /* PolicyType */].MasterPassword);
            }
            else {
                policies = policies.filter(p => p.type === enums_policyType["a" /* PolicyType */].MasterPassword);
            }
            if (policies == null || policies.length === 0) {
                return enforcedOptions;
            }
            policies.forEach(currentPolicy => {
                if (!currentPolicy.enabled || currentPolicy.data == null) {
                    return;
                }
                if (enforcedOptions == null) {
                    enforcedOptions = new masterPasswordPolicyOptions["a" /* MasterPasswordPolicyOptions */]();
                }
                if (currentPolicy.data.minComplexity != null
                    && currentPolicy.data.minComplexity > enforcedOptions.minComplexity) {
                    enforcedOptions.minComplexity = currentPolicy.data.minComplexity;
                }
                if (currentPolicy.data.minLength != null
                    && currentPolicy.data.minLength > enforcedOptions.minLength) {
                    enforcedOptions.minLength = currentPolicy.data.minLength;
                }
                if (currentPolicy.data.requireUpper) {
                    enforcedOptions.requireUpper = true;
                }
                if (currentPolicy.data.requireLower) {
                    enforcedOptions.requireLower = true;
                }
                if (currentPolicy.data.requireNumbers) {
                    enforcedOptions.requireNumbers = true;
                }
                if (currentPolicy.data.requireSpecial) {
                    enforcedOptions.requireSpecial = true;
                }
            });
            return enforcedOptions;
        });
    }
    evaluateMasterPassword(passwordStrength, newPassword, enforcedPolicyOptions) {
        if (enforcedPolicyOptions == null) {
            return true;
        }
        if (enforcedPolicyOptions.minComplexity > 0 && enforcedPolicyOptions.minComplexity > passwordStrength) {
            return false;
        }
        if (enforcedPolicyOptions.minLength > 0 && enforcedPolicyOptions.minLength > newPassword.length) {
            return false;
        }
        if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {
            return false;
        }
        if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {
            return false;
        }
        if (enforcedPolicyOptions.requireNumbers && !(/[0-9]/.test(newPassword))) {
            return false;
        }
        if (enforcedPolicyOptions.requireSpecial && !(/[!@#$%\^&*]/g.test(newPassword))) {
            return false;
        }
        return true;
    }
    getResetPasswordPolicyOptions(policies, orgId) {
        var _a, _b, _c;
        const resetPasswordPolicyOptions = new resetPasswordPolicyOptions_ResetPasswordPolicyOptions();
        if (policies == null || orgId == null) {
            return [resetPasswordPolicyOptions, false];
        }
        const policy = policies.find(p => p.organizationId === orgId && p.type === enums_policyType["a" /* PolicyType */].ResetPassword && p.enabled);
        resetPasswordPolicyOptions.autoEnrollEnabled = (_b = (_a = policy === null || policy === void 0 ? void 0 : policy.data) === null || _a === void 0 ? void 0 : _a.autoEnrollEnabled) !== null && _b !== void 0 ? _b : false;
        return [resetPasswordPolicyOptions, (_c = policy === null || policy === void 0 ? void 0 : policy.enabled) !== null && _c !== void 0 ? _c : false];
    }
    mapPoliciesFromToken(policiesResponse) {
        if (policiesResponse == null || policiesResponse.data == null) {
            return null;
        }
        const policiesData = policiesResponse.data.map(p => new PolicyData(p));
        return policiesData.map(p => new policy_Policy(p));
    }
    policyAppliesToUser(policyType, policyFilter) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            const policies = yield this.getAll(policyType);
            const organizations = yield this.userService.getAllOrganizations();
            let filteredPolicies;
            if (policyFilter != null) {
                filteredPolicies = policies.filter(p => p.enabled && policyFilter(p));
            }
            else {
                filteredPolicies = policies.filter(p => p.enabled);
            }
            const policySet = new Set(filteredPolicies.map(p => p.organizationId));
            return organizations.some(o => o.enabled &&
                o.status >= organizationUserStatusType["a" /* OrganizationUserStatusType */].Accepted &&
                o.usePolicies &&
                !this.isExcemptFromPolicies(o, policyType) &&
                policySet.has(o.id));
        });
    }
    isExcemptFromPolicies(organization, policyType) {
        if (policyType === enums_policyType["a" /* PolicyType */].MaximumVaultTimeout) {
            return organization.type === OrganizationUserType.Owner;
        }
        return organization.isExemptFromPolicies;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/services/search.service.ts
var search_service = __webpack_require__(226);

// EXTERNAL MODULE: ./jslib/common/src/services/send.service.ts
var send_service = __webpack_require__(470);

// CONCATENATED MODULE: ./jslib/common/src/services/settings.service.ts
var settings_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const settings_service_Keys = {
    settingsPrefix: 'settings_',
    equivalentDomains: 'equivalentDomains',
};
class SettingsService {
    constructor(userService, storageService) {
        this.userService = userService;
        this.storageService = storageService;
    }
    clearCache() {
        this.settingsCache = null;
    }
    getEquivalentDomains() {
        return this.getSettingsKey(settings_service_Keys.equivalentDomains);
    }
    setEquivalentDomains(equivalentDomains) {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            yield this.setSettingsKey(settings_service_Keys.equivalentDomains, equivalentDomains);
        });
    }
    clear(userId) {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(settings_service_Keys.settingsPrefix + userId);
            this.clearCache();
        });
    }
    // Helpers
    getSettings() {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            if (this.settingsCache == null) {
                const userId = yield this.userService.getUserId();
                this.settingsCache = this.storageService.get(settings_service_Keys.settingsPrefix + userId);
            }
            return this.settingsCache;
        });
    }
    getSettingsKey(key) {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            const settings = yield this.getSettings();
            if (settings != null && settings[key]) {
                return settings[key];
            }
            return null;
        });
    }
    setSettingsKey(key, value) {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let settings = yield this.getSettings();
            if (!settings) {
                settings = {};
            }
            settings[key] = value;
            yield this.storageService.save(settings_service_Keys.settingsPrefix + userId, settings);
            this.settingsCache = settings;
        });
    }
}

// EXTERNAL MODULE: ./jslib/common/src/services/state.service.ts
var state_service = __webpack_require__(225);

// CONCATENATED MODULE: ./jslib/common/src/models/data/organizationData.ts
class OrganizationData {
    constructor(response) {
        this.id = response.id;
        this.name = response.name;
        this.status = response.status;
        this.type = response.type;
        this.enabled = response.enabled;
        this.usePolicies = response.usePolicies;
        this.useGroups = response.useGroups;
        this.useDirectory = response.useDirectory;
        this.useEvents = response.useEvents;
        this.useTotp = response.useTotp;
        this.use2fa = response.use2fa;
        this.useApi = response.useApi;
        this.useSso = response.useSso;
        this.useKeyConnector = response.useKeyConnector;
        this.useResetPassword = response.useResetPassword;
        this.selfHost = response.selfHost;
        this.usersGetPremium = response.usersGetPremium;
        this.seats = response.seats;
        this.maxCollections = response.maxCollections;
        this.maxStorageGb = response.maxStorageGb;
        this.ssoBound = response.ssoBound;
        this.identifier = response.identifier;
        this.permissions = response.permissions;
        this.resetPasswordEnrolled = response.resetPasswordEnrolled;
        this.userId = response.userId;
        this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;
        this.providerId = response.providerId;
        this.providerName = response.providerName;
        this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;
        this.familySponsorshipAvailable = response.familySponsorshipAvailable;
        this.planProductType = response.planProductType;
        this.keyConnectorEnabled = response.keyConnectorEnabled;
        this.keyConnectorUrl = response.keyConnectorUrl;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/data/providerData.ts
class ProviderData {
    constructor(response) {
        this.id = response.id;
        this.name = response.name;
        this.status = response.status;
        this.type = response.type;
        this.enabled = response.enabled;
        this.userId = response.userId;
        this.useEvents = response.useEvents;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/data/sendData.ts + 2 modules
var sendData = __webpack_require__(174);

// CONCATENATED MODULE: ./jslib/common/src/services/sync.service.ts
var sync_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







const sync_service_Keys = {
    lastSyncPrefix: 'lastSync_',
};
class sync_service_SyncService {
    constructor(userService, apiService, settingsService, folderService, cipherService, cryptoService, collectionService, storageService, messagingService, policyService, sendService, logService, tokenService, keyConnectorService, logoutCallback) {
        this.userService = userService;
        this.apiService = apiService;
        this.settingsService = settingsService;
        this.folderService = folderService;
        this.cipherService = cipherService;
        this.cryptoService = cryptoService;
        this.collectionService = collectionService;
        this.storageService = storageService;
        this.messagingService = messagingService;
        this.policyService = policyService;
        this.sendService = sendService;
        this.logService = logService;
        this.tokenService = tokenService;
        this.keyConnectorService = keyConnectorService;
        this.logoutCallback = logoutCallback;
        this.syncInProgress = false;
    }
    getLastSync() {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            if (userId == null) {
                return null;
            }
            const lastSync = yield this.storageService.get(sync_service_Keys.lastSyncPrefix + userId);
            if (lastSync) {
                return new Date(lastSync);
            }
            return null;
        });
    }
    setLastSync(date) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            if (userId == null) {
                return;
            }
            yield this.storageService.save(sync_service_Keys.lastSyncPrefix + userId, date.toJSON());
        });
    }
    fullSync(forceSync, allowThrowOnError = false) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            const isAuthenticated = yield this.userService.isAuthenticated();
            if (!isAuthenticated) {
                return this.syncCompleted(false);
            }
            const now = new Date();
            let needsSync = false;
            try {
                needsSync = yield this.needsSyncing(forceSync);
            }
            catch (e) {
                if (allowThrowOnError) {
                    throw e;
                }
            }
            if (!needsSync) {
                yield this.setLastSync(now);
                return this.syncCompleted(false);
            }
            const userId = yield this.userService.getUserId();
            try {
                yield this.apiService.refreshIdentityToken();
                const response = yield this.apiService.getSync();
                yield this.syncProfile(response.profile);
                yield this.syncFolders(userId, response.folders);
                yield this.syncCollections(response.collections);
                yield this.syncCiphers(userId, response.ciphers);
                yield this.syncSends(userId, response.sends);
                yield this.syncSettings(userId, response.domains);
                yield this.syncPolicies(response.policies);
                yield this.setLastSync(now);
                return this.syncCompleted(true);
            }
            catch (e) {
                if (allowThrowOnError) {
                    throw e;
                }
                else {
                    return this.syncCompleted(false);
                }
            }
        });
    }
    syncUpsertFolder(notification, isEdit) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                try {
                    const localFolder = yield this.folderService.get(notification.id);
                    if ((!isEdit && localFolder == null) ||
                        (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)) {
                        const remoteFolder = yield this.apiService.getFolder(notification.id);
                        if (remoteFolder != null) {
                            const userId = yield this.userService.getUserId();
                            yield this.folderService.upsert(new FolderData(remoteFolder, userId));
                            this.messagingService.send('syncedUpsertedFolder', { folderId: notification.id });
                            return this.syncCompleted(true);
                        }
                    }
                }
                catch (e) {
                    this.logService.error(e);
                }
            }
            return this.syncCompleted(false);
        });
    }
    syncDeleteFolder(notification) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                yield this.folderService.delete(notification.id);
                this.messagingService.send('syncedDeletedFolder', { folderId: notification.id });
                this.syncCompleted(true);
                return true;
            }
            return this.syncCompleted(false);
        });
    }
    syncUpsertCipher(notification, isEdit) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                try {
                    let shouldUpdate = true;
                    const localCipher = yield this.cipherService.get(notification.id);
                    if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {
                        shouldUpdate = false;
                    }
                    let checkCollections = false;
                    if (shouldUpdate) {
                        if (isEdit) {
                            shouldUpdate = localCipher != null;
                            checkCollections = true;
                        }
                        else {
                            if (notification.collectionIds == null || notification.organizationId == null) {
                                shouldUpdate = localCipher == null;
                            }
                            else {
                                shouldUpdate = false;
                                checkCollections = true;
                            }
                        }
                    }
                    if (!shouldUpdate && checkCollections && notification.organizationId != null &&
                        notification.collectionIds != null && notification.collectionIds.length > 0) {
                        const collections = yield this.collectionService.getAll();
                        if (collections != null) {
                            for (let i = 0; i < collections.length; i++) {
                                if (notification.collectionIds.indexOf(collections[i].id) > -1) {
                                    shouldUpdate = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (shouldUpdate) {
                        const remoteCipher = yield this.apiService.getCipher(notification.id);
                        if (remoteCipher != null) {
                            const userId = yield this.userService.getUserId();
                            yield this.cipherService.upsert(new cipherData["a" /* CipherData */](remoteCipher, userId));
                            this.messagingService.send('syncedUpsertedCipher', { cipherId: notification.id });
                            return this.syncCompleted(true);
                        }
                    }
                }
                catch (e) {
                    if (e != null && e.statusCode === 404 && isEdit) {
                        yield this.cipherService.delete(notification.id);
                        this.messagingService.send('syncedDeletedCipher', { cipherId: notification.id });
                        return this.syncCompleted(true);
                    }
                }
            }
            return this.syncCompleted(false);
        });
    }
    syncDeleteCipher(notification) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                yield this.cipherService.delete(notification.id);
                this.messagingService.send('syncedDeletedCipher', { cipherId: notification.id });
                return this.syncCompleted(true);
            }
            return this.syncCompleted(false);
        });
    }
    syncUpsertSend(notification, isEdit) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                try {
                    const localSend = yield this.sendService.get(notification.id);
                    if ((!isEdit && localSend == null) ||
                        (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)) {
                        const remoteSend = yield this.apiService.getSend(notification.id);
                        if (remoteSend != null) {
                            const userId = yield this.userService.getUserId();
                            yield this.sendService.upsert(new sendData["a" /* SendData */](remoteSend, userId));
                            this.messagingService.send('syncedUpsertedSend', { sendId: notification.id });
                            return this.syncCompleted(true);
                        }
                    }
                }
                catch (e) {
                    this.logService.error(e);
                }
            }
            return this.syncCompleted(false);
        });
    }
    syncDeleteSend(notification) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                yield this.sendService.delete(notification.id);
                this.messagingService.send('syncedDeletedSend', { sendId: notification.id });
                this.syncCompleted(true);
                return true;
            }
            return this.syncCompleted(false);
        });
    }
    // Helpers
    syncStarted() {
        this.syncInProgress = true;
        this.messagingService.send('syncStarted');
    }
    syncCompleted(successfully) {
        this.syncInProgress = false;
        this.messagingService.send('syncCompleted', { successfully: successfully });
        return successfully;
    }
    needsSyncing(forceSync) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            if (forceSync) {
                return true;
            }
            const lastSync = yield this.getLastSync();
            if (lastSync == null || lastSync.getTime() === 0) {
                return true;
            }
            const response = yield this.apiService.getAccountRevisionDate();
            if (new Date(response) <= lastSync) {
                return false;
            }
            return true;
        });
    }
    syncProfile(response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const stamp = yield this.userService.getSecurityStamp();
            if (stamp != null && stamp !== response.securityStamp) {
                if (this.logoutCallback != null) {
                    yield this.logoutCallback(true);
                }
                throw new Error('Stamp has changed');
            }
            yield this.cryptoService.setEncKey(response.key);
            yield this.cryptoService.setEncPrivateKey(response.privateKey);
            yield this.cryptoService.setProviderKeys(response.providers);
            yield this.cryptoService.setOrgKeys(response.organizations, response.providerOrganizations);
            yield this.userService.setSecurityStamp(response.securityStamp);
            yield this.userService.setEmailVerified(response.emailVerified);
            yield this.userService.setForcePasswordReset(response.forcePasswordReset);
            yield this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector);
            const organizations = {};
            response.organizations.forEach(o => {
                organizations[o.id] = new OrganizationData(o);
            });
            const providers = {};
            response.providers.forEach(p => {
                providers[p.id] = new ProviderData(p);
            });
            response.providerOrganizations.forEach(o => {
                if (organizations[o.id] == null) {
                    organizations[o.id] = new OrganizationData(o);
                    organizations[o.id].isProviderUser = true;
                }
            });
            yield Promise.all([
                this.userService.replaceOrganizations(organizations),
                this.userService.replaceProviders(providers),
            ]);
            if (yield this.keyConnectorService.userNeedsMigration()) {
                this.messagingService.send('convertAccountToKeyConnector');
            }
            else {
                this.keyConnectorService.removeConvertAccountRequired();
            }
        });
    }
    syncFolders(userId, response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const folders = {};
            response.forEach(f => {
                folders[f.id] = new FolderData(f, userId);
            });
            return yield this.folderService.replace(folders);
        });
    }
    syncCollections(response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const collections = {};
            response.forEach(c => {
                collections[c.id] = new CollectionData(c);
            });
            return yield this.collectionService.replace(collections);
        });
    }
    syncCiphers(userId, response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const ciphers = {};
            response.forEach(c => {
                ciphers[c.id] = new cipherData["a" /* CipherData */](c, userId);
            });
            return yield this.cipherService.replace(ciphers);
        });
    }
    syncSends(userId, response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const sends = {};
            response.forEach(s => {
                sends[s.id] = new sendData["a" /* SendData */](s, userId);
            });
            return yield this.sendService.replace(sends);
        });
    }
    syncSettings(userId, response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            let eqDomains = [];
            if (response != null && response.equivalentDomains != null) {
                eqDomains = eqDomains.concat(response.equivalentDomains);
            }
            if (response != null && response.globalEquivalentDomains != null) {
                response.globalEquivalentDomains.forEach(global => {
                    if (global.domains.length > 0) {
                        eqDomains.push(global.domains);
                    }
                });
            }
            return this.settingsService.setEquivalentDomains(eqDomains);
        });
    }
    syncPolicies(response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const policies = {};
            if (response != null) {
                response.forEach(p => {
                    policies[p.id] = new PolicyData(p);
                });
            }
            return yield this.policyService.replace(policies);
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/system.service.ts
var system_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class system_service_SystemService {
    constructor(storageService, vaultTimeoutService, messagingService, platformUtilsService, reloadCallback = null) {
        this.storageService = storageService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.messagingService = messagingService;
        this.platformUtilsService = platformUtilsService;
        this.reloadCallback = reloadCallback;
        this.reloadInterval = null;
        this.clearClipboardTimeout = null;
        this.clearClipboardTimeoutFunction = null;
    }
    startProcessReload() {
        if (this.vaultTimeoutService.pinProtectedKey != null ||
            this.vaultTimeoutService.biometricLocked ||
            this.reloadInterval != null) {
            return;
        }
        this.cancelProcessReload();
        this.reloadInterval = setInterval(() => system_service_awaiter(this, void 0, void 0, function* () {
            let doRefresh = false;
            const lastActive = yield this.storageService.get(constants_service["a" /* ConstantsService */].lastActiveKey);
            if (lastActive != null) {
                const diffSeconds = (new Date()).getTime() - lastActive;
                // Don't refresh if they are still active in the window
                doRefresh = diffSeconds >= 5000;
            }
            const biometricLockedFingerprintValidated = (yield this.storageService.get(constants_service["a" /* ConstantsService */].biometricFingerprintValidated)) && this.vaultTimeoutService.biometricLocked;
            if (doRefresh && !biometricLockedFingerprintValidated) {
                clearInterval(this.reloadInterval);
                this.reloadInterval = null;
                this.messagingService.send('reloadProcess');
                if (this.reloadCallback != null) {
                    yield this.reloadCallback();
                }
            }
        }), 10000);
    }
    cancelProcessReload() {
        if (this.reloadInterval != null) {
            clearInterval(this.reloadInterval);
            this.reloadInterval = null;
        }
    }
    clearClipboard(clipboardValue, timeoutMs = null) {
        if (this.clearClipboardTimeout != null) {
            clearTimeout(this.clearClipboardTimeout);
            this.clearClipboardTimeout = null;
        }
        if (utils["a" /* Utils */].isNullOrWhitespace(clipboardValue)) {
            return;
        }
        this.storageService.get(constants_service["a" /* ConstantsService */].clearClipboardKey).then(clearSeconds => {
            if (clearSeconds == null) {
                return;
            }
            if (timeoutMs == null) {
                timeoutMs = clearSeconds * 1000;
            }
            this.clearClipboardTimeoutFunction = () => system_service_awaiter(this, void 0, void 0, function* () {
                const clipboardValueNow = yield this.platformUtilsService.readFromClipboard();
                if (clipboardValue === clipboardValueNow) {
                    this.platformUtilsService.copyToClipboard('', { clearing: true });
                }
            });
            this.clearClipboardTimeout = setTimeout(() => system_service_awaiter(this, void 0, void 0, function* () {
                yield this.clearPendingClipboard();
            }), timeoutMs);
        });
    }
    clearPendingClipboard() {
        return system_service_awaiter(this, void 0, void 0, function* () {
            if (this.clearClipboardTimeoutFunction != null) {
                yield this.clearClipboardTimeoutFunction();
                this.clearClipboardTimeoutFunction = null;
            }
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/token.service.ts
var token_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const token_service_Keys = {
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    twoFactorTokenPrefix: 'twoFactorToken_',
    clientId: 'apikey_clientId',
    clientSecret: 'apikey_clientSecret',
};
class token_service_TokenService {
    constructor(storageService) {
        this.storageService = storageService;
    }
    setTokens(accessToken, refreshToken, clientIdClientSecret) {
        return token_service_awaiter(this, void 0, void 0, function* () {
            yield this.setToken(accessToken);
            yield this.setRefreshToken(refreshToken);
            if (clientIdClientSecret != null) {
                yield this.setClientId(clientIdClientSecret[0]);
                yield this.setClientSecret(clientIdClientSecret[1]);
            }
        });
    }
    setClientId(clientId) {
        return token_service_awaiter(this, void 0, void 0, function* () {
            this.clientId = clientId;
            return this.storeTokenValue(token_service_Keys.clientId, clientId);
        });
    }
    getClientId() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            if (this.clientId != null) {
                return this.clientId;
            }
            this.clientId = yield this.storageService.get(token_service_Keys.clientId);
            return this.clientId;
        });
    }
    setClientSecret(clientSecret) {
        return token_service_awaiter(this, void 0, void 0, function* () {
            this.clientSecret = clientSecret;
            return this.storeTokenValue(token_service_Keys.clientSecret, clientSecret);
        });
    }
    getClientSecret() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            if (this.clientSecret != null) {
                return this.clientSecret;
            }
            this.clientSecret = yield this.storageService.get(token_service_Keys.clientSecret);
            return this.clientSecret;
        });
    }
    setToken(token) {
        return token_service_awaiter(this, void 0, void 0, function* () {
            this.token = token;
            this.decodedToken = null;
            return this.storeTokenValue(token_service_Keys.accessToken, token);
        });
    }
    getToken() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            if (this.token != null) {
                return this.token;
            }
            this.token = yield this.storageService.get(token_service_Keys.accessToken);
            return this.token;
        });
    }
    setRefreshToken(refreshToken) {
        return token_service_awaiter(this, void 0, void 0, function* () {
            this.refreshToken = refreshToken;
            return this.storeTokenValue(token_service_Keys.refreshToken, refreshToken);
        });
    }
    getRefreshToken() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            if (this.refreshToken != null) {
                return this.refreshToken;
            }
            this.refreshToken = yield this.storageService.get(token_service_Keys.refreshToken);
            return this.refreshToken;
        });
    }
    toggleTokens() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            const token = yield this.getToken();
            const refreshToken = yield this.getRefreshToken();
            const clientId = yield this.getClientId();
            const clientSecret = yield this.getClientSecret();
            const timeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            const action = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
            if ((timeout != null || timeout === 0) && action === 'logOut') {
                // if we have a vault timeout and the action is log out, reset tokens
                yield this.clearToken();
                this.token = token;
                this.refreshToken = refreshToken;
                this.clientId = clientId;
                this.clientSecret = clientSecret;
                return;
            }
            yield this.setToken(token);
            yield this.setRefreshToken(refreshToken);
            yield this.setClientId(clientId);
            yield this.setClientSecret(clientSecret);
        });
    }
    setTwoFactorToken(token, email) {
        return this.storageService.save(token_service_Keys.twoFactorTokenPrefix + email, token);
    }
    getTwoFactorToken(email) {
        return this.storageService.get(token_service_Keys.twoFactorTokenPrefix + email);
    }
    clearTwoFactorToken(email) {
        return this.storageService.remove(token_service_Keys.twoFactorTokenPrefix + email);
    }
    clearToken() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            this.token = null;
            this.decodedToken = null;
            this.refreshToken = null;
            this.clientId = null;
            this.clientSecret = null;
            yield this.storageService.remove(token_service_Keys.accessToken);
            yield this.storageService.remove(token_service_Keys.refreshToken);
            yield this.storageService.remove(token_service_Keys.clientId);
            yield this.storageService.remove(token_service_Keys.clientSecret);
        });
    }
    // jwthelper methods
    // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js
    decodeToken() {
        if (this.decodedToken) {
            return this.decodedToken;
        }
        if (this.token == null) {
            throw new Error('Token not found.');
        }
        const parts = this.token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        const decoded = utils["a" /* Utils */].fromUrlB64ToUtf8(parts[1]);
        if (decoded == null) {
            throw new Error('Cannot decode the token');
        }
        this.decodedToken = JSON.parse(decoded);
        return this.decodedToken;
    }
    getTokenExpirationDate() {
        const decoded = this.decodeToken();
        if (typeof decoded.exp === 'undefined') {
            return null;
        }
        const d = new Date(0); // The 0 here is the key, which sets the date to the epoch
        d.setUTCSeconds(decoded.exp);
        return d;
    }
    tokenSecondsRemaining(offsetSeconds = 0) {
        const d = this.getTokenExpirationDate();
        if (d == null) {
            return 0;
        }
        const msRemaining = d.valueOf() - (new Date().valueOf() + (offsetSeconds * 1000));
        return Math.round(msRemaining / 1000);
    }
    tokenNeedsRefresh(minutes = 5) {
        const sRemaining = this.tokenSecondsRemaining();
        return sRemaining < (60 * minutes);
    }
    getUserId() {
        const decoded = this.decodeToken();
        if (typeof decoded.sub === 'undefined') {
            throw new Error('No user id found');
        }
        return decoded.sub;
    }
    getEmail() {
        const decoded = this.decodeToken();
        if (typeof decoded.email === 'undefined') {
            throw new Error('No email found');
        }
        return decoded.email;
    }
    getEmailVerified() {
        const decoded = this.decodeToken();
        if (typeof decoded.email_verified === 'undefined') {
            throw new Error('No email verification found');
        }
        return decoded.email_verified;
    }
    getName() {
        const decoded = this.decodeToken();
        if (typeof decoded.name === 'undefined') {
            return null;
        }
        return decoded.name;
    }
    getPremium() {
        const decoded = this.decodeToken();
        if (typeof decoded.premium === 'undefined') {
            return false;
        }
        return decoded.premium;
    }
    getIssuer() {
        const decoded = this.decodeToken();
        if (typeof decoded.iss === 'undefined') {
            throw new Error('No issuer found');
        }
        return decoded.iss;
    }
    getIsExternal() {
        const decoded = this.decodeToken();
        if (!Array.isArray(decoded.amr)) {
            throw new Error('No amr found');
        }
        return decoded.amr.includes('external');
    }
    storeTokenValue(key, value) {
        return token_service_awaiter(this, void 0, void 0, function* () {
            if (yield this.skipTokenStorage()) {
                // if we have a vault timeout and the action is log out, don't store token
                return;
            }
            return this.storageService.save(key, value);
        });
    }
    skipTokenStorage() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            const timeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            const action = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
            return timeout != null && action === 'logOut';
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/totp.service.ts
var totp_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const B32Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
const SteamChars = '23456789BCDFGHJKMNPQRTVWXY';
class totp_service_TotpService {
    constructor(storageService, cryptoFunctionService, logService) {
        this.storageService = storageService;
        this.cryptoFunctionService = cryptoFunctionService;
        this.logService = logService;
    }
    getCode(key) {
        return totp_service_awaiter(this, void 0, void 0, function* () {
            if (key == null) {
                return null;
            }
            let period = 30;
            let alg = 'sha1';
            let digits = 6;
            let keyB32 = key;
            const isOtpAuth = key.toLowerCase().indexOf('otpauth://') === 0;
            const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf('steam://') === 0;
            if (isOtpAuth) {
                const params = utils["a" /* Utils */].getQueryParams(key);
                if (params.has('digits') && params.get('digits') != null) {
                    try {
                        const digitParams = parseInt(params.get('digits').trim(), null);
                        if (digitParams > 10) {
                            digits = 10;
                        }
                        else if (digitParams > 0) {
                            digits = digitParams;
                        }
                    }
                    catch (_a) {
                        this.logService.error('Invalid digits param.');
                    }
                }
                if (params.has('period') && params.get('period') != null) {
                    try {
                        const periodParam = parseInt(params.get('period').trim(), null);
                        if (periodParam > 0) {
                            period = periodParam;
                        }
                    }
                    catch (_b) {
                        this.logService.error('Invalid period param.');
                    }
                }
                if (params.has('secret') && params.get('secret') != null) {
                    keyB32 = params.get('secret');
                }
                if (params.has('algorithm') && params.get('algorithm') != null) {
                    const algParam = params.get('algorithm').toLowerCase();
                    if (algParam === 'sha1' || algParam === 'sha256' || algParam === 'sha512') {
                        alg = algParam;
                    }
                }
            }
            else if (isSteamAuth) {
                keyB32 = key.substr('steam://'.length);
                digits = 5;
            }
            const epoch = Math.round(new Date().getTime() / 1000.0);
            const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, '0');
            const timeBytes = utils["a" /* Utils */].fromHexToArray(timeHex);
            const keyBytes = this.b32ToBytes(keyB32);
            if (!keyBytes.length || !timeBytes.length) {
                return null;
            }
            const hash = yield this.sign(keyBytes, timeBytes, alg);
            if (hash.length === 0) {
                return null;
            }
            /* tslint:disable */
            const offset = (hash[hash.length - 1] & 0xf);
            const binary = ((hash[offset] & 0x7f) << 24) | ((hash[offset + 1] & 0xff) << 16) |
                ((hash[offset + 2] & 0xff) << 8) | (hash[offset + 3] & 0xff);
            /* tslint:enable */
            let otp = '';
            if (isSteamAuth) {
                // tslint:disable-next-line
                let fullCode = binary & 0x7fffffff;
                for (let i = 0; i < digits; i++) {
                    otp += SteamChars[fullCode % SteamChars.length];
                    fullCode = Math.trunc(fullCode / SteamChars.length);
                }
            }
            else {
                otp = (binary % Math.pow(10, digits)).toString();
                otp = this.leftPad(otp, digits, '0');
            }
            return otp;
        });
    }
    getTimeInterval(key) {
        let period = 30;
        if (key != null && key.toLowerCase().indexOf('otpauth://') === 0) {
            const params = utils["a" /* Utils */].getQueryParams(key);
            if (params.has('period') && params.get('period') != null) {
                try {
                    period = parseInt(params.get('period').trim(), null);
                }
                catch (_a) {
                    this.logService.error('Invalid period param.');
                }
            }
        }
        return period;
    }
    isAutoCopyEnabled() {
        return totp_service_awaiter(this, void 0, void 0, function* () {
            return !(yield this.storageService.get(constants_service["a" /* ConstantsService */].disableAutoTotpCopyKey));
        });
    }
    // Helpers
    leftPad(s, l, p) {
        if (l + 1 >= s.length) {
            s = Array(l + 1 - s.length).join(p) + s;
        }
        return s;
    }
    decToHex(d) {
        return (d < 15.5 ? '0' : '') + Math.round(d).toString(16);
    }
    b32ToHex(s) {
        s = s.toUpperCase();
        let cleanedInput = '';
        for (let i = 0; i < s.length; i++) {
            if (B32Chars.indexOf(s[i]) < 0) {
                continue;
            }
            cleanedInput += s[i];
        }
        s = cleanedInput;
        let bits = '';
        let hex = '';
        for (let i = 0; i < s.length; i++) {
            const byteIndex = B32Chars.indexOf(s.charAt(i));
            if (byteIndex < 0) {
                continue;
            }
            bits += this.leftPad(byteIndex.toString(2), 5, '0');
        }
        for (let i = 0; i + 4 <= bits.length; i += 4) {
            const chunk = bits.substr(i, 4);
            hex = hex + parseInt(chunk, 2).toString(16);
        }
        return hex;
    }
    b32ToBytes(s) {
        return utils["a" /* Utils */].fromHexToArray(this.b32ToHex(s));
    }
    sign(keyBytes, timeBytes, alg) {
        return totp_service_awaiter(this, void 0, void 0, function* () {
            const signature = yield this.cryptoFunctionService.hmac(timeBytes.buffer, keyBytes.buffer, alg);
            return new Uint8Array(signature);
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/domain/organization.ts


class organization_Organization {
    constructor(obj) {
        if (obj == null) {
            return;
        }
        this.id = obj.id;
        this.name = obj.name;
        this.status = obj.status;
        this.type = obj.type;
        this.enabled = obj.enabled;
        this.usePolicies = obj.usePolicies;
        this.useGroups = obj.useGroups;
        this.useDirectory = obj.useDirectory;
        this.useEvents = obj.useEvents;
        this.useTotp = obj.useTotp;
        this.use2fa = obj.use2fa;
        this.useApi = obj.useApi;
        this.useSso = obj.useSso;
        this.useKeyConnector = obj.useKeyConnector;
        this.useResetPassword = obj.useResetPassword;
        this.selfHost = obj.selfHost;
        this.usersGetPremium = obj.usersGetPremium;
        this.seats = obj.seats;
        this.maxCollections = obj.maxCollections;
        this.maxStorageGb = obj.maxStorageGb;
        this.ssoBound = obj.ssoBound;
        this.identifier = obj.identifier;
        this.permissions = obj.permissions;
        this.resetPasswordEnrolled = obj.resetPasswordEnrolled;
        this.userId = obj.userId;
        this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;
        this.providerId = obj.providerId;
        this.providerName = obj.providerName;
        this.isProviderUser = obj.isProviderUser;
        this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;
        this.familySponsorshipAvailable = obj.familySponsorshipAvailable;
        this.planProductType = obj.planProductType;
        this.keyConnectorEnabled = obj.keyConnectorEnabled;
        this.keyConnectorUrl = obj.keyConnectorUrl;
    }
    get canAccess() {
        if (this.type === OrganizationUserType.Owner) {
            return true;
        }
        return this.enabled && this.status === organizationUserStatusType["a" /* OrganizationUserStatusType */].Confirmed;
    }
    get isManager() {
        return this.type === OrganizationUserType.Manager || this.type === OrganizationUserType.Owner ||
            this.type === OrganizationUserType.Admin;
    }
    get isAdmin() {
        return this.type === OrganizationUserType.Owner || this.type === OrganizationUserType.Admin;
    }
    get isOwner() {
        return this.type === OrganizationUserType.Owner || this.isProviderUser;
    }
    get canAccessEventLogs() {
        return this.isAdmin || this.permissions.accessEventLogs;
    }
    get canAccessImportExport() {
        return this.isAdmin || this.permissions.accessImportExport;
    }
    get canAccessReports() {
        return this.isAdmin || this.permissions.accessReports;
    }
    get canCreateNewCollections() {
        var _a;
        return this.isManager || ((_a = this.permissions.createNewCollections) !== null && _a !== void 0 ? _a : this.permissions.manageAllCollections);
    }
    get canEditAnyCollection() {
        var _a;
        return this.isAdmin || ((_a = this.permissions.editAnyCollection) !== null && _a !== void 0 ? _a : this.permissions.manageAllCollections);
    }
    get canDeleteAnyCollection() {
        var _a;
        return this.isAdmin || ((_a = this.permissions.deleteAnyCollection) !== null && _a !== void 0 ? _a : this.permissions.manageAllCollections);
    }
    get canViewAllCollections() {
        return this.canCreateNewCollections || this.canEditAnyCollection || this.canDeleteAnyCollection;
    }
    get canEditAssignedCollections() {
        var _a;
        return this.isManager || ((_a = this.permissions.editAssignedCollections) !== null && _a !== void 0 ? _a : this.permissions.manageAssignedCollections);
    }
    get canDeleteAssignedCollections() {
        var _a;
        return this.isManager || ((_a = this.permissions.deleteAssignedCollections) !== null && _a !== void 0 ? _a : this.permissions.manageAssignedCollections);
    }
    get canViewAssignedCollections() {
        return this.canDeleteAssignedCollections || this.canEditAssignedCollections;
    }
    get canManageGroups() {
        return this.isAdmin || this.permissions.manageGroups;
    }
    get canManageSso() {
        return this.isAdmin || this.permissions.manageSso;
    }
    get canManagePolicies() {
        return this.isAdmin || this.permissions.managePolicies;
    }
    get canManageUsers() {
        return this.isAdmin || this.permissions.manageUsers;
    }
    get canManageUsersPassword() {
        return this.isAdmin || this.permissions.manageResetPassword;
    }
    get isExemptFromPolicies() {
        return this.canManagePolicies;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/enums/providerUserStatusType.ts
var ProviderUserStatusType;
(function (ProviderUserStatusType) {
    ProviderUserStatusType[ProviderUserStatusType["Invited"] = 0] = "Invited";
    ProviderUserStatusType[ProviderUserStatusType["Accepted"] = 1] = "Accepted";
    ProviderUserStatusType[ProviderUserStatusType["Confirmed"] = 2] = "Confirmed";
})(ProviderUserStatusType || (ProviderUserStatusType = {}));

// CONCATENATED MODULE: ./jslib/common/src/enums/providerUserType.ts
var ProviderUserType;
(function (ProviderUserType) {
    ProviderUserType[ProviderUserType["ProviderAdmin"] = 0] = "ProviderAdmin";
    ProviderUserType[ProviderUserType["ServiceUser"] = 1] = "ServiceUser";
})(ProviderUserType || (ProviderUserType = {}));

// CONCATENATED MODULE: ./jslib/common/src/models/domain/provider.ts


class provider_Provider {
    constructor(obj) {
        if (obj == null) {
            return;
        }
        this.id = obj.id;
        this.name = obj.name;
        this.status = obj.status;
        this.type = obj.type;
        this.enabled = obj.enabled;
        this.userId = obj.userId;
        this.useEvents = obj.useEvents;
    }
    get canAccess() {
        if (this.isProviderAdmin) {
            return true;
        }
        return this.enabled && this.status === ProviderUserStatusType.Confirmed;
    }
    get canCreateOrganizations() {
        return this.enabled && this.isProviderAdmin;
    }
    get canManageUsers() {
        return this.isProviderAdmin;
    }
    get canAccessEventLogs() {
        return this.isProviderAdmin;
    }
    get isProviderAdmin() {
        return this.type === ProviderUserType.ProviderAdmin;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/user.service.ts
var user_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const user_service_Keys = {
    userId: 'userId',
    userEmail: 'userEmail',
    stamp: 'securityStamp',
    kdf: 'kdf',
    kdfIterations: 'kdfIterations',
    organizationsPrefix: 'organizations_',
    providersPrefix: 'providers_',
    emailVerified: 'emailVerified',
    forcePasswordReset: 'forcePasswordReset',
};
class user_service_UserService {
    constructor(tokenService, storageService) {
        this.tokenService = tokenService;
        this.storageService = storageService;
    }
    setInformation(userId, email, kdf, kdfIterations) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            this.email = email;
            this.userId = userId;
            this.kdf = kdf;
            this.kdfIterations = kdfIterations;
            yield this.storageService.save(user_service_Keys.userEmail, email);
            yield this.storageService.save(user_service_Keys.userId, userId);
            yield this.storageService.save(user_service_Keys.kdf, kdf);
            yield this.storageService.save(user_service_Keys.kdfIterations, kdfIterations);
        });
    }
    setSecurityStamp(stamp) {
        this.stamp = stamp;
        return this.storageService.save(user_service_Keys.stamp, stamp);
    }
    setEmailVerified(emailVerified) {
        this.emailVerified = emailVerified;
        return this.storageService.save(user_service_Keys.emailVerified, emailVerified);
    }
    setForcePasswordReset(forcePasswordReset) {
        this.forcePasswordReset = forcePasswordReset;
        return this.storageService.save(user_service_Keys.forcePasswordReset, forcePasswordReset);
    }
    getUserId() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.userId == null) {
                this.userId = yield this.storageService.get(user_service_Keys.userId);
            }
            return this.userId;
        });
    }
    getEmail() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.email == null) {
                this.email = yield this.storageService.get(user_service_Keys.userEmail);
            }
            return this.email;
        });
    }
    getSecurityStamp() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.stamp == null) {
                this.stamp = yield this.storageService.get(user_service_Keys.stamp);
            }
            return this.stamp;
        });
    }
    getKdf() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.kdf == null) {
                this.kdf = yield this.storageService.get(user_service_Keys.kdf);
            }
            return this.kdf;
        });
    }
    getKdfIterations() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.kdfIterations == null) {
                this.kdfIterations = yield this.storageService.get(user_service_Keys.kdfIterations);
            }
            return this.kdfIterations;
        });
    }
    getEmailVerified() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.emailVerified == null) {
                this.emailVerified = yield this.storageService.get(user_service_Keys.emailVerified);
            }
            return this.emailVerified;
        });
    }
    getForcePasswordReset() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.forcePasswordReset == null) {
                this.forcePasswordReset = yield this.storageService.get(user_service_Keys.forcePasswordReset);
            }
            return this.forcePasswordReset;
        });
    }
    clear() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            yield this.storageService.remove(user_service_Keys.userId);
            yield this.storageService.remove(user_service_Keys.userEmail);
            yield this.storageService.remove(user_service_Keys.stamp);
            yield this.storageService.remove(user_service_Keys.kdf);
            yield this.storageService.remove(user_service_Keys.kdfIterations);
            yield this.storageService.remove(user_service_Keys.forcePasswordReset);
            yield this.clearOrganizations(userId);
            yield this.clearProviders(userId);
            this.userId = this.email = this.stamp = null;
            this.kdf = null;
            this.kdfIterations = null;
        });
    }
    isAuthenticated() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const token = yield this.tokenService.getToken();
            if (token == null) {
                return false;
            }
            const userId = yield this.getUserId();
            return userId != null;
        });
    }
    canAccessPremium() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const authed = yield this.isAuthenticated();
            if (!authed) {
                return false;
            }
            const tokenPremium = this.tokenService.getPremium();
            if (tokenPremium) {
                return true;
            }
            const orgs = yield this.getAllOrganizations();
            for (let i = 0; i < orgs.length; i++) {
                if (orgs[i].usersGetPremium && orgs[i].enabled) {
                    return true;
                }
            }
            return false;
        });
    }
    canManageSponsorships() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const orgs = yield this.getAllOrganizations();
            return orgs.some(o => o.familySponsorshipAvailable || o.familySponsorshipFriendlyName !== null);
        });
    }
    getOrganization(id) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            const organizations = yield this.storageService.get(user_service_Keys.organizationsPrefix + userId);
            if (organizations == null || !organizations.hasOwnProperty(id)) {
                return null;
            }
            return new organization_Organization(organizations[id]);
        });
    }
    getOrganizationByIdentifier(identifier) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const organizations = yield this.getAllOrganizations();
            if (organizations == null || organizations.length === 0) {
                return null;
            }
            return organizations.find(o => o.identifier === identifier);
        });
    }
    getAllOrganizations() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            const organizations = yield this.storageService.get(user_service_Keys.organizationsPrefix + userId);
            const response = [];
            for (const id in organizations) {
                if (organizations.hasOwnProperty(id) && !organizations[id].isProviderUser) {
                    response.push(new organization_Organization(organizations[id]));
                }
            }
            return response;
        });
    }
    replaceOrganizations(organizations) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            yield this.storageService.save(user_service_Keys.organizationsPrefix + userId, organizations);
        });
    }
    clearOrganizations(userId) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(user_service_Keys.organizationsPrefix + userId);
        });
    }
    getProvider(id) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            const providers = yield this.storageService.get(user_service_Keys.providersPrefix + userId);
            if (providers == null || !providers.hasOwnProperty(id)) {
                return null;
            }
            return new provider_Provider(providers[id]);
        });
    }
    getAllProviders() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            const providers = yield this.storageService.get(user_service_Keys.providersPrefix + userId);
            const response = [];
            for (const id in providers) {
                if (providers.hasOwnProperty(id)) {
                    response.push(new provider_Provider(providers[id]));
                }
            }
            return response;
        });
    }
    replaceProviders(providers) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            yield this.storageService.save(user_service_Keys.providersPrefix + userId, providers);
        });
    }
    clearProviders(userId) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(user_service_Keys.providersPrefix + userId);
        });
    }
}

// EXTERNAL MODULE: ./jslib/common/src/enums/verificationType.ts
var verificationType = __webpack_require__(154);

// CONCATENATED MODULE: ./jslib/common/src/models/request/account/verifyOTPRequest.ts
class VerifyOTPRequest {
    constructor(OTP) {
        this.OTP = OTP;
    }
}

// EXTERNAL MODULE: ./jslib/common/src/models/request/secretVerificationRequest.ts
var secretVerificationRequest = __webpack_require__(170);

// CONCATENATED MODULE: ./jslib/common/src/services/userVerification.service.ts
var userVerification_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class userVerification_service_UserVerificationService {
    constructor(cryptoService, i18nService, apiService) {
        this.cryptoService = cryptoService;
        this.i18nService = i18nService;
        this.apiService = apiService;
    }
    buildRequest(verification, requestClass, alreadyHashed) {
        return userVerification_service_awaiter(this, void 0, void 0, function* () {
            this.validateInput(verification);
            const request = requestClass != null
                ? new requestClass()
                : new secretVerificationRequest["a" /* SecretVerificationRequest */]();
            if (verification.type === verificationType["a" /* VerificationType */].OTP) {
                request.otp = verification.secret;
            }
            else {
                request.masterPasswordHash = alreadyHashed
                    ? verification.secret
                    : yield this.cryptoService.hashPassword(verification.secret, null);
            }
            return request;
        });
    }
    verifyUser(verification) {
        return userVerification_service_awaiter(this, void 0, void 0, function* () {
            this.validateInput(verification);
            if (verification.type === verificationType["a" /* VerificationType */].OTP) {
                const request = new VerifyOTPRequest(verification.secret);
                try {
                    yield this.apiService.postAccountVerifyOTP(request);
                }
                catch (e) {
                    throw new Error(this.i18nService.t('invalidVerificationCode'));
                }
            }
            else {
                const passwordValid = yield this.cryptoService.compareAndUpdateKeyHash(verification.secret, null);
                if (!passwordValid) {
                    throw new Error(this.i18nService.t('invalidMasterPassword'));
                }
            }
            return true;
        });
    }
    requestOTP() {
        return userVerification_service_awaiter(this, void 0, void 0, function* () {
            yield this.apiService.postAccountRequestOTP();
        });
    }
    validateInput(verification) {
        if ((verification === null || verification === void 0 ? void 0 : verification.secret) == null || verification.secret === '') {
            if (verification.type === verificationType["a" /* VerificationType */].OTP) {
                throw new Error(this.i18nService.t('verificationCodeRequired'));
            }
            else {
                throw new Error(this.i18nService.t('masterPassRequired'));
            }
        }
    }
}

// EXTERNAL MODULE: ./node_modules/node-forge/lib/index.js
var lib = __webpack_require__(83);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/decryptParameters.ts
class DecryptParameters {
}

// CONCATENATED MODULE: ./jslib/common/src/services/webCryptoFunction.service.ts
var webCryptoFunction_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class webCryptoFunction_service_WebCryptoFunctionService {
    constructor(win, platformUtilsService) {
        this.win = win;
        this.platformUtilsService = platformUtilsService;
        this.crypto = typeof win.crypto !== 'undefined' ? win.crypto : null;
        this.subtle = (!!this.crypto && typeof win.crypto.subtle !== 'undefined') ? win.crypto.subtle : null;
        this.isIE = platformUtilsService.isIE();
        const ua = win.navigator.userAgent;
        this.isOldSafari = platformUtilsService.isSafari() &&
            (ua.indexOf(' Version/10.') > -1 || ua.indexOf(' Version/9.') > -1);
    }
    pbkdf2(password, salt, algorithm, iterations) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            if (this.isIE || this.isOldSafari) {
                const forgeLen = algorithm === 'sha256' ? 32 : 64;
                const passwordBytes = this.toByteString(password);
                const saltBytes = this.toByteString(salt);
                const derivedKeyBytes = lib["pbkdf2"](passwordBytes, saltBytes, iterations, forgeLen, algorithm);
                return utils["a" /* Utils */].fromByteStringToArray(derivedKeyBytes).buffer;
            }
            const wcLen = algorithm === 'sha256' ? 256 : 512;
            const passwordBuf = this.toBuf(password);
            const saltBuf = this.toBuf(salt);
            const pbkdf2Params = {
                name: 'PBKDF2',
                salt: saltBuf,
                iterations: iterations,
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('raw', passwordBuf, { name: 'PBKDF2' }, false, ['deriveBits']);
            return yield this.subtle.deriveBits(pbkdf2Params, impKey, wcLen);
        });
    }
    hkdf(ikm, salt, info, outputByteSize, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const saltBuf = this.toBuf(salt);
            const infoBuf = this.toBuf(info);
            const hkdfParams = {
                name: 'HKDF',
                salt: saltBuf,
                info: infoBuf,
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('raw', ikm, { name: 'HKDF' }, false, ['deriveBits']);
            return yield this.subtle.deriveBits(hkdfParams, impKey, outputByteSize * 8);
        });
    }
    // ref: https://tools.ietf.org/html/rfc5869
    hkdfExpand(prk, info, outputByteSize, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const hashLen = algorithm === 'sha256' ? 32 : 64;
            if (outputByteSize > 255 * hashLen) {
                throw new Error('outputByteSize is too large.');
            }
            const prkArr = new Uint8Array(prk);
            if (prkArr.length < hashLen) {
                throw new Error('prk is too small.');
            }
            const infoBuf = this.toBuf(info);
            const infoArr = new Uint8Array(infoBuf);
            let runningOkmLength = 0;
            let previousT = new Uint8Array(0);
            const n = Math.ceil(outputByteSize / hashLen);
            const okm = new Uint8Array(n * hashLen);
            for (let i = 0; i < n; i++) {
                const t = new Uint8Array(previousT.length + infoArr.length + 1);
                t.set(previousT);
                t.set(infoArr, previousT.length);
                t.set([i + 1], t.length - 1);
                previousT = new Uint8Array(yield this.hmac(t.buffer, prk, algorithm));
                okm.set(previousT, runningOkmLength);
                runningOkmLength += previousT.length;
                if (runningOkmLength >= outputByteSize) {
                    break;
                }
            }
            return okm.slice(0, outputByteSize).buffer;
        });
    }
    hash(value, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            if ((this.isIE && algorithm === 'sha1') || algorithm === 'md5') {
                const md = algorithm === 'md5' ? lib["md"].md5.create() : lib["md"].sha1.create();
                const valueBytes = this.toByteString(value);
                md.update(valueBytes, 'raw');
                return utils["a" /* Utils */].fromByteStringToArray(md.digest().data).buffer;
            }
            const valueBuf = this.toBuf(value);
            return yield this.subtle.digest({ name: this.toWebCryptoAlgorithm(algorithm) }, valueBuf);
        });
    }
    hmac(value, key, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            if (this.isIE && algorithm === 'sha512') {
                const hmac = lib["hmac"].create();
                const keyBytes = this.toByteString(key);
                const valueBytes = this.toByteString(value);
                hmac.start(algorithm, keyBytes);
                hmac.update(valueBytes, 'raw');
                return utils["a" /* Utils */].fromByteStringToArray(hmac.digest().data).buffer;
            }
            const signingAlgorithm = {
                name: 'HMAC',
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('raw', key, signingAlgorithm, false, ['sign']);
            return yield this.subtle.sign(signingAlgorithm, impKey, value);
        });
    }
    // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).
    // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/
    // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy
    compare(a, b) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const macKey = yield this.randomBytes(32);
            const signingAlgorithm = {
                name: 'HMAC',
                hash: { name: 'SHA-256' },
            };
            const impKey = yield this.subtle.importKey('raw', macKey, signingAlgorithm, false, ['sign']);
            const mac1 = yield this.subtle.sign(signingAlgorithm, impKey, a);
            const mac2 = yield this.subtle.sign(signingAlgorithm, impKey, b);
            if (mac1.byteLength !== mac2.byteLength) {
                return false;
            }
            const arr1 = new Uint8Array(mac1);
            const arr2 = new Uint8Array(mac2);
            for (let i = 0; i < arr2.length; i++) {
                if (arr1[i] !== arr2[i]) {
                    return false;
                }
            }
            return true;
        });
    }
    hmacFast(value, key, algorithm) {
        const hmac = lib["hmac"].create();
        hmac.start(algorithm, key);
        hmac.update(value);
        const bytes = hmac.digest().getBytes();
        return Promise.resolve(bytes);
    }
    compareFast(a, b) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const rand = yield this.randomBytes(32);
            const bytes = new Uint32Array(rand);
            const buffer = lib["util"].createBuffer();
            for (let i = 0; i < bytes.length; i++) {
                buffer.putInt32(bytes[i]);
            }
            const macKey = buffer.getBytes();
            const hmac = lib["hmac"].create();
            hmac.start('sha256', macKey);
            hmac.update(a);
            const mac1 = hmac.digest().getBytes();
            hmac.start(null, null);
            hmac.update(b);
            const mac2 = hmac.digest().getBytes();
            const equals = mac1 === mac2;
            return equals;
        });
    }
    aesEncrypt(data, iv, key) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const impKey = yield this.subtle.importKey('raw', key, { name: 'AES-CBC' }, false, ['encrypt']);
            return yield this.subtle.encrypt({ name: 'AES-CBC', iv: iv }, impKey, data);
        });
    }
    aesDecryptFastParameters(data, iv, mac, key) {
        const p = new DecryptParameters();
        if (key.meta != null) {
            p.encKey = key.meta.encKeyByteString;
            p.macKey = key.meta.macKeyByteString;
        }
        if (p.encKey == null) {
            p.encKey = lib["util"].decode64(key.encKeyB64);
        }
        p.data = lib["util"].decode64(data);
        p.iv = lib["util"].decode64(iv);
        p.macData = p.iv + p.data;
        if (p.macKey == null && key.macKeyB64 != null) {
            p.macKey = lib["util"].decode64(key.macKeyB64);
        }
        if (mac != null) {
            p.mac = lib["util"].decode64(mac);
        }
        // cache byte string keys for later
        if (key.meta == null) {
            key.meta = {};
        }
        if (key.meta.encKeyByteString == null) {
            key.meta.encKeyByteString = p.encKey;
        }
        if (p.macKey != null && key.meta.macKeyByteString == null) {
            key.meta.macKeyByteString = p.macKey;
        }
        return p;
    }
    aesDecryptFast(parameters) {
        const dataBuffer = lib["util"].createBuffer(parameters.data);
        const decipher = lib["cipher"].createDecipher('AES-CBC', parameters.encKey);
        decipher.start({ iv: parameters.iv });
        decipher.update(dataBuffer);
        decipher.finish();
        const val = decipher.output.toString('utf8');
        return Promise.resolve(val);
    }
    aesDecrypt(data, iv, key) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const impKey = yield this.subtle.importKey('raw', key, { name: 'AES-CBC' }, false, ['decrypt']);
            return yield this.subtle.decrypt({ name: 'AES-CBC', iv: iv }, impKey, data);
        });
    }
    rsaEncrypt(data, publicKey, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            // Note: Edge browser requires that we specify name and hash for both key import and decrypt.
            // We cannot use the proper types here.
            const rsaParams = {
                name: 'RSA-OAEP',
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('spki', publicKey, rsaParams, false, ['encrypt']);
            return yield this.subtle.encrypt(rsaParams, impKey, data);
        });
    }
    rsaDecrypt(data, privateKey, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            // Note: Edge browser requires that we specify name and hash for both key import and decrypt.
            // We cannot use the proper types here.
            const rsaParams = {
                name: 'RSA-OAEP',
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('pkcs8', privateKey, rsaParams, false, ['decrypt']);
            return yield this.subtle.decrypt(rsaParams, impKey, data);
        });
    }
    rsaExtractPublicKey(privateKey) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const rsaParams = {
                name: 'RSA-OAEP',
                // Have to specify some algorithm
                hash: { name: this.toWebCryptoAlgorithm('sha1') },
            };
            const impPrivateKey = yield this.subtle.importKey('pkcs8', privateKey, rsaParams, true, ['decrypt']);
            const jwkPrivateKey = yield this.subtle.exportKey('jwk', impPrivateKey);
            const jwkPublicKeyParams = {
                kty: 'RSA',
                e: jwkPrivateKey.e,
                n: jwkPrivateKey.n,
                alg: 'RSA-OAEP',
                ext: true,
            };
            const impPublicKey = yield this.subtle.importKey('jwk', jwkPublicKeyParams, rsaParams, true, ['encrypt']);
            return yield this.subtle.exportKey('spki', impPublicKey);
        });
    }
    rsaGenerateKeyPair(length) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const rsaParams = {
                name: 'RSA-OAEP',
                modulusLength: length,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                // Have to specify some algorithm
                hash: { name: this.toWebCryptoAlgorithm('sha1') },
            };
            const keyPair = (yield this.subtle.generateKey(rsaParams, true, ['encrypt', 'decrypt']));
            const publicKey = yield this.subtle.exportKey('spki', keyPair.publicKey);
            const privateKey = yield this.subtle.exportKey('pkcs8', keyPair.privateKey);
            return [publicKey, privateKey];
        });
    }
    randomBytes(length) {
        const arr = new Uint8Array(length);
        this.crypto.getRandomValues(arr);
        return Promise.resolve(arr.buffer);
    }
    toBuf(value) {
        let buf;
        if (typeof (value) === 'string') {
            buf = utils["a" /* Utils */].fromUtf8ToArray(value).buffer;
        }
        else {
            buf = value;
        }
        return buf;
    }
    toByteString(value) {
        let bytes;
        if (typeof (value) === 'string') {
            bytes = lib["util"].encodeUtf8(value);
        }
        else {
            bytes = utils["a" /* Utils */].fromBufferToByteString(value);
        }
        return bytes;
    }
    toWebCryptoAlgorithm(algorithm) {
        if (algorithm === 'md5') {
            throw new Error('MD5 is not supported in WebCrypto.');
        }
        return algorithm === 'sha1' ? 'SHA-1' : algorithm === 'sha256' ? 'SHA-256' : 'SHA-512';
    }
}

// EXTERNAL MODULE: ./jslib/common/src/abstractions/messaging.service.ts
var messaging_service = __webpack_require__(16);

// EXTERNAL MODULE: ./src/browser/browserApi.ts
var browserApi = __webpack_require__(13);

// EXTERNAL MODULE: ./src/browser/safariApp.ts
var safariApp = __webpack_require__(106);

// CONCATENATED MODULE: ./src/background/commands.background.ts
var commands_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class commands_background_CommandsBackground {
    constructor(main, passwordGenerationService, platformUtilsService, vaultTimeoutService) {
        this.main = main;
        this.passwordGenerationService = passwordGenerationService;
        this.platformUtilsService = platformUtilsService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.isSafari = this.platformUtilsService.isSafari();
        this.isVivaldi = this.platformUtilsService.isVivaldi();
    }
    init() {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            browserApi["a" /* BrowserApi */].messageListener('commands.background', (msg, sender, sendResponse) => commands_background_awaiter(this, void 0, void 0, function* () {
                if (msg.command === 'unlockCompleted' && msg.data.target === 'commands.background') {
                    yield this.processCommand(msg.data.commandToRetry.msg.command, msg.data.commandToRetry.sender);
                }
                if (this.isVivaldi && msg.command === 'keyboardShortcutTriggered' && msg.shortcut) {
                    yield this.processCommand(msg.shortcut, sender);
                }
            }));
            if (!this.isVivaldi && chrome && chrome.commands) {
                chrome.commands.onCommand.addListener((command) => commands_background_awaiter(this, void 0, void 0, function* () {
                    yield this.processCommand(command);
                }));
            }
        });
    }
    processCommand(command, sender) {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            switch (command) {
                case 'generate_password':
                    yield this.generatePasswordToClipboard();
                    break;
                case 'autofill_login':
                    yield this.autoFillLogin(sender ? sender.tab : null);
                    break;
                case 'open_popup':
                    yield this.openPopup();
                    break;
                case 'lock_vault':
                    yield this.vaultTimeoutService.lock(true);
                    break;
                default:
                    break;
            }
        });
    }
    generatePasswordToClipboard() {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            const options = (yield this.passwordGenerationService.getOptions())[0];
            const password = yield this.passwordGenerationService.generatePassword(options);
            this.platformUtilsService.copyToClipboard(password, { window: window });
            this.passwordGenerationService.addHistory(password);
        });
    }
    autoFillLogin(tab) {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            if (!tab) {
                tab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindowId();
            }
            if (tab == null) {
                return;
            }
            if (yield this.vaultTimeoutService.isLocked()) {
                const retryMessage = {
                    commandToRetry: {
                        msg: { command: 'autofill_login' },
                        sender: { tab: tab },
                    },
                    target: 'commands.background',
                };
                yield browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'addToLockedVaultPendingNotifications', retryMessage);
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'promptForLogin');
                return;
            }
            yield this.main.collectPageDetailsForContentScript(tab, 'autofill_cmd');
        });
    }
    openPopup() {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            // Chrome APIs cannot open popup
            if (!this.isSafari) {
                return;
            }
            this.main.openPopup();
        });
    }
}

// CONCATENATED MODULE: ./src/background/contextMenus.background.ts
var contextMenus_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class contextMenus_background_ContextMenusBackground {
    constructor(main, cipherService, passwordGenerationService, platformUtilsService, vaultTimeoutService, eventService, totpService) {
        this.main = main;
        this.cipherService = cipherService;
        this.passwordGenerationService = passwordGenerationService;
        this.platformUtilsService = platformUtilsService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.eventService = eventService;
        this.totpService = totpService;
        this.noopCommandSuffix = 'noop';
        this.contextMenus = chrome.contextMenus;
    }
    init() {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            if (!this.contextMenus) {
                return;
            }
            this.contextMenus.onClicked.addListener((info, tab) => contextMenus_background_awaiter(this, void 0, void 0, function* () {
                if (info.menuItemId === 'generate-password') {
                    yield this.generatePasswordToClipboard();
                }
                else if (info.menuItemId === 'copy-identifier') {
                    yield this.getClickedElement(tab, info.frameId);
                }
                else if (info.parentMenuItemId === 'autofill' ||
                    info.parentMenuItemId === 'copy-username' ||
                    info.parentMenuItemId === 'copy-password' ||
                    info.parentMenuItemId === 'copy-totp') {
                    yield this.cipherAction(tab, info);
                }
            }));
            browserApi["a" /* BrowserApi */].messageListener('contextmenus.background', (msg, sender, sendResponse) => contextMenus_background_awaiter(this, void 0, void 0, function* () {
                if (msg.command === 'unlockCompleted' && msg.data.target === 'contextmenus.background') {
                    yield this.cipherAction(msg.data.commandToRetry.sender.tab, msg.data.commandToRetry.msg.data);
                }
            }));
        });
    }
    generatePasswordToClipboard() {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            const options = (yield this.passwordGenerationService.getOptions())[0];
            const password = yield this.passwordGenerationService.generatePassword(options);
            this.platformUtilsService.copyToClipboard(password, { window: window });
            this.passwordGenerationService.addHistory(password);
        });
    }
    getClickedElement(tab, frameId) {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            if (tab == null) {
                return;
            }
            browserApi["a" /* BrowserApi */].tabSendMessage(tab, { command: 'getClickedElement' }, { frameId: frameId });
        });
    }
    cipherAction(tab, info) {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            const id = info.menuItemId.split('_')[1];
            if (yield this.vaultTimeoutService.isLocked()) {
                const retryMessage = {
                    commandToRetry: {
                        msg: { command: this.noopCommandSuffix, data: info },
                        sender: { tab: tab },
                    },
                    target: 'contextmenus.background',
                };
                yield browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'addToLockedVaultPendingNotifications', retryMessage);
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'promptForLogin');
                return;
            }
            let cipher;
            if (id === this.noopCommandSuffix) {
                const ciphers = yield this.cipherService.getAllDecryptedForUrl(tab.url);
                cipher = ciphers.find(c => c.reprompt === cipherRepromptType["a" /* CipherRepromptType */].None);
            }
            else {
                const ciphers = yield this.cipherService.getAllDecrypted();
                cipher = ciphers.find(c => c.id === id);
            }
            if (cipher == null) {
                return;
            }
            if (info.parentMenuItemId === 'autofill') {
                yield this.startAutofillPage(tab, cipher);
            }
            else if (info.parentMenuItemId === 'copy-username') {
                this.platformUtilsService.copyToClipboard(cipher.login.username, { window: window });
            }
            else if (info.parentMenuItemId === 'copy-password') {
                this.platformUtilsService.copyToClipboard(cipher.login.password, { window: window });
                this.eventService.collect(enums_eventType["a" /* EventType */].Cipher_ClientCopiedPassword, cipher.id);
            }
            else if (info.parentMenuItemId === 'copy-totp') {
                const totpValue = yield this.totpService.getCode(cipher.login.totp);
                this.platformUtilsService.copyToClipboard(totpValue, { window: window });
            }
        });
    }
    startAutofillPage(tab, cipher) {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            this.main.loginToAutoFill = cipher;
            if (tab == null) {
                return;
            }
            browserApi["a" /* BrowserApi */].tabSendMessage(tab, {
                command: 'collectPageDetails',
                tab: tab,
                sender: 'contextMenu',
            });
        });
    }
}

// CONCATENATED MODULE: ./src/background/idle.background.ts
var idle_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

const IdleInterval = 60 * 5; // 5 minutes
class idle_background_IdleBackground {
    constructor(vaultTimeoutService, storageService, notificationsService) {
        this.vaultTimeoutService = vaultTimeoutService;
        this.storageService = storageService;
        this.notificationsService = notificationsService;
        this.idleTimer = null;
        this.idleState = 'active';
        this.idle = chrome.idle || (browser != null ? browser.idle : null);
    }
    init() {
        return idle_background_awaiter(this, void 0, void 0, function* () {
            if (!this.idle) {
                return;
            }
            const idleHandler = (newState) => {
                if (newState === 'active') {
                    this.notificationsService.reconnectFromActivity();
                }
                else {
                    this.notificationsService.disconnectFromInactivity();
                }
            };
            if (this.idle.onStateChanged && this.idle.setDetectionInterval) {
                this.idle.setDetectionInterval(IdleInterval);
                this.idle.onStateChanged.addListener(idleHandler);
            }
            else {
                this.pollIdle(idleHandler);
            }
            if (this.idle.onStateChanged) {
                this.idle.onStateChanged.addListener((newState) => idle_background_awaiter(this, void 0, void 0, function* () {
                    if (newState === 'locked') { // If the screen is locked or the screensaver activates
                        const timeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
                        if (timeout === -2) { // On System Lock vault timeout option
                            const action = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
                            if (action === 'logOut') {
                                yield this.vaultTimeoutService.logOut();
                            }
                            else {
                                yield this.vaultTimeoutService.lock(true);
                            }
                        }
                    }
                }));
            }
        });
    }
    pollIdle(handler) {
        if (this.idleTimer != null) {
            window.clearTimeout(this.idleTimer);
            this.idleTimer = null;
        }
        this.idle.queryState(IdleInterval, (state) => {
            if (state !== this.idleState) {
                this.idleState = state;
                handler(state);
            }
            this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);
        });
    }
}

// CONCATENATED MODULE: ./src/background/nativeMessaging.background.ts
var nativeMessaging_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const MessageValidTimeout = 10 * 1000;
const EncryptionAlgorithm = 'sha1';
class nativeMessaging_background_NativeMessagingBackground {
    constructor(storageService, cryptoService, cryptoFunctionService, vaultTimeoutService, runtimeBackground, i18nService, userService, messagingService, appIdService, platformUtilsService) {
        var _a;
        this.storageService = storageService;
        this.cryptoService = cryptoService;
        this.cryptoFunctionService = cryptoFunctionService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.runtimeBackground = runtimeBackground;
        this.i18nService = i18nService;
        this.userService = userService;
        this.messagingService = messagingService;
        this.appIdService = appIdService;
        this.platformUtilsService = platformUtilsService;
        this.connected = false;
        this.resolver = null;
        this.privateKey = null;
        this.publicKey = null;
        this.secureSetupResolve = null;
        this.storageService.save(constants_service["a" /* ConstantsService */].biometricFingerprintValidated, false);
        if ((_a = chrome === null || chrome === void 0 ? void 0 : chrome.permissions) === null || _a === void 0 ? void 0 : _a.onAdded) {
            // Reload extension to activate nativeMessaging
            chrome.permissions.onAdded.addListener(permissions => {
                browserApi["a" /* BrowserApi */].reloadExtension(null);
            });
        }
    }
    connect() {
        return nativeMessaging_background_awaiter(this, void 0, void 0, function* () {
            this.appId = yield this.appIdService.getAppId();
            this.storageService.save(constants_service["a" /* ConstantsService */].biometricFingerprintValidated, false);
            return new Promise((resolve, reject) => {
                this.port = browserApi["a" /* BrowserApi */].connectNative('com.8bit.bitwarden');
                this.connecting = true;
                const connectedCallback = () => {
                    this.connected = true;
                    this.connecting = false;
                    resolve();
                };
                // Safari has a bundled native component which is always available, no need to
                // check if the desktop app is running.
                if (this.platformUtilsService.isSafari()) {
                    connectedCallback();
                }
                this.port.onMessage.addListener((message) => nativeMessaging_background_awaiter(this, void 0, void 0, function* () {
                    switch (message.command) {
                        case 'connected':
                            connectedCallback();
                            break;
                        case 'disconnected':
                            if (this.connecting) {
                                this.messagingService.send('showDialog', {
                                    text: this.i18nService.t('startDesktopDesc'),
                                    title: this.i18nService.t('startDesktopTitle'),
                                    confirmText: this.i18nService.t('ok'),
                                    type: 'error',
                                });
                                reject();
                            }
                            this.connected = false;
                            this.port.disconnect();
                            break;
                        case 'setupEncryption':
                            // Ignore since it belongs to another device
                            if (message.appId !== this.appId) {
                                return;
                            }
                            const encrypted = utils["a" /* Utils */].fromB64ToArray(message.sharedSecret);
                            const decrypted = yield this.cryptoFunctionService.rsaDecrypt(encrypted.buffer, this.privateKey, EncryptionAlgorithm);
                            if (this.validatingFingerprint) {
                                this.validatingFingerprint = false;
                                this.storageService.save(constants_service["a" /* ConstantsService */].biometricFingerprintValidated, true);
                            }
                            this.sharedSecret = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decrypted);
                            this.secureSetupResolve();
                            break;
                        case 'invalidateEncryption':
                            // Ignore since it belongs to another device
                            if (message.appId !== this.appId) {
                                return;
                            }
                            this.sharedSecret = null;
                            this.privateKey = null;
                            this.connected = false;
                            this.messagingService.send('showDialog', {
                                text: this.i18nService.t('nativeMessagingInvalidEncryptionDesc'),
                                title: this.i18nService.t('nativeMessagingInvalidEncryptionTitle'),
                                confirmText: this.i18nService.t('ok'),
                                type: 'error',
                            });
                            break;
                        case 'verifyFingerprint': {
                            if (this.sharedSecret == null) {
                                this.validatingFingerprint = true;
                                this.showFingerprintDialog();
                            }
                            break;
                        }
                        case 'wrongUserId':
                            this.showWrongUserDialog();
                        default:
                            // Ignore since it belongs to another device
                            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {
                                return;
                            }
                            this.onMessage(message.message);
                    }
                }));
                this.port.onDisconnect.addListener((p) => {
                    let error;
                    if (browserApi["a" /* BrowserApi */].isWebExtensionsApi) {
                        error = p.error.message;
                    }
                    else {
                        error = chrome.runtime.lastError.message;
                    }
                    if (error != null) {
                        this.messagingService.send('showDialog', {
                            text: this.i18nService.t('desktopIntegrationDisabledDesc'),
                            title: this.i18nService.t('desktopIntegrationDisabledTitle'),
                            confirmText: this.i18nService.t('ok'),
                            type: 'error',
                        });
                    }
                    this.sharedSecret = null;
                    this.privateKey = null;
                    this.connected = false;
                    reject();
                });
            });
        });
    }
    showWrongUserDialog() {
        this.messagingService.send('showDialog', {
            text: this.i18nService.t('nativeMessagingWrongUserDesc'),
            title: this.i18nService.t('nativeMessagingWrongUserTitle'),
            confirmText: this.i18nService.t('ok'),
            type: 'error',
        });
    }
    send(message) {
        return nativeMessaging_background_awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                yield this.connect();
            }
            if (this.platformUtilsService.isSafari()) {
                this.postMessage(message);
            }
            else {
                this.postMessage({ appId: this.appId, message: yield this.encryptMessage(message) });
            }
        });
    }
    encryptMessage(message) {
        return nativeMessaging_background_awaiter(this, void 0, void 0, function* () {
            if (this.sharedSecret == null) {
                yield this.secureCommunication();
            }
            message.timestamp = Date.now();
            return yield this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);
        });
    }
    getResponse() {
        return new Promise((resolve, reject) => {
            this.resolver = resolve;
        });
    }
    postMessage(message) {
        // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.
        try {
            this.port.postMessage(message);
        }
        catch (e) {
            // tslint:disable-next-line
            console.error("NativeMessaging port disconnected, disconnecting.");
            this.sharedSecret = null;
            this.privateKey = null;
            this.connected = false;
            this.messagingService.send('showDialog', {
                text: this.i18nService.t('nativeMessagingInvalidEncryptionDesc'),
                title: this.i18nService.t('nativeMessagingInvalidEncryptionTitle'),
                confirmText: this.i18nService.t('ok'),
                type: 'error',
            });
        }
    }
    onMessage(rawMessage) {
        return nativeMessaging_background_awaiter(this, void 0, void 0, function* () {
            let message = rawMessage;
            if (!this.platformUtilsService.isSafari()) {
                message = JSON.parse(yield this.cryptoService.decryptToUtf8(rawMessage, this.sharedSecret));
            }
            if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {
                // tslint:disable-next-line
                console.error('NativeMessage is to old, ignoring.');
                return;
            }
            switch (message.command) {
                case 'biometricUnlock':
                    yield this.storageService.remove(constants_service["a" /* ConstantsService */].biometricAwaitingAcceptance);
                    if (message.response === 'not enabled') {
                        this.messagingService.send('showDialog', {
                            text: this.i18nService.t('biometricsNotEnabledDesc'),
                            title: this.i18nService.t('biometricsNotEnabledTitle'),
                            confirmText: this.i18nService.t('ok'),
                            type: 'error',
                        });
                        break;
                    }
                    else if (message.response === 'not supported') {
                        this.messagingService.send('showDialog', {
                            text: this.i18nService.t('biometricsNotSupportedDesc'),
                            title: this.i18nService.t('biometricsNotSupportedTitle'),
                            confirmText: this.i18nService.t('ok'),
                            type: 'error',
                        });
                        break;
                    }
                    const enabled = yield this.storageService.get(constants_service["a" /* ConstantsService */].biometricUnlockKey);
                    if (enabled === null || enabled === false) {
                        if (message.response === 'unlocked') {
                            yield this.storageService.save(constants_service["a" /* ConstantsService */].biometricUnlockKey, true);
                        }
                        break;
                    }
                    // Ignore unlock if already unlockeded
                    if (!this.vaultTimeoutService.biometricLocked) {
                        break;
                    }
                    if (message.response === 'unlocked') {
                        yield this.cryptoService.setKey(new symmetricCryptoKey["a" /* SymmetricCryptoKey */](utils["a" /* Utils */].fromB64ToArray(message.keyB64).buffer));
                        // Verify key is correct by attempting to decrypt a secret
                        try {
                            yield this.cryptoService.getFingerprint(yield this.userService.getUserId());
                        }
                        catch (e) {
                            // tslint:disable-next-line
                            console.error('Unable to verify key:', e);
                            yield this.cryptoService.clearKey();
                            this.showWrongUserDialog();
                            message = false;
                            break;
                        }
                        this.vaultTimeoutService.biometricLocked = false;
                        this.runtimeBackground.processMessage({ command: 'unlocked' }, null, null);
                    }
                    break;
                default:
                    // tslint:disable-next-line
                    console.error('NativeMessage, got unknown command: ', message.command);
            }
            if (this.resolver) {
                this.resolver(message);
            }
        });
    }
    secureCommunication() {
        return nativeMessaging_background_awaiter(this, void 0, void 0, function* () {
            const [publicKey, privateKey] = yield this.cryptoFunctionService.rsaGenerateKeyPair(2048);
            this.publicKey = publicKey;
            this.privateKey = privateKey;
            this.sendUnencrypted({
                command: 'setupEncryption',
                publicKey: utils["a" /* Utils */].fromBufferToB64(publicKey),
                userId: yield this.userService.getUserId(),
            });
            return new Promise((resolve, reject) => this.secureSetupResolve = resolve);
        });
    }
    sendUnencrypted(message) {
        return nativeMessaging_background_awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
                yield this.connect();
            }
            message.timestamp = Date.now();
            this.postMessage({ appId: this.appId, message: message });
        });
    }
    showFingerprintDialog() {
        return nativeMessaging_background_awaiter(this, void 0, void 0, function* () {
            const fingerprint = (yield this.cryptoService.getFingerprint(yield this.userService.getUserId(), this.publicKey)).join(' ');
            this.messagingService.send('showDialog', {
                html: `${this.i18nService.t('desktopIntegrationVerificationText')}<br><br><strong>${fingerprint}</strong>`,
                title: this.i18nService.t('desktopSyncVerificationTitle'),
                confirmText: this.i18nService.t('ok'),
                type: 'warning',
            });
        });
    }
}

// CONCATENATED MODULE: ./src/background/models/notificationQueueMessageType.ts
var NotificationQueueMessageType;
(function (NotificationQueueMessageType) {
    NotificationQueueMessageType["addLogin"] = "addLogin";
    NotificationQueueMessageType["changePassword"] = "changePassword";
})(NotificationQueueMessageType || (NotificationQueueMessageType = {}));

// CONCATENATED MODULE: ./src/background/notification.background.ts
var notification_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class notification_background_NotificationBackground {
    constructor(main, autofillService, cipherService, storageService, vaultTimeoutService, policyService, folderService, userService) {
        this.main = main;
        this.autofillService = autofillService;
        this.cipherService = cipherService;
        this.storageService = storageService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.policyService = policyService;
        this.folderService = folderService;
        this.userService = userService;
        this.notificationQueue = [];
    }
    init() {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            if (chrome.runtime == null) {
                return;
            }
            browserApi["a" /* BrowserApi */].messageListener('notification.background', (msg, sender) => notification_background_awaiter(this, void 0, void 0, function* () {
                yield this.processMessage(msg, sender);
            }));
            this.cleanupNotificationQueue();
        });
    }
    processMessage(msg, sender) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            switch (msg.command) {
                case 'unlockCompleted':
                    if (msg.data.target !== 'notification.background') {
                        return;
                    }
                    yield this.processMessage(msg.data.commandToRetry.msg, msg.data.commandToRetry.sender);
                    break;
                case 'bgGetDataForTab':
                    yield this.getDataForTab(sender.tab, msg.responseCommand);
                    break;
                case 'bgCloseNotificationBar':
                    yield browserApi["a" /* BrowserApi */].tabSendMessageData(sender.tab, 'closeNotificationBar');
                    break;
                case 'bgAdjustNotificationBar':
                    yield browserApi["a" /* BrowserApi */].tabSendMessageData(sender.tab, 'adjustNotificationBar', msg.data);
                    break;
                case 'bgAddLogin':
                    yield this.addLogin(msg.login, sender.tab);
                    break;
                case 'bgChangedPassword':
                    yield this.changedPassword(msg.data, sender.tab);
                    break;
                case 'bgAddClose':
                case 'bgChangeClose':
                    this.removeTabFromNotificationQueue(sender.tab);
                    break;
                case 'bgAddSave':
                case 'bgChangeSave':
                    if (yield this.vaultTimeoutService.isLocked()) {
                        const retryMessage = {
                            commandToRetry: {
                                msg: msg,
                                sender: sender,
                            },
                            target: 'notification.background',
                        };
                        yield browserApi["a" /* BrowserApi */].tabSendMessageData(sender.tab, 'addToLockedVaultPendingNotifications', retryMessage);
                        yield browserApi["a" /* BrowserApi */].tabSendMessageData(sender.tab, 'promptForLogin');
                        return;
                    }
                    yield this.saveOrUpdateCredentials(sender.tab, msg.folder);
                    break;
                case 'bgNeverSave':
                    yield this.saveNever(sender.tab);
                    break;
                case 'collectPageDetailsResponse':
                    switch (msg.sender) {
                        case 'notificationBar':
                            const forms = this.autofillService.getFormsWithPasswordFields(msg.details);
                            yield browserApi["a" /* BrowserApi */].tabSendMessageData(msg.tab, 'notificationBarPageDetails', {
                                details: msg.details,
                                forms: forms,
                            });
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
        });
    }
    checkNotificationQueue(tab = null) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            if (this.notificationQueue.length === 0) {
                return;
            }
            if (tab != null) {
                this.doNotificationQueueCheck(tab);
                return;
            }
            const currentTab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindow();
            if (currentTab != null) {
                this.doNotificationQueueCheck(currentTab);
            }
        });
    }
    cleanupNotificationQueue() {
        for (let i = this.notificationQueue.length - 1; i >= 0; i--) {
            if (this.notificationQueue[i].expires < new Date()) {
                this.notificationQueue.splice(i, 1);
            }
        }
        setTimeout(() => this.cleanupNotificationQueue(), 2 * 60 * 1000); // check every 2 minutes
    }
    doNotificationQueueCheck(tab) {
        if (tab == null) {
            return;
        }
        const tabDomain = utils["a" /* Utils */].getDomain(tab.url);
        if (tabDomain == null) {
            return;
        }
        for (let i = 0; i < this.notificationQueue.length; i++) {
            if (this.notificationQueue[i].tabId !== tab.id || this.notificationQueue[i].domain !== tabDomain) {
                continue;
            }
            if (this.notificationQueue[i].type === NotificationQueueMessageType.addLogin) {
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'openNotificationBar', {
                    type: 'add',
                    typeData: {
                        isVaultLocked: this.notificationQueue[i].wasVaultLocked,
                    },
                });
            }
            else if (this.notificationQueue[i].type === NotificationQueueMessageType.changePassword) {
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'openNotificationBar', {
                    type: 'change',
                    typeData: {
                        isVaultLocked: this.notificationQueue[i].wasVaultLocked,
                    },
                });
            }
            break;
        }
    }
    removeTabFromNotificationQueue(tab) {
        for (let i = this.notificationQueue.length - 1; i >= 0; i--) {
            if (this.notificationQueue[i].tabId === tab.id) {
                this.notificationQueue.splice(i, 1);
            }
        }
    }
    addLogin(loginInfo, tab) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            if (!(yield this.userService.isAuthenticated())) {
                return;
            }
            const loginDomain = utils["a" /* Utils */].getDomain(loginInfo.url);
            if (loginDomain == null) {
                return;
            }
            let normalizedUsername = loginInfo.username;
            if (normalizedUsername != null) {
                normalizedUsername = normalizedUsername.toLowerCase();
            }
            if (yield this.vaultTimeoutService.isLocked()) {
                if (!(yield this.allowPersonalOwnership())) {
                    return;
                }
                this.pushAddLoginToQueue(loginDomain, loginInfo, tab, true);
                return;
            }
            const ciphers = yield this.cipherService.getAllDecryptedForUrl(loginInfo.url);
            const usernameMatches = ciphers.filter(c => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername);
            if (usernameMatches.length === 0) {
                const disabledAddLogin = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableAddLoginNotificationKey);
                if (disabledAddLogin) {
                    return;
                }
                if (!(yield this.allowPersonalOwnership())) {
                    return;
                }
                this.pushAddLoginToQueue(loginDomain, loginInfo, tab);
            }
            else if (usernameMatches.length === 1 && usernameMatches[0].login.password !== loginInfo.password) {
                const disabledChangePassword = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableChangedPasswordNotificationKey);
                if (disabledChangePassword) {
                    return;
                }
                this.pushChangePasswordToQueue(usernameMatches[0].id, loginDomain, loginInfo.password, tab);
            }
        });
    }
    pushAddLoginToQueue(loginDomain, loginInfo, tab, isVaultLocked = false) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            // remove any old messages for this tab
            this.removeTabFromNotificationQueue(tab);
            const message = {
                type: NotificationQueueMessageType.addLogin,
                username: loginInfo.username,
                password: loginInfo.password,
                domain: loginDomain,
                uri: loginInfo.url,
                tabId: tab.id,
                expires: new Date((new Date()).getTime() + 5 * 60000),
                wasVaultLocked: isVaultLocked,
            };
            this.notificationQueue.push(message);
            yield this.checkNotificationQueue(tab);
        });
    }
    changedPassword(changeData, tab) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            const loginDomain = utils["a" /* Utils */].getDomain(changeData.url);
            if (loginDomain == null) {
                return;
            }
            if (yield this.vaultTimeoutService.isLocked()) {
                this.pushChangePasswordToQueue(null, loginDomain, changeData.newPassword, tab, true);
                return;
            }
            let id = null;
            const ciphers = yield this.cipherService.getAllDecryptedForUrl(changeData.url);
            if (changeData.currentPassword != null) {
                const passwordMatches = ciphers.filter(c => c.login.password === changeData.currentPassword);
                if (passwordMatches.length === 1) {
                    id = passwordMatches[0].id;
                }
            }
            else if (ciphers.length === 1) {
                id = ciphers[0].id;
            }
            if (id != null) {
                this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, tab);
            }
        });
    }
    pushChangePasswordToQueue(cipherId, loginDomain, newPassword, tab, isVaultLocked = false) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            // remove any old messages for this tab
            this.removeTabFromNotificationQueue(tab);
            const message = {
                type: NotificationQueueMessageType.changePassword,
                cipherId: cipherId,
                newPassword: newPassword,
                domain: loginDomain,
                tabId: tab.id,
                expires: new Date((new Date()).getTime() + 5 * 60000),
                wasVaultLocked: isVaultLocked,
            };
            this.notificationQueue.push(message);
            yield this.checkNotificationQueue(tab);
        });
    }
    saveOrUpdateCredentials(tab, folderId) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            for (let i = this.notificationQueue.length - 1; i >= 0; i--) {
                const queueMessage = this.notificationQueue[i];
                if (queueMessage.tabId !== tab.id ||
                    (queueMessage.type !== NotificationQueueMessageType.addLogin && queueMessage.type !== NotificationQueueMessageType.changePassword)) {
                    continue;
                }
                const tabDomain = utils["a" /* Utils */].getDomain(tab.url);
                if (tabDomain != null && tabDomain !== queueMessage.domain) {
                    continue;
                }
                this.notificationQueue.splice(i, 1);
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'closeNotificationBar');
                if (queueMessage.type === NotificationQueueMessageType.changePassword) {
                    const message = queueMessage;
                    const cipher = yield this.getDecryptedCipherById(message.cipherId);
                    if (cipher == null) {
                        return;
                    }
                    yield this.updateCipher(cipher, message.newPassword);
                    return;
                }
                if (!queueMessage.wasVaultLocked) {
                    yield this.createNewCipher(queueMessage, folderId);
                }
                // If the vault was locked, check if a cipher needs updating instead of creating a new one
                if (queueMessage.type === NotificationQueueMessageType.addLogin && queueMessage.wasVaultLocked === true) {
                    const message = queueMessage;
                    const ciphers = yield this.cipherService.getAllDecryptedForUrl(message.uri);
                    const usernameMatches = ciphers.filter(c => c.login.username != null &&
                        c.login.username.toLowerCase() === message.username);
                    if (usernameMatches.length >= 1) {
                        yield this.updateCipher(usernameMatches[0], message.password);
                        return;
                    }
                    yield this.createNewCipher(message, folderId);
                }
            }
        });
    }
    createNewCipher(queueMessage, folderId) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            const loginModel = new loginView["a" /* LoginView */]();
            const loginUri = new loginUriView["a" /* LoginUriView */]();
            loginUri.uri = queueMessage.uri;
            loginModel.uris = [loginUri];
            loginModel.username = queueMessage.username;
            loginModel.password = queueMessage.password;
            const model = new cipherView["a" /* CipherView */]();
            model.name = utils["a" /* Utils */].getHostname(queueMessage.uri) || queueMessage.domain;
            model.name = model.name.replace(/^www\./, '');
            model.type = cipherType["a" /* CipherType */].Login;
            model.login = loginModel;
            if (!utils["a" /* Utils */].isNullOrWhitespace(folderId)) {
                const folders = yield this.folderService.getAllDecrypted();
                if (folders.some(x => x.id === folderId)) {
                    model.folderId = folderId;
                }
            }
            const cipher = yield this.cipherService.encrypt(model);
            yield this.cipherService.saveWithServer(cipher);
        });
    }
    getDecryptedCipherById(cipherId) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            const cipher = yield this.cipherService.get(cipherId);
            if (cipher != null && cipher.type === cipherType["a" /* CipherType */].Login) {
                return yield cipher.decrypt();
            }
            return null;
        });
    }
    updateCipher(cipher, newPassword) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            if (cipher != null && cipher.type === cipherType["a" /* CipherType */].Login) {
                cipher.login.password = newPassword;
                const newCipher = yield this.cipherService.encrypt(cipher);
                yield this.cipherService.saveWithServer(newCipher);
            }
        });
    }
    saveNever(tab) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            for (let i = this.notificationQueue.length - 1; i >= 0; i--) {
                const queueMessage = this.notificationQueue[i];
                if (queueMessage.tabId !== tab.id || queueMessage.type !== NotificationQueueMessageType.addLogin) {
                    continue;
                }
                const tabDomain = utils["a" /* Utils */].getDomain(tab.url);
                if (tabDomain != null && tabDomain !== queueMessage.domain) {
                    continue;
                }
                this.notificationQueue.splice(i, 1);
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'closeNotificationBar');
                const hostname = utils["a" /* Utils */].getHostname(tab.url);
                yield this.cipherService.saveNeverDomain(hostname);
            }
        });
    }
    getDataForTab(tab, responseCommand) {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            const responseData = {};
            if (responseCommand === 'notificationBarGetFoldersList') {
                responseData.folders = yield this.folderService.getAllDecrypted();
            }
            yield browserApi["a" /* BrowserApi */].tabSendMessageData(tab, responseCommand, responseData);
        });
    }
    allowPersonalOwnership() {
        return notification_background_awaiter(this, void 0, void 0, function* () {
            return !(yield this.policyService.policyAppliesToUser(enums_policyType["a" /* PolicyType */].PersonalOwnership));
        });
    }
}

// CONCATENATED MODULE: ./src/background/runtime.background.ts
var runtime_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class runtime_background_RuntimeBackground {
    constructor(main, autofillService, platformUtilsService, storageService, i18nService, notificationsService, systemService, environmentService, messagingService, logService) {
        this.main = main;
        this.autofillService = autofillService;
        this.platformUtilsService = platformUtilsService;
        this.storageService = storageService;
        this.i18nService = i18nService;
        this.notificationsService = notificationsService;
        this.systemService = systemService;
        this.environmentService = environmentService;
        this.messagingService = messagingService;
        this.logService = logService;
        this.pageDetailsToAutoFill = [];
        this.onInstalledReason = null;
        this.lockedVaultPendingNotifications = [];
        // onInstalled listener must be wired up before anything else, so we do it in the ctor
        chrome.runtime.onInstalled.addListener((details) => {
            this.onInstalledReason = details.reason;
        });
    }
    init() {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            if (!chrome.runtime) {
                return;
            }
            yield this.checkOnInstalled();
            browserApi["a" /* BrowserApi */].messageListener('runtime.background', (msg, sender, sendResponse) => runtime_background_awaiter(this, void 0, void 0, function* () {
                yield this.processMessage(msg, sender, sendResponse);
            }));
        });
    }
    processMessage(msg, sender, sendResponse) {
        var _a, _b;
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            switch (msg.command) {
                case 'loggedIn':
                case 'unlocked':
                    let item;
                    if (this.lockedVaultPendingNotifications.length > 0) {
                        yield browserApi["a" /* BrowserApi */].closeLoginTab();
                        item = this.lockedVaultPendingNotifications.pop();
                        if ((_b = (_a = item.commandToRetry.sender) === null || _a === void 0 ? void 0 : _a.tab) === null || _b === void 0 ? void 0 : _b.id) {
                            yield browserApi["a" /* BrowserApi */].focusSpecifiedTab(item.commandToRetry.sender.tab.id);
                        }
                    }
                    yield this.main.setIcon();
                    yield this.main.refreshBadgeAndMenu(false);
                    this.notificationsService.updateConnection(msg.command === 'unlocked');
                    this.systemService.cancelProcessReload();
                    if (item) {
                        yield browserApi["a" /* BrowserApi */].tabSendMessageData(item.commandToRetry.sender.tab, 'unlockCompleted', item);
                    }
                    break;
                case 'addToLockedVaultPendingNotifications':
                    this.lockedVaultPendingNotifications.push(msg.data);
                    break;
                case 'logout':
                    yield this.main.logout(msg.expired);
                    break;
                case 'syncCompleted':
                    if (msg.successfully) {
                        setTimeout(() => runtime_background_awaiter(this, void 0, void 0, function* () { return yield this.main.refreshBadgeAndMenu(); }), 2000);
                    }
                    break;
                case 'openPopup':
                    yield this.main.openPopup();
                    break;
                case 'promptForLogin':
                    yield browserApi["a" /* BrowserApi */].createNewTab('popup/index.html?uilocation=popout', true, true);
                    break;
                case 'showDialogResolve':
                    this.platformUtilsService.resolveDialogPromise(msg.dialogId, msg.confirmed);
                    break;
                case 'bgCollectPageDetails':
                    yield this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);
                    break;
                case 'bgUpdateContextMenu':
                case 'editedCipher':
                case 'addedCipher':
                case 'deletedCipher':
                    yield this.main.refreshBadgeAndMenu();
                    break;
                case 'bgReseedStorage':
                    yield this.main.reseedStorage();
                    break;
                case 'collectPageDetailsResponse':
                    switch (msg.sender) {
                        case 'autofiller':
                        case 'autofill_cmd':
                            const totpCode = yield this.autofillService.doAutoFillActiveTab([{
                                    frameId: sender.frameId,
                                    tab: msg.tab,
                                    details: msg.details,
                                }], msg.sender === 'autofill_cmd');
                            if (totpCode != null) {
                                this.platformUtilsService.copyToClipboard(totpCode, { window: window });
                            }
                            break;
                        case 'contextMenu':
                            clearTimeout(this.autofillTimeout);
                            this.pageDetailsToAutoFill.push({
                                frameId: sender.frameId,
                                tab: msg.tab,
                                details: msg.details,
                            });
                            this.autofillTimeout = setTimeout(() => runtime_background_awaiter(this, void 0, void 0, function* () { return yield this.autofillPage(); }), 300);
                            break;
                        default:
                            break;
                    }
                    break;
                case 'authResult':
                    const vaultUrl = this.environmentService.getWebVaultUrl();
                    if (msg.referrer == null || utils["a" /* Utils */].getHostname(vaultUrl) !== msg.referrer) {
                        return;
                    }
                    try {
                        browserApi["a" /* BrowserApi */].createNewTab('popup/index.html?uilocation=popout#/sso?code=' +
                            encodeURIComponent(msg.code) + '&state=' + encodeURIComponent(msg.state));
                    }
                    catch (_c) {
                        this.logService.error('Unable to open sso popout tab');
                    }
                    break;
                case 'webAuthnResult':
                    const vaultUrl2 = this.environmentService.getWebVaultUrl();
                    if (msg.referrer == null || utils["a" /* Utils */].getHostname(vaultUrl2) !== msg.referrer) {
                        return;
                    }
                    const params = `webAuthnResponse=${encodeURIComponent(msg.data)};` +
                        `remember=${encodeURIComponent(msg.remember)}`;
                    browserApi["a" /* BrowserApi */].createNewTab(`popup/index.html?uilocation=popout#/2fa;${params}`, undefined, false);
                    break;
                case 'reloadPopup':
                    this.messagingService.send('reloadPopup');
                    break;
                case 'emailVerificationRequired':
                    this.messagingService.send('showDialog', {
                        dialogId: 'emailVerificationRequired',
                        title: this.i18nService.t('emailVerificationRequired'),
                        text: this.i18nService.t('emailVerificationRequiredDesc'),
                        confirmText: this.i18nService.t('ok'),
                        type: 'info',
                    });
                    break;
                case 'getClickedElementResponse':
                    this.platformUtilsService.copyToClipboard(msg.identifier, { window: window });
                default:
                    break;
            }
        });
    }
    autofillPage() {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            const totpCode = yield this.autofillService.doAutoFill({
                cipher: this.main.loginToAutoFill,
                pageDetails: this.pageDetailsToAutoFill,
                fillNewPassword: true,
            });
            if (totpCode != null) {
                this.platformUtilsService.copyToClipboard(totpCode, { window: window });
            }
            // reset
            this.main.loginToAutoFill = null;
            this.pageDetailsToAutoFill = [];
        });
    }
    checkOnInstalled() {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            setTimeout(() => runtime_background_awaiter(this, void 0, void 0, function* () {
                if (this.onInstalledReason != null) {
                    if (this.onInstalledReason === 'install') {
                        browserApi["a" /* BrowserApi */].createNewTab('https://bitwarden.com/browser-start/');
                        yield this.setDefaultSettings();
                    }
                    this.onInstalledReason = null;
                }
            }), 100);
        });
    }
    setDefaultSettings() {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            // Default timeout option to "on restart".
            const currentVaultTimeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            if (currentVaultTimeout == null) {
                yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutKey, -1);
            }
            // Default action to "lock".
            const currentVaultTimeoutAction = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
            if (currentVaultTimeoutAction == null) {
                yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey, 'lock');
            }
        });
    }
}

// CONCATENATED MODULE: ./src/background/tabs.background.ts
var tabs_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class TabsBackground {
    constructor(main, notificationBackground) {
        this.main = main;
        this.notificationBackground = notificationBackground;
    }
    init() {
        return tabs_background_awaiter(this, void 0, void 0, function* () {
            if (!chrome.tabs) {
                return;
            }
            chrome.tabs.onActivated.addListener((activeInfo) => tabs_background_awaiter(this, void 0, void 0, function* () {
                yield this.main.refreshBadgeAndMenu();
                this.main.messagingService.send('tabActivated');
                this.main.messagingService.send('tabChanged');
            }));
            chrome.tabs.onReplaced.addListener((addedTabId, removedTabId) => tabs_background_awaiter(this, void 0, void 0, function* () {
                if (this.main.onReplacedRan) {
                    return;
                }
                this.main.onReplacedRan = true;
                yield this.notificationBackground.checkNotificationQueue();
                yield this.main.refreshBadgeAndMenu();
                this.main.messagingService.send('tabReplaced');
                this.main.messagingService.send('tabChanged');
            }));
            chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => tabs_background_awaiter(this, void 0, void 0, function* () {
                if (this.main.onUpdatedRan) {
                    return;
                }
                this.main.onUpdatedRan = true;
                yield this.notificationBackground.checkNotificationQueue(tab);
                yield this.main.refreshBadgeAndMenu();
                this.main.messagingService.send('tabUpdated');
                this.main.messagingService.send('tabChanged');
            }));
        });
    }
}

// EXTERNAL MODULE: ./jslib/common/src/enums/uriMatchType.ts
var uriMatchType = __webpack_require__(33);

// CONCATENATED MODULE: ./src/background/webRequest.background.ts
var webRequest_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class webRequest_background_WebRequestBackground {
    constructor(platformUtilsService, cipherService, vaultTimeoutService) {
        this.cipherService = cipherService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.pendingAuthRequests = [];
        this.webRequest = window.chrome.webRequest;
        this.isFirefox = platformUtilsService.isFirefox();
    }
    init() {
        return webRequest_background_awaiter(this, void 0, void 0, function* () {
            if (!this.webRequest || !this.webRequest.onAuthRequired) {
                return;
            }
            this.webRequest.onAuthRequired.addListener((details, callback) => webRequest_background_awaiter(this, void 0, void 0, function* () {
                if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {
                    if (callback) {
                        callback();
                    }
                    return;
                }
                this.pendingAuthRequests.push(details.requestId);
                if (this.isFirefox) {
                    return new Promise((resolve, reject) => webRequest_background_awaiter(this, void 0, void 0, function* () {
                        yield this.resolveAuthCredentials(details.url, resolve, reject);
                    }));
                }
                else {
                    yield this.resolveAuthCredentials(details.url, callback, callback);
                }
            }), { urls: ['http://*/*', 'https://*/*'] }, [this.isFirefox ? 'blocking' : 'asyncBlocking']);
            this.webRequest.onCompleted.addListener((details) => this.completeAuthRequest(details), { urls: ['http://*/*'] });
            this.webRequest.onErrorOccurred.addListener((details) => this.completeAuthRequest(details), { urls: ['http://*/*'] });
        });
    }
    resolveAuthCredentials(domain, success, error) {
        return webRequest_background_awaiter(this, void 0, void 0, function* () {
            if (yield this.vaultTimeoutService.isLocked()) {
                error();
                return;
            }
            try {
                const ciphers = yield this.cipherService.getAllDecryptedForUrl(domain, null, uriMatchType["a" /* UriMatchType */].Host);
                if (ciphers == null || ciphers.length !== 1) {
                    error();
                    return;
                }
                success({
                    authCredentials: {
                        username: ciphers[0].login.username,
                        password: ciphers[0].login.password,
                    },
                });
            }
            catch (_a) {
                error();
            }
        });
    }
    completeAuthRequest(details) {
        const i = this.pendingAuthRequests.indexOf(details.requestId);
        if (i > -1) {
            this.pendingAuthRequests.splice(i, 1);
        }
    }
}

// CONCATENATED MODULE: ./src/background/windows.background.ts
var windows_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class WindowsBackground {
    constructor(main) {
        this.main = main;
        this.windows = chrome.windows;
    }
    init() {
        return windows_background_awaiter(this, void 0, void 0, function* () {
            if (!this.windows) {
                return;
            }
            this.windows.onFocusChanged.addListener((windowId) => windows_background_awaiter(this, void 0, void 0, function* () {
                if (windowId === null || windowId < 0) {
                    return;
                }
                yield this.main.refreshBadgeAndMenu();
                this.main.messagingService.send('windowFocused');
                this.main.messagingService.send('windowChanged');
            }));
        });
    }
}

// EXTERNAL MODULE: ./src/popup/services/popup-utils.service.ts
var popup_utils_service = __webpack_require__(23);

// CONCATENATED MODULE: ./src/models/autofillScript.ts
class AutofillScript {
    constructor(documentUUID) {
        this.script = [];
        this.documentUUID = {};
        this.properties = {};
        this.options = {};
        this.metadata = {};
        this.autosubmit = null;
        this.documentUUID = documentUUID;
    }
}

// CONCATENATED MODULE: ./src/services/autofill.service.ts
var autofill_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const CardAttributes = ['autoCompleteType', 'data-stripe', 'htmlName', 'htmlID', 'label-tag',
    'placeholder', 'label-left', 'label-top', 'data-recurly'];
const CardAttributesExtended = [...CardAttributes, 'label-right'];
const IdentityAttributes = ['autoCompleteType', 'data-stripe', 'htmlName', 'htmlID', 'label-tag',
    'placeholder', 'label-left', 'label-top', 'data-recurly'];
const UsernameFieldNames = [
    // English
    'username', 'user name', 'email', 'email address', 'e-mail', 'e-mail address', 'userid', 'user id',
    'customer id', 'login id',
    // German
    'benutzername', 'benutzer name', 'email adresse', 'e-mail adresse', 'benutzerid', 'benutzer id'
];
const FirstnameFieldNames = [
    // English
    'f-name', 'first-name', 'given-name', 'first-n',
    // German
    'vorname',
];
const LastnameFieldNames = [
    // English
    'l-name', 'last-name', 's-name', 'surname', 'family-name', 'family-n', 'last-n',
    // German
    'nachname', 'familienname',
];
const ExcludedAutofillTypes = ['radio', 'checkbox', 'hidden', 'file', 'button', 'image', 'reset', 'search'];
// Each index represents a language. These three arrays should all be the same length.
// 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese
const MonthAbbr = ['mm', 'mm', 'mm', 'mm', 'mm', 'mm'];
const YearAbbrShort = ['yy', 'åå', 'jj', 'aa', 'гг', 'rr'];
const YearAbbrLong = ['yyyy', 'åååå', 'jjjj', 'aa', 'гггг', 'rrrr'];
const OperationDelays = new Map([
    ['buzzsprout.com', 100],
]);
/* tslint:disable */
const IsoCountries = {
    afghanistan: "AF", "aland islands": "AX", albania: "AL", algeria: "DZ", "american samoa": "AS", andorra: "AD",
    angola: "AO", anguilla: "AI", antarctica: "AQ", "antigua and barbuda": "AG", argentina: "AR", armenia: "AM",
    aruba: "AW", australia: "AU", austria: "AT", azerbaijan: "AZ", bahamas: "BS", bahrain: "BH", bangladesh: "BD",
    barbados: "BB", belarus: "BY", belgium: "BE", belize: "BZ", benin: "BJ", bermuda: "BM", bhutan: "BT",
    bolivia: "BO", "bosnia and herzegovina": "BA", botswana: "BW", "bouvet island": "BV", brazil: "BR",
    "british indian ocean territory": "IO", "brunei darussalam": "BN", bulgaria: "BG", "burkina faso": "BF",
    burundi: "BI", cambodia: "KH", cameroon: "CM", canada: "CA", "cape verde": "CV", "cayman islands": "KY",
    "central african republic": "CF", chad: "TD", chile: "CL", china: "CN", "christmas island": "CX",
    "cocos (keeling) islands": "CC", colombia: "CO", comoros: "KM", congo: "CG", "congo, democratic republic": "CD",
    "cook islands": "CK", "costa rica": "CR", "cote d'ivoire": "CI", croatia: "HR", cuba: "CU", cyprus: "CY",
    "czech republic": "CZ", denmark: "DK", djibouti: "DJ", dominica: "DM", "dominican republic": "DO", ecuador: "EC",
    egypt: "EG", "el salvador": "SV", "equatorial guinea": "GQ", eritrea: "ER", estonia: "EE", ethiopia: "ET",
    "falkland islands": "FK", "faroe islands": "FO", fiji: "FJ", finland: "FI", france: "FR", "french guiana": "GF",
    "french polynesia": "PF", "french southern territories": "TF", gabon: "GA", gambia: "GM", georgia: "GE",
    germany: "DE", ghana: "GH", gibraltar: "GI", greece: "GR", greenland: "GL", grenada: "GD", guadeloupe: "GP",
    guam: "GU", guatemala: "GT", guernsey: "GG", guinea: "GN", "guinea-bissau": "GW", guyana: "GY", haiti: "HT",
    "heard island & mcdonald islands": "HM", "holy see (vatican city state)": "VA", honduras: "HN", "hong kong": "HK",
    hungary: "HU", iceland: "IS", india: "IN", indonesia: "ID", "iran, islamic republic of": "IR", iraq: "IQ",
    ireland: "IE", "isle of man": "IM", israel: "IL", italy: "IT", jamaica: "JM", japan: "JP", jersey: "JE",
    jordan: "JO", kazakhstan: "KZ", kenya: "KE", kiribati: "KI", "republic of korea": "KR", "south korea": "KR",
    "democratic people's republic of korea": "KP", "north korea": "KP", kuwait: "KW", kyrgyzstan: "KG",
    "lao people's democratic republic": "LA", latvia: "LV", lebanon: "LB", lesotho: "LS", liberia: "LR",
    "libyan arab jamahiriya": "LY", liechtenstein: "LI", lithuania: "LT", luxembourg: "LU", macao: "MO",
    macedonia: "MK", madagascar: "MG", malawi: "MW", malaysia: "MY", maldives: "MV", mali: "ML", malta: "MT",
    "marshall islands": "MH", martinique: "MQ", mauritania: "MR", mauritius: "MU", mayotte: "YT", mexico: "MX",
    "micronesia, federated states of": "FM", moldova: "MD", monaco: "MC", mongolia: "MN", montenegro: "ME",
    montserrat: "MS", morocco: "MA", mozambique: "MZ", myanmar: "MM", namibia: "NA", nauru: "NR", nepal: "NP",
    netherlands: "NL", "netherlands antilles": "AN", "new caledonia": "NC", "new zealand": "NZ", nicaragua: "NI",
    niger: "NE", nigeria: "NG", niue: "NU", "norfolk island": "NF", "northern mariana islands": "MP", norway: "NO",
    oman: "OM", pakistan: "PK", palau: "PW", "palestinian territory, occupied": "PS", panama: "PA",
    "papua new guinea": "PG", paraguay: "PY", peru: "PE", philippines: "PH", pitcairn: "PN", poland: "PL",
    portugal: "PT", "puerto rico": "PR", qatar: "QA", reunion: "RE", romania: "RO", "russian federation": "RU",
    rwanda: "RW", "saint barthelemy": "BL", "saint helena": "SH", "saint kitts and nevis": "KN", "saint lucia": "LC",
    "saint martin": "MF", "saint pierre and miquelon": "PM", "saint vincent and grenadines": "VC", samoa: "WS",
    "san marino": "SM", "sao tome and principe": "ST", "saudi arabia": "SA", senegal: "SN", serbia: "RS",
    seychelles: "SC", "sierra leone": "SL", singapore: "SG", slovakia: "SK", slovenia: "SI", "solomon islands": "SB",
    somalia: "SO", "south africa": "ZA", "south georgia and sandwich isl.": "GS", spain: "ES", "sri lanka": "LK",
    sudan: "SD", suriname: "SR", "svalbard and jan mayen": "SJ", swaziland: "SZ", sweden: "SE", switzerland: "CH",
    "syrian arab republic": "SY", taiwan: "TW", tajikistan: "TJ", tanzania: "TZ", thailand: "TH", "timor-leste": "TL",
    togo: "TG", tokelau: "TK", tonga: "TO", "trinidad and tobago": "TT", tunisia: "TN", turkey: "TR",
    turkmenistan: "TM", "turks and caicos islands": "TC", tuvalu: "TV", uganda: "UG", ukraine: "UA",
    "united arab emirates": "AE", "united kingdom": "GB", "united states": "US",
    "united states outlying islands": "UM", uruguay: "UY", uzbekistan: "UZ", vanuatu: "VU", venezuela: "VE",
    vietnam: "VN", "virgin islands, british": "VG", "virgin islands, u.s.": "VI", "wallis and futuna": "WF",
    "western sahara": "EH", yemen: "YE", zambia: "ZM", zimbabwe: "ZW",
};
const IsoStates = {
    alabama: 'AL', alaska: 'AK', 'american samoa': 'AS', arizona: 'AZ', arkansas: 'AR', california: 'CA',
    colorado: 'CO', connecticut: 'CT', delaware: 'DE', 'district of columbia': 'DC',
    'federated states of micronesia': 'FM', florida: 'FL', georgia: 'GA', guam: 'GU', hawaii: 'HI', idaho: 'ID',
    illinois: 'IL', indiana: 'IN', iowa: 'IA', kansas: 'KS', kentucky: 'KY', louisiana: 'LA', maine: 'ME',
    'marshall islands': 'MH', maryland: 'MD', massachusetts: 'MA', michigan: 'MI', minnesota: 'MN', mississippi: 'MS',
    missouri: 'MO', montana: 'MT', nebraska: 'NE', nevada: 'NV', 'new hampshire': 'NH', 'new jersey': 'NJ',
    'new mexico': 'NM', 'new york': 'NY', 'north carolina': 'NC', 'north dakota': 'ND',
    'northern mariana islands': 'MP', ohio: 'OH', oklahoma: 'OK', oregon: 'OR', palau: 'PW', pennsylvania: 'PA',
    'puerto rico': 'PR', 'rhode island': 'RI', 'south carolina': 'SC', 'south dakota': 'SD', tennessee: 'TN',
    texas: 'TX', utah: 'UT', vermont: 'VT', 'virgin islands': 'VI', virginia: 'VA', washington: 'WA',
    'west virginia': 'WV', wisconsin: 'WI', wyoming: 'WY',
};
var IsoProvinces = {
    alberta: 'AB', 'british columbia': 'BC', manitoba: 'MB', 'new brunswick': 'NB', 'newfoundland and labrador': 'NL',
    'nova scotia': 'NS', ontario: 'ON', 'prince edward island': 'PE', quebec: 'QC', saskatchewan: 'SK',
};
/* tslint:enable */
class autofill_service_AutofillService {
    constructor(cipherService, userService, totpService, eventService, logService) {
        this.cipherService = cipherService;
        this.userService = userService;
        this.totpService = totpService;
        this.eventService = eventService;
        this.logService = logService;
    }
    getFormsWithPasswordFields(pageDetails) {
        const formData = [];
        const passwordFields = this.loadPasswordFields(pageDetails, true, true, false, false);
        if (passwordFields.length === 0) {
            return formData;
        }
        for (const formKey in pageDetails.forms) {
            if (!pageDetails.forms.hasOwnProperty(formKey)) {
                continue;
            }
            const formPasswordFields = passwordFields.filter(pf => formKey === pf.form);
            if (formPasswordFields.length > 0) {
                let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);
                if (uf == null) {
                    // not able to find any viewable username fields. maybe there are some "hidden" ones?
                    uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);
                }
                formData.push({
                    form: pageDetails.forms[formKey],
                    password: formPasswordFields[0],
                    username: uf,
                    passwords: formPasswordFields,
                });
            }
        }
        return formData;
    }
    doAutoFill(options) {
        return autofill_service_awaiter(this, void 0, void 0, function* () {
            let totpPromise = null;
            const tab = yield this.getActiveTab();
            if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {
                throw new Error('Nothing to auto-fill.');
            }
            const canAccessPremium = yield this.userService.canAccessPremium();
            let didAutofill = false;
            options.pageDetails.forEach((pd) => {
                // make sure we're still on correct tab
                if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {
                    return;
                }
                const fillScript = this.generateFillScript(pd.details, {
                    skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,
                    onlyEmptyFields: options.onlyEmptyFields || false,
                    onlyVisibleFields: options.onlyVisibleFields || false,
                    fillNewPassword: options.fillNewPassword || false,
                    cipher: options.cipher,
                });
                if (!fillScript || !fillScript.script || !fillScript.script.length) {
                    return;
                }
                // Add a small delay between operations
                fillScript.properties.delay_between_operations = 20;
                didAutofill = true;
                if (!options.skipLastUsed) {
                    this.cipherService.updateLastUsedDate(options.cipher.id);
                }
                browserApi["a" /* BrowserApi */].tabSendMessage(tab, {
                    command: 'fillForm',
                    fillScript: fillScript,
                    url: tab.url,
                }, { frameId: pd.frameId });
                if (options.cipher.type !== cipherType["a" /* CipherType */].Login || totpPromise || !options.cipher.login.totp ||
                    (!canAccessPremium && !options.cipher.organizationUseTotp)) {
                    return;
                }
                totpPromise = this.totpService.isAutoCopyEnabled().then(enabled => {
                    if (enabled) {
                        return this.totpService.getCode(options.cipher.login.totp);
                    }
                    return null;
                });
            });
            if (didAutofill) {
                this.eventService.collect(enums_eventType["a" /* EventType */].Cipher_ClientAutofilled, options.cipher.id);
                if (totpPromise != null) {
                    return yield totpPromise;
                }
                else {
                    return null;
                }
            }
            else {
                throw new Error('Did not auto-fill.');
            }
        });
    }
    doAutoFillActiveTab(pageDetails, fromCommand) {
        var _a, _b;
        return autofill_service_awaiter(this, void 0, void 0, function* () {
            const tab = yield this.getActiveTab();
            if (!tab || !tab.url) {
                return;
            }
            let cipher;
            if (fromCommand) {
                cipher = yield this.cipherService.getNextCipherForUrl(tab.url);
            }
            else {
                const lastLaunchedCipher = yield this.cipherService.getLastLaunchedForUrl(tab.url, true);
                if (lastLaunchedCipher && Date.now().valueOf() - ((_b = (_a = lastLaunchedCipher.localData) === null || _a === void 0 ? void 0 : _a.lastLaunched) === null || _b === void 0 ? void 0 : _b.valueOf()) < 30000) {
                    cipher = lastLaunchedCipher;
                }
                else {
                    cipher = yield this.cipherService.getLastUsedForUrl(tab.url, true);
                }
                if (cipher == null) {
                    return null;
                }
            }
            if (cipher.reprompt !== cipherRepromptType["a" /* CipherRepromptType */].None) {
                return;
            }
            const totpCode = yield this.doAutoFill({
                cipher: cipher,
                pageDetails: pageDetails,
                skipLastUsed: !fromCommand,
                skipUsernameOnlyFill: !fromCommand,
                onlyEmptyFields: !fromCommand,
                onlyVisibleFields: !fromCommand,
                fillNewPassword: fromCommand,
            });
            // Update last used index as autofill has succeed
            if (fromCommand) {
                this.cipherService.updateLastUsedIndexForUrl(tab.url);
            }
            return totpCode;
        });
    }
    // Helpers
    getActiveTab() {
        return autofill_service_awaiter(this, void 0, void 0, function* () {
            const tab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindow();
            if (!tab) {
                throw new Error('No tab found.');
            }
            return tab;
        });
    }
    generateFillScript(pageDetails, options) {
        if (!pageDetails || !options.cipher) {
            return null;
        }
        let fillScript = new AutofillScript(pageDetails.documentUUID);
        const filledFields = {};
        const fields = options.cipher.fields;
        if (fields && fields.length) {
            const fieldNames = [];
            fields.forEach((f) => {
                if (this.hasValue(f.name)) {
                    fieldNames.push(f.name.toLowerCase());
                }
            });
            pageDetails.fields.forEach((field) => {
                if (filledFields.hasOwnProperty(field.opid)) {
                    return;
                }
                if (!field.viewable && field.tagName !== 'span') {
                    return;
                }
                const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);
                if (matchingIndex > -1) {
                    const matchingField = fields[matchingIndex];
                    let val;
                    if (matchingField.type === fieldType["a" /* FieldType */].Linked) {
                        // Assumption: Linked Field is not being used to autofill a boolean value
                        val = options.cipher.linkedFieldValue(matchingField.linkedId);
                    }
                    else {
                        val = matchingField.value;
                        if (val == null && matchingField.type === fieldType["a" /* FieldType */].Boolean) {
                            val = 'false';
                        }
                    }
                    filledFields[field.opid] = field;
                    this.fillByOpid(fillScript, field, val);
                }
            });
        }
        switch (options.cipher.type) {
            case cipherType["a" /* CipherType */].Login:
                fillScript = this.generateLoginFillScript(fillScript, pageDetails, filledFields, options);
                break;
            case cipherType["a" /* CipherType */].Card:
                fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);
                break;
            case cipherType["a" /* CipherType */].Identity:
                fillScript = this.generateIdentityFillScript(fillScript, pageDetails, filledFields, options);
                break;
            default:
                return null;
        }
        return fillScript;
    }
    generateLoginFillScript(fillScript, pageDetails, filledFields, options) {
        if (!options.cipher.login) {
            return null;
        }
        const passwords = [];
        const usernames = [];
        let pf = null;
        let username = null;
        const login = options.cipher.login;
        if (!login.password || login.password === '') {
            // No password for this login. Maybe they just wanted to auto-fill some custom fields?
            fillScript = this.setFillScriptForFocus(filledFields, fillScript);
            return fillScript;
        }
        let passwordFields = this.loadPasswordFields(pageDetails, false, false, options.onlyEmptyFields, options.fillNewPassword);
        if (!passwordFields.length && !options.onlyVisibleFields) {
            // not able to find any viewable password fields. maybe there are some "hidden" ones?
            passwordFields = this.loadPasswordFields(pageDetails, true, true, options.onlyEmptyFields, options.fillNewPassword);
        }
        for (const formKey in pageDetails.forms) {
            if (!pageDetails.forms.hasOwnProperty(formKey)) {
                continue;
            }
            const passwordFieldsForForm = [];
            passwordFields.forEach(passField => {
                if (formKey === passField.form) {
                    passwordFieldsForForm.push(passField);
                }
            });
            passwordFields.forEach(passField => {
                pf = passField;
                passwords.push(pf);
                if (login.username) {
                    username = this.findUsernameField(pageDetails, pf, false, false, false);
                    if (!username && !options.onlyVisibleFields) {
                        // not able to find any viewable username fields. maybe there are some "hidden" ones?
                        username = this.findUsernameField(pageDetails, pf, true, true, false);
                    }
                    if (username) {
                        usernames.push(username);
                    }
                }
            });
        }
        if (passwordFields.length && !passwords.length) {
            // The page does not have any forms with password fields. Use the first password field on the page and the
            // input field just before it as the username.
            pf = passwordFields[0];
            passwords.push(pf);
            if (login.username && pf.elementNumber > 0) {
                username = this.findUsernameField(pageDetails, pf, false, false, true);
                if (!username && !options.onlyVisibleFields) {
                    // not able to find any viewable username fields. maybe there are some "hidden" ones?
                    username = this.findUsernameField(pageDetails, pf, true, true, true);
                }
                if (username) {
                    usernames.push(username);
                }
            }
        }
        if (!passwordFields.length && !options.skipUsernameOnlyFill) {
            // No password fields on this page. Let's try to just fuzzy fill the username.
            pageDetails.fields.forEach((f) => {
                if (f.viewable && (f.type === 'text' || f.type === 'email' || f.type === 'tel') &&
                    this.fieldIsFuzzyMatch(f, UsernameFieldNames)) {
                    usernames.push(f);
                }
            });
        }
        usernames.forEach(u => {
            if (filledFields.hasOwnProperty(u.opid)) {
                return;
            }
            filledFields[u.opid] = u;
            this.fillByOpid(fillScript, u, login.username);
        });
        passwords.forEach(p => {
            if (filledFields.hasOwnProperty(p.opid)) {
                return;
            }
            filledFields[p.opid] = p;
            this.fillByOpid(fillScript, p, login.password);
        });
        fillScript = this.setFillScriptForFocus(filledFields, fillScript);
        return fillScript;
    }
    generateCardFillScript(fillScript, pageDetails, filledFields, options) {
        if (!options.cipher.card) {
            return null;
        }
        const fillFields = {};
        pageDetails.fields.forEach((f) => {
            if (this.forCustomFieldsOnly(f)) {
                return;
            }
            if (this.isExcludedType(f.type, ExcludedAutofillTypes)) {
                return;
            }
            for (let i = 0; i < CardAttributes.length; i++) {
                const attr = CardAttributes[i];
                if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {
                    continue;
                }
                // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/
                if (!fillFields.cardholderName && this.isFieldMatch(f[attr], ['cc-name', 'card-name', 'cardholder-name', 'cardholder', 'name', 'nom'], ['cc-name', 'card-name', 'cardholder-name', 'cardholder', 'tbName'])) {
                    fillFields.cardholderName = f;
                    break;
                }
                else if (!fillFields.number && this.isFieldMatch(f[attr], ['cc-number', 'cc-num', 'card-number', 'card-num', 'number', 'cc', 'cc-no', 'card-no',
                    'credit-card', 'numero-carte', 'carte', 'carte-credit', 'num-carte', 'cb-num'], ['cc-number', 'cc-num', 'card-number', 'card-num', 'cc-no', 'card-no', 'numero-carte',
                    'num-carte', 'cb-num'])) {
                    fillFields.number = f;
                    break;
                }
                else if (!fillFields.exp && this.isFieldMatch(f[attr], ['cc-exp', 'card-exp', 'cc-expiration', 'card-expiration', 'cc-ex', 'card-ex',
                    'card-expire', 'card-expiry', 'validite', 'expiration', 'expiry', 'mm-yy',
                    'mm-yyyy', 'yy-mm', 'yyyy-mm', 'expiration-date', 'payment-card-expiration',
                    'payment-cc-date'], ['mm-yy', 'mm-yyyy', 'yy-mm', 'yyyy-mm', 'expiration-date',
                    'payment-card-expiration'])) {
                    fillFields.exp = f;
                    break;
                }
                else if (!fillFields.expMonth && this.isFieldMatch(f[attr], ['exp-month', 'cc-exp-month', 'cc-month', 'card-month', 'cc-mo', 'card-mo', 'exp-mo',
                    'card-exp-mo', 'cc-exp-mo', 'card-expiration-month', 'expiration-month',
                    'cc-mm', 'cc-m', 'card-mm', 'card-m', 'card-exp-mm', 'cc-exp-mm', 'exp-mm', 'exp-m',
                    'expire-month', 'expire-mo', 'expiry-month', 'expiry-mo', 'card-expire-month',
                    'card-expire-mo', 'card-expiry-month', 'card-expiry-mo', 'mois-validite',
                    'mois-expiration', 'm-validite', 'm-expiration', 'expiry-date-field-month',
                    'expiration-date-month', 'expiration-date-mm', 'exp-mon', 'validity-mo',
                    'exp-date-mo', 'cb-date-mois', 'date-m'])) {
                    fillFields.expMonth = f;
                    break;
                }
                else if (!fillFields.expYear && this.isFieldMatch(f[attr], ['exp-year', 'cc-exp-year', 'cc-year', 'card-year', 'cc-yr', 'card-yr', 'exp-yr',
                    'card-exp-yr', 'cc-exp-yr', 'card-expiration-year', 'expiration-year',
                    'cc-yy', 'cc-y', 'card-yy', 'card-y', 'card-exp-yy', 'cc-exp-yy', 'exp-yy', 'exp-y',
                    'cc-yyyy', 'card-yyyy', 'card-exp-yyyy', 'cc-exp-yyyy', 'expire-year', 'expire-yr',
                    'expiry-year', 'expiry-yr', 'card-expire-year', 'card-expire-yr', 'card-expiry-year',
                    'card-expiry-yr', 'an-validite', 'an-expiration', 'annee-validite',
                    'annee-expiration', 'expiry-date-field-year', 'expiration-date-year', 'cb-date-ann',
                    'expiration-date-yy', 'expiration-date-yyyy', 'validity-year', 'exp-date-year', 'date-y'])) {
                    fillFields.expYear = f;
                    break;
                }
                else if (!fillFields.code && this.isFieldMatch(f[attr], ['cvv', 'cvc', 'cvv2', 'cc-csc', 'cc-cvv', 'card-csc', 'card-cvv', 'cvd', 'cid', 'cvc2',
                    'cnv', 'cvn2', 'cc-code', 'card-code', 'code-securite', 'security-code', 'crypto',
                    'card-verif', 'verification-code', 'csc', 'ccv'])) {
                    fillFields.code = f;
                    break;
                }
                else if (!fillFields.brand && this.isFieldMatch(f[attr], ['cc-type', 'card-type', 'card-brand', 'cc-brand', 'cb-type'])) {
                    fillFields.brand = f;
                    break;
                }
            }
        });
        const card = options.cipher.card;
        this.makeScriptAction(fillScript, card, fillFields, filledFields, 'cardholderName');
        this.makeScriptAction(fillScript, card, fillFields, filledFields, 'number');
        this.makeScriptAction(fillScript, card, fillFields, filledFields, 'code');
        this.makeScriptAction(fillScript, card, fillFields, filledFields, 'brand');
        if (fillFields.expMonth && this.hasValue(card.expMonth)) {
            let expMonth = card.expMonth;
            if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {
                let index = null;
                const siOptions = fillFields.expMonth.selectInfo.options;
                if (siOptions.length === 12) {
                    index = parseInt(card.expMonth, null) - 1;
                }
                else if (siOptions.length === 13) {
                    if (siOptions[0][0] != null && siOptions[0][0] !== '' &&
                        (siOptions[12][0] == null || siOptions[12][0] === '')) {
                        index = parseInt(card.expMonth, null) - 1;
                    }
                    else {
                        index = parseInt(card.expMonth, null);
                    }
                }
                if (index != null) {
                    const option = siOptions[index];
                    if (option.length > 1) {
                        expMonth = option[1];
                    }
                }
            }
            else if ((this.fieldAttrsContain(fillFields.expMonth, 'mm') || fillFields.expMonth.maxLength === 2)
                && expMonth.length === 1) {
                expMonth = '0' + expMonth;
            }
            filledFields[fillFields.expMonth.opid] = fillFields.expMonth;
            this.fillByOpid(fillScript, fillFields.expMonth, expMonth);
        }
        if (fillFields.expYear && this.hasValue(card.expYear)) {
            let expYear = card.expYear;
            if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {
                for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {
                    const o = fillFields.expYear.selectInfo.options[i];
                    if (o[0] === card.expYear || o[1] === card.expYear) {
                        expYear = o[1];
                        break;
                    }
                    if (o[1].length === 2 && card.expYear.length === 4 && o[1] === card.expYear.substring(2)) {
                        expYear = o[1];
                        break;
                    }
                    const colonIndex = o[1].indexOf(':');
                    if (colonIndex > -1 && o[1].length > colonIndex + 1) {
                        const val = o[1].substring(colonIndex + 2);
                        if (val != null && val.trim() !== '' && val === card.expYear) {
                            expYear = o[1];
                            break;
                        }
                    }
                }
            }
            else if (this.fieldAttrsContain(fillFields.expYear, 'yyyy') || fillFields.expYear.maxLength === 4) {
                if (expYear.length === 2) {
                    expYear = '20' + expYear;
                }
            }
            else if (this.fieldAttrsContain(fillFields.expYear, 'yy') || fillFields.expYear.maxLength === 2) {
                if (expYear.length === 4) {
                    expYear = expYear.substr(2);
                }
            }
            filledFields[fillFields.expYear.opid] = fillFields.expYear;
            this.fillByOpid(fillScript, fillFields.expYear, expYear);
        }
        if (fillFields.exp && this.hasValue(card.expMonth) && this.hasValue(card.expYear)) {
            const fullMonth = ('0' + card.expMonth).slice(-2);
            let fullYear = card.expYear;
            let partYear = null;
            if (fullYear.length === 2) {
                partYear = fullYear;
                fullYear = '20' + fullYear;
            }
            else if (fullYear.length === 4) {
                partYear = fullYear.substr(2, 2);
            }
            let exp = null;
            for (let i = 0; i < MonthAbbr.length; i++) {
                if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + '/' + YearAbbrShort[i]) &&
                    partYear != null) {
                    exp = fullMonth + '/' + partYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + '/' + YearAbbrLong[i])) {
                    exp = fullMonth + '/' + fullYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrShort[i] + '/' + MonthAbbr[i]) &&
                    partYear != null) {
                    exp = partYear + '/' + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrLong[i] + '/' + MonthAbbr[i])) {
                    exp = fullYear + '/' + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + '-' + YearAbbrShort[i]) &&
                    partYear != null) {
                    exp = fullMonth + '-' + partYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + '-' + YearAbbrLong[i])) {
                    exp = fullMonth + '-' + fullYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrShort[i] + '-' + MonthAbbr[i]) &&
                    partYear != null) {
                    exp = partYear + '-' + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrLong[i] + '-' + MonthAbbr[i])) {
                    exp = fullYear + '-' + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrShort[i] + MonthAbbr[i]) &&
                    partYear != null) {
                    exp = partYear + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrLong[i] + MonthAbbr[i])) {
                    exp = fullYear + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + YearAbbrShort[i]) &&
                    partYear != null) {
                    exp = fullMonth + partYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + YearAbbrLong[i])) {
                    exp = fullMonth + fullYear;
                }
                if (exp != null) {
                    break;
                }
            }
            if (exp == null) {
                exp = fullYear + '-' + fullMonth;
            }
            this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);
        }
        return fillScript;
    }
    fieldAttrsContain(field, containsVal) {
        if (!field) {
            return false;
        }
        let doesContain = false;
        CardAttributesExtended.forEach(attr => {
            if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {
                return;
            }
            let val = field[attr];
            val = val.replace(/ /g, '').toLowerCase();
            doesContain = val.indexOf(containsVal) > -1;
        });
        return doesContain;
    }
    generateIdentityFillScript(fillScript, pageDetails, filledFields, options) {
        if (!options.cipher.identity) {
            return null;
        }
        const fillFields = {};
        pageDetails.fields.forEach((f) => {
            if (this.forCustomFieldsOnly(f)) {
                return;
            }
            if (this.isExcludedType(f.type, ExcludedAutofillTypes)) {
                return;
            }
            for (let i = 0; i < IdentityAttributes.length; i++) {
                const attr = IdentityAttributes[i];
                if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {
                    continue;
                }
                // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/
                if (!fillFields.name && this.isFieldMatch(f[attr], ['name', 'full-name', 'your-name'], ['full-name', 'your-name'])) {
                    fillFields.name = f;
                    break;
                }
                else if (!fillFields.firstName && this.isFieldMatch(f[attr], FirstnameFieldNames)) {
                    fillFields.firstName = f;
                    break;
                }
                else if (!fillFields.middleName && this.isFieldMatch(f[attr], ['m-name', 'middle-name', 'additional-name', 'middle-initial', 'middle-n', 'middle-i'])) {
                    fillFields.middleName = f;
                    break;
                }
                else if (!fillFields.lastName && this.isFieldMatch(f[attr], LastnameFieldNames)) {
                    fillFields.lastName = f;
                    break;
                }
                else if (!fillFields.title && this.isFieldMatch(f[attr], ['honorific-prefix', 'prefix', 'title'])) {
                    fillFields.title = f;
                    break;
                }
                else if (!fillFields.email && this.isFieldMatch(f[attr], ['e-mail', 'email-address'])) {
                    fillFields.email = f;
                    break;
                }
                else if (!fillFields.address && this.isFieldMatch(f[attr], ['address', 'street-address', 'addr', 'street', 'mailing-addr', 'billing-addr',
                    'mail-addr', 'bill-addr'], ['mailing-addr', 'billing-addr', 'mail-addr', 'bill-addr'])) {
                    fillFields.address = f;
                    break;
                }
                else if (!fillFields.address1 && this.isFieldMatch(f[attr], ['address-1', 'address-line-1', 'addr-1', 'street-1'])) {
                    fillFields.address1 = f;
                    break;
                }
                else if (!fillFields.address2 && this.isFieldMatch(f[attr], ['address-2', 'address-line-2', 'addr-2', 'street-2'])) {
                    fillFields.address2 = f;
                    break;
                }
                else if (!fillFields.address3 && this.isFieldMatch(f[attr], ['address-3', 'address-line-3', 'addr-3', 'street-3'])) {
                    fillFields.address3 = f;
                    break;
                }
                else if (!fillFields.postalCode && this.isFieldMatch(f[attr], ['postal', 'zip', 'zip2', 'zip-code', 'postal-code', 'post-code', 'address-zip',
                    'address-postal', 'address-code', 'address-postal-code', 'address-zip-code'])) {
                    fillFields.postalCode = f;
                    break;
                }
                else if (!fillFields.city && this.isFieldMatch(f[attr], ['city', 'town', 'address-level-2', 'address-city', 'address-town'])) {
                    fillFields.city = f;
                    break;
                }
                else if (!fillFields.state && this.isFieldMatch(f[attr], ['state', 'province', 'provence', 'address-level-1', 'address-state',
                    'address-province'])) {
                    fillFields.state = f;
                    break;
                }
                else if (!fillFields.country && this.isFieldMatch(f[attr], ['country', 'country-code', 'country-name', 'address-country', 'address-country-name',
                    'address-country-code'])) {
                    fillFields.country = f;
                    break;
                }
                else if (!fillFields.phone && this.isFieldMatch(f[attr], ['phone', 'mobile', 'mobile-phone', 'tel', 'telephone', 'phone-number'])) {
                    fillFields.phone = f;
                    break;
                }
                else if (!fillFields.username && this.isFieldMatch(f[attr], ['user-name', 'user-id', 'screen-name'])) {
                    fillFields.username = f;
                    break;
                }
                else if (!fillFields.company && this.isFieldMatch(f[attr], ['company', 'company-name', 'organization', 'organization-name'])) {
                    fillFields.company = f;
                    break;
                }
            }
        });
        const identity = options.cipher.identity;
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'title');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'firstName');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'middleName');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'lastName');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'address1');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'address2');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'address3');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'city');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'postalCode');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'company');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'email');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'phone');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'username');
        let filledState = false;
        if (fillFields.state && identity.state && identity.state.length > 2) {
            const stateLower = identity.state.toLowerCase();
            const isoState = IsoStates[stateLower] || IsoProvinces[stateLower];
            if (isoState) {
                filledState = true;
                this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);
            }
        }
        if (!filledState) {
            this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'state');
        }
        let filledCountry = false;
        if (fillFields.country && identity.country && identity.country.length > 2) {
            const countryLower = identity.country.toLowerCase();
            const isoCountry = IsoCountries[countryLower];
            if (isoCountry) {
                filledCountry = true;
                this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);
            }
        }
        if (!filledCountry) {
            this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'country');
        }
        if (fillFields.name && (identity.firstName || identity.lastName)) {
            let fullName = '';
            if (this.hasValue(identity.firstName)) {
                fullName = identity.firstName;
            }
            if (this.hasValue(identity.middleName)) {
                if (fullName !== '') {
                    fullName += ' ';
                }
                fullName += identity.middleName;
            }
            if (this.hasValue(identity.lastName)) {
                if (fullName !== '') {
                    fullName += ' ';
                }
                fullName += identity.lastName;
            }
            this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);
        }
        if (fillFields.address && this.hasValue(identity.address1)) {
            let address = '';
            if (this.hasValue(identity.address1)) {
                address = identity.address1;
            }
            if (this.hasValue(identity.address2)) {
                if (address !== '') {
                    address += ', ';
                }
                address += identity.address2;
            }
            if (this.hasValue(identity.address3)) {
                if (address !== '') {
                    address += ', ';
                }
                address += identity.address3;
            }
            this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);
        }
        return fillScript;
    }
    isExcludedType(type, excludedTypes) {
        return excludedTypes.indexOf(type) > -1;
    }
    isFieldMatch(value, options, containsOptions) {
        value = value.trim().toLowerCase().replace(/[^a-zA-Z0-9]+/g, '');
        for (let i = 0; i < options.length; i++) {
            let option = options[i];
            const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;
            option = option.toLowerCase().replace(/-/g, '');
            if (value === option || (checkValueContains && value.indexOf(option) > -1)) {
                return true;
            }
        }
        return false;
    }
    makeScriptAction(fillScript, cipherData, fillFields, filledFields, dataProp, fieldProp) {
        fieldProp = fieldProp || dataProp;
        this.makeScriptActionWithValue(fillScript, cipherData[dataProp], fillFields[fieldProp], filledFields);
    }
    makeScriptActionWithValue(fillScript, dataValue, field, filledFields) {
        let doFill = false;
        if (this.hasValue(dataValue) && field) {
            if (field.type === 'select-one' && field.selectInfo && field.selectInfo.options) {
                for (let i = 0; i < field.selectInfo.options.length; i++) {
                    const option = field.selectInfo.options[i];
                    for (let j = 0; j < option.length; j++) {
                        if (this.hasValue(option[j]) && option[j].toLowerCase() === dataValue.toLowerCase()) {
                            doFill = true;
                            if (option.length > 1) {
                                dataValue = option[1];
                            }
                            break;
                        }
                    }
                    if (doFill) {
                        break;
                    }
                }
            }
            else {
                doFill = true;
            }
        }
        if (doFill) {
            filledFields[field.opid] = field;
            this.fillByOpid(fillScript, field, dataValue);
        }
    }
    loadPasswordFields(pageDetails, canBeHidden, canBeReadOnly, mustBeEmpty, fillNewPassword) {
        const arr = [];
        pageDetails.fields.forEach(f => {
            if (this.forCustomFieldsOnly(f)) {
                return;
            }
            const isPassword = f.type === 'password';
            const valueIsLikePassword = (value) => {
                if (value == null) {
                    return false;
                }
                // Removes all whitespace, _ and - characters
                const cleanedValue = value.toLowerCase().replace(/[\s_\-]/g, '');
                if (cleanedValue.indexOf('password') < 0) {
                    return false;
                }
                const ignoreList = ['onetimepassword', 'captcha', 'findanything', 'forgot'];
                if (ignoreList.some(i => cleanedValue.indexOf(i) > -1)) {
                    return false;
                }
                return true;
            };
            const isLikePassword = () => {
                if (f.type !== 'text') {
                    return false;
                }
                if (valueIsLikePassword(f.htmlID)) {
                    return true;
                }
                if (valueIsLikePassword(f.htmlName)) {
                    return true;
                }
                if (valueIsLikePassword(f.placeholder)) {
                    return true;
                }
                return false;
            };
            if (!f.disabled && (canBeReadOnly || !f.readonly) && (isPassword || isLikePassword())
                && (canBeHidden || f.viewable) && (!mustBeEmpty || f.value == null || f.value.trim() === '')
                && (fillNewPassword || f.autoCompleteType !== 'new-password')) {
                arr.push(f);
            }
        });
        return arr;
    }
    findUsernameField(pageDetails, passwordField, canBeHidden, canBeReadOnly, withoutForm) {
        let usernameField = null;
        for (let i = 0; i < pageDetails.fields.length; i++) {
            const f = pageDetails.fields[i];
            if (this.forCustomFieldsOnly(f)) {
                continue;
            }
            if (f.elementNumber >= passwordField.elementNumber) {
                break;
            }
            if (!f.disabled && (canBeReadOnly || !f.readonly) &&
                (withoutForm || f.form === passwordField.form) && (canBeHidden || f.viewable) &&
                (f.type === 'text' || f.type === 'email' || f.type === 'tel')) {
                usernameField = f;
                if (this.findMatchingFieldIndex(f, UsernameFieldNames) > -1) {
                    // We found an exact match. No need to keep looking.
                    break;
                }
            }
        }
        return usernameField;
    }
    findMatchingFieldIndex(field, names) {
        for (let i = 0; i < names.length; i++) {
            if (names[i].indexOf('=') > -1) {
                if (this.fieldPropertyIsPrefixMatch(field, 'htmlID', names[i], 'id')) {
                    return i;
                }
                if (this.fieldPropertyIsPrefixMatch(field, 'htmlName', names[i], 'name')) {
                    return i;
                }
                if (this.fieldPropertyIsPrefixMatch(field, 'label-tag', names[i], 'label')) {
                    return i;
                }
                if (this.fieldPropertyIsPrefixMatch(field, 'label-aria', names[i], 'label')) {
                    return i;
                }
                if (this.fieldPropertyIsPrefixMatch(field, 'placeholder', names[i], 'placeholder')) {
                    return i;
                }
            }
            if (this.fieldPropertyIsMatch(field, 'htmlID', names[i])) {
                return i;
            }
            if (this.fieldPropertyIsMatch(field, 'htmlName', names[i])) {
                return i;
            }
            if (this.fieldPropertyIsMatch(field, 'label-tag', names[i])) {
                return i;
            }
            if (this.fieldPropertyIsMatch(field, 'label-aria', names[i])) {
                return i;
            }
            if (this.fieldPropertyIsMatch(field, 'placeholder', names[i])) {
                return i;
            }
        }
        return -1;
    }
    fieldPropertyIsPrefixMatch(field, property, name, prefix, separator = '=') {
        if (name.indexOf(prefix + separator) === 0) {
            const sepIndex = name.indexOf(separator);
            const val = name.substring(sepIndex + 1);
            return val != null && this.fieldPropertyIsMatch(field, property, val);
        }
        return false;
    }
    fieldPropertyIsMatch(field, property, name) {
        let fieldVal = field[property];
        if (!this.hasValue(fieldVal)) {
            return false;
        }
        fieldVal = fieldVal.trim().replace(/(?:\r\n|\r|\n)/g, '');
        if (name.startsWith('regex=')) {
            try {
                const regexParts = name.split('=', 2);
                if (regexParts.length === 2) {
                    const regex = new RegExp(regexParts[1], 'i');
                    return regex.test(fieldVal);
                }
            }
            catch (e) {
                this.logService.error(e);
            }
        }
        else if (name.startsWith('csv=')) {
            const csvParts = name.split('=', 2);
            if (csvParts.length === 2) {
                const csvVals = csvParts[1].split(',');
                for (let i = 0; i < csvVals.length; i++) {
                    const val = csvVals[i];
                    if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {
                        return true;
                    }
                }
                return false;
            }
        }
        return fieldVal.toLowerCase() === name;
    }
    fieldIsFuzzyMatch(field, names) {
        if (this.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {
            return true;
        }
        if (this.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {
            return true;
        }
        if (this.hasValue(field['label-tag']) && this.fuzzyMatch(names, field['label-tag'])) {
            return true;
        }
        if (this.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {
            return true;
        }
        if (this.hasValue(field['label-left']) && this.fuzzyMatch(names, field['label-left'])) {
            return true;
        }
        if (this.hasValue(field['label-top']) && this.fuzzyMatch(names, field['label-top'])) {
            return true;
        }
        if (this.hasValue(field['label-aria']) && this.fuzzyMatch(names, field['label-aria'])) {
            return true;
        }
        return false;
    }
    fuzzyMatch(options, value) {
        if (options == null || options.length === 0 || value == null || value === '') {
            return false;
        }
        value = value.replace(/(?:\r\n|\r|\n)/g, '').trim().toLowerCase();
        for (let i = 0; i < options.length; i++) {
            if (value.indexOf(options[i]) > -1) {
                return true;
            }
        }
        return false;
    }
    hasValue(str) {
        return str && str !== '';
    }
    setFillScriptForFocus(filledFields, fillScript) {
        let lastField = null;
        let lastPasswordField = null;
        for (const opid in filledFields) {
            if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {
                lastField = filledFields[opid];
                if (filledFields[opid].type === 'password') {
                    lastPasswordField = filledFields[opid];
                }
            }
        }
        // Prioritize password field over others.
        if (lastPasswordField) {
            fillScript.script.push(['focus_by_opid', lastPasswordField.opid]);
        }
        else if (lastField) {
            fillScript.script.push(['focus_by_opid', lastField.opid]);
        }
        return fillScript;
    }
    fillByOpid(fillScript, field, value) {
        if (field.maxLength && value && value.length > field.maxLength) {
            value = value.substr(0, value.length);
        }
        if (field.tagName !== 'span') {
            fillScript.script.push(['click_on_opid', field.opid]);
            fillScript.script.push(['focus_by_opid', field.opid]);
        }
        fillScript.script.push(['fill_by_opid', field.opid, value]);
    }
    forCustomFieldsOnly(field) {
        return field.tagName === 'span';
    }
}

// EXTERNAL MODULE: ./node_modules/big-integer/BigInteger.js
var BigInteger = __webpack_require__(472);

// EXTERNAL MODULE: ./jslib/common/src/enums/encryptionType.ts
var encryptionType = __webpack_require__(28);

// EXTERNAL MODULE: ./jslib/common/src/enums/hashPurpose.ts
var enums_hashPurpose = __webpack_require__(81);

// EXTERNAL MODULE: ./jslib/common/src/enums/kdfType.ts
var kdfType = __webpack_require__(171);

// CONCATENATED MODULE: ./jslib/common/src/models/domain/encArrayBuffer.ts
class EncArrayBuffer {
    constructor(buffer) {
        this.buffer = buffer;
    }
}

// CONCATENATED MODULE: ./jslib/common/src/models/domain/encryptedObject.ts
class EncryptedObject {
}

// EXTERNAL MODULE: ./jslib/common/src/misc/sequentialize.ts
var sequentialize = __webpack_require__(195);

// CONCATENATED MODULE: ./jslib/common/src/services/crypto.service.ts
var crypto_service_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var crypto_service_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var crypto_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};












const crypto_service_Keys = {
    key: 'key',
    encOrgKeys: 'encOrgKeys',
    encProviderKeys: 'encProviderKeys',
    encPrivateKey: 'encPrivateKey',
    encKey: 'encKey',
    keyHash: 'keyHash',
};
class crypto_service_CryptoService {
    constructor(storageService, secureStorageService, cryptoFunctionService, platformUtilService, logService) {
        this.storageService = storageService;
        this.secureStorageService = secureStorageService;
        this.cryptoFunctionService = cryptoFunctionService;
        this.platformUtilService = platformUtilService;
        this.logService = logService;
    }
    setKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            this.key = key;
            yield this.storeKey(key);
        });
    }
    setKeyHash(keyHash) {
        this.keyHash = keyHash;
        return this.storageService.save(crypto_service_Keys.keyHash, keyHash);
    }
    setEncKey(encKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (encKey == null) {
                return;
            }
            yield this.storageService.save(crypto_service_Keys.encKey, encKey);
            this.encKey = null;
        });
    }
    setEncPrivateKey(encPrivateKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (encPrivateKey == null) {
                return;
            }
            yield this.storageService.save(crypto_service_Keys.encPrivateKey, encPrivateKey);
            this.privateKey = null;
        });
    }
    setOrgKeys(orgs, providerOrgs) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const orgKeys = {};
            orgs.forEach(org => {
                orgKeys[org.id] = org.key;
            });
            for (const providerOrg of providerOrgs) {
                // Convert provider encrypted keys to user encrypted.
                const providerKey = yield this.getProviderKey(providerOrg.providerId);
                const decValue = yield this.decryptToBytes(new domain_encString["a" /* EncString */](providerOrg.key), providerKey);
                orgKeys[providerOrg.id] = yield (yield this.rsaEncrypt(decValue)).encryptedString;
            }
            this.orgKeys = null;
            return this.storageService.save(crypto_service_Keys.encOrgKeys, orgKeys);
        });
    }
    setProviderKeys(providers) {
        const providerKeys = {};
        providers.forEach(provider => {
            providerKeys[provider.id] = provider.key;
        });
        this.providerKeys = null;
        return this.storageService.save(crypto_service_Keys.encProviderKeys, providerKeys);
    }
    getKey(keySuffix) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.key != null) {
                return this.key;
            }
            keySuffix || (keySuffix = 'auto');
            const symmetricKey = yield this.getKeyFromStorage(keySuffix);
            if (symmetricKey != null) {
                this.setKey(symmetricKey);
            }
            return symmetricKey;
        });
    }
    getKeyFromStorage(keySuffix) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const key = yield this.retrieveKeyFromStorage(keySuffix);
            if (key != null) {
                const symmetricKey = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](utils["a" /* Utils */].fromB64ToArray(key).buffer);
                if (!(yield this.validateKey(symmetricKey))) {
                    this.logService.warning('Wrong key, throwing away stored key');
                    this.secureStorageService.remove(crypto_service_Keys.key, { keySuffix: keySuffix });
                    return null;
                }
                return symmetricKey;
            }
            return null;
        });
    }
    getKeyHash() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.keyHash != null) {
                return this.keyHash;
            }
            const keyHash = yield this.storageService.get(crypto_service_Keys.keyHash);
            if (keyHash != null) {
                this.keyHash = keyHash;
            }
            return keyHash == null ? null : this.keyHash;
        });
    }
    compareAndUpdateKeyHash(masterPassword, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const storedKeyHash = yield this.getKeyHash();
            if (masterPassword != null && storedKeyHash != null) {
                const localKeyHash = yield this.hashPassword(masterPassword, key, enums_hashPurpose["a" /* HashPurpose */].LocalAuthorization);
                if (localKeyHash != null && storedKeyHash === localKeyHash) {
                    return true;
                }
                // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated
                const serverKeyHash = yield this.hashPassword(masterPassword, key, enums_hashPurpose["a" /* HashPurpose */].ServerAuthorization);
                if (serverKeyHash != null && storedKeyHash === serverKeyHash) {
                    yield this.setKeyHash(localKeyHash);
                    return true;
                }
            }
            return false;
        });
    }
    getEncKey(key = null) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.encKey != null) {
                return this.encKey;
            }
            const encKey = yield this.storageService.get(crypto_service_Keys.encKey);
            if (encKey == null) {
                return null;
            }
            if (key == null) {
                key = yield this.getKey();
            }
            if (key == null) {
                return null;
            }
            let decEncKey;
            const encKeyCipher = new domain_encString["a" /* EncString */](encKey);
            if (encKeyCipher.encryptionType === encryptionType["a" /* EncryptionType */].AesCbc256_B64) {
                decEncKey = yield this.decryptToBytes(encKeyCipher, key);
            }
            else if (encKeyCipher.encryptionType === encryptionType["a" /* EncryptionType */].AesCbc256_HmacSha256_B64) {
                const newKey = yield this.stretchKey(key);
                decEncKey = yield this.decryptToBytes(encKeyCipher, newKey);
            }
            else {
                throw new Error('Unsupported encKey type.');
            }
            if (decEncKey == null) {
                return null;
            }
            this.encKey = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decEncKey);
            return this.encKey;
        });
    }
    getPublicKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.publicKey != null) {
                return this.publicKey;
            }
            const privateKey = yield this.getPrivateKey();
            if (privateKey == null) {
                return null;
            }
            this.publicKey = yield this.cryptoFunctionService.rsaExtractPublicKey(privateKey);
            return this.publicKey;
        });
    }
    getPrivateKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.privateKey != null) {
                return this.privateKey;
            }
            const encPrivateKey = yield this.storageService.get(crypto_service_Keys.encPrivateKey);
            if (encPrivateKey == null) {
                return null;
            }
            this.privateKey = yield this.decryptToBytes(new domain_encString["a" /* EncString */](encPrivateKey), null);
            return this.privateKey;
        });
    }
    getFingerprint(userId, publicKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (publicKey == null) {
                publicKey = yield this.getPublicKey();
            }
            if (publicKey === null) {
                throw new Error('No public key available.');
            }
            const keyFingerprint = yield this.cryptoFunctionService.hash(publicKey, 'sha256');
            const userFingerprint = yield this.cryptoFunctionService.hkdfExpand(keyFingerprint, userId, 32, 'sha256');
            return this.hashPhrase(userFingerprint);
        });
    }
    getOrgKeys() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.orgKeys != null && this.orgKeys.size > 0) {
                return this.orgKeys;
            }
            const encOrgKeys = yield this.storageService.get(crypto_service_Keys.encOrgKeys);
            if (encOrgKeys == null) {
                return null;
            }
            const orgKeys = new Map();
            let setKey = false;
            for (const orgId in encOrgKeys) {
                if (!encOrgKeys.hasOwnProperty(orgId)) {
                    continue;
                }
                const decValue = yield this.rsaDecrypt(encOrgKeys[orgId]);
                orgKeys.set(orgId, new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decValue));
                setKey = true;
            }
            if (setKey) {
                this.orgKeys = orgKeys;
            }
            return this.orgKeys;
        });
    }
    getOrgKey(orgId) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (orgId == null) {
                return null;
            }
            const orgKeys = yield this.getOrgKeys();
            if (orgKeys == null || !orgKeys.has(orgId)) {
                return null;
            }
            return orgKeys.get(orgId);
        });
    }
    getProviderKeys() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.providerKeys != null && this.providerKeys.size > 0) {
                return this.providerKeys;
            }
            const encProviderKeys = yield this.storageService.get(crypto_service_Keys.encProviderKeys);
            if (encProviderKeys == null) {
                return null;
            }
            const providerKeys = new Map();
            let setKey = false;
            for (const orgId in encProviderKeys) {
                if (!encProviderKeys.hasOwnProperty(orgId)) {
                    continue;
                }
                const decValue = yield this.rsaDecrypt(encProviderKeys[orgId]);
                providerKeys.set(orgId, new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decValue));
                setKey = true;
            }
            if (setKey) {
                this.providerKeys = providerKeys;
            }
            return this.providerKeys;
        });
    }
    getProviderKey(providerId) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (providerId == null) {
                return null;
            }
            const providerKeys = yield this.getProviderKeys();
            if (providerKeys == null || !providerKeys.has(providerId)) {
                return null;
            }
            return providerKeys.get(providerId);
        });
    }
    hasKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            return this.hasKeyInMemory() || (yield this.hasKeyStored('auto')) || (yield this.hasKeyStored('biometric'));
        });
    }
    hasKeyInMemory() {
        return this.key != null;
    }
    hasKeyStored(keySuffix) {
        return this.secureStorageService.has(crypto_service_Keys.key, { keySuffix: keySuffix });
    }
    hasEncKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const encKey = yield this.storageService.get(crypto_service_Keys.encKey);
            return encKey != null;
        });
    }
    clearKey(clearSecretStorage = true) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            this.key = this.legacyEtmKey = null;
            if (clearSecretStorage) {
                this.clearStoredKey('auto');
                this.clearStoredKey('biometric');
            }
        });
    }
    clearStoredKey(keySuffix) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            yield this.secureStorageService.remove(crypto_service_Keys.key, { keySuffix: keySuffix });
        });
    }
    clearKeyHash() {
        this.keyHash = null;
        return this.storageService.remove(crypto_service_Keys.keyHash);
    }
    clearEncKey(memoryOnly) {
        this.encKey = null;
        if (memoryOnly) {
            return Promise.resolve();
        }
        return this.storageService.remove(crypto_service_Keys.encKey);
    }
    clearKeyPair(memoryOnly) {
        this.privateKey = null;
        this.publicKey = null;
        if (memoryOnly) {
            return Promise.resolve();
        }
        return this.storageService.remove(crypto_service_Keys.encPrivateKey);
    }
    clearOrgKeys(memoryOnly) {
        this.orgKeys = null;
        if (memoryOnly) {
            return Promise.resolve();
        }
        return this.storageService.remove(crypto_service_Keys.encOrgKeys);
    }
    clearProviderKeys(memoryOnly) {
        this.providerKeys = null;
        if (memoryOnly) {
            return Promise.resolve();
        }
        return this.storageService.remove(crypto_service_Keys.encOrgKeys);
    }
    clearPinProtectedKey() {
        return this.storageService.remove(constants_service["a" /* ConstantsService */].pinProtectedKey);
    }
    clearKeys() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            yield this.clearKey();
            yield this.clearKeyHash();
            yield this.clearOrgKeys();
            yield this.clearProviderKeys();
            yield this.clearEncKey();
            yield this.clearKeyPair();
            yield this.clearPinProtectedKey();
        });
    }
    toggleKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const key = yield this.getKey();
            yield this.setKey(key);
        });
    }
    makeKey(password, salt, kdf, kdfIterations) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            let key = null;
            if (kdf == null || kdf === kdfType["a" /* KdfType */].PBKDF2_SHA256) {
                if (kdfIterations == null) {
                    kdfIterations = 5000;
                }
                else if (kdfIterations < 5000) {
                    throw new Error('PBKDF2 iteration minimum is 5000.');
                }
                key = yield this.cryptoFunctionService.pbkdf2(password, salt, 'sha256', kdfIterations);
            }
            else {
                throw new Error('Unknown Kdf.');
            }
            return new symmetricCryptoKey["a" /* SymmetricCryptoKey */](key);
        });
    }
    makeKeyFromPin(pin, salt, kdf, kdfIterations, protectedKeyCs = null) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (protectedKeyCs == null) {
                const pinProtectedKey = yield this.storageService.get(constants_service["a" /* ConstantsService */].pinProtectedKey);
                if (pinProtectedKey == null) {
                    throw new Error('No PIN protected key found.');
                }
                protectedKeyCs = new domain_encString["a" /* EncString */](pinProtectedKey);
            }
            const pinKey = yield this.makePinKey(pin, salt, kdf, kdfIterations);
            const decKey = yield this.decryptToBytes(protectedKeyCs, pinKey);
            return new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decKey);
        });
    }
    makeShareKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const shareKey = yield this.cryptoFunctionService.randomBytes(64);
            const publicKey = yield this.getPublicKey();
            const encShareKey = yield this.rsaEncrypt(shareKey, publicKey);
            return [encShareKey, new symmetricCryptoKey["a" /* SymmetricCryptoKey */](shareKey)];
        });
    }
    makeKeyPair(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const keyPair = yield this.cryptoFunctionService.rsaGenerateKeyPair(2048);
            const publicB64 = utils["a" /* Utils */].fromBufferToB64(keyPair[0]);
            const privateEnc = yield this.encrypt(keyPair[1], key);
            return [publicB64, privateEnc];
        });
    }
    makePinKey(pin, salt, kdf, kdfIterations) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const pinKey = yield this.makeKey(pin, salt, kdf, kdfIterations);
            return yield this.stretchKey(pinKey);
        });
    }
    makeSendKey(keyMaterial) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const sendKey = yield this.cryptoFunctionService.hkdf(keyMaterial, 'bitwarden-send', 'send', 64, 'sha256');
            return new symmetricCryptoKey["a" /* SymmetricCryptoKey */](sendKey);
        });
    }
    hashPassword(password, key, hashPurpose) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (key == null) {
                key = yield this.getKey();
            }
            if (password == null || key == null) {
                throw new Error('Invalid parameters.');
            }
            const iterations = hashPurpose === enums_hashPurpose["a" /* HashPurpose */].LocalAuthorization ? 2 : 1;
            const hash = yield this.cryptoFunctionService.pbkdf2(key.key, password, 'sha256', iterations);
            return utils["a" /* Utils */].fromBufferToB64(hash);
        });
    }
    makeEncKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const theKey = yield this.getKeyForEncryption(key);
            const encKey = yield this.cryptoFunctionService.randomBytes(64);
            return this.buildEncKey(theKey, encKey);
        });
    }
    remakeEncKey(key, encKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (encKey == null) {
                encKey = yield this.getEncKey();
            }
            return this.buildEncKey(key, encKey.key);
        });
    }
    encrypt(plainValue, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (plainValue == null) {
                return Promise.resolve(null);
            }
            let plainBuf;
            if (typeof (plainValue) === 'string') {
                plainBuf = utils["a" /* Utils */].fromUtf8ToArray(plainValue).buffer;
            }
            else {
                plainBuf = plainValue;
            }
            const encObj = yield this.aesEncrypt(plainBuf, key);
            const iv = utils["a" /* Utils */].fromBufferToB64(encObj.iv);
            const data = utils["a" /* Utils */].fromBufferToB64(encObj.data);
            const mac = encObj.mac != null ? utils["a" /* Utils */].fromBufferToB64(encObj.mac) : null;
            return new domain_encString["a" /* EncString */](encObj.key.encType, data, iv, mac);
        });
    }
    encryptToBytes(plainValue, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const encValue = yield this.aesEncrypt(plainValue, key);
            let macLen = 0;
            if (encValue.mac != null) {
                macLen = encValue.mac.byteLength;
            }
            const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);
            encBytes.set([encValue.key.encType]);
            encBytes.set(new Uint8Array(encValue.iv), 1);
            if (encValue.mac != null) {
                encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);
            }
            encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);
            return new EncArrayBuffer(encBytes.buffer);
        });
    }
    rsaEncrypt(data, publicKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (publicKey == null) {
                publicKey = yield this.getPublicKey();
            }
            if (publicKey == null) {
                throw new Error('Public key unavailable.');
            }
            const encBytes = yield this.cryptoFunctionService.rsaEncrypt(data, publicKey, 'sha1');
            return new domain_encString["a" /* EncString */](encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_B64, utils["a" /* Utils */].fromBufferToB64(encBytes));
        });
    }
    rsaDecrypt(encValue, privateKeyValue) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const headerPieces = encValue.split('.');
            let encType = null;
            let encPieces;
            if (headerPieces.length === 1) {
                encType = encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_B64;
                encPieces = [headerPieces[0]];
            }
            else if (headerPieces.length === 2) {
                try {
                    encType = parseInt(headerPieces[0], null);
                    encPieces = headerPieces[1].split('|');
                }
                catch (e) {
                    this.logService.error(e);
                }
            }
            switch (encType) {
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_B64:
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_B64:
                // HmacSha256 types are deprecated
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_HmacSha256_B64:
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_HmacSha256_B64:
                    break;
                default:
                    throw new Error('encType unavailable.');
            }
            if (encPieces == null || encPieces.length <= 0) {
                throw new Error('encPieces unavailable.');
            }
            const data = utils["a" /* Utils */].fromB64ToArray(encPieces[0]).buffer;
            const privateKey = privateKeyValue !== null && privateKeyValue !== void 0 ? privateKeyValue : yield this.getPrivateKey();
            if (privateKey == null) {
                throw new Error('No private key.');
            }
            let alg = 'sha1';
            switch (encType) {
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_B64:
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_HmacSha256_B64:
                    alg = 'sha256';
                    break;
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_B64:
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_HmacSha256_B64:
                    break;
                default:
                    throw new Error('encType unavailable.');
            }
            return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);
        });
    }
    decryptToBytes(encString, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const iv = utils["a" /* Utils */].fromB64ToArray(encString.iv).buffer;
            const data = utils["a" /* Utils */].fromB64ToArray(encString.data).buffer;
            const mac = encString.mac ? utils["a" /* Utils */].fromB64ToArray(encString.mac).buffer : null;
            const decipher = yield this.aesDecryptToBytes(encString.encryptionType, data, iv, mac, key);
            if (decipher == null) {
                return null;
            }
            return decipher;
        });
    }
    decryptToUtf8(encString, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            return yield this.aesDecryptToUtf8(encString.encryptionType, encString.data, encString.iv, encString.mac, key);
        });
    }
    decryptFromBytes(encBuf, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (encBuf == null) {
                throw new Error('no encBuf.');
            }
            const encBytes = new Uint8Array(encBuf);
            const encType = encBytes[0];
            let ctBytes = null;
            let ivBytes = null;
            let macBytes = null;
            switch (encType) {
                case encryptionType["a" /* EncryptionType */].AesCbc128_HmacSha256_B64:
                case encryptionType["a" /* EncryptionType */].AesCbc256_HmacSha256_B64:
                    if (encBytes.length <= 49) { // 1 + 16 + 32 + ctLength
                        return null;
                    }
                    ivBytes = encBytes.slice(1, 17);
                    macBytes = encBytes.slice(17, 49);
                    ctBytes = encBytes.slice(49);
                    break;
                case encryptionType["a" /* EncryptionType */].AesCbc256_B64:
                    if (encBytes.length <= 17) { // 1 + 16 + ctLength
                        return null;
                    }
                    ivBytes = encBytes.slice(1, 17);
                    ctBytes = encBytes.slice(17);
                    break;
                default:
                    return null;
            }
            return yield this.aesDecryptToBytes(encType, ctBytes.buffer, ivBytes.buffer, macBytes != null ? macBytes.buffer : null, key);
        });
    }
    // EFForg/OpenWireless
    // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js
    randomNumber(min, max) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            let rval = 0;
            const range = max - min + 1;
            const bitsNeeded = Math.ceil(Math.log2(range));
            if (bitsNeeded > 53) {
                throw new Error('We cannot generate numbers larger than 53 bits.');
            }
            const bytesNeeded = Math.ceil(bitsNeeded / 8);
            const mask = Math.pow(2, bitsNeeded) - 1;
            // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111
            // Fill a byte array with N random numbers
            const byteArray = new Uint8Array(yield this.cryptoFunctionService.randomBytes(bytesNeeded));
            let p = (bytesNeeded - 1) * 8;
            for (let i = 0; i < bytesNeeded; i++) {
                rval += byteArray[i] * Math.pow(2, p);
                p -= 8;
            }
            // Use & to apply the mask and reduce the number of recursive lookups
            // tslint:disable-next-line
            rval = rval & mask;
            if (rval >= range) {
                // Integer out of acceptable range
                return this.randomNumber(min, max);
            }
            // Return an integer that falls within the range
            return min + rval;
        });
    }
    validateKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            try {
                const encPrivateKey = yield this.storageService.get(crypto_service_Keys.encPrivateKey);
                const encKey = yield this.getEncKey(key);
                if (encPrivateKey == null || encKey == null) {
                    return false;
                }
                const privateKey = yield this.decryptToBytes(new domain_encString["a" /* EncString */](encPrivateKey), encKey);
                yield this.cryptoFunctionService.rsaExtractPublicKey(privateKey);
            }
            catch (e) {
                return false;
            }
            return true;
        });
    }
    // Helpers
    storeKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if ((yield this.shouldStoreKey('auto')) || (yield this.shouldStoreKey('biometric'))) {
                this.secureStorageService.save(crypto_service_Keys.key, key.keyB64);
            }
            else {
                this.secureStorageService.remove(crypto_service_Keys.key);
            }
        });
    }
    shouldStoreKey(keySuffix) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            let shouldStoreKey = false;
            if (keySuffix === 'auto') {
                const vaultTimeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
                shouldStoreKey = vaultTimeout == null;
            }
            else if (keySuffix === 'biometric') {
                const biometricUnlock = yield this.storageService.get(constants_service["a" /* ConstantsService */].biometricUnlockKey);
                shouldStoreKey = biometricUnlock && this.platformUtilService.supportsSecureStorage();
            }
            return shouldStoreKey;
        });
    }
    retrieveKeyFromStorage(keySuffix) {
        return this.secureStorageService.get(crypto_service_Keys.key, { keySuffix: keySuffix });
    }
    aesEncrypt(data, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const obj = new EncryptedObject();
            obj.key = yield this.getKeyForEncryption(key);
            obj.iv = yield this.cryptoFunctionService.randomBytes(16);
            obj.data = yield this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);
            if (obj.key.macKey != null) {
                const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);
                macData.set(new Uint8Array(obj.iv), 0);
                macData.set(new Uint8Array(obj.data), obj.iv.byteLength);
                obj.mac = yield this.cryptoFunctionService.hmac(macData.buffer, obj.key.macKey, 'sha256');
            }
            return obj;
        });
    }
    aesDecryptToUtf8(encType, data, iv, mac, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const keyForEnc = yield this.getKeyForEncryption(key);
            const theKey = this.resolveLegacyKey(encType, keyForEnc);
            if (theKey.macKey != null && mac == null) {
                this.logService.error('mac required.');
                return null;
            }
            if (theKey.encType !== encType) {
                this.logService.error('encType unavailable.');
                return null;
            }
            const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(data, iv, mac, theKey);
            if (fastParams.macKey != null && fastParams.mac != null) {
                const computedMac = yield this.cryptoFunctionService.hmacFast(fastParams.macData, fastParams.macKey, 'sha256');
                const macsEqual = yield this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);
                if (!macsEqual) {
                    this.logService.error('mac failed.');
                    return null;
                }
            }
            return this.cryptoFunctionService.aesDecryptFast(fastParams);
        });
    }
    aesDecryptToBytes(encType, data, iv, mac, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const keyForEnc = yield this.getKeyForEncryption(key);
            const theKey = this.resolveLegacyKey(encType, keyForEnc);
            if (theKey.macKey != null && mac == null) {
                return null;
            }
            if (theKey.encType !== encType) {
                return null;
            }
            if (theKey.macKey != null && mac != null) {
                const macData = new Uint8Array(iv.byteLength + data.byteLength);
                macData.set(new Uint8Array(iv), 0);
                macData.set(new Uint8Array(data), iv.byteLength);
                const computedMac = yield this.cryptoFunctionService.hmac(macData.buffer, theKey.macKey, 'sha256');
                if (computedMac === null) {
                    return null;
                }
                const macsMatch = yield this.cryptoFunctionService.compare(mac, computedMac);
                if (!macsMatch) {
                    this.logService.error('mac failed.');
                    return null;
                }
            }
            return yield this.cryptoFunctionService.aesDecrypt(data, iv, theKey.encKey);
        });
    }
    getKeyForEncryption(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (key != null) {
                return key;
            }
            const encKey = yield this.getEncKey();
            if (encKey != null) {
                return encKey;
            }
            return yield this.getKey();
        });
    }
    resolveLegacyKey(encType, key) {
        if (encType === encryptionType["a" /* EncryptionType */].AesCbc128_HmacSha256_B64 &&
            key.encType === encryptionType["a" /* EncryptionType */].AesCbc256_B64) {
            // Old encrypt-then-mac scheme, make a new key
            if (this.legacyEtmKey == null) {
                this.legacyEtmKey = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](key.key, encryptionType["a" /* EncryptionType */].AesCbc128_HmacSha256_B64);
            }
            return this.legacyEtmKey;
        }
        return key;
    }
    stretchKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const newKey = new Uint8Array(64);
            const encKey = yield this.cryptoFunctionService.hkdfExpand(key.key, 'enc', 32, 'sha256');
            const macKey = yield this.cryptoFunctionService.hkdfExpand(key.key, 'mac', 32, 'sha256');
            newKey.set(new Uint8Array(encKey));
            newKey.set(new Uint8Array(macKey), 32);
            return new symmetricCryptoKey["a" /* SymmetricCryptoKey */](newKey.buffer);
        });
    }
    hashPhrase(hash, minimumEntropy = 64) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const entropyPerWord = Math.log(EEFLongWordList.length) / Math.log(2);
            let numWords = Math.ceil(minimumEntropy / entropyPerWord);
            const hashArr = Array.from(new Uint8Array(hash));
            const entropyAvailable = hashArr.length * 4;
            if (numWords * entropyPerWord > entropyAvailable) {
                throw new Error('Output entropy of hash function is too small');
            }
            const phrase = [];
            let hashNumber = BigInteger["fromArray"](hashArr, 256);
            while (numWords--) {
                const remainder = hashNumber.mod(EEFLongWordList.length);
                hashNumber = hashNumber.divide(EEFLongWordList.length);
                phrase.push(EEFLongWordList[remainder]);
            }
            return phrase;
        });
    }
    buildEncKey(key, encKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            let encKeyEnc = null;
            if (key.key.byteLength === 32) {
                const newKey = yield this.stretchKey(key);
                encKeyEnc = yield this.encrypt(encKey, newKey);
            }
            else if (key.key.byteLength === 64) {
                encKeyEnc = yield this.encrypt(encKey, key);
            }
            else {
                throw new Error('Invalid key size.');
            }
            return [new symmetricCryptoKey["a" /* SymmetricCryptoKey */](encKey), encKeyEnc];
        });
    }
}
crypto_service_decorate([
    Object(sequentialize["a" /* sequentialize */])(() => 'getEncKey'),
    crypto_service_metadata("design:type", Function),
    crypto_service_metadata("design:paramtypes", [symmetricCryptoKey["a" /* SymmetricCryptoKey */]]),
    crypto_service_metadata("design:returntype", Promise)
], crypto_service_CryptoService.prototype, "getEncKey", null);
crypto_service_decorate([
    Object(sequentialize["a" /* sequentialize */])(() => 'getOrgKeys'),
    crypto_service_metadata("design:type", Function),
    crypto_service_metadata("design:paramtypes", []),
    crypto_service_metadata("design:returntype", Promise)
], crypto_service_CryptoService.prototype, "getOrgKeys", null);
crypto_service_decorate([
    Object(sequentialize["a" /* sequentialize */])(() => 'getProviderKeys'),
    crypto_service_metadata("design:type", Function),
    crypto_service_metadata("design:paramtypes", []),
    crypto_service_metadata("design:returntype", Promise)
], crypto_service_CryptoService.prototype, "getProviderKeys", null);

// CONCATENATED MODULE: ./src/services/browserCrypto.service.ts
var browserCrypto_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class browserCrypto_service_BrowserCryptoService extends crypto_service_CryptoService {
    retrieveKeyFromStorage(keySuffix) {
        const _super = Object.create(null, {
            retrieveKeyFromStorage: { get: () => super.retrieveKeyFromStorage }
        });
        var _a;
        return browserCrypto_service_awaiter(this, void 0, void 0, function* () {
            if (keySuffix === 'biometric') {
                yield this.platformUtilService.authenticateBiometric();
                return (_a = (yield this.getKey())) === null || _a === void 0 ? void 0 : _a.keyB64;
            }
            return yield _super.retrieveKeyFromStorage.call(this, keySuffix);
        });
    }
}

// EXTERNAL MODULE: ./src/services/browserMessaging.service.ts
var browserMessaging_service = __webpack_require__(224);

// EXTERNAL MODULE: ./jslib/common/src/enums/themeType.ts
var themeType = __webpack_require__(82);

// CONCATENATED MODULE: ./src/services/browserPlatformUtils.service.ts
var browserPlatformUtils_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





const DialogPromiseExpiration = 600000; // 10 minutes
class browserPlatformUtils_service_BrowserPlatformUtilsService {
    constructor(messagingService, storageService, clipboardWriteCallback, biometricCallback) {
        this.messagingService = messagingService;
        this.storageService = storageService;
        this.clipboardWriteCallback = clipboardWriteCallback;
        this.biometricCallback = biometricCallback;
        this.identityClientId = 'browser';
        this.showDialogResolves = new Map();
        this.passwordDialogResolves = new Map();
        this.deviceCache = null;
        this.prefersColorSchemeDark = window.matchMedia('(prefers-color-scheme: dark)');
    }
    getDevice() {
        if (this.deviceCache) {
            return this.deviceCache;
        }
        if (navigator.userAgent.indexOf(' Firefox/') !== -1 || navigator.userAgent.indexOf(' Gecko/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].FirefoxExtension;
        }
        else if ((!!window.opr && !!opr.addons) || !!window.opera ||
            navigator.userAgent.indexOf(' OPR/') >= 0) {
            this.deviceCache = deviceType["a" /* DeviceType */].OperaExtension;
        }
        else if (navigator.userAgent.indexOf(' Edg/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].EdgeExtension;
        }
        else if (navigator.userAgent.indexOf(' Vivaldi/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].VivaldiExtension;
        }
        else if (window.chrome && navigator.userAgent.indexOf(' Chrome/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].ChromeExtension;
        }
        else if (navigator.userAgent.indexOf(' Safari/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].SafariExtension;
        }
        return this.deviceCache;
    }
    getDeviceString() {
        const device = deviceType["a" /* DeviceType */][this.getDevice()].toLowerCase();
        return device.replace('extension', '');
    }
    isFirefox() {
        return this.getDevice() === deviceType["a" /* DeviceType */].FirefoxExtension;
    }
    isChrome() {
        return this.getDevice() === deviceType["a" /* DeviceType */].ChromeExtension;
    }
    isEdge() {
        return this.getDevice() === deviceType["a" /* DeviceType */].EdgeExtension;
    }
    isOpera() {
        return this.getDevice() === deviceType["a" /* DeviceType */].OperaExtension;
    }
    isVivaldi() {
        return this.getDevice() === deviceType["a" /* DeviceType */].VivaldiExtension;
    }
    isSafari() {
        return this.getDevice() === deviceType["a" /* DeviceType */].SafariExtension;
    }
    isIE() {
        return false;
    }
    isMacAppStore() {
        return false;
    }
    isViewOpen() {
        return browserPlatformUtils_service_awaiter(this, void 0, void 0, function* () {
            if (yield browserApi["a" /* BrowserApi */].isPopupOpen()) {
                return true;
            }
            if (this.isSafari()) {
                return false;
            }
            const sidebarView = this.sidebarViewName();
            const sidebarOpen = sidebarView != null && chrome.extension.getViews({ type: sidebarView }).length > 0;
            if (sidebarOpen) {
                return true;
            }
            const tabOpen = chrome.extension.getViews({ type: 'tab' }).length > 0;
            return tabOpen;
        });
    }
    lockTimeout() {
        return null;
    }
    launchUri(uri, options) {
        browserApi["a" /* BrowserApi */].createNewTab(uri, options && options.extensionPage === true);
    }
    saveFile(win, blobData, blobOptions, fileName) {
        browserApi["a" /* BrowserApi */].downloadFile(win, blobData, blobOptions, fileName);
    }
    getApplicationVersion() {
        return Promise.resolve(browserApi["a" /* BrowserApi */].getApplicationVersion());
    }
    supportsWebAuthn(win) {
        return (typeof (PublicKeyCredential) !== 'undefined');
    }
    supportsDuo() {
        return true;
    }
    showToast(type, title, text, options) {
        this.messagingService.send('showToast', {
            text: text,
            title: title,
            type: type,
            options: options,
        });
    }
    showDialog(body, title, confirmText, cancelText, type, bodyIsHtml = false) {
        const dialogId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
        this.messagingService.send('showDialog', {
            text: bodyIsHtml ? null : body,
            html: bodyIsHtml ? body : null,
            title: title,
            confirmText: confirmText,
            cancelText: cancelText,
            type: type,
            dialogId: dialogId,
        });
        return new Promise(resolve => {
            this.showDialogResolves.set(dialogId, { resolve: resolve, date: new Date() });
        });
    }
    isDev() {
        return "production" === 'development';
    }
    isSelfHost() {
        return false;
    }
    copyToClipboard(text, options) {
        let win = window;
        let doc = window.document;
        if (options && (options.window || options.win)) {
            win = options.window || options.win;
            doc = win.document;
        }
        else if (options && options.doc) {
            doc = options.doc;
        }
        const clearing = options ? !!options.clearing : false;
        const clearMs = options && options.clearMs ? options.clearMs : null;
        if (this.isSafari()) {
            safariApp["a" /* SafariApp */].sendMessageToApp('copyToClipboard', text).then(() => {
                if (!clearing && this.clipboardWriteCallback != null) {
                    this.clipboardWriteCallback(text, clearMs);
                }
            });
        }
        else if (this.isFirefox() && win.navigator.clipboard && win.navigator.clipboard.writeText) {
            win.navigator.clipboard.writeText(text).then(() => {
                if (!clearing && this.clipboardWriteCallback != null) {
                    this.clipboardWriteCallback(text, clearMs);
                }
            });
        }
        else if (win.clipboardData && win.clipboardData.setData) {
            // IE specific code path to prevent textarea being shown while dialog is visible.
            win.clipboardData.setData('Text', text);
            if (!clearing && this.clipboardWriteCallback != null) {
                this.clipboardWriteCallback(text, clearMs);
            }
        }
        else if (doc.queryCommandSupported && doc.queryCommandSupported('copy')) {
            if (this.isChrome() && text === '') {
                text = '\u0000';
            }
            const textarea = doc.createElement('textarea');
            textarea.textContent = text == null || text === '' ? ' ' : text;
            // Prevent scrolling to bottom of page in MS Edge.
            textarea.style.position = 'fixed';
            doc.body.appendChild(textarea);
            textarea.select();
            try {
                // Security exception may be thrown by some browsers.
                if (doc.execCommand('copy') && !clearing && this.clipboardWriteCallback != null) {
                    this.clipboardWriteCallback(text, clearMs);
                }
            }
            catch (e) {
                // tslint:disable-next-line
                console.warn('Copy to clipboard failed.', e);
            }
            finally {
                doc.body.removeChild(textarea);
            }
        }
    }
    readFromClipboard(options) {
        return browserPlatformUtils_service_awaiter(this, void 0, void 0, function* () {
            let win = window;
            let doc = window.document;
            if (options && (options.window || options.win)) {
                win = options.window || options.win;
                doc = win.document;
            }
            else if (options && options.doc) {
                doc = options.doc;
            }
            if (this.isSafari()) {
                return yield safariApp["a" /* SafariApp */].sendMessageToApp('readFromClipboard');
            }
            else if (this.isFirefox() && win.navigator.clipboard && win.navigator.clipboard.readText) {
                return yield win.navigator.clipboard.readText();
            }
            else if (doc.queryCommandSupported && doc.queryCommandSupported('paste')) {
                const textarea = doc.createElement('textarea');
                // Prevent scrolling to bottom of page in MS Edge.
                textarea.style.position = 'fixed';
                doc.body.appendChild(textarea);
                textarea.focus();
                try {
                    // Security exception may be thrown by some browsers.
                    if (doc.execCommand('paste')) {
                        return textarea.value;
                    }
                }
                catch (e) {
                    // tslint:disable-next-line
                    console.warn('Read from clipboard failed.', e);
                }
                finally {
                    doc.body.removeChild(textarea);
                }
            }
            return null;
        });
    }
    resolveDialogPromise(dialogId, confirmed) {
        if (this.showDialogResolves.has(dialogId)) {
            const resolveObj = this.showDialogResolves.get(dialogId);
            resolveObj.resolve(confirmed);
            this.showDialogResolves.delete(dialogId);
        }
        // Clean up old promises
        this.showDialogResolves.forEach((val, key) => {
            const age = new Date().getTime() - val.date.getTime();
            if (age > DialogPromiseExpiration) {
                this.showDialogResolves.delete(key);
            }
        });
    }
    resolvePasswordDialogPromise(dialogId, canceled, password) {
        return browserPlatformUtils_service_awaiter(this, void 0, void 0, function* () {
            let result = false;
            if (this.passwordDialogResolves.has(dialogId)) {
                const resolveObj = this.passwordDialogResolves.get(dialogId);
                if (yield resolveObj.tryResolve(canceled, password)) {
                    this.passwordDialogResolves.delete(dialogId);
                    result = true;
                }
            }
            // Clean up old promises
            this.passwordDialogResolves.forEach((val, key) => {
                const age = new Date().getTime() - val.date.getTime();
                if (age > DialogPromiseExpiration) {
                    this.passwordDialogResolves.delete(key);
                }
            });
            return result;
        });
    }
    supportsBiometric() {
        return browserPlatformUtils_service_awaiter(this, void 0, void 0, function* () {
            const platformInfo = yield browserApi["a" /* BrowserApi */].getPlatformInfo();
            if (platformInfo.os === 'android') {
                return false;
            }
            if (this.isFirefox()) {
                return parseInt((yield browser.runtime.getBrowserInfo()).version.split('.')[0], 10) >= 87;
            }
            return true;
        });
    }
    authenticateBiometric() {
        return this.biometricCallback();
    }
    sidebarViewName() {
        if (window.chrome.sidebarAction && this.isFirefox()) {
            return 'sidebar';
        }
        else if (this.isOpera() && (typeof opr !== 'undefined') && opr.sidebarAction) {
            return 'sidebar_panel';
        }
        return null;
    }
    supportsSecureStorage() {
        return false;
    }
    getDefaultSystemTheme() {
        return Promise.resolve(this.prefersColorSchemeDark.matches ? themeType["a" /* ThemeType */].Dark : themeType["a" /* ThemeType */].Light);
    }
    onDefaultSystemThemeChange(callback) {
        this.prefersColorSchemeDark.addEventListener('change', ({ matches }) => {
            callback(matches ? themeType["a" /* ThemeType */].Dark : themeType["a" /* ThemeType */].Light);
        });
    }
    getEffectiveTheme() {
        return browserPlatformUtils_service_awaiter(this, void 0, void 0, function* () {
            const theme = yield this.storageService.get(constants_service["a" /* ConstantsService */].themeKey);
            if (theme == null || theme === themeType["a" /* ThemeType */].System) {
                return this.getDefaultSystemTheme();
            }
            else {
                return theme;
            }
        });
    }
}

// CONCATENATED MODULE: ./src/services/browserStorage.service.ts
var browserStorage_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class BrowserStorageService {
    constructor() {
        this.chromeStorageApi = chrome.storage.local;
    }
    get(key) {
        return browserStorage_service_awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                this.chromeStorageApi.get(key, (obj) => {
                    if (obj != null && obj[key] != null) {
                        resolve(obj[key]);
                        return;
                    }
                    resolve(null);
                });
            });
        });
    }
    has(key) {
        return browserStorage_service_awaiter(this, void 0, void 0, function* () {
            return (yield this.get(key)) != null;
        });
    }
    save(key, obj) {
        return browserStorage_service_awaiter(this, void 0, void 0, function* () {
            if (obj == null) {
                // Fix safari not liking null in set
                return new Promise(resolve => {
                    this.chromeStorageApi.remove(key, () => {
                        resolve();
                    });
                });
            }
            if (obj instanceof Set) {
                obj = Array.from(obj);
            }
            const keyedObj = { [key]: obj };
            return new Promise(resolve => {
                this.chromeStorageApi.set(keyedObj, () => {
                    resolve();
                });
            });
        });
    }
    remove(key) {
        return browserStorage_service_awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                this.chromeStorageApi.remove(key, () => {
                    resolve();
                });
            });
        });
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/i18n.service.ts
var i18n_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class i18n_service_I18nService {
    constructor(systemLanguage, localesDirectory, getLocalesJson) {
        this.systemLanguage = systemLanguage;
        this.localesDirectory = localesDirectory;
        this.getLocalesJson = getLocalesJson;
        // First locale is the default (English)
        this.supportedTranslationLocales = ['en'];
        this.localeNames = new Map([
            ['af', 'Afrikaans'],
            ['az', 'Azərbaycanca'],
            ['be', 'Беларуская'],
            ['bg', 'български'],
            ['ca', 'català'],
            ['cs', 'čeština'],
            ['da', 'dansk'],
            ['de', 'Deutsch'],
            ['el', 'Ελληνικά'],
            ['en', 'English'],
            ['en-GB', 'English (British)'],
            ['eo', 'Esperanto'],
            ['es', 'español'],
            ['et', 'eesti'],
            ['fa', 'فارسی'],
            ['fi', 'suomi'],
            ['fr', 'français'],
            ['he', 'עברית'],
            ['hi', 'हिन्दी'],
            ['hr', 'hrvatski'],
            ['hu', 'magyar'],
            ['id', 'Bahasa Indonesia'],
            ['it', 'italiano'],
            ['ja', '日本語'],
            ['ko', '한국어'],
            ['lv', 'Latvietis'],
            ['ml', 'മലയാളം'],
            ['nb', 'norsk (bokmål)'],
            ['nl', 'Nederlands'],
            ['pl', 'polski'],
            ['pt-BR', 'português do Brasil'],
            ['pt-PT', 'português'],
            ['ro', 'română'],
            ['ru', 'русский'],
            ['sk', 'slovenčina'],
            ['sr', 'Српски'],
            ['sv', 'svenska'],
            ['th', 'ไทย'],
            ['tr', 'Türkçe'],
            ['uk', 'українська'],
            ['vi', 'Tiếng Việt'],
            ['zh-CN', '中文（中国大陆）'],
            ['zh-TW', '中文（台灣）'],
        ]);
        this.defaultMessages = {};
        this.localeMessages = {};
        this.systemLanguage = systemLanguage.replace('_', '-');
    }
    init(locale) {
        return i18n_service_awaiter(this, void 0, void 0, function* () {
            if (this.inited) {
                throw new Error('i18n already initialized.');
            }
            if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {
                throw new Error('supportedTranslationLocales not set.');
            }
            this.inited = true;
            this.locale = this.translationLocale = locale != null ? locale : this.systemLanguage;
            try {
                this.collator = new Intl.Collator(this.locale, { numeric: true, sensitivity: 'base' });
            }
            catch (_a) {
                this.collator = null;
            }
            if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {
                this.translationLocale = this.translationLocale.slice(0, 2);
                if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {
                    this.translationLocale = this.supportedTranslationLocales[0];
                }
            }
            if (this.localesDirectory != null) {
                yield this.loadMessages(this.translationLocale, this.localeMessages);
                if (this.translationLocale !== this.supportedTranslationLocales[0]) {
                    yield this.loadMessages(this.supportedTranslationLocales[0], this.defaultMessages);
                }
            }
        });
    }
    t(id, p1, p2, p3) {
        return this.translate(id, p1, p2, p3);
    }
    translate(id, p1, p2, p3) {
        let result;
        if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {
            result = this.localeMessages[id];
        }
        else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {
            result = this.defaultMessages[id];
        }
        else {
            result = '';
        }
        if (result !== '') {
            if (p1 != null) {
                result = result.split('__$1__').join(p1);
            }
            if (p2 != null) {
                result = result.split('__$2__').join(p2);
            }
            if (p3 != null) {
                result = result.split('__$3__').join(p3);
            }
        }
        return result;
    }
    loadMessages(locale, messagesObj) {
        return i18n_service_awaiter(this, void 0, void 0, function* () {
            const formattedLocale = locale.replace('-', '_');
            const locales = yield this.getLocalesJson(formattedLocale);
            for (const prop in locales) {
                if (!locales.hasOwnProperty(prop)) {
                    continue;
                }
                messagesObj[prop] = locales[prop].message;
                if (locales[prop].placeholders) {
                    for (const placeProp in locales[prop].placeholders) {
                        if (!locales[prop].placeholders.hasOwnProperty(placeProp) ||
                            !locales[prop].placeholders[placeProp].content) {
                            continue;
                        }
                        const replaceToken = '\\$' + placeProp.toUpperCase() + '\\$';
                        let replaceContent = locales[prop].placeholders[placeProp].content;
                        if (replaceContent === '$1' || replaceContent === '$2' || replaceContent === '$3') {
                            replaceContent = '__$' + replaceContent + '__';
                        }
                        messagesObj[prop] = messagesObj[prop].replace(new RegExp(replaceToken, 'g'), replaceContent);
                    }
                }
            }
        });
    }
}

// CONCATENATED MODULE: ./src/services/i18n.service.ts
var services_i18n_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class services_i18n_service_I18nService extends i18n_service_I18nService {
    constructor(systemLanguage) {
        super(systemLanguage, null, (formattedLocale) => services_i18n_service_awaiter(this, void 0, void 0, function* () {
            // Deprecated
            const file = yield fetch(this.localesDirectory + formattedLocale + '/messages.json');
            return yield file.json();
        }));
        // Please leave 'en' where it is, as it's our fallback language in case no translation can be found
        this.supportedTranslationLocales = [
            'en', 'az', 'be', 'bg', 'bn', 'ca', 'cs', 'da', 'de', 'el', 'en-GB', 'en-IN', 'es', 'et', 'fa', 'fi', 'fr', 'he', 'hr', 'hu',
            'id', 'it', 'ja', 'kn', 'ko', 'lv', 'ml', 'nb', 'nl', 'pl', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sr', 'sv', 'th', 'tr', 'uk',
            'vi', 'zh-CN', 'zh-TW',
        ];
    }
    t(id, p1, p2, p3) {
        return this.translate(id, p1, p2, p3);
    }
    translate(id, p1, p2, p3) {
        if (this.localesDirectory == null) {
            const placeholders = [];
            if (p1 != null) {
                placeholders.push(p1);
            }
            if (p2 != null) {
                placeholders.push(p2);
            }
            if (p3 != null) {
                placeholders.push(p3);
            }
            if (placeholders.length) {
                return chrome.i18n.getMessage(id, placeholders);
            }
            else {
                return chrome.i18n.getMessage(id);
            }
        }
        return super.translate(id, p1, p2, p3);
    }
}

// CONCATENATED MODULE: ./jslib/common/src/services/vaultTimeout.service.ts
var vaultTimeout_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class vaultTimeout_service_VaultTimeoutService {
    constructor(cipherService, folderService, collectionService, cryptoService, platformUtilsService, storageService, messagingService, searchService, userService, tokenService, policyService, keyConnectorService, lockedCallback = null, loggedOutCallback = null) {
        this.cipherService = cipherService;
        this.folderService = folderService;
        this.collectionService = collectionService;
        this.cryptoService = cryptoService;
        this.platformUtilsService = platformUtilsService;
        this.storageService = storageService;
        this.messagingService = messagingService;
        this.searchService = searchService;
        this.userService = userService;
        this.tokenService = tokenService;
        this.policyService = policyService;
        this.keyConnectorService = keyConnectorService;
        this.lockedCallback = lockedCallback;
        this.loggedOutCallback = loggedOutCallback;
        this.pinProtectedKey = null;
        this.biometricLocked = true;
        this.everBeenUnlocked = false;
        this.inited = false;
    }
    init(checkOnInterval) {
        if (this.inited) {
            return;
        }
        this.inited = true;
        if (checkOnInterval) {
            this.startCheck();
        }
    }
    startCheck() {
        this.checkVaultTimeout();
        setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds
    }
    // Keys aren't stored for a device that is locked or logged out.
    isLocked() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            // Handle never lock startup situation
            if ((yield this.cryptoService.hasKeyStored('auto')) && !this.everBeenUnlocked) {
                yield this.cryptoService.getKey('auto');
            }
            return !this.cryptoService.hasKeyInMemory();
        });
    }
    checkVaultTimeout() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            if (yield this.platformUtilsService.isViewOpen()) {
                // Do not lock
                return;
            }
            // "is logged out check" - similar to isLocked, below
            const authed = yield this.userService.isAuthenticated();
            if (!authed) {
                return;
            }
            if (yield this.isLocked()) {
                return;
            }
            const vaultTimeout = yield this.getVaultTimeout();
            if (vaultTimeout == null || vaultTimeout < 0) {
                return;
            }
            const lastActive = yield this.storageService.get(constants_service["a" /* ConstantsService */].lastActiveKey);
            if (lastActive == null) {
                return;
            }
            const vaultTimeoutSeconds = vaultTimeout * 60;
            const diffSeconds = ((new Date()).getTime() - lastActive) / 1000;
            if (diffSeconds >= vaultTimeoutSeconds) {
                // Pivot based on the saved vault timeout action
                const timeoutAction = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
                timeoutAction === 'logOut' ? yield this.logOut() : yield this.lock(true);
            }
        });
    }
    lock(allowSoftLock = false) {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            const authed = yield this.userService.isAuthenticated();
            if (!authed) {
                return;
            }
            if (yield this.keyConnectorService.getUsesKeyConnector()) {
                const pinSet = yield this.isPinLockSet();
                const pinLock = (pinSet[0] && this.pinProtectedKey != null) || pinSet[1];
                if (!pinLock && !(yield this.isBiometricLockSet())) {
                    yield this.logOut();
                }
            }
            this.biometricLocked = true;
            this.everBeenUnlocked = true;
            yield this.cryptoService.clearKey(false);
            yield this.cryptoService.clearOrgKeys(true);
            yield this.cryptoService.clearKeyPair(true);
            yield this.cryptoService.clearEncKey(true);
            this.folderService.clearCache();
            this.cipherService.clearCache();
            this.collectionService.clearCache();
            this.searchService.clearIndex();
            this.messagingService.send('locked');
            if (this.lockedCallback != null) {
                yield this.lockedCallback();
            }
        });
    }
    logOut() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            if (this.loggedOutCallback != null) {
                yield this.loggedOutCallback();
            }
        });
    }
    setVaultTimeoutOptions(timeout, action) {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutKey, timeout);
            yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey, action);
            yield this.cryptoService.toggleKey();
            yield this.tokenService.toggleTokens();
        });
    }
    isPinLockSet() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            const protectedPin = yield this.storageService.get(constants_service["a" /* ConstantsService */].protectedPin);
            const pinProtectedKey = yield this.storageService.get(constants_service["a" /* ConstantsService */].pinProtectedKey);
            return [protectedPin != null, pinProtectedKey != null];
        });
    }
    isBiometricLockSet() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            return yield this.storageService.get(constants_service["a" /* ConstantsService */].biometricUnlockKey);
        });
    }
    getVaultTimeout() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            const vaultTimeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            if (yield this.policyService.policyAppliesToUser(enums_policyType["a" /* PolicyType */].MaximumVaultTimeout)) {
                const policy = yield this.policyService.getAll(enums_policyType["a" /* PolicyType */].MaximumVaultTimeout);
                // Remove negative values, and ensure it's smaller than maximum allowed value according to policy
                let timeout = Math.min(vaultTimeout, policy[0].data.minutes);
                if (vaultTimeout == null || timeout < 0) {
                    timeout = policy[0].data.minutes;
                }
                // We really shouldn't need to set the value here, but multiple services relies on this value being correct.
                if (vaultTimeout !== timeout) {
                    yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutKey, timeout);
                }
                return timeout;
            }
            return vaultTimeout;
        });
    }
    clear() {
        this.everBeenUnlocked = false;
        this.pinProtectedKey = null;
        return this.storageService.remove(constants_service["a" /* ConstantsService */].protectedPin);
    }
}

// CONCATENATED MODULE: ./src/services/vaultTimeout.service.ts
var services_vaultTimeout_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class services_vaultTimeout_service_VaultTimeoutService extends vaultTimeout_service_VaultTimeoutService {
    startCheck() {
        this.checkVaultTimeout();
        if (this.platformUtilsService.isSafari()) {
            this.checkSafari();
        }
        else {
            setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds
        }
    }
    // This is a work-around to safari adding an arbitary delay to setTimeout and
    //  setIntervals. It works by calling the native extension which sleeps for 10s,
    //  efficiently replicating setInterval.
    checkSafari() {
        return services_vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            while (true) {
                try {
                    yield safariApp["a" /* SafariApp */].sendMessageToApp('sleep');
                    this.checkVaultTimeout();
                }
                catch (e) {
                    // tslint:disable-next-line
                    console.log('Exception Safari VaultTimeout', e);
                }
            }
        });
    }
}

// CONCATENATED MODULE: ./src/background/main.background.ts
var main_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



















































class main_background_MainBackground {
    constructor() {
        this.loginToAutoFill = null;
        this.menuOptionsLoaded = [];
        // Services
        this.messagingService = new browserMessaging_service["a" /* default */]();
        this.storageService = new BrowserStorageService();
        this.platformUtilsService = new browserPlatformUtils_service_BrowserPlatformUtilsService(this.messagingService, this.storageService, (clipboardValue, clearMs) => {
            if (this.systemService != null) {
                this.systemService.clearClipboard(clipboardValue, clearMs);
            }
        }, () => main_background_awaiter(this, void 0, void 0, function* () {
            if (this.nativeMessagingBackground != null) {
                const promise = this.nativeMessagingBackground.getResponse();
                try {
                    yield this.nativeMessagingBackground.send({ command: 'biometricUnlock' });
                }
                catch (e) {
                    return Promise.reject(e);
                }
                return promise.then(result => result.response === 'unlocked');
            }
        }));
        this.secureStorageService = new BrowserStorageService();
        this.i18nService = new services_i18n_service_I18nService(browserApi["a" /* BrowserApi */].getUILanguage(window));
        this.cryptoFunctionService = new webCryptoFunction_service_WebCryptoFunctionService(window, this.platformUtilsService);
        this.logService = new consoleLog_service_ConsoleLogService(false);
        this.cryptoService = new browserCrypto_service_BrowserCryptoService(this.storageService, this.secureStorageService, this.cryptoFunctionService, this.platformUtilsService, this.logService);
        this.tokenService = new token_service_TokenService(this.storageService);
        this.appIdService = new appId_service_AppIdService(this.storageService);
        this.environmentService = new environment_service_EnvironmentService(this.storageService);
        this.apiService = new api_service_ApiService(this.tokenService, this.platformUtilsService, this.environmentService, (expired) => this.logout(expired));
        this.userService = new user_service_UserService(this.tokenService, this.storageService);
        this.settingsService = new SettingsService(this.userService, this.storageService);
        this.fileUploadService = new fileUpload_service_FileUploadService(this.logService, this.apiService);
        this.cipherService = new cipher_service["a" /* CipherService */](this.cryptoService, this.userService, this.settingsService, this.apiService, this.fileUploadService, this.storageService, this.i18nService, () => this.searchService, this.logService);
        this.folderService = new folder_service_FolderService(this.cryptoService, this.userService, this.apiService, this.storageService, this.i18nService, this.cipherService);
        this.collectionService = new collection_service_CollectionService(this.cryptoService, this.userService, this.storageService, this.i18nService);
        this.searchService = new search_service["a" /* SearchService */](this.cipherService, this.logService, this.i18nService);
        this.sendService = new send_service["a" /* SendService */](this.cryptoService, this.userService, this.apiService, this.fileUploadService, this.storageService, this.i18nService, this.cryptoFunctionService);
        this.stateService = new state_service["a" /* StateService */]();
        this.policyService = new policy_service_PolicyService(this.userService, this.storageService, this.apiService);
        this.keyConnectorService = new keyConnector_service_KeyConnectorService(this.storageService, this.userService, this.cryptoService, this.apiService, this.tokenService, this.logService);
        this.vaultTimeoutService = new services_vaultTimeout_service_VaultTimeoutService(this.cipherService, this.folderService, this.collectionService, this.cryptoService, this.platformUtilsService, this.storageService, this.messagingService, this.searchService, this.userService, this.tokenService, this.policyService, this.keyConnectorService, () => main_background_awaiter(this, void 0, void 0, function* () {
            if (this.notificationsService != null) {
                this.notificationsService.updateConnection(false);
            }
            yield this.setIcon();
            yield this.refreshBadgeAndMenu(true);
            if (this.systemService != null) {
                this.systemService.startProcessReload();
                yield this.systemService.clearPendingClipboard();
            }
        }), () => main_background_awaiter(this, void 0, void 0, function* () { return yield this.logout(false); }));
        this.syncService = new sync_service_SyncService(this.userService, this.apiService, this.settingsService, this.folderService, this.cipherService, this.cryptoService, this.collectionService, this.storageService, this.messagingService, this.policyService, this.sendService, this.logService, this.tokenService, this.keyConnectorService, (expired) => main_background_awaiter(this, void 0, void 0, function* () { return yield this.logout(expired); }));
        this.eventService = new event_service_EventService(this.storageService, this.apiService, this.userService, this.cipherService, this.logService);
        this.passwordGenerationService = new passwordGeneration_service_PasswordGenerationService(this.cryptoService, this.storageService, this.policyService);
        this.totpService = new totp_service_TotpService(this.storageService, this.cryptoFunctionService, this.logService);
        this.autofillService = new autofill_service_AutofillService(this.cipherService, this.userService, this.totpService, this.eventService, this.logService);
        this.containerService = new ContainerService(this.cryptoService);
        this.auditService = new audit_service_AuditService(this.cryptoFunctionService, this.apiService);
        this.exportService = new export_service_ExportService(this.folderService, this.cipherService, this.apiService, this.cryptoService);
        this.notificationsService = new notifications_service_NotificationsService(this.userService, this.syncService, this.appIdService, this.apiService, this.vaultTimeoutService, this.environmentService, () => this.logout(true), this.logService);
        this.popupUtilsService = new popup_utils_service["a" /* PopupUtilsService */](this.platformUtilsService);
        this.systemService = new system_service_SystemService(this.storageService, this.vaultTimeoutService, this.messagingService, this.platformUtilsService, () => {
            const forceWindowReload = this.platformUtilsService.isSafari() ||
                this.platformUtilsService.isFirefox() || this.platformUtilsService.isOpera();
            browserApi["a" /* BrowserApi */].reloadExtension(forceWindowReload ? window : null);
            return Promise.resolve();
        });
        this.userVerificationService = new userVerification_service_UserVerificationService(this.cryptoService, this.i18nService, this.apiService);
        // Other fields
        this.isSafari = this.platformUtilsService.isSafari();
        this.sidebarAction = this.isSafari ? null : (typeof opr !== 'undefined') && opr.sidebarAction ?
            opr.sidebarAction : window.chrome.sidebarAction;
        // Background
        this.runtimeBackground = new runtime_background_RuntimeBackground(this, this.autofillService, this.platformUtilsService, this.storageService, this.i18nService, this.notificationsService, this.systemService, this.environmentService, this.messagingService, this.logService);
        this.nativeMessagingBackground = new nativeMessaging_background_NativeMessagingBackground(this.storageService, this.cryptoService, this.cryptoFunctionService, this.vaultTimeoutService, this.runtimeBackground, this.i18nService, this.userService, this.messagingService, this.appIdService, this.platformUtilsService);
        this.commandsBackground = new commands_background_CommandsBackground(this, this.passwordGenerationService, this.platformUtilsService, this.vaultTimeoutService);
        this.notificationBackground = new notification_background_NotificationBackground(this, this.autofillService, this.cipherService, this.storageService, this.vaultTimeoutService, this.policyService, this.folderService, this.userService);
        this.tabsBackground = new TabsBackground(this, this.notificationBackground);
        this.contextMenusBackground = new contextMenus_background_ContextMenusBackground(this, this.cipherService, this.passwordGenerationService, this.platformUtilsService, this.vaultTimeoutService, this.eventService, this.totpService);
        this.idleBackground = new idle_background_IdleBackground(this.vaultTimeoutService, this.storageService, this.notificationsService);
        this.webRequestBackground = new webRequest_background_WebRequestBackground(this.platformUtilsService, this.cipherService, this.vaultTimeoutService);
        this.windowsBackground = new WindowsBackground(this);
        const that = this;
        this.authService = new auth_service["a" /* AuthService */](this.cryptoService, this.apiService, this.userService, this.tokenService, this.appIdService, this.i18nService, this.platformUtilsService, new class extends messaging_service["a" /* MessagingService */] {
            constructor() {
                super(...arguments);
                // AuthService should send the messages to the background not popup.
                this.send = (subscriber, arg = {}) => {
                    const message = Object.assign({}, { command: subscriber }, arg);
                    that.runtimeBackground.processMessage(message, that, null);
                };
            }
        }(), this.vaultTimeoutService, this.logService, this.cryptoFunctionService, this.environmentService, this.keyConnectorService);
    }
    bootstrap() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            this.containerService.attachToWindow(window);
            this.authService.init();
            yield this.vaultTimeoutService.init(true);
            yield this.i18nService.init();
            yield this.eventService.init(true);
            yield this.runtimeBackground.init();
            yield this.notificationBackground.init();
            yield this.commandsBackground.init();
            yield this.tabsBackground.init();
            yield this.contextMenusBackground.init();
            yield this.idleBackground.init();
            yield this.webRequestBackground.init();
            yield this.windowsBackground.init();
            return new Promise(resolve => {
                setTimeout(() => main_background_awaiter(this, void 0, void 0, function* () {
                    yield this.environmentService.setUrlsFromStorage();
                    yield this.setIcon();
                    this.fullSync(true);
                    setTimeout(() => this.notificationsService.init(), 2500);
                    resolve();
                }), 500);
            });
        });
    }
    setIcon() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!chrome.browserAction && !this.sidebarAction) {
                return;
            }
            const isAuthenticated = yield this.userService.isAuthenticated();
            const locked = yield this.vaultTimeoutService.isLocked();
            let suffix = '';
            if (!isAuthenticated) {
                suffix = '_gray';
            }
            else if (locked) {
                suffix = '_locked';
            }
            yield this.actionSetIcon(chrome.browserAction, suffix);
            yield this.actionSetIcon(this.sidebarAction, suffix);
        });
    }
    refreshBadgeAndMenu(forLocked = false) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!chrome.windows || !chrome.contextMenus) {
                return;
            }
            const menuDisabled = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableContextMenuItemKey);
            if (!menuDisabled) {
                yield this.buildContextMenu();
            }
            else {
                yield this.contextMenusRemoveAll();
            }
            if (forLocked) {
                yield this.loadMenuAndUpdateBadgeForNoAccessState(!menuDisabled);
                this.onUpdatedRan = this.onReplacedRan = false;
                return;
            }
            const tab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindow();
            if (tab) {
                yield this.contextMenuReady(tab, !menuDisabled);
            }
        });
    }
    logout(expired) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            yield this.eventService.uploadEvents();
            const userId = yield this.userService.getUserId();
            yield Promise.all([
                this.eventService.clearEvents(),
                this.syncService.setLastSync(new Date(0)),
                this.tokenService.clearToken(),
                this.cryptoService.clearKeys(),
                this.userService.clear(),
                this.settingsService.clear(userId),
                this.cipherService.clear(userId),
                this.folderService.clear(userId),
                this.collectionService.clear(userId),
                this.policyService.clear(userId),
                this.passwordGenerationService.clear(),
                this.vaultTimeoutService.clear(),
                this.keyConnectorService.clear(),
            ]);
            this.searchService.clearIndex();
            this.messagingService.send('doneLoggingOut', { expired: expired });
            yield this.setIcon();
            yield this.refreshBadgeAndMenu();
            yield this.reseedStorage();
            this.notificationsService.updateConnection(false);
            this.systemService.startProcessReload();
            yield this.systemService.clearPendingClipboard();
        });
    }
    collectPageDetailsForContentScript(tab, sender, frameId = null) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (tab == null || !tab.id) {
                return;
            }
            const options = {};
            if (frameId != null) {
                options.frameId = frameId;
            }
            browserApi["a" /* BrowserApi */].tabSendMessage(tab, {
                command: 'collectPageDetails',
                tab: tab,
                sender: sender,
            }, options);
        });
    }
    openPopup() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            // Chrome APIs cannot open popup
            // TODO: Do we need to open this popup?
            if (!this.isSafari) {
                return;
            }
            yield safariApp["a" /* SafariApp */].sendMessageToApp('showPopover', null, true);
        });
    }
    reseedStorage() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!this.platformUtilsService.isChrome() && !this.platformUtilsService.isVivaldi() &&
                !this.platformUtilsService.isOpera()) {
                return;
            }
            const currentVaultTimeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            if (currentVaultTimeout == null) {
                return;
            }
            const getStorage = () => new Promise(resolve => {
                chrome.storage.local.get(null, (o) => resolve(o));
            });
            const clearStorage = () => new Promise(resolve => {
                chrome.storage.local.clear(() => resolve());
            });
            const storage = yield getStorage();
            yield clearStorage();
            for (const key in storage) {
                if (!storage.hasOwnProperty(key)) {
                    continue;
                }
                yield this.storageService.save(key, storage[key]);
            }
        });
    }
    buildContextMenu() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!chrome.contextMenus || this.buildingContextMenu) {
                return;
            }
            this.buildingContextMenu = true;
            yield this.contextMenusRemoveAll();
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'root',
                contexts: ['all'],
                title: 'Bitwarden',
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'autofill',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('autoFill'),
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'copy-username',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('copyUsername'),
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'copy-password',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('copyPassword'),
            });
            if (yield this.userService.canAccessPremium()) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'copy-totp',
                    parentId: 'root',
                    contexts: ['all'],
                    title: this.i18nService.t('copyVerificationCode'),
                });
            }
            yield this.contextMenusCreate({
                type: 'separator',
                parentId: 'root',
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'generate-password',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('generatePasswordCopied'),
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'copy-identifier',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('copyElementIdentifier'),
            });
            this.buildingContextMenu = false;
        });
    }
    contextMenuReady(tab, contextMenuEnabled) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            yield this.loadMenuAndUpdateBadge(tab.url, tab.id, contextMenuEnabled);
            this.onUpdatedRan = this.onReplacedRan = false;
        });
    }
    loadMenuAndUpdateBadge(url, tabId, contextMenuEnabled) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!url || (!chrome.browserAction && !this.sidebarAction)) {
                return;
            }
            this.actionSetBadgeBackgroundColor(chrome.browserAction);
            this.actionSetBadgeBackgroundColor(this.sidebarAction);
            this.menuOptionsLoaded = [];
            const locked = yield this.vaultTimeoutService.isLocked();
            if (!locked) {
                try {
                    const ciphers = yield this.cipherService.getAllDecryptedForUrl(url);
                    ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));
                    if (contextMenuEnabled) {
                        ciphers.forEach(cipher => {
                            this.loadLoginContextMenuOptions(cipher);
                        });
                    }
                    const disableBadgeCounter = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableBadgeCounterKey);
                    let theText = '';
                    if (!disableBadgeCounter) {
                        if (ciphers.length > 0 && ciphers.length <= 9) {
                            theText = ciphers.length.toString();
                        }
                        else if (ciphers.length > 0) {
                            theText = '9+';
                        }
                    }
                    if (contextMenuEnabled && ciphers.length === 0) {
                        yield this.loadNoLoginsContextMenuOptions(this.i18nService.t('noMatchingLogins'));
                    }
                    this.sidebarActionSetBadgeText(theText, tabId);
                    this.browserActionSetBadgeText(theText, tabId);
                    return;
                }
                catch (e) {
                    this.logService.error(e);
                }
            }
            yield this.loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled);
        });
    }
    loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (contextMenuEnabled) {
                const authed = yield this.userService.isAuthenticated();
                yield this.loadNoLoginsContextMenuOptions(this.i18nService.t(authed ? 'vaultLocked' : 'vaultLoggedOut'));
            }
            const tabs = yield browserApi["a" /* BrowserApi */].getActiveTabs();
            if (tabs != null) {
                tabs.forEach(tab => {
                    if (tab.id != null) {
                        this.browserActionSetBadgeText('', tab.id);
                        this.sidebarActionSetBadgeText('', tab.id);
                    }
                });
            }
        });
    }
    loadLoginContextMenuOptions(cipher) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (cipher == null || cipher.type !== cipherType["a" /* CipherType */].Login || cipher.reprompt !== cipherRepromptType["a" /* CipherRepromptType */].None) {
                return;
            }
            let title = cipher.name;
            if (cipher.login.username && cipher.login.username !== '') {
                title += (' (' + cipher.login.username + ')');
            }
            yield this.loadContextMenuOptions(title, cipher.id, cipher);
        });
    }
    loadNoLoginsContextMenuOptions(noLoginsMessage) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            yield this.loadContextMenuOptions(noLoginsMessage, 'noop', null);
        });
    }
    loadContextMenuOptions(title, idSuffix, cipher) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!chrome.contextMenus || this.menuOptionsLoaded.indexOf(idSuffix) > -1 ||
                (cipher != null && cipher.type !== cipherType["a" /* CipherType */].Login)) {
                return;
            }
            this.menuOptionsLoaded.push(idSuffix);
            if (cipher == null || (cipher.login.password && cipher.login.password !== '')) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'autofill_' + idSuffix,
                    parentId: 'autofill',
                    contexts: ['all'],
                    title: this.sanitizeContextMenuTitle(title),
                });
            }
            if (cipher == null || (cipher.login.username && cipher.login.username !== '')) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'copy-username_' + idSuffix,
                    parentId: 'copy-username',
                    contexts: ['all'],
                    title: this.sanitizeContextMenuTitle(title),
                });
            }
            if (cipher == null || (cipher.login.password && cipher.login.password !== '' && cipher.viewPassword)) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'copy-password_' + idSuffix,
                    parentId: 'copy-password',
                    contexts: ['all'],
                    title: this.sanitizeContextMenuTitle(title),
                });
            }
            const canAccessPremium = yield this.userService.canAccessPremium();
            if (canAccessPremium && (cipher == null || (cipher.login.totp && cipher.login.totp !== ''))) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'copy-totp_' + idSuffix,
                    parentId: 'copy-totp',
                    contexts: ['all'],
                    title: this.sanitizeContextMenuTitle(title),
                });
            }
        });
    }
    sanitizeContextMenuTitle(title) {
        return title.replace(/&/g, '&&');
    }
    fullSync(override = false) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            const syncInternal = 6 * 60 * 60 * 1000; // 6 hours
            const lastSync = yield this.syncService.getLastSync();
            let lastSyncAgo = syncInternal + 1;
            if (lastSync != null) {
                lastSyncAgo = new Date().getTime() - lastSync.getTime();
            }
            if (override || lastSyncAgo >= syncInternal) {
                yield this.syncService.fullSync(override);
                this.scheduleNextSync();
            }
            else {
                this.scheduleNextSync();
            }
        });
    }
    scheduleNextSync() {
        if (this.syncTimeout) {
            clearTimeout(this.syncTimeout);
        }
        this.syncTimeout = setTimeout(() => main_background_awaiter(this, void 0, void 0, function* () { return yield this.fullSync(); }), 5 * 60 * 1000); // check every 5 minutes
    }
    // Browser API Helpers
    contextMenusRemoveAll() {
        return new Promise(resolve => {
            chrome.contextMenus.removeAll(() => {
                resolve();
                if (chrome.runtime.lastError) {
                    return;
                }
            });
        });
    }
    contextMenusCreate(options) {
        return new Promise(resolve => {
            chrome.contextMenus.create(options, () => {
                resolve();
                if (chrome.runtime.lastError) {
                    return;
                }
            });
        });
    }
    actionSetIcon(theAction, suffix) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!theAction || !theAction.setIcon) {
                return;
            }
            const options = {
                path: {
                    19: 'images/icon19' + suffix + '.png',
                    38: 'images/icon38' + suffix + '.png',
                },
            };
            if (this.platformUtilsService.isFirefox()) {
                yield theAction.setIcon(options);
            }
            else if (this.platformUtilsService.isSafari()) {
                // Workaround since Safari 14.0.3 returns a pending promise
                // which doesn't resolve within a reasonable time.
                theAction.setIcon(options);
            }
            else {
                return new Promise(resolve => {
                    theAction.setIcon(options, () => resolve());
                });
            }
        });
    }
    actionSetBadgeBackgroundColor(action) {
        if (action && action.setBadgeBackgroundColor) {
            action.setBadgeBackgroundColor({ color: '#294e5f' });
        }
    }
    browserActionSetBadgeText(text, tabId) {
        if (chrome.browserAction && chrome.browserAction.setBadgeText) {
            chrome.browserAction.setBadgeText({
                text: text,
                tabId: tabId,
            });
        }
    }
    sidebarActionSetBadgeText(text, tabId) {
        if (!this.sidebarAction) {
            return;
        }
        if (this.sidebarAction.setBadgeText) {
            this.sidebarAction.setBadgeText({
                text: text,
                tabId: tabId,
            });
        }
        else if (this.sidebarAction.setTitle) {
            let title = 'Bitwarden';
            if (text && text !== '') {
                title += (' [' + text + ']');
            }
            this.sidebarAction.setTitle({
                title: title,
                tabId: tabId,
            });
        }
    }
}

// CONCATENATED MODULE: ./src/background.ts

const bitwardenMain = window.bitwardenMain = new main_background_MainBackground();
bitwardenMain.bootstrap().then(() => {
    // Finished bootstrapping
});


/***/ }),

/***/ 8:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseResponse; });
class BaseResponse {
    constructor(response) {
        this.response = response;
    }
    getResponseProperty(propertyName, response = null, exactName = false) {
        if (propertyName == null || propertyName === '') {
            throw new Error('propertyName must not be null/empty.');
        }
        if (response == null && this.response != null) {
            response = this.response;
        }
        if (response == null) {
            return null;
        }
        if (!exactName && response[propertyName] === undefined) {
            let otherCasePropertyName = null;
            if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {
                otherCasePropertyName = propertyName.charAt(0).toLowerCase();
            }
            else {
                otherCasePropertyName = propertyName.charAt(0).toUpperCase();
            }
            if (propertyName.length > 1) {
                otherCasePropertyName += propertyName.slice(1);
            }
            propertyName = otherCasePropertyName;
            if (response[propertyName] === undefined) {
                propertyName = propertyName.toLowerCase();
            }
            if (response[propertyName] === undefined) {
                propertyName = propertyName.toUpperCase();
            }
        }
        return response[propertyName];
    }
}


/***/ }),

/***/ 80:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherView; });
/* harmony import */ var _enums_cipherRepromptType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48);
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _cardView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
/* harmony import */ var _identityView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(108);
/* harmony import */ var _loginView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(88);
/* harmony import */ var _secureNoteView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(114);






class CipherView {
    constructor(c) {
        var _a;
        this.id = null;
        this.organizationId = null;
        this.folderId = null;
        this.name = null;
        this.notes = null;
        this.type = null;
        this.favorite = false;
        this.organizationUseTotp = false;
        this.edit = false;
        this.viewPassword = true;
        this.login = new _loginView__WEBPACK_IMPORTED_MODULE_4__[/* LoginView */ "a"]();
        this.identity = new _identityView__WEBPACK_IMPORTED_MODULE_3__[/* IdentityView */ "a"]();
        this.card = new _cardView__WEBPACK_IMPORTED_MODULE_2__[/* CardView */ "a"]();
        this.secureNote = new _secureNoteView__WEBPACK_IMPORTED_MODULE_5__[/* SecureNoteView */ "a"]();
        this.attachments = null;
        this.fields = null;
        this.passwordHistory = null;
        this.collectionIds = null;
        this.revisionDate = null;
        this.deletedDate = null;
        this.reprompt = _enums_cipherRepromptType__WEBPACK_IMPORTED_MODULE_0__[/* CipherRepromptType */ "a"].None;
        if (!c) {
            return;
        }
        this.id = c.id;
        this.organizationId = c.organizationId;
        this.folderId = c.folderId;
        this.favorite = c.favorite;
        this.organizationUseTotp = c.organizationUseTotp;
        this.edit = c.edit;
        this.viewPassword = c.viewPassword;
        this.type = c.type;
        this.localData = c.localData;
        this.collectionIds = c.collectionIds;
        this.revisionDate = c.revisionDate;
        this.deletedDate = c.deletedDate;
        // Old locally stored ciphers might have reprompt == null. If so set it to None.
        this.reprompt = (_a = c.reprompt) !== null && _a !== void 0 ? _a : _enums_cipherRepromptType__WEBPACK_IMPORTED_MODULE_0__[/* CipherRepromptType */ "a"].None;
    }
    get item() {
        switch (this.type) {
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Login:
                return this.login;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].SecureNote:
                return this.secureNote;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Card:
                return this.card;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Identity:
                return this.identity;
            default:
                break;
        }
        return null;
    }
    get subTitle() {
        return this.item.subTitle;
    }
    get hasPasswordHistory() {
        return this.passwordHistory && this.passwordHistory.length > 0;
    }
    get hasAttachments() {
        return this.attachments && this.attachments.length > 0;
    }
    get hasOldAttachments() {
        if (this.hasAttachments) {
            for (let i = 0; i < this.attachments.length; i++) {
                if (this.attachments[i].key == null) {
                    return true;
                }
            }
        }
        return false;
    }
    get hasFields() {
        return this.fields && this.fields.length > 0;
    }
    get passwordRevisionDisplayDate() {
        if (this.type !== _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Login || this.login == null) {
            return null;
        }
        else if (this.login.password == null || this.login.password === '') {
            return null;
        }
        return this.login.passwordRevisionDate;
    }
    get isDeleted() {
        return this.deletedDate != null;
    }
    get linkedFieldOptions() {
        return this.item.linkedFieldOptions;
    }
    linkedFieldValue(id) {
        var _a;
        const linkedFieldOption = (_a = this.linkedFieldOptions) === null || _a === void 0 ? void 0 : _a.get(id);
        if (linkedFieldOption == null) {
            return null;
        }
        const item = this.item;
        return this.item[linkedFieldOption.propertyKey];
    }
    linkedFieldI18nKey(id) {
        var _a;
        return (_a = this.linkedFieldOptions.get(id)) === null || _a === void 0 ? void 0 : _a.i18nKey;
    }
}


/***/ }),

/***/ 81:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return HashPurpose; });
var HashPurpose;
(function (HashPurpose) {
    HashPurpose[HashPurpose["ServerAuthorization"] = 1] = "ServerAuthorization";
    HashPurpose[HashPurpose["LocalAuthorization"] = 2] = "LocalAuthorization";
})(HashPurpose || (HashPurpose = {}));


/***/ }),

/***/ 82:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ThemeType; });
var ThemeType;
(function (ThemeType) {
    ThemeType["System"] = "system";
    ThemeType["Light"] = "light";
    ThemeType["Dark"] = "dark";
    ThemeType["Nord"] = "nord";
    ThemeType["SolarizedDark"] = "solarizedDark";
})(ThemeType || (ThemeType = {}));


/***/ }),

/***/ 88:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginView; });
/* harmony import */ var _itemView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(76);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var _enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);
/* harmony import */ var _misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class LoginView extends _itemView__WEBPACK_IMPORTED_MODULE_0__[/* ItemView */ "a"] {
    constructor(l) {
        super();
        this.username = null;
        this.password = null;
        this.passwordRevisionDate = null;
        this.totp = null;
        this.uris = null;
        this.autofillOnPageLoad = null;
        if (!l) {
            return;
        }
        this.passwordRevisionDate = l.passwordRevisionDate;
        this.autofillOnPageLoad = l.autofillOnPageLoad;
    }
    get uri() {
        return this.hasUris ? this.uris[0].uri : null;
    }
    get maskedPassword() {
        return this.password != null ? '••••••••' : null;
    }
    get subTitle() {
        return this.username;
    }
    get canLaunch() {
        return this.hasUris && this.uris.some(u => u.canLaunch);
    }
    get hasTotp() {
        return !_misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].isNullOrWhitespace(this.totp);
    }
    get launchUri() {
        if (this.hasUris) {
            const uri = this.uris.find(u => u.canLaunch);
            if (uri != null) {
                return uri.launchUri;
            }
        }
        return null;
    }
    get hasUris() {
        return this.uris != null && this.uris.length > 0;
    }
}
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* LoginLinkedId */ "c"].Username),
    __metadata("design:type", String)
], LoginView.prototype, "username", void 0);
__decorate([
    Object(_misc_linkedFieldOption_decorator__WEBPACK_IMPORTED_MODULE_3__[/* linkedFieldOption */ "a"])(_enums_linkedIdType__WEBPACK_IMPORTED_MODULE_2__[/* LoginLinkedId */ "c"].Password),
    __metadata("design:type", String)
], LoginView.prototype, "password", void 0);


/***/ }),

/***/ 9:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConstantsService; });
class ConstantsService {
    constructor() {
        this.environmentUrlsKey = ConstantsService.environmentUrlsKey;
        this.disableGaKey = ConstantsService.disableGaKey;
        this.disableAddLoginNotificationKey = ConstantsService.disableAddLoginNotificationKey;
        this.disableContextMenuItemKey = ConstantsService.disableContextMenuItemKey;
        this.disableFaviconKey = ConstantsService.disableFaviconKey;
        this.disableBadgeCounterKey = ConstantsService.disableBadgeCounterKey;
        this.disableAutoTotpCopyKey = ConstantsService.disableAutoTotpCopyKey;
        this.disableAutoBiometricsPromptKey = ConstantsService.disableAutoBiometricsPromptKey;
        this.enableAutoFillOnPageLoadKey = ConstantsService.enableAutoFillOnPageLoadKey;
        this.autoFillOnPageLoadDefaultKey = ConstantsService.autoFillOnPageLoadDefaultKey;
        this.vaultTimeoutKey = ConstantsService.vaultTimeoutKey;
        this.vaultTimeoutActionKey = ConstantsService.vaultTimeoutActionKey;
        this.lastActiveKey = ConstantsService.lastActiveKey;
        this.neverDomainsKey = ConstantsService.neverDomainsKey;
        this.installedVersionKey = ConstantsService.installedVersionKey;
        this.localeKey = ConstantsService.localeKey;
        this.themeKey = ConstantsService.themeKey;
        this.collapsedGroupingsKey = ConstantsService.collapsedGroupingsKey;
        this.autoConfirmFingerprints = ConstantsService.autoConfirmFingerprints;
        this.dontShowCardsCurrentTab = ConstantsService.dontShowCardsCurrentTab;
        this.dontShowIdentitiesCurrentTab = ConstantsService.dontShowIdentitiesCurrentTab;
        this.defaultUriMatch = ConstantsService.defaultUriMatch;
        this.pinProtectedKey = ConstantsService.pinProtectedKey;
        this.protectedPin = ConstantsService.protectedPin;
        this.clearClipboardKey = ConstantsService.clearClipboardKey;
        this.eventCollectionKey = ConstantsService.eventCollectionKey;
        this.ssoCodeVerifierKey = ConstantsService.ssoCodeVerifierKey;
        this.ssoStateKey = ConstantsService.ssoStateKey;
        this.biometricUnlockKey = ConstantsService.biometricUnlockKey;
        this.biometricText = ConstantsService.biometricText;
        this.biometricAwaitingAcceptance = ConstantsService.biometricAwaitingAcceptance;
        this.biometricFingerprintValidated = ConstantsService.biometricFingerprintValidated;
    }
}
ConstantsService.environmentUrlsKey = 'environmentUrls';
ConstantsService.disableGaKey = 'disableGa';
ConstantsService.disableAddLoginNotificationKey = 'disableAddLoginNotification';
ConstantsService.disableChangedPasswordNotificationKey = 'disableChangedPasswordNotification';
ConstantsService.disableContextMenuItemKey = 'disableContextMenuItem';
ConstantsService.disableFaviconKey = 'disableFavicon';
ConstantsService.disableBadgeCounterKey = 'disableBadgeCounter';
ConstantsService.disableAutoTotpCopyKey = 'disableAutoTotpCopy';
ConstantsService.disableAutoBiometricsPromptKey = 'noAutoPromptBiometrics';
ConstantsService.enableAutoFillOnPageLoadKey = 'enableAutoFillOnPageLoad';
ConstantsService.autoFillOnPageLoadDefaultKey = 'autoFillOnPageLoadDefault';
ConstantsService.vaultTimeoutKey = 'lockOption';
ConstantsService.vaultTimeoutActionKey = 'vaultTimeoutAction';
ConstantsService.lastActiveKey = 'lastActive';
ConstantsService.neverDomainsKey = 'neverDomains';
ConstantsService.installedVersionKey = 'installedVersion';
ConstantsService.localeKey = 'locale';
ConstantsService.themeKey = 'theme';
ConstantsService.collapsedGroupingsKey = 'collapsedGroupings';
ConstantsService.autoConfirmFingerprints = 'autoConfirmFingerprints';
ConstantsService.dontShowCardsCurrentTab = 'dontShowCardsCurrentTab';
ConstantsService.dontShowIdentitiesCurrentTab = 'dontShowIdentitiesCurrentTab';
ConstantsService.defaultUriMatch = 'defaultUriMatch';
ConstantsService.pinProtectedKey = 'pinProtectedKey';
ConstantsService.protectedPin = 'protectedPin';
ConstantsService.clearClipboardKey = 'clearClipboardKey';
ConstantsService.eventCollectionKey = 'eventCollection';
ConstantsService.ssoCodeVerifierKey = 'ssoCodeVerifier';
ConstantsService.ssoStateKey = 'ssoState';
ConstantsService.biometricUnlockKey = 'biometric';
ConstantsService.biometricText = 'biometricText';
ConstantsService.biometricAwaitingAcceptance = 'biometricAwaitingAcceptance';
ConstantsService.biometricFingerprintValidated = 'biometricFingerprintValidated';


/***/ }),

/***/ 92:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherData; });
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var _attachmentData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(269);
/* harmony import */ var _cardData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(270);
/* harmony import */ var _fieldData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(271);
/* harmony import */ var _identityData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(272);
/* harmony import */ var _loginData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(273);
/* harmony import */ var _passwordHistoryData__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(275);
/* harmony import */ var _secureNoteData__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(276);








class CipherData {
    constructor(response, userId, collectionIds) {
        if (response == null) {
            return;
        }
        this.id = response.id;
        this.organizationId = response.organizationId;
        this.folderId = response.folderId;
        this.userId = userId;
        this.edit = response.edit;
        this.viewPassword = response.viewPassword;
        this.organizationUseTotp = response.organizationUseTotp;
        this.favorite = response.favorite;
        this.revisionDate = response.revisionDate;
        this.type = response.type;
        this.name = response.name;
        this.notes = response.notes;
        this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;
        this.deletedDate = response.deletedDate;
        this.reprompt = response.reprompt;
        switch (this.type) {
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                this.login = new _loginData__WEBPACK_IMPORTED_MODULE_5__[/* LoginData */ "a"](response.login);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                this.secureNote = new _secureNoteData__WEBPACK_IMPORTED_MODULE_7__[/* SecureNoteData */ "a"](response.secureNote);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                this.card = new _cardData__WEBPACK_IMPORTED_MODULE_2__[/* CardData */ "a"](response.card);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                this.identity = new _identityData__WEBPACK_IMPORTED_MODULE_4__[/* IdentityData */ "a"](response.identity);
                break;
            default:
                break;
        }
        if (response.fields != null) {
            this.fields = response.fields.map(f => new _fieldData__WEBPACK_IMPORTED_MODULE_3__[/* FieldData */ "a"](f));
        }
        if (response.attachments != null) {
            this.attachments = response.attachments.map(a => new _attachmentData__WEBPACK_IMPORTED_MODULE_1__[/* AttachmentData */ "a"](a));
        }
        if (response.passwordHistory != null) {
            this.passwordHistory = response.passwordHistory.map(ph => new _passwordHistoryData__WEBPACK_IMPORTED_MODULE_6__[/* PasswordHistoryData */ "a"](ph));
        }
    }
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9lbnVtcy9jaXBoZXJUeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3ZpZXcvbG9naW5VcmlWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL3NhZmFyaUFwcC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy92aWV3L2NhcmRWaWV3LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3ZpZXcvaWRlbnRpdHlWaWV3LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3ZpZXcvc2VjdXJlTm90ZVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVxdWVzdC9rZXlzUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy92aWV3L2ZvbGRlclZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL2NpcGhlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9icm93c2VyQXBpLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvZW51bXMvb3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvdmlldy9zZW5kRmlsZVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvdmlldy9zZW5kVGV4dFZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9lbnVtcy90d29GYWN0b3JQcm92aWRlclR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVxdWVzdC9hdHRhY2htZW50UmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXF1ZXN0L2NpcGhlclJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvdmlldy9maWVsZFZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9lbnVtcy92ZXJpZmljYXRpb25UeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvYWJzdHJhY3Rpb25zL21lc3NhZ2luZy5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3Qvc2VjcmV0VmVyaWZpY2F0aW9uUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL2tkZlR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVxdWVzdC9rZXlDb25uZWN0b3JVc2VyS2V5UmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kYXRhL3NlbmRGaWxlRGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kYXRhL3NlbmRUZXh0RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kYXRhL3NlbmREYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2FwaS9zZW5kRmlsZUFwaS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9hcGkvc2VuZFRleHRBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL2NhcmQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL2ZpZWxkLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvZW51bXMvbGlua2VkSWRUeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9pZGVudGl0eS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vbG9naW4udHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL2xvZ2luVXJpLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9zZWN1cmVOb3RlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9hdXRoUmVzdWx0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvYWNjb3VudC9zZXRLZXlDb25uZWN0b3JLZXlSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvZGV2aWNlUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXF1ZXN0L3ByZWxvZ2luUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXF1ZXN0L3Rva2VuUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL2F1dGguc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21pc2Mvc2VxdWVudGlhbGl6ZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21pc2MvbGlua2VkRmllbGRPcHRpb24uZGVjb3JhdG9yLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9lbmNTdHJpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vJF9sYXp5X3JvdXRlX3Jlc291cmNlIGxhenkgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL3NlY3VyZU5vdGVUeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3ZpZXcvc2VuZFZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2Jyb3dzZXJNZXNzYWdpbmcuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL3N0YXRlLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9zZWFyY2guc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy92aWV3L3Bhc3N3b3JkSGlzdG9yeVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BvcHVwL3NlcnZpY2VzL3BvcHVwLXV0aWxzLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL21hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9hcGkvY2FyZEFwaS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9hcGkvZmllbGRBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvYXBpL2lkZW50aXR5QXBpLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2FwaS9sb2dpbkFwaS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9hcGkvbG9naW5VcmlBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvYXBpL3NlY3VyZU5vdGVBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZGF0YS9hdHRhY2htZW50RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kYXRhL2NhcmREYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RhdGEvZmllbGREYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RhdGEvaWRlbnRpdHlEYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RhdGEvbG9naW5EYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RhdGEvbG9naW5VcmlEYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RhdGEvcGFzc3dvcmRIaXN0b3J5RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kYXRhL3NlY3VyZU5vdGVEYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9wYXNzd29yZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vc2VuZEZpbGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL3NlbmRUZXh0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvZW51bXMvZW5jcnlwdGlvblR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvdmlldy9hdHRhY2htZW50Vmlldy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vYXR0YWNobWVudC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vc2VuZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL2RvbWFpbkJhc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9lbnVtcy91cmlNYXRjaFR5cGUudHMiLCJ3ZWJwYWNrOi8vL2NyeXB0byAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrRGVsZXRlUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL2RldmljZVR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9lbnVtcy9zZW5kVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL2NpcGhlci5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvY2lwaGVyQnVsa01vdmVSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvY2lwaGVyQnVsa1Jlc3RvcmVSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvY2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvY2lwaGVyQ3JlYXRlUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXF1ZXN0L2NpcGhlclNoYXJlUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vc29ydGVkQ2lwaGVyc0NhY2hlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvc2VydmljZXMvYml0d2FyZGVuRmlsZVVwbG9hZC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvc2VydmljZXMvc2VuZC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3Qvc2VuZFJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVxdWVzdC9jaXBoZXJXaXRoSWRSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvY2lwaGVyQnVsa1NoYXJlUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL2NpcGhlclJlcHJvbXB0VHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL2V2ZW50VHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL2ZpZWxkVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL3BvbGljeVR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9taXNjL3V0aWxzLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9zeW1tZXRyaWNDcnlwdG9LZXkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvZXJyb3JSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vL3V0aWwgKGlnbm9yZWQpP2JkZGIiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvdmlldy9pdGVtVmlldy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9hcGlLZXlSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9hdHRhY2htZW50UmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvcGFzc3dvcmRIaXN0b3J5UmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvY2lwaGVyUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvYXR0YWNobWVudFVwbG9hZERhdGFSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9iaWxsaW5nUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvYnJlYWNoQWNjb3VudFJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3NlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvY29sbGVjdGlvblJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2dsb2JhbERvbWFpblJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2RvbWFpbnNSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9lbWVyZ2VuY3lBY2Nlc3NSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9ldmVudFJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2ZvbGRlclJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2dyb3VwUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvaWRlbnRpdHlDYXB0Y2hhUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvaWRlbnRpdHlUb2tlblJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2lkZW50aXR5VHdvRmFjdG9yUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvbGlzdFJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2FwaS9zc29Db25maWdBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uL29yZ2FuaXphdGlvblNzb1Jlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL29yZ2FuaXphdGlvbkF1dG9FbnJvbGxTdGF0dXNSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9rZXlzUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uS2V5c1Jlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3BsYW5SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9vcmdhbml6YXRpb25SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9zdWJzY3JpcHRpb25SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9vcmdhbml6YXRpb25TdWJzY3JpcHRpb25SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9vcmdhbml6YXRpb25Vc2VyQnVsa1B1YmxpY0tleVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL29yZ2FuaXphdGlvblVzZXJCdWxrUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvYXBpL3Blcm1pc3Npb25zQXBpLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL29yZ2FuaXphdGlvblVzZXJSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9wcm9maWxlT3JnYW5pemF0aW9uUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvcHJvZmlsZVByb3ZpZGVyT3JnYW5pemF0aW9uUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvcHJvZmlsZVByb3ZpZGVyUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvcHJvZmlsZVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3BheW1lbnRSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9wb2xpY3lSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9wcmVsb2dpblJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3Byb3ZpZGVyL3Byb3ZpZGVyT3JnYW5pemF0aW9uUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvcHJvdmlkZXIvcHJvdmlkZXJSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9wcm92aWRlci9wcm92aWRlclVzZXJCdWxrUHVibGljS2V5UmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvcHJvdmlkZXIvcHJvdmlkZXJVc2VyQnVsa1Jlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3Byb3ZpZGVyL3Byb3ZpZGVyVXNlclJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3NlbmRBY2Nlc3NSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9zZW5kRmlsZURvd25sb2FkRGF0YVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3NlbmRSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9zZW5kRmlsZVVwbG9hZERhdGFSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9zeW5jUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvdGF4SW5mb1Jlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3RheFJhdGVSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS90d29GYWN0b3JBdXRoZW50aWNhdG9yUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yRHVvUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yRW1haWxSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS90d29GYWN0b3JQcm92aWRlclJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvclJlc2NvdmVyUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yV2ViQXV0aG5SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS90d29GYWN0b3JZdWJpS2V5UmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2UvdXNlcktleVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2tleUNvbm5lY3RvclVzZXJLZXlSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL2FwaS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvc2VydmljZXMvYXBwSWQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21pc2MvdGhyb3R0bGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9hdWRpdC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RhdGEvY29sbGVjdGlvbkRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvdmlldy9jb2xsZWN0aW9uVmlldy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vY29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vdHJlZU5vZGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9taXNjL3NlcnZpY2VVdGlscy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL2NvbGxlY3Rpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL2xvZ0xldmVsVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL2NvbnNvbGVMb2cuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL2NvbnRhaW5lci5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9lbnZpcm9ubWVudFVybHMudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9lbnZpcm9ubWVudC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RhdGEvZXZlbnREYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvZXZlbnRSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvc2VydmljZXMvZXZlbnQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9leHBvcnQvY2FyZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9leHBvcnQvZmllbGQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZXhwb3J0L2lkZW50aXR5LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2V4cG9ydC9sb2dpblVyaS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9leHBvcnQvbG9naW4udHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZXhwb3J0L3NlY3VyZU5vdGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZXhwb3J0L2NpcGhlci50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9leHBvcnQvY2lwaGVyV2l0aElkcy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9leHBvcnQvY29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9leHBvcnQvY29sbGVjdGlvbldpdGhJZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9leHBvcnQvZXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL2ZvbGRlci50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9leHBvcnQvZm9sZGVyLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2V4cG9ydC9mb2xkZXJXaXRoSWQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9leHBvcnQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL2ZpbGVVcGxvYWRUeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvc2VydmljZXMvYXp1cmVGaWxlVXBsb2FkLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9maWxlVXBsb2FkLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZGF0YS9mb2xkZXJEYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL3JlcXVlc3QvZm9sZGVyUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL2ZvbGRlci5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvZW51bXMvb3JnYW5pemF0aW9uVXNlclR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9rZXlDb25uZWN0b3Iuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL25vdGlmaWNhdGlvblR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvcmVzcG9uc2Uvbm90aWZpY2F0aW9uUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9ub3RpZmljYXRpb25zLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL2dlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vcGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbWlzYy93b3JkbGlzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL3Bhc3N3b3JkR2VuZXJhdGlvbi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RhdGEvcG9saWN5RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vcG9saWN5LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9yZXNldFBhc3N3b3JkUG9saWN5T3B0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL3BvbGljeS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvc2VydmljZXMvc2V0dGluZ3Muc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kYXRhL29yZ2FuaXphdGlvbkRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZGF0YS9wcm92aWRlckRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9zeW5jLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9zeXN0ZW0uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL3Rva2VuLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy90b3RwLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvZG9tYWluL29yZ2FuaXphdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL2VudW1zL3Byb3ZpZGVyVXNlclN0YXR1c1R5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9lbnVtcy9wcm92aWRlclVzZXJUeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9wcm92aWRlci50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL3VzZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXF1ZXN0L2FjY291bnQvdmVyaWZ5T1RQUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL3VzZXJWZXJpZmljYXRpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vZGVjcnlwdFBhcmFtZXRlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy93ZWJDcnlwdG9GdW5jdGlvbi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL2NvbW1hbmRzLmJhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhY2tncm91bmQvY29udGV4dE1lbnVzLmJhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhY2tncm91bmQvaWRsZS5iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL25hdGl2ZU1lc3NhZ2luZy5iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL21vZGVscy9ub3RpZmljYXRpb25RdWV1ZU1lc3NhZ2VUeXBlLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL25vdGlmaWNhdGlvbi5iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL3J1bnRpbWUuYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFja2dyb3VuZC90YWJzLmJhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhY2tncm91bmQvd2ViUmVxdWVzdC5iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL3dpbmRvd3MuYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWxzL2F1dG9maWxsU2NyaXB0LnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9hdXRvZmlsbC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvbW9kZWxzL2RvbWFpbi9lbmNBcnJheUJ1ZmZlci50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kb21haW4vZW5jcnlwdGVkT2JqZWN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvc2VydmljZXMvY3J5cHRvLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2Jyb3dzZXJDcnlwdG8uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvYnJvd3NlclBsYXRmb3JtVXRpbHMuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvYnJvd3NlclN0b3JhZ2Uuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL3NlcnZpY2VzL2kxOG4uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvaTE4bi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvc2VydmljZXMvdmF1bHRUaW1lb3V0LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3ZhdWx0VGltZW91dC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL21haW4uYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9yZXNwb25zZS9iYXNlUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvdmlldy9jaXBoZXJWaWV3LnRzIiwid2VicGFjazovLy8uL2pzbGliL2NvbW1vbi9zcmMvZW51bXMvaGFzaFB1cnBvc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9lbnVtcy90aGVtZVR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9tb2RlbHMvdmlldy9sb2dpblZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvY29tbW9uL3NyYy9zZXJ2aWNlcy9jb25zdGFudHMuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9jb21tb24vc3JjL21vZGVscy9kYXRhL2NpcGhlckRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsUUFBUSxvQkFBb0I7UUFDNUI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxpQkFBaUIsNEJBQTRCO1FBQzdDO1FBQ0E7UUFDQSxrQkFBa0IsMkJBQTJCO1FBQzdDO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFD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QUFJLHFDQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDNUUsTUFBTSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxxQ0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUkscUNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM1RSxNQUFNLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLHFDQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDNUUsTUFBTSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxxQ0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUkscUNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNuRSxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLHFDQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbEYsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxxQ0FBUyxD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UztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixLQUFLO0lBQ0wsTUFBTTtJQUNOLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsTUFBTTtJQUNOLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsS0FBSztJQUNMLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLEtBQUs7SUFDTCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVztJQUNYLFdBQVc7SUFDWCxNQUFNO0lBQ04sV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxNQUFNO0lBQ04sV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLFVBQVU7SUFDVixNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxLQUFLO0lBQ0wsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULEtBQUs7SUFDTCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLEtBQUs7SUFDTCxLQUFLO0lBQ0wsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sTUFBTTtJQUNOLFdBQVc7SUFDWCxNQUFNO0lBQ04sV0FBVztJQUNYLE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxLQUFLO0lBQ0wsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixLQUFLO0lBQ0wsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsS0FBSztJQUNMLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixLQUFLO0lBQ0wsTUFBTTtJQUNOLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixNQUFNO0lBQ04sT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsS0FBSztJQUNMLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLEtBQUs7SUFDTCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixLQUFLO0lBQ0wsU0FBUztJQUNULFVBQVU7SUFDVixLQUFLO0lBQ0wsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLEtBQUs7SUFDTCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsS0FBSztJQUNMLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsS0FBSztJQUNMLE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sS0FBSztJQUNMLEtBQUs7SUFDTCxNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsS0FBSztJQUNMLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsS0FBSztJQUNMLE9BQU87SUFDUCxLQUFLO0lBQ0wsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsS0FBSztJQUNMLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixLQUFLO0lBQ0wsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLEtBQUs7SUFDTCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLFVBQVU7SUFDVixNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsTUFBTTtJQUNOLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsTUFBTTtJQUNOLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLEtBQUs7SUFDTCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsS0FBSztJQUNMLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sS0FBSztJQUNMLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLEtBQUs7SUFDTCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxLQUFLO0lBQ0wsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sTUFBTTtJQUNOLEtBQUs7SUFDTCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLEtBQUs7SUFDTCxNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsS0FBSztJQUNMLE1BQU07SUFDTixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLEtBQUs7SUFDTCxLQUFLO0lBQ0wsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsS0FBSztJQUNMLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxXQUFXO0lBQ1gsTUFBTTtJQUNOLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLEtBQUs7SUFDTCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULEtBQUs7SUFDTCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsTUFBTTtJQUNOLEtBQUs7SUFDTCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixLQUFLO0lBQ0wsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsS0FBSztJQUNMLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULE1BQU07SUFDTixNQUFNO0lBQ04sS0FBSztJQUNMLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLEtBQUs7SUFDTCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsS0FBSztJQUNMLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsS0FBSztJQUNMLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLEtBQUs7SUFDTCxLQUFLO0lBQ0wsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sT0FBTztJQUNQLEtBQUs7SUFDTCxNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLEtBQUs7SUFDTCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLEtBQUs7SUFDTCxLQUFLO0lBQ0wsT0FBTztJQUNQLEtBQUs7SUFDTCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsTUFBTTtJQUNOLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixLQUFLO0lBQ0wsTUFBTTtJQUNOLFVBQVU7SUFDVixNQUFNO0lBQ04sS0FBSztJQUNMLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07SUFDTixNQUFNO0lBQ04sVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxLQUFLO0lBQ0wsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsS0FBSztJQUNMLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLEtBQUs7SUFDTCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLEtBQUs7SUFDTCxNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLEtBQUs7SUFDTCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxLQUFLO0lBQ0wsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixLQUFLO0lBQ0wsTUFBTTtJQUNOLFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxNQUFNO0lBQ04sT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixLQUFLO0lBQ0wsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sS0FBSztJQUNMLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxLQUFLO0lBQ0wsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLEtBQUs7SUFDTCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLFdBQVc7SUFDWCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULEtBQUs7SUFDTCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLEtBQUs7SUFDTCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxLQUFLO0lBQ0wsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sTUFBTTtJQUNOLFNBQVM7SUFDVCxXQUFXO0lBQ1gsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsS0FBSztJQUNMLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsS0FBSztJQUNMLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLEtBQUs7SUFDTCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixXQUFXO0lBQ1gsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLEtBQUs7SUFDTCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixLQUFLO0lBQ0wsTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sTUFBTTtJQUNOLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixLQUFLO0lBQ0wsTUFBTTtJQUNOLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULE1BQU07SUFDTixNQUFNO0lBQ04sUUFB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QUMsQ0FBQztnQkFDeEMsTUFBTTtZQUNWLEtBQUssb0VBQVUsQ0FBQyxRQUFRO2dCQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksa0VBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3BELE1BQU07WUFDVjtnQkFDSSxNQUFNO1NBQ2I7UUFFRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLDREQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM1RDtRQUNELElBQUksUUFBUSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksc0VBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsSUFBSSxRQUFRLENBQUMsZUFBZSxJQUFJLElBQUksRUFBRTtZQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxnRkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzFGO0lBQ0wsQ0FBQztDQUNKIiwiZmlsZSI6ImJhY2tncm91bmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzc2MSwxMl0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCJleHBvcnQgZW51bSBDaXBoZXJUeXBlIHtcclxuICAgIExvZ2luID0gMSxcclxuICAgIFNlY3VyZU5vdGUgPSAyLFxyXG4gICAgQ2FyZCA9IDMsXHJcbiAgICBJZGVudGl0eSA9IDQsXHJcbn1cclxuIiwiaW1wb3J0IHsgVXJpTWF0Y2hUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvdXJpTWF0Y2hUeXBlJztcclxuXHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xyXG5cclxuaW1wb3J0IHsgTG9naW5VcmkgfSBmcm9tICcuLi9kb21haW4vbG9naW5VcmknO1xyXG5cclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcclxuXHJcbmNvbnN0IENhbkxhdW5jaFdoaXRlbGlzdCA9IFtcclxuICAgICdodHRwczovLycsXHJcbiAgICAnaHR0cDovLycsXHJcbiAgICAnc3NoOi8vJyxcclxuICAgICdmdHA6Ly8nLFxyXG4gICAgJ3NmdHA6Ly8nLFxyXG4gICAgJ2lyYzovLycsXHJcbiAgICAndm5jOi8vJyxcclxuICAgIC8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3dpbmRvd3Mtc2VydmVyL3JlbW90ZS9yZW1vdGUtZGVza3RvcC1zZXJ2aWNlcy9jbGllbnRzL3JlbW90ZS1kZXNrdG9wLXVyaVxyXG4gICAgJ3JkcDovLycsIC8vIExlZ2FjeSBSRFAgVVJJIHNjaGVtZVxyXG4gICAgJ21zLXJkOicsIC8vIFByZWZlcnJlZCBSRFAgVVJJIHNjaGVtZVxyXG4gICAgJ2Nocm9tZTovLycsXHJcbiAgICAnaW9zYXBwOi8vJyxcclxuICAgICdhbmRyb2lkYXBwOi8vJyxcclxuXTtcclxuXHJcbmV4cG9ydCBjbGFzcyBMb2dpblVyaVZpZXcgaW1wbGVtZW50cyBWaWV3IHtcclxuICAgIG1hdGNoOiBVcmlNYXRjaFR5cGUgPSBudWxsO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlXHJcbiAgICBwcml2YXRlIF91cmk6IHN0cmluZyA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9kb21haW46IHN0cmluZyA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9ob3N0bmFtZTogc3RyaW5nID0gbnVsbDtcclxuICAgIHByaXZhdGUgX2hvc3Q6IHN0cmluZyA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9jYW5MYXVuY2g6IGJvb2xlYW4gPSBudWxsO1xyXG4gICAgLy8gdHNsaW50OmVuYWJsZVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHU/OiBMb2dpblVyaSkge1xyXG4gICAgICAgIGlmICghdSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm1hdGNoID0gdS5tYXRjaDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdXJpKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VyaTtcclxuICAgIH1cclxuICAgIHNldCB1cmkodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3VyaSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2RvbWFpbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY2FuTGF1bmNoID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZG9tYWluKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RvbWFpbiA9PSBudWxsICYmIHRoaXMudXJpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZG9tYWluID0gVXRpbHMuZ2V0RG9tYWluKHRoaXMudXJpKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RvbWFpbiA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvbWFpbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9kb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhvc3RuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMubWF0Y2ggPT09IFVyaU1hdGNoVHlwZS5SZWd1bGFyRXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2hvc3RuYW1lID09IG51bGwgJiYgdGhpcy51cmkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ob3N0bmFtZSA9IFV0aWxzLmdldEhvc3RuYW1lKHRoaXMudXJpKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2hvc3RuYW1lID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faG9zdG5hbWUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5faG9zdG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhvc3QoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5tYXRjaCA9PT0gVXJpTWF0Y2hUeXBlLlJlZ3VsYXJFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5faG9zdCA9PSBudWxsICYmIHRoaXMudXJpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faG9zdCA9IFV0aWxzLmdldEhvc3QodGhpcy51cmkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faG9zdCA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3QgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5faG9zdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaG9zdG5hbWVPclVyaSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3RuYW1lICE9IG51bGwgPyB0aGlzLmhvc3RuYW1lIDogdGhpcy51cmk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhvc3RPclVyaSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QgIT0gbnVsbCA/IHRoaXMuaG9zdCA6IHRoaXMudXJpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc1dlYnNpdGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXJpICE9IG51bGwgJiYgKHRoaXMudXJpLmluZGV4T2YoJ2h0dHA6Ly8nKSA9PT0gMCB8fCB0aGlzLnVyaS5pbmRleE9mKCdodHRwczovLycpID09PSAwIHx8XHJcbiAgICAgICAgICAgICh0aGlzLnVyaS5pbmRleE9mKCc6Ly8nKSA8IDAgJiYgVXRpbHMudGxkRW5kaW5nUmVnZXgudGVzdCh0aGlzLnVyaSkpKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2FuTGF1bmNoKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9jYW5MYXVuY2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FuTGF1bmNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy51cmkgIT0gbnVsbCAmJiB0aGlzLm1hdGNoICE9PSBVcmlNYXRjaFR5cGUuUmVndWxhckV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgY29uc3QgdXJpID0gdGhpcy5sYXVuY2hVcmk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ2FuTGF1bmNoV2hpdGVsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXJpLmluZGV4T2YoQ2FuTGF1bmNoV2hpdGVsaXN0W2ldKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbkxhdW5jaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhbkxhdW5jaDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9jYW5MYXVuY2ggPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2FuTGF1bmNoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBsYXVuY2hVcmkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51cmkuaW5kZXhPZignOi8vJykgPCAwICYmIFV0aWxzLnRsZEVuZGluZ1JlZ2V4LnRlc3QodGhpcy51cmkpID8gKCdodHRwOi8vJyArIHRoaXMudXJpKSA6IHRoaXMudXJpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJyb3dzZXJBcGkgfSBmcm9tICcuL2Jyb3dzZXJBcGknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNhZmFyaUFwcCB7XHJcbiAgICBzdGF0aWMgc2VuZE1lc3NhZ2VUb0FwcChjb21tYW5kOiBzdHJpbmcsIGRhdGE6IGFueSA9IG51bGwsIHJlc29sdmVOb3cgPSBmYWxzZSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgaWYgKCFCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZUlkID0gbm93LmdldFRpbWUoKS50b1N0cmluZygpICsgJ18nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xyXG4gICAgICAgICAgICAoYnJvd3NlciBhcyBhbnkpLnJ1bnRpbWUuc2VuZE5hdGl2ZU1lc3NhZ2UoJ2NvbS5iaXR3YXJkZW4uZGVza3RvcCcsIHtcclxuICAgICAgICAgICAgICAgIGlkOiBtZXNzYWdlSWQsXHJcbiAgICAgICAgICAgICAgICBjb21tYW5kOiBjb21tYW5kLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlRGF0YTogbnVsbCxcclxuICAgICAgICAgICAgfSwgKHJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJdGVtVmlldyB9IGZyb20gJy4vaXRlbVZpZXcnO1xyXG5cclxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4uL2RvbWFpbi9jYXJkJztcclxuXHJcbmltcG9ydCB7IENhcmRMaW5rZWRJZCBhcyBMaW5rZWRJZCB9IGZyb20gJy4uLy4uL2VudW1zL2xpbmtlZElkVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBsaW5rZWRGaWVsZE9wdGlvbiB9IGZyb20gJy4uLy4uL21pc2MvbGlua2VkRmllbGRPcHRpb24uZGVjb3JhdG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJkVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5DYXJkaG9sZGVyTmFtZSlcclxuICAgIGNhcmRob2xkZXJOYW1lOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgQGxpbmtlZEZpZWxkT3B0aW9uKExpbmtlZElkLkV4cE1vbnRoLCAnZXhwaXJhdGlvbk1vbnRoJylcclxuICAgIGV4cE1vbnRoOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgQGxpbmtlZEZpZWxkT3B0aW9uKExpbmtlZElkLkV4cFllYXIsICdleHBpcmF0aW9uWWVhcicpXHJcbiAgICBleHBZZWFyOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgQGxpbmtlZEZpZWxkT3B0aW9uKExpbmtlZElkLkNvZGUsICdzZWN1cml0eUNvZGUnKVxyXG4gICAgY29kZTogc3RyaW5nID0gbnVsbDtcclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZVxyXG4gICAgcHJpdmF0ZSBfYnJhbmQ6IHN0cmluZyA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9udW1iZXI6IHN0cmluZyA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9zdWJUaXRsZTogc3RyaW5nID0gbnVsbDtcclxuICAgIC8vIHRzbGludDplbmFibGVcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjPzogQ2FyZCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1hc2tlZENvZGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2RlICE9IG51bGwgPyAn4oCiJy5yZXBlYXQodGhpcy5jb2RlLmxlbmd0aCkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtYXNrZWROdW1iZXIoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5udW1iZXIgIT0gbnVsbCA/ICfigKInLnJlcGVhdCh0aGlzLm51bWJlci5sZW5ndGgpIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuQnJhbmQpXHJcbiAgICBnZXQgYnJhbmQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnJhbmQ7XHJcbiAgICB9XHJcbiAgICBzZXQgYnJhbmQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2JyYW5kID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fc3ViVGl0bGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5OdW1iZXIpXHJcbiAgICBnZXQgbnVtYmVyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlcjtcclxuICAgIH1cclxuICAgIHNldCBudW1iZXIodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX251bWJlciA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3N1YlRpdGxlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3ViVGl0bGUoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5fc3ViVGl0bGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJUaXRsZSA9IHRoaXMuYnJhbmQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm51bWJlciAhPSBudWxsICYmIHRoaXMubnVtYmVyLmxlbmd0aCA+PSA0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3ViVGl0bGUgIT0gbnVsbCAmJiB0aGlzLl9zdWJUaXRsZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdWJUaXRsZSArPSAnLCAnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdWJUaXRsZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNob3cgbGFzdCA1IG9uIGFtZXgsIGxhc3QgNCBmb3IgYWxsIG90aGVyc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLm51bWJlci5sZW5ndGggPj0gNSAmJiB0aGlzLm51bWJlci5tYXRjaChuZXcgUmVnRXhwKCdeM1s0N10nKSkgIT0gbnVsbCA/IDUgOiA0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3ViVGl0bGUgKz0gKCcqJyArIHRoaXMubnVtYmVyLnN1YnN0cih0aGlzLm51bWJlci5sZW5ndGggLSBjb3VudCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJUaXRsZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXhwaXJhdGlvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICghdGhpcy5leHBNb250aCAmJiAhdGhpcy5leHBZZWFyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGV4cCA9IHRoaXMuZXhwTW9udGggIT0gbnVsbCA/ICgnMCcgKyB0aGlzLmV4cE1vbnRoKS5zbGljZSgtMikgOiAnX18nO1xyXG4gICAgICAgIGV4cCArPSAoJyAvICcgKyAodGhpcy5leHBZZWFyICE9IG51bGwgPyB0aGlzLmZvcm1hdFllYXIodGhpcy5leHBZZWFyKSA6ICdfX19fJykpO1xyXG4gICAgICAgIHJldHVybiBleHA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmb3JtYXRZZWFyKHllYXI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHllYXIubGVuZ3RoID09PSAyID8gJzIwJyArIHllYXIgOiB5ZWFyO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEl0ZW1WaWV3IH0gZnJvbSAnLi9pdGVtVmlldyc7XHJcblxyXG5pbXBvcnQgeyBJZGVudGl0eSB9IGZyb20gJy4uL2RvbWFpbi9pZGVudGl0eSc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL21pc2MvdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgSWRlbnRpdHlMaW5rZWRJZCBhcyBMaW5rZWRJZCB9IGZyb20gJy4uLy4uL2VudW1zL2xpbmtlZElkVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBsaW5rZWRGaWVsZE9wdGlvbiB9IGZyb20gJy4uLy4uL21pc2MvbGlua2VkRmllbGRPcHRpb24uZGVjb3JhdG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJZGVudGl0eVZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuVGl0bGUpXHJcbiAgICB0aXRsZTogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5NaWRkbGVOYW1lKVxyXG4gICAgbWlkZGxlTmFtZTogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5BZGRyZXNzMSlcclxuICAgIGFkZHJlc3MxOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgQGxpbmtlZEZpZWxkT3B0aW9uKExpbmtlZElkLkFkZHJlc3MyKVxyXG4gICAgYWRkcmVzczI6IHN0cmluZyA9IG51bGw7XHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuQWRkcmVzczMpXHJcbiAgICBhZGRyZXNzMzogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5DaXR5LCAnY2l0eVRvd24nKVxyXG4gICAgY2l0eTogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5TdGF0ZSwgJ3N0YXRlUHJvdmluY2UnKVxyXG4gICAgc3RhdGU6IHN0cmluZyA9IG51bGw7XHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuUG9zdGFsQ29kZSwgJ3ppcFBvc3RhbENvZGUnKVxyXG4gICAgcG9zdGFsQ29kZTogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5Db3VudHJ5KVxyXG4gICAgY291bnRyeTogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5Db21wYW55KVxyXG4gICAgY29tcGFueTogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5FbWFpbClcclxuICAgIGVtYWlsOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgQGxpbmtlZEZpZWxkT3B0aW9uKExpbmtlZElkLlBob25lKVxyXG4gICAgcGhvbmU6IHN0cmluZyA9IG51bGw7XHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuU3NuKVxyXG4gICAgc3NuOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgQGxpbmtlZEZpZWxkT3B0aW9uKExpbmtlZElkLlVzZXJuYW1lKVxyXG4gICAgdXNlcm5hbWU6IHN0cmluZyA9IG51bGw7XHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuUGFzc3BvcnROdW1iZXIpXHJcbiAgICBwYXNzcG9ydE51bWJlcjogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5MaWNlbnNlTnVtYmVyKVxyXG4gICAgbGljZW5zZU51bWJlcjogc3RyaW5nID0gbnVsbDtcclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZVxyXG4gICAgcHJpdmF0ZSBfZmlyc3ROYW1lOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfbGFzdE5hbWU6IHN0cmluZyA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9zdWJUaXRsZTogc3RyaW5nID0gbnVsbDtcclxuICAgIC8vIHRzbGludDplbmFibGVcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpPzogSWRlbnRpdHkpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5GaXJzdE5hbWUpXHJcbiAgICBnZXQgZmlyc3ROYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcnN0TmFtZTtcclxuICAgIH1cclxuICAgIHNldCBmaXJzdE5hbWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2ZpcnN0TmFtZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3N1YlRpdGxlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuTGFzdE5hbWUpXHJcbiAgICBnZXQgbGFzdE5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGFzdE5hbWU7XHJcbiAgICB9XHJcbiAgICBzZXQgbGFzdE5hbWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2xhc3ROYW1lID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fc3ViVGl0bGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzdWJUaXRsZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLl9zdWJUaXRsZSA9PSBudWxsICYmICh0aGlzLmZpcnN0TmFtZSAhPSBudWxsIHx8IHRoaXMubGFzdE5hbWUgIT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3ViVGl0bGUgPSAnJztcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmlyc3ROYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YlRpdGxlID0gdGhpcy5maXJzdE5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubGFzdE5hbWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N1YlRpdGxlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1YlRpdGxlICs9ICcgJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YlRpdGxlICs9IHRoaXMubGFzdE5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJUaXRsZTtcclxuICAgIH1cclxuXHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuRnVsbE5hbWUpXHJcbiAgICBnZXQgZnVsbE5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy50aXRsZSAhPSBudWxsIHx8IHRoaXMuZmlyc3ROYW1lICE9IG51bGwgfHwgdGhpcy5taWRkbGVOYW1lICE9IG51bGwgfHwgdGhpcy5sYXN0TmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBuYW1lID0gJyc7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpdGxlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgKz0gKHRoaXMudGl0bGUgKyAnICcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpcnN0TmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9ICh0aGlzLmZpcnN0TmFtZSArICcgJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubWlkZGxlTmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9ICh0aGlzLm1pZGRsZU5hbWUgKyAnICcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxhc3ROYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgKz0gdGhpcy5sYXN0TmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmFtZS50cmltKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZnVsbEFkZHJlc3MoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgYWRkcmVzcyA9IHRoaXMuYWRkcmVzczE7XHJcbiAgICAgICAgaWYgKCFVdGlscy5pc051bGxPcldoaXRlc3BhY2UodGhpcy5hZGRyZXNzMikpIHtcclxuICAgICAgICAgICAgaWYgKCFVdGlscy5pc051bGxPcldoaXRlc3BhY2UoYWRkcmVzcykpIHtcclxuICAgICAgICAgICAgICAgIGFkZHJlc3MgKz0gJywgJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhZGRyZXNzICs9IHRoaXMuYWRkcmVzczI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKHRoaXMuYWRkcmVzczMpKSB7XHJcbiAgICAgICAgICAgIGlmICghVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKGFkZHJlc3MpKSB7XHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzICs9ICcsICc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWRkcmVzcyArPSB0aGlzLmFkZHJlc3MzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWRkcmVzcztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZnVsbEFkZHJlc3NQYXJ0MigpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLmNpdHkgPT0gbnVsbCAmJiB0aGlzLnN0YXRlID09IG51bGwgJiYgdGhpcy5wb3N0YWxDb2RlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNpdHkgPSB0aGlzLmNpdHkgfHwgJy0nO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcclxuICAgICAgICBjb25zdCBwb3N0YWxDb2RlID0gdGhpcy5wb3N0YWxDb2RlIHx8ICctJztcclxuICAgICAgICBsZXQgYWRkcmVzc1BhcnQyID0gY2l0eTtcclxuICAgICAgICBpZiAoIVV0aWxzLmlzTnVsbE9yV2hpdGVzcGFjZShzdGF0ZSkpIHtcclxuICAgICAgICAgICAgYWRkcmVzc1BhcnQyICs9ICcsICcgKyBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkcmVzc1BhcnQyICs9ICcsICcgKyBwb3N0YWxDb2RlO1xyXG4gICAgICAgIHJldHVybiBhZGRyZXNzUGFydDI7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU2VjdXJlTm90ZVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zZWN1cmVOb3RlVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBJdGVtVmlldyB9IGZyb20gJy4vaXRlbVZpZXcnO1xyXG5cclxuaW1wb3J0IHsgU2VjdXJlTm90ZSB9IGZyb20gJy4uL2RvbWFpbi9zZWN1cmVOb3RlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWN1cmVOb3RlVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuICAgIHR5cGU6IFNlY3VyZU5vdGVUeXBlID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuPzogU2VjdXJlTm90ZSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgaWYgKCFuKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IG4udHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3ViVGl0bGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgS2V5c1JlcXVlc3Qge1xyXG4gICAgcHVibGljS2V5OiBzdHJpbmc7XHJcbiAgICBlbmNyeXB0ZWRQcml2YXRlS2V5OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljS2V5OiBzdHJpbmcsIGVuY3J5cHRlZFByaXZhdGVLZXk6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMucHVibGljS2V5ID0gcHVibGljS2V5O1xyXG4gICAgICAgIHRoaXMuZW5jcnlwdGVkUHJpdmF0ZUtleSA9IGVuY3J5cHRlZFByaXZhdGVLZXk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XHJcblxyXG5pbXBvcnQgeyBGb2xkZXIgfSBmcm9tICcuLi9kb21haW4vZm9sZGVyJztcclxuaW1wb3J0IHsgSVRyZWVOb2RlT2JqZWN0IH0gZnJvbSAnLi4vZG9tYWluL3RyZWVOb2RlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGb2xkZXJWaWV3IGltcGxlbWVudHMgVmlldywgSVRyZWVOb2RlT2JqZWN0IHtcclxuICAgIGlkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgbmFtZTogc3RyaW5nID0gbnVsbDtcclxuICAgIHJldmlzaW9uRGF0ZTogRGF0ZSA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZj86IEZvbGRlcikge1xyXG4gICAgICAgIGlmICghZikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlkID0gZi5pZDtcclxuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IGYucmV2aXNpb25EYXRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENpcGhlclJlcHJvbXB0VHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2NpcGhlclJlcHJvbXB0VHlwZSc7XHJcbmltcG9ydCB7IENpcGhlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9jaXBoZXJUeXBlJztcclxuXHJcbmltcG9ydCB7IENpcGhlckRhdGEgfSBmcm9tICcuLi9kYXRhL2NpcGhlckRhdGEnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyVmlldyB9IGZyb20gJy4uL3ZpZXcvY2lwaGVyVmlldyc7XHJcblxyXG5pbXBvcnQgeyBBdHRhY2htZW50IH0gZnJvbSAnLi9hdHRhY2htZW50JztcclxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4vY2FyZCc7XHJcbmltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcclxuaW1wb3J0IHsgRW5jU3RyaW5nIH0gZnJvbSAnLi9lbmNTdHJpbmcnO1xyXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4vZmllbGQnO1xyXG5pbXBvcnQgeyBJZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xyXG5pbXBvcnQgeyBMb2dpbiB9IGZyb20gJy4vbG9naW4nO1xyXG5pbXBvcnQgeyBQYXNzd29yZCB9IGZyb20gJy4vcGFzc3dvcmQnO1xyXG5pbXBvcnQgeyBTZWN1cmVOb3RlIH0gZnJvbSAnLi9zZWN1cmVOb3RlJztcclxuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xyXG5cclxuZXhwb3J0IGNsYXNzIENpcGhlciBleHRlbmRzIERvbWFpbiB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZztcclxuICAgIGZvbGRlcklkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBFbmNTdHJpbmc7XHJcbiAgICBub3RlczogRW5jU3RyaW5nO1xyXG4gICAgdHlwZTogQ2lwaGVyVHlwZTtcclxuICAgIGZhdm9yaXRlOiBib29sZWFuO1xyXG4gICAgb3JnYW5pemF0aW9uVXNlVG90cDogYm9vbGVhbjtcclxuICAgIGVkaXQ6IGJvb2xlYW47XHJcbiAgICB2aWV3UGFzc3dvcmQ6IGJvb2xlYW47XHJcbiAgICByZXZpc2lvbkRhdGU6IERhdGU7XHJcbiAgICBsb2NhbERhdGE6IGFueTtcclxuICAgIGxvZ2luOiBMb2dpbjtcclxuICAgIGlkZW50aXR5OiBJZGVudGl0eTtcclxuICAgIGNhcmQ6IENhcmQ7XHJcbiAgICBzZWN1cmVOb3RlOiBTZWN1cmVOb3RlO1xyXG4gICAgYXR0YWNobWVudHM6IEF0dGFjaG1lbnRbXTtcclxuICAgIGZpZWxkczogRmllbGRbXTtcclxuICAgIHBhc3N3b3JkSGlzdG9yeTogUGFzc3dvcmRbXTtcclxuICAgIGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdO1xyXG4gICAgZGVsZXRlZERhdGU6IERhdGU7XHJcbiAgICByZXByb21wdDogQ2lwaGVyUmVwcm9tcHRUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IENpcGhlckRhdGEsIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSwgbG9jYWxEYXRhOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5idWlsZERvbWFpbk1vZGVsKHRoaXMsIG9iaiwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdXNlcklkOiBudWxsLFxyXG4gICAgICAgICAgICBvcmdhbml6YXRpb25JZDogbnVsbCxcclxuICAgICAgICAgICAgZm9sZGVySWQ6IG51bGwsXHJcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIG5vdGVzOiBudWxsLFxyXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQsIFsnaWQnLCAndXNlcklkJywgJ29yZ2FuaXphdGlvbklkJywgJ2ZvbGRlcklkJ10pO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBvYmoudHlwZTtcclxuICAgICAgICB0aGlzLmZhdm9yaXRlID0gb2JqLmZhdm9yaXRlO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uVXNlVG90cCA9IG9iai5vcmdhbml6YXRpb25Vc2VUb3RwO1xyXG4gICAgICAgIHRoaXMuZWRpdCA9IG9iai5lZGl0O1xyXG4gICAgICAgIGlmIChvYmoudmlld1Bhc3N3b3JkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3UGFzc3dvcmQgPSBvYmoudmlld1Bhc3N3b3JkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1Bhc3N3b3JkID0gdHJ1ZTsgLy8gRGVmYXVsdCBmb3IgYWxyZWFkeSBzeW5jZWQgQ2lwaGVycyB3aXRob3V0IHZpZXdQYXNzd29yZFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IG9iai5yZXZpc2lvbkRhdGUgIT0gbnVsbCA/IG5ldyBEYXRlKG9iai5yZXZpc2lvbkRhdGUpIDogbnVsbDtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZHMgPSBvYmouY29sbGVjdGlvbklkcztcclxuICAgICAgICB0aGlzLmxvY2FsRGF0YSA9IGxvY2FsRGF0YTtcclxuICAgICAgICB0aGlzLmRlbGV0ZWREYXRlID0gb2JqLmRlbGV0ZWREYXRlICE9IG51bGwgPyBuZXcgRGF0ZShvYmouZGVsZXRlZERhdGUpIDogbnVsbDtcclxuICAgICAgICB0aGlzLnJlcHJvbXB0ID0gb2JqLnJlcHJvbXB0O1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuTG9naW46XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luID0gbmV3IExvZ2luKG9iai5sb2dpbiwgYWxyZWFkeUVuY3J5cHRlZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLlNlY3VyZU5vdGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3VyZU5vdGUgPSBuZXcgU2VjdXJlTm90ZShvYmouc2VjdXJlTm90ZSwgYWxyZWFkeUVuY3J5cHRlZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkNhcmQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQgPSBuZXcgQ2FyZChvYmouY2FyZCwgYWxyZWFkeUVuY3J5cHRlZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLklkZW50aXR5OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eSA9IG5ldyBJZGVudGl0eShvYmouaWRlbnRpdHksIGFscmVhZHlFbmNyeXB0ZWQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmouYXR0YWNobWVudHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaG1lbnRzID0gb2JqLmF0dGFjaG1lbnRzLm1hcChhID0+IG5ldyBBdHRhY2htZW50KGEsIGFscmVhZHlFbmNyeXB0ZWQpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaG1lbnRzID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmouZmllbGRzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHMgPSBvYmouZmllbGRzLm1hcChmID0+IG5ldyBGaWVsZChmLCBhbHJlYWR5RW5jcnlwdGVkKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iai5wYXNzd29yZEhpc3RvcnkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhc3N3b3JkSGlzdG9yeSA9IG9iai5wYXNzd29yZEhpc3RvcnkubWFwKHBoID0+IG5ldyBQYXNzd29yZChwaCwgYWxyZWFkeUVuY3J5cHRlZCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmRIaXN0b3J5ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVjcnlwdChlbmNLZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPENpcGhlclZpZXc+IHtcclxuICAgICAgICBjb25zdCBtb2RlbCA9IG5ldyBDaXBoZXJWaWV3KHRoaXMpO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmRlY3J5cHRPYmoobW9kZWwsIHtcclxuICAgICAgICAgICAgbmFtZTogbnVsbCxcclxuICAgICAgICAgICAgbm90ZXM6IG51bGwsXHJcbiAgICAgICAgfSwgdGhpcy5vcmdhbml6YXRpb25JZCwgZW5jS2V5KTtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkxvZ2luOlxyXG4gICAgICAgICAgICAgICAgbW9kZWwubG9naW4gPSBhd2FpdCB0aGlzLmxvZ2luLmRlY3J5cHQodGhpcy5vcmdhbml6YXRpb25JZCwgZW5jS2V5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuU2VjdXJlTm90ZTpcclxuICAgICAgICAgICAgICAgIG1vZGVsLnNlY3VyZU5vdGUgPSBhd2FpdCB0aGlzLnNlY3VyZU5vdGUuZGVjcnlwdCh0aGlzLm9yZ2FuaXphdGlvbklkLCBlbmNLZXkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5DYXJkOlxyXG4gICAgICAgICAgICAgICAgbW9kZWwuY2FyZCA9IGF3YWl0IHRoaXMuY2FyZC5kZWNyeXB0KHRoaXMub3JnYW5pemF0aW9uSWQsIGVuY0tleSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLklkZW50aXR5OlxyXG4gICAgICAgICAgICAgICAgbW9kZWwuaWRlbnRpdHkgPSBhd2FpdCB0aGlzLmlkZW50aXR5LmRlY3J5cHQodGhpcy5vcmdhbml6YXRpb25JZCwgZW5jS2V5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBvcmdJZCA9IHRoaXMub3JnYW5pemF0aW9uSWQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmF0dGFjaG1lbnRzICE9IG51bGwgJiYgdGhpcy5hdHRhY2htZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dGFjaG1lbnRzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmF0dGFjaG1lbnRzLnJlZHVjZSgocHJvbWlzZSwgYXR0YWNobWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0dGFjaG1lbnQuZGVjcnlwdChvcmdJZCwgZW5jS2V5KTtcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZGVjQXR0YWNobWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudHMucHVzaChkZWNBdHRhY2htZW50KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSk7XHJcbiAgICAgICAgICAgIG1vZGVsLmF0dGFjaG1lbnRzID0gYXR0YWNobWVudHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5maWVsZHMgIT0gbnVsbCAmJiB0aGlzLmZpZWxkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkczogYW55W10gPSBbXTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5maWVsZHMucmVkdWNlKChwcm9taXNlLCBmaWVsZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmRlY3J5cHQob3JnSWQsIGVuY0tleSk7XHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKGRlY0ZpZWxkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChkZWNGaWVsZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgUHJvbWlzZS5yZXNvbHZlKCkpO1xyXG4gICAgICAgICAgICBtb2RlbC5maWVsZHMgPSBmaWVsZHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wYXNzd29yZEhpc3RvcnkgIT0gbnVsbCAmJiB0aGlzLnBhc3N3b3JkSGlzdG9yeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkSGlzdG9yeTogYW55W10gPSBbXTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXNzd29yZEhpc3RvcnkucmVkdWNlKChwcm9taXNlLCBwaCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBoLmRlY3J5cHQob3JnSWQsIGVuY0tleSk7XHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKGRlY1BoID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZEhpc3RvcnkucHVzaChkZWNQaCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgUHJvbWlzZS5yZXNvbHZlKCkpO1xyXG4gICAgICAgICAgICBtb2RlbC5wYXNzd29yZEhpc3RvcnkgPSBwYXNzd29yZEhpc3Rvcnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgdG9DaXBoZXJEYXRhKHVzZXJJZDogc3RyaW5nKTogQ2lwaGVyRGF0YSB7XHJcbiAgICAgICAgY29uc3QgYyA9IG5ldyBDaXBoZXJEYXRhKCk7XHJcbiAgICAgICAgYy5pZCA9IHRoaXMuaWQ7XHJcbiAgICAgICAgYy5vcmdhbml6YXRpb25JZCA9IHRoaXMub3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgYy5mb2xkZXJJZCA9IHRoaXMuZm9sZGVySWQ7XHJcbiAgICAgICAgYy51c2VySWQgPSB0aGlzLm9yZ2FuaXphdGlvbklkICE9IG51bGwgPyB1c2VySWQgOiBudWxsO1xyXG4gICAgICAgIGMuZWRpdCA9IHRoaXMuZWRpdDtcclxuICAgICAgICBjLnZpZXdQYXNzd29yZCA9IHRoaXMudmlld1Bhc3N3b3JkO1xyXG4gICAgICAgIGMub3JnYW5pemF0aW9uVXNlVG90cCA9IHRoaXMub3JnYW5pemF0aW9uVXNlVG90cDtcclxuICAgICAgICBjLmZhdm9yaXRlID0gdGhpcy5mYXZvcml0ZTtcclxuICAgICAgICBjLnJldmlzaW9uRGF0ZSA9IHRoaXMucmV2aXNpb25EYXRlICE9IG51bGwgPyB0aGlzLnJldmlzaW9uRGF0ZS50b0lTT1N0cmluZygpIDogbnVsbDtcclxuICAgICAgICBjLnR5cGUgPSB0aGlzLnR5cGU7XHJcbiAgICAgICAgYy5jb2xsZWN0aW9uSWRzID0gdGhpcy5jb2xsZWN0aW9uSWRzO1xyXG4gICAgICAgIGMuZGVsZXRlZERhdGUgPSB0aGlzLmRlbGV0ZWREYXRlICE9IG51bGwgPyB0aGlzLmRlbGV0ZWREYXRlLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xyXG4gICAgICAgIGMucmVwcm9tcHQgPSB0aGlzLnJlcHJvbXB0O1xyXG5cclxuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGMsIHtcclxuICAgICAgICAgICAgbmFtZTogbnVsbCxcclxuICAgICAgICAgICAgbm90ZXM6IG51bGwsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoYy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5Mb2dpbjpcclxuICAgICAgICAgICAgICAgIGMubG9naW4gPSB0aGlzLmxvZ2luLnRvTG9naW5EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLlNlY3VyZU5vdGU6XHJcbiAgICAgICAgICAgICAgICBjLnNlY3VyZU5vdGUgPSB0aGlzLnNlY3VyZU5vdGUudG9TZWN1cmVOb3RlRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5DYXJkOlxyXG4gICAgICAgICAgICAgICAgYy5jYXJkID0gdGhpcy5jYXJkLnRvQ2FyZERhdGEoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XHJcbiAgICAgICAgICAgICAgICBjLmlkZW50aXR5ID0gdGhpcy5pZGVudGl0eS50b0lkZW50aXR5RGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZpZWxkcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGMuZmllbGRzID0gdGhpcy5maWVsZHMubWFwKGYgPT4gZi50b0ZpZWxkRGF0YSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNobWVudHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjLmF0dGFjaG1lbnRzID0gdGhpcy5hdHRhY2htZW50cy5tYXAoYSA9PiBhLnRvQXR0YWNobWVudERhdGEoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnBhc3N3b3JkSGlzdG9yeSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGMucGFzc3dvcmRIaXN0b3J5ID0gdGhpcy5wYXNzd29yZEhpc3RvcnkubWFwKHBoID0+IHBoLnRvUGFzc3dvcmRIaXN0b3J5RGF0YSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU2FmYXJpQXBwIH0gZnJvbSAnLi9zYWZhcmlBcHAnO1xyXG5cclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICdqc2xpYi1jb21tb24vbWlzYy91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQnJvd3NlckFwaSB7XHJcbiAgICBzdGF0aWMgaXNXZWJFeHRlbnNpb25zQXBpOiBib29sZWFuID0gKHR5cGVvZiBicm93c2VyICE9PSAndW5kZWZpbmVkJyk7XHJcbiAgICBzdGF0aWMgaXNTYWZhcmlBcGk6IGJvb2xlYW4gPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJyBTYWZhcmkvJykgIT09IC0xICYmXHJcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCcgQ2hyb21lLycpID09PSAtMSAmJlxyXG4gICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIENocm9taXVtLycpID09PSAtMTtcclxuICAgIHN0YXRpYyBpc0Nocm9tZUFwaTogYm9vbGVhbiA9ICFCcm93c2VyQXBpLmlzU2FmYXJpQXBpICYmICh0eXBlb2YgY2hyb21lICE9PSAndW5kZWZpbmVkJyk7XHJcbiAgICBzdGF0aWMgaXNGaXJlZm94T25BbmRyb2lkOiBib29sZWFuID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94LycpICE9PSAtMSAmJlxyXG4gICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQW5kcm9pZCcpICE9PSAtMTtcclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2V0VGFiRnJvbUN1cnJlbnRXaW5kb3dJZCgpOiBQcm9taXNlPGNocm9tZS50YWJzLlRhYj4gfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgQnJvd3NlckFwaS50YWJzUXVlcnlGaXJzdCh7XHJcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgd2luZG93SWQ6IGNocm9tZS53aW5kb3dzLldJTkRPV19JRF9DVVJSRU5ULFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRUYWJGcm9tQ3VycmVudFdpbmRvdygpOiBQcm9taXNlPGNocm9tZS50YWJzLlRhYj4gfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgQnJvd3NlckFwaS50YWJzUXVlcnlGaXJzdCh7XHJcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgY3VycmVudFdpbmRvdzogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2V0QWN0aXZlVGFicygpOiBQcm9taXNlPGNocm9tZS50YWJzLlRhYltdPiB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IEJyb3dzZXJBcGkudGFic1F1ZXJ5KHtcclxuICAgICAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyB0YWJzUXVlcnkob3B0aW9uczogY2hyb21lLnRhYnMuUXVlcnlJbmZvKTogUHJvbWlzZTxjaHJvbWUudGFicy5UYWJbXT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgY2hyb21lLnRhYnMucXVlcnkob3B0aW9ucywgKHRhYnM6IGFueVtdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRhYnMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgdGFic1F1ZXJ5Rmlyc3Qob3B0aW9uczogY2hyb21lLnRhYnMuUXVlcnlJbmZvKTogUHJvbWlzZTxjaHJvbWUudGFicy5UYWI+IHwgbnVsbCB7XHJcbiAgICAgICAgY29uc3QgdGFicyA9IGF3YWl0IEJyb3dzZXJBcGkudGFic1F1ZXJ5KG9wdGlvbnMpO1xyXG4gICAgICAgIGlmICh0YWJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhYnNbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdGFiU2VuZE1lc3NhZ2VEYXRhKHRhYjogY2hyb21lLnRhYnMuVGFiLCBjb21tYW5kOiBzdHJpbmcsIGRhdGE6IGFueSA9IG51bGwpOiBQcm9taXNlPGFueVtdPiB7XHJcbiAgICAgICAgY29uc3Qgb2JqOiBhbnkgPSB7XHJcbiAgICAgICAgICAgIGNvbW1hbmQ6IGNvbW1hbmQsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBvYmouZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZSh0YWIsIG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIHRhYlNlbmRNZXNzYWdlKHRhYjogY2hyb21lLnRhYnMuVGFiLCBvYmo6IGFueSwgb3B0aW9uczogY2hyb21lLnRhYnMuTWVzc2FnZVNlbmRPcHRpb25zID0gbnVsbCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgaWYgKCF0YWIgfHwgIXRhYi5pZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwgb2JqLCBvcHRpb25zLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU29tZSBlcnJvciBoYXBwZW5lZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0QmFja2dyb3VuZFBhZ2UoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gY2hyb21lLmV4dGVuc2lvbi5nZXRCYWNrZ3JvdW5kUGFnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRBcHBsaWNhdGlvblZlcnNpb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gY2hyb21lLnJ1bnRpbWUuZ2V0TWFuaWZlc3QoKS52ZXJzaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBpc1BvcHVwT3BlbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNocm9tZS5leHRlbnNpb24uZ2V0Vmlld3MoeyB0eXBlOiAncG9wdXAnIH0pLmxlbmd0aCA+IDApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjcmVhdGVOZXdUYWIodXJsOiBzdHJpbmcsIGV4dGVuc2lvblBhZ2U6IGJvb2xlYW4gPSBmYWxzZSwgYWN0aXZlOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIGNocm9tZS50YWJzLmNyZWF0ZSh7IHVybDogdXJsLCBhY3RpdmU6IGFjdGl2ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbWVzc2FnZUxpc3RlbmVyKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IChtZXNzYWdlOiBhbnksIHNlbmRlcjogY2hyb21lLnJ1bnRpbWUuTWVzc2FnZVNlbmRlciwgcmVzcG9uc2U6IGFueSkgPT4gdm9pZCkge1xyXG4gICAgICAgIGNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobXNnOiBhbnksIHNlbmRlcjogY2hyb21lLnJ1bnRpbWUuTWVzc2FnZVNlbmRlciwgcmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhtc2csIHNlbmRlciwgcmVzcG9uc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBjbG9zZUxvZ2luVGFiKCkge1xyXG4gICAgICAgIGNvbnN0IHRhYnMgPSBhd2FpdCBCcm93c2VyQXBpLnRhYnNRdWVyeSh7XHJcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgdGl0bGU6ICdCaXR3YXJkZW4nLFxyXG4gICAgICAgICAgICB3aW5kb3dUeXBlOiAnbm9ybWFsJyxcclxuICAgICAgICAgICAgY3VycmVudFdpbmRvdzogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRhYnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRhYlRvQ2xvc2UgPSB0YWJzW3RhYnMubGVuZ3RoIC0gMV0uaWQ7XHJcbiAgICAgICAgY2hyb21lLnRhYnMucmVtb3ZlKHRhYlRvQ2xvc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBmb2N1c1NwZWNpZmllZFRhYih0YWJJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgY2hyb21lLnRhYnMudXBkYXRlKHRhYklkLCB7IGFjdGl2ZTogdHJ1ZSwgaGlnaGxpZ2h0ZWQ6IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNsb3NlUG9wdXAod2luOiBXaW5kb3cpIHtcclxuICAgICAgICBpZiAoQnJvd3NlckFwaS5pc1dlYkV4dGVuc2lvbnNBcGkgJiYgQnJvd3NlckFwaS5pc0ZpcmVmb3hPbkFuZHJvaWQpIHtcclxuICAgICAgICAgICAgLy8gUmVhY3RpdmF0aW5nIHRoZSBhY3RpdmUgdGFiIGRpc21pc3NlcyB0aGUgcG9wdXAgdGFiLiBUaGUgcHJvbWlzZSBmaW5hbFxyXG4gICAgICAgICAgICAvLyBjb25kaXRpb24gaXMgb25seSBjYWxsZWQgaWYgdGhlIHBvcHVwIHdhc24ndCBhbHJlYWR5IGRpc21pc3NlZCAoZnV0dXJlIHByb29maW5nKS5cclxuICAgICAgICAgICAgLy8gcmVmOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDMzNjA0XHJcbiAgICAgICAgICAgIGJyb3dzZXIudGFicy51cGRhdGUoeyBhY3RpdmU6IHRydWUgfSkuZmluYWxseSh3aW4uY2xvc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdpbi5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZG93bmxvYWRGaWxlKHdpbjogV2luZG93LCBibG9iRGF0YTogYW55LCBibG9iT3B0aW9uczogYW55LCBmaWxlTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKEJyb3dzZXJBcGkuaXNTYWZhcmlBcGkpIHtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGJsb2JPcHRpb25zICE9IG51bGwgPyBibG9iT3B0aW9ucy50eXBlIDogbnVsbDtcclxuICAgICAgICAgICAgbGV0IGRhdGE6IHN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAndGV4dC9wbGFpbicgJiYgdHlwZW9mIChibG9iRGF0YSkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhID0gYmxvYkRhdGE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhID0gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGJsb2JEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBTYWZhcmlBcHAuc2VuZE1lc3NhZ2VUb0FwcCgnZG93bmxvYWRGaWxlJywgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgYmxvYkRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBibG9iT3B0aW9uczogYmxvYk9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogZmlsZU5hbWUsXHJcbiAgICAgICAgICAgIH0pLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2Jsb2JEYXRhXSwgYmxvYk9wdGlvbnMpO1xyXG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IpIHtcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvci5tc1NhdmVCbG9iKGJsb2IsIGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSB3aW4uZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICAgICAgYS5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICAgICAgICAgIGEuZG93bmxvYWQgPSBmaWxlTmFtZTtcclxuICAgICAgICAgICAgICAgIHdpbi5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xyXG4gICAgICAgICAgICAgICAgYS5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgd2luLmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdhRmlsdGVyKCkge1xyXG4gICAgICAgIHJldHVybiBwcm9jZXNzLmVudi5FTlYgIT09ICdwcm9kdWN0aW9uJztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0VUlMYW5ndWFnZSh3aW46IFdpbmRvdykge1xyXG4gICAgICAgIHJldHVybiBjaHJvbWUuaTE4bi5nZXRVSUxhbmd1YWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJlbG9hZEV4dGVuc2lvbih3aW46IFdpbmRvdykge1xyXG4gICAgICAgIGlmICh3aW4gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gd2luLmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY2hyb21lLnJ1bnRpbWUucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZWxvYWRPcGVuV2luZG93cygpIHtcclxuICAgICAgICBjb25zdCB2aWV3cyA9IGNocm9tZS5leHRlbnNpb24uZ2V0Vmlld3MoKSBhcyBXaW5kb3dbXTtcclxuICAgICAgICB2aWV3cy5maWx0ZXIodyA9PiB3LmxvY2F0aW9uLmhyZWYgIT0gbnVsbCkuZm9yRWFjaCh3ID0+IHtcclxuICAgICAgICAgICAgdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29ubmVjdE5hdGl2ZShhcHBsaWNhdGlvbjogc3RyaW5nKTogYnJvd3Nlci5ydW50aW1lLlBvcnQgfCBjaHJvbWUucnVudGltZS5Qb3J0IHtcclxuICAgICAgICBpZiAoQnJvd3NlckFwaS5pc1dlYkV4dGVuc2lvbnNBcGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIucnVudGltZS5jb25uZWN0TmF0aXZlKGFwcGxpY2F0aW9uKTtcclxuICAgICAgICB9IGVsc2UgaWYgKEJyb3dzZXJBcGkuaXNDaHJvbWVBcGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNocm9tZS5ydW50aW1lLmNvbm5lY3ROYXRpdmUoYXBwbGljYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVxdWVzdFBlcm1pc3Npb24ocGVybWlzc2lvbjogYW55KSB7XHJcbiAgICAgICAgaWYgKEJyb3dzZXJBcGkuaXNXZWJFeHRlbnNpb25zQXBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyLnBlcm1pc3Npb25zLnJlcXVlc3QocGVybWlzc2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNocm9tZS5wZXJtaXNzaW9ucy5yZXF1ZXN0KHBlcm1pc3Npb24sIHJlc29sdmUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQbGF0Zm9ybUluZm8oKTogUHJvbWlzZTxicm93c2VyLnJ1bnRpbWUuUGxhdGZvcm1JbmZvIHwgY2hyb21lLnJ1bnRpbWUuUGxhdGZvcm1JbmZvPiB7XHJcbiAgICAgICAgaWYgKEJyb3dzZXJBcGkuaXNXZWJFeHRlbnNpb25zQXBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyLnJ1bnRpbWUuZ2V0UGxhdGZvcm1JbmZvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuZ2V0UGxhdGZvcm1JbmZvKHJlc29sdmUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBlbnVtIE9yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlIHtcclxuICAgIEludml0ZWQgPSAwLFxyXG4gICAgQWNjZXB0ZWQgPSAxLFxyXG4gICAgQ29uZmlybWVkID0gMixcclxufVxyXG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcclxuXHJcbmltcG9ydCB7IFNlbmRGaWxlIH0gZnJvbSAnLi4vZG9tYWluL3NlbmRGaWxlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZW5kRmlsZVZpZXcgaW1wbGVtZW50cyBWaWV3IHtcclxuICAgIGlkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgc2l6ZTogc3RyaW5nID0gbnVsbDtcclxuICAgIHNpemVOYW1lOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgZmlsZU5hbWU6IHN0cmluZyA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZj86IFNlbmRGaWxlKSB7XHJcbiAgICAgICAgaWYgKCFmKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaWQgPSBmLmlkO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IGYuc2l6ZTtcclxuICAgICAgICB0aGlzLnNpemVOYW1lID0gZi5zaXplTmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZmlsZVNpemUoKTogbnVtYmVyIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaXplICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLnNpemUsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgIC8vIEludmFsaWQgZmlsZSBzaXplLlxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcclxuXHJcbmltcG9ydCB7IFNlbmRUZXh0IH0gZnJvbSAnLi4vZG9tYWluL3NlbmRUZXh0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZW5kVGV4dFZpZXcgaW1wbGVtZW50cyBWaWV3IHtcclxuICAgIHRleHQ6IHN0cmluZyA9IG51bGw7XHJcbiAgICBoaWRkZW46IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IodD86IFNlbmRUZXh0KSB7XHJcbiAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaGlkZGVuID0gdC5oaWRkZW47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1hc2tlZFRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZXh0ICE9IG51bGwgPyAn4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiJyA6IG51bGw7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gVHdvRmFjdG9yUHJvdmlkZXJUeXBlIHtcclxuICAgIEF1dGhlbnRpY2F0b3IgPSAwLFxyXG4gICAgRW1haWwgPSAxLFxyXG4gICAgRHVvID0gMixcclxuICAgIFl1YmlrZXkgPSAzLFxyXG4gICAgVTJmID0gNCxcclxuICAgIFJlbWVtYmVyID0gNSxcclxuICAgIE9yZ2FuaXphdGlvbkR1byA9IDYsXHJcbiAgICBXZWJBdXRobiA9IDcsXHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIEF0dGFjaG1lbnRSZXF1ZXN0IHtcclxuICAgIGZpbGVOYW1lOiBzdHJpbmc7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIGZpbGVTaXplOiBudW1iZXI7XHJcbiAgICBhZG1pblJlcXVlc3Q6IGJvb2xlYW47XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2lwaGVyUmVwcm9tcHRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvY2lwaGVyUmVwcm9tcHRUeXBlJztcclxuaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2NpcGhlclR5cGUnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyIH0gZnJvbSAnLi4vZG9tYWluL2NpcGhlcic7XHJcblxyXG5pbXBvcnQgeyBDYXJkQXBpIH0gZnJvbSAnLi4vYXBpL2NhcmRBcGknO1xyXG5pbXBvcnQgeyBGaWVsZEFwaSB9IGZyb20gJy4uL2FwaS9maWVsZEFwaSc7XHJcbmltcG9ydCB7IElkZW50aXR5QXBpIH0gZnJvbSAnLi4vYXBpL2lkZW50aXR5QXBpJztcclxuaW1wb3J0IHsgTG9naW5BcGkgfSBmcm9tICcuLi9hcGkvbG9naW5BcGknO1xyXG5pbXBvcnQgeyBMb2dpblVyaUFwaSB9IGZyb20gJy4uL2FwaS9sb2dpblVyaUFwaSc7XHJcbmltcG9ydCB7IFNlY3VyZU5vdGVBcGkgfSBmcm9tICcuLi9hcGkvc2VjdXJlTm90ZUFwaSc7XHJcblxyXG5pbXBvcnQgeyBBdHRhY2htZW50UmVxdWVzdCB9IGZyb20gJy4vYXR0YWNobWVudFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBQYXNzd29yZEhpc3RvcnlSZXF1ZXN0IH0gZnJvbSAnLi9wYXNzd29yZEhpc3RvcnlSZXF1ZXN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBDaXBoZXJSZXF1ZXN0IHtcclxuICAgIHR5cGU6IENpcGhlclR5cGU7XHJcbiAgICBmb2xkZXJJZDogc3RyaW5nO1xyXG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG5vdGVzOiBzdHJpbmc7XHJcbiAgICBmYXZvcml0ZTogYm9vbGVhbjtcclxuICAgIGxvZ2luOiBMb2dpbkFwaTtcclxuICAgIHNlY3VyZU5vdGU6IFNlY3VyZU5vdGVBcGk7XHJcbiAgICBjYXJkOiBDYXJkQXBpO1xyXG4gICAgaWRlbnRpdHk6IElkZW50aXR5QXBpO1xyXG4gICAgZmllbGRzOiBGaWVsZEFwaVtdO1xyXG4gICAgcGFzc3dvcmRIaXN0b3J5OiBQYXNzd29yZEhpc3RvcnlSZXF1ZXN0W107XHJcbiAgICAvLyBEZXByZWNhdGVkLCByZW1vdmUgYXQgc29tZSBwb2ludCBhbmQgcmVuYW1lIGF0dGFjaG1lbnRzMiB0byBhdHRhY2htZW50c1xyXG4gICAgYXR0YWNobWVudHM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmc7IH07XHJcbiAgICBhdHRhY2htZW50czI6IHsgW2lkOiBzdHJpbmddOiBBdHRhY2htZW50UmVxdWVzdDsgfTtcclxuICAgIGxhc3RLbm93blJldmlzaW9uRGF0ZTogRGF0ZTtcclxuICAgIHJlcHJvbXB0OiBDaXBoZXJSZXByb21wdFR5cGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY2lwaGVyOiBDaXBoZXIpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBjaXBoZXIudHlwZTtcclxuICAgICAgICB0aGlzLmZvbGRlcklkID0gY2lwaGVyLmZvbGRlcklkO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSBjaXBoZXIub3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gY2lwaGVyLm5hbWUgPyBjaXBoZXIubmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgIHRoaXMubm90ZXMgPSBjaXBoZXIubm90ZXMgPyBjaXBoZXIubm90ZXMuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICB0aGlzLmZhdm9yaXRlID0gY2lwaGVyLmZhdm9yaXRlO1xyXG4gICAgICAgIHRoaXMubGFzdEtub3duUmV2aXNpb25EYXRlID0gY2lwaGVyLnJldmlzaW9uRGF0ZTtcclxuICAgICAgICB0aGlzLnJlcHJvbXB0ID0gY2lwaGVyLnJlcHJvbXB0O1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuTG9naW46XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luID0gbmV3IExvZ2luQXBpKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luLnVyaXMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbi51c2VybmFtZSA9IGNpcGhlci5sb2dpbi51c2VybmFtZSA/IGNpcGhlci5sb2dpbi51c2VybmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbi5wYXNzd29yZCA9IGNpcGhlci5sb2dpbi5wYXNzd29yZCA/IGNpcGhlci5sb2dpbi5wYXNzd29yZC5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbi5wYXNzd29yZFJldmlzaW9uRGF0ZSA9IGNpcGhlci5sb2dpbi5wYXNzd29yZFJldmlzaW9uRGF0ZSAhPSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIubG9naW4ucGFzc3dvcmRSZXZpc2lvbkRhdGUudG9JU09TdHJpbmcoKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luLnRvdHAgPSBjaXBoZXIubG9naW4udG90cCA/IGNpcGhlci5sb2dpbi50b3RwLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luLmF1dG9maWxsT25QYWdlTG9hZCA9IGNpcGhlci5sb2dpbi5hdXRvZmlsbE9uUGFnZUxvYWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNpcGhlci5sb2dpbi51cmlzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2luLnVyaXMgPSBjaXBoZXIubG9naW4udXJpcy5tYXAodSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVyaSA9IG5ldyBMb2dpblVyaUFwaSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmkudXJpID0gdS51cmkgIT0gbnVsbCA/IHUudXJpLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVyaS5tYXRjaCA9IHUubWF0Y2ggIT0gbnVsbCA/IHUubWF0Y2ggOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWN1cmVOb3RlID0gbmV3IFNlY3VyZU5vdGVBcGkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VjdXJlTm90ZS50eXBlID0gY2lwaGVyLnNlY3VyZU5vdGUudHlwZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuQ2FyZDpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FyZCA9IG5ldyBDYXJkQXBpKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQuY2FyZGhvbGRlck5hbWUgPSBjaXBoZXIuY2FyZC5jYXJkaG9sZGVyTmFtZSAhPSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuY2FyZC5jYXJkaG9sZGVyTmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJkLmJyYW5kID0gY2lwaGVyLmNhcmQuYnJhbmQgIT0gbnVsbCA/IGNpcGhlci5jYXJkLmJyYW5kLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQubnVtYmVyID0gY2lwaGVyLmNhcmQubnVtYmVyICE9IG51bGwgPyBjaXBoZXIuY2FyZC5udW1iZXIuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FyZC5leHBNb250aCA9IGNpcGhlci5jYXJkLmV4cE1vbnRoICE9IG51bGwgPyBjaXBoZXIuY2FyZC5leHBNb250aC5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJkLmV4cFllYXIgPSBjaXBoZXIuY2FyZC5leHBZZWFyICE9IG51bGwgPyBjaXBoZXIuY2FyZC5leHBZZWFyLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQuY29kZSA9IGNpcGhlci5jYXJkLmNvZGUgIT0gbnVsbCA/IGNpcGhlci5jYXJkLmNvZGUuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5ID0gbmV3IElkZW50aXR5QXBpKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5LnRpdGxlID0gY2lwaGVyLmlkZW50aXR5LnRpdGxlICE9IG51bGwgPyBjaXBoZXIuaWRlbnRpdHkudGl0bGUuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkuZmlyc3ROYW1lID0gY2lwaGVyLmlkZW50aXR5LmZpcnN0TmFtZSAhPSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuaWRlbnRpdHkuZmlyc3ROYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5Lm1pZGRsZU5hbWUgPSBjaXBoZXIuaWRlbnRpdHkubWlkZGxlTmFtZSAhPSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuaWRlbnRpdHkubWlkZGxlTmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5sYXN0TmFtZSA9IGNpcGhlci5pZGVudGl0eS5sYXN0TmFtZSAhPSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuaWRlbnRpdHkubGFzdE5hbWUuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkuYWRkcmVzczEgPSBjaXBoZXIuaWRlbnRpdHkuYWRkcmVzczEgIT0gbnVsbCA/XHJcbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5LmFkZHJlc3MxLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5LmFkZHJlc3MyID0gY2lwaGVyLmlkZW50aXR5LmFkZHJlc3MyICE9IG51bGwgP1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS5hZGRyZXNzMi5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5hZGRyZXNzMyA9IGNpcGhlci5pZGVudGl0eS5hZGRyZXNzMyAhPSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuaWRlbnRpdHkuYWRkcmVzczMuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkuY2l0eSA9IGNpcGhlci5pZGVudGl0eS5jaXR5ICE9IG51bGwgPyBjaXBoZXIuaWRlbnRpdHkuY2l0eS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5zdGF0ZSA9IGNpcGhlci5pZGVudGl0eS5zdGF0ZSAhPSBudWxsID8gY2lwaGVyLmlkZW50aXR5LnN0YXRlLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5LnBvc3RhbENvZGUgPSBjaXBoZXIuaWRlbnRpdHkucG9zdGFsQ29kZSAhPSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuaWRlbnRpdHkucG9zdGFsQ29kZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5jb3VudHJ5ID0gY2lwaGVyLmlkZW50aXR5LmNvdW50cnkgIT0gbnVsbCA/XHJcbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5LmNvdW50cnkuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkuY29tcGFueSA9IGNpcGhlci5pZGVudGl0eS5jb21wYW55ICE9IG51bGwgP1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS5jb21wYW55LmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5LmVtYWlsID0gY2lwaGVyLmlkZW50aXR5LmVtYWlsICE9IG51bGwgPyBjaXBoZXIuaWRlbnRpdHkuZW1haWwuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkucGhvbmUgPSBjaXBoZXIuaWRlbnRpdHkucGhvbmUgIT0gbnVsbCA/IGNpcGhlci5pZGVudGl0eS5waG9uZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5zc24gPSBjaXBoZXIuaWRlbnRpdHkuc3NuICE9IG51bGwgPyBjaXBoZXIuaWRlbnRpdHkuc3NuLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5LnVzZXJuYW1lID0gY2lwaGVyLmlkZW50aXR5LnVzZXJuYW1lICE9IG51bGwgP1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS51c2VybmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5wYXNzcG9ydE51bWJlciA9IGNpcGhlci5pZGVudGl0eS5wYXNzcG9ydE51bWJlciAhPSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuaWRlbnRpdHkucGFzc3BvcnROdW1iZXIuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkubGljZW5zZU51bWJlciA9IGNpcGhlci5pZGVudGl0eS5saWNlbnNlTnVtYmVyICE9IG51bGwgP1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS5saWNlbnNlTnVtYmVyLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNpcGhlci5maWVsZHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpZWxkcyA9IGNpcGhlci5maWVsZHMubWFwKGYgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSBuZXcgRmllbGRBcGkoKTtcclxuICAgICAgICAgICAgICAgIGZpZWxkLnR5cGUgPSBmLnR5cGU7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC5uYW1lID0gZi5uYW1lID8gZi5uYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC52YWx1ZSA9IGYudmFsdWUgPyBmLnZhbHVlLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC5saW5rZWRJZCA9IGYubGlua2VkSWQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNpcGhlci5wYXNzd29yZEhpc3RvcnkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhc3N3b3JkSGlzdG9yeSA9IFtdO1xyXG4gICAgICAgICAgICBjaXBoZXIucGFzc3dvcmRIaXN0b3J5LmZvckVhY2gocGggPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXNzd29yZEhpc3RvcnkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFVzZWREYXRlOiBwaC5sYXN0VXNlZERhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBoLnBhc3N3b3JkID8gcGgucGFzc3dvcmQuZW5jcnlwdGVkU3RyaW5nIDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaXBoZXIuYXR0YWNobWVudHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaG1lbnRzID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudHMyID0ge307XHJcbiAgICAgICAgICAgIGNpcGhlci5hdHRhY2htZW50cy5mb3JFYWNoKGF0dGFjaG1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBhdHRhY2htZW50LmZpbGVOYW1lID8gYXR0YWNobWVudC5maWxlTmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRhY2htZW50c1thdHRhY2htZW50LmlkXSA9IGZpbGVOYW1lO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0YWNobWVudFJlcXVlc3QgPSBuZXcgQXR0YWNobWVudFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRSZXF1ZXN0LmZpbGVOYW1lID0gZmlsZU5hbWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0YWNobWVudC5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRSZXF1ZXN0LmtleSA9IGF0dGFjaG1lbnQua2V5LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudHMyW2F0dGFjaG1lbnQuaWRdID0gYXR0YWNobWVudFJlcXVlc3Q7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9maWVsZFR5cGUnO1xyXG5pbXBvcnQgeyBMaW5rZWRJZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9saW5rZWRJZFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XHJcblxyXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uL2RvbWFpbi9maWVsZCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmllbGRWaWV3IGltcGxlbWVudHMgVmlldyB7XHJcbiAgICBuYW1lOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgdmFsdWU6IHN0cmluZyA9IG51bGw7XHJcbiAgICB0eXBlOiBGaWVsZFR5cGUgPSBudWxsO1xyXG4gICAgbmV3RmllbGQ6IGJvb2xlYW4gPSBmYWxzZTsgLy8gTWFya3MgaWYgdGhlIGZpZWxkIGlzIG5ldyBhbmQgaGFzbid0IGJlZW4gc2F2ZWRcclxuICAgIHNob3dWYWx1ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgbGlua2VkSWQ6IExpbmtlZElkVHlwZSA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZj86IEZpZWxkKSB7XHJcbiAgICAgICAgaWYgKCFmKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IGYudHlwZTtcclxuICAgICAgICB0aGlzLmxpbmtlZElkID0gZi5saW5rZWRJZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWFza2VkVmFsdWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSAhPSBudWxsID8gJ+KAouKAouKAouKAouKAouKAouKAouKAoicgOiBudWxsO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBlbnVtIFZlcmlmaWNhdGlvblR5cGUge1xyXG4gICAgTWFzdGVyUGFzc3dvcmQgPSAwLFxyXG4gICAgT1RQID0gMSxcclxufVxyXG4iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgTWVzc2FnaW5nU2VydmljZSB7XHJcbiAgICBzZW5kOiAoc3Vic2NyaWJlcjogc3RyaW5nLCBhcmc/OiBhbnkpID0+IHZvaWQ7XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFNlY3JldFZlcmlmaWNhdGlvblJlcXVlc3Qge1xyXG4gICAgbWFzdGVyUGFzc3dvcmRIYXNoOiBzdHJpbmc7XHJcbiAgICBvdHA6IHN0cmluZztcclxufVxyXG4iLCJleHBvcnQgZW51bSBLZGZUeXBlIHtcclxuICAgIFBCS0RGMl9TSEEyNTYgPSAwLFxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBLZXlDb25uZWN0b3JVc2VyS2V5UmVxdWVzdCB7XHJcbiAgICBrZXk6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFNlbmRGaWxlQXBpIH0gZnJvbSAnLi4vYXBpL3NlbmRGaWxlQXBpJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZW5kRmlsZURhdGEge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGZpbGVOYW1lOiBzdHJpbmc7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIHNpemU6IHN0cmluZztcclxuICAgIHNpemVOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YT86IFNlbmRGaWxlQXBpKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlkID0gZGF0YS5pZDtcclxuICAgICAgICB0aGlzLmZpbGVOYW1lID0gZGF0YS5maWxlTmFtZTtcclxuICAgICAgICB0aGlzLmtleSA9IGRhdGEua2V5O1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcclxuICAgICAgICB0aGlzLnNpemVOYW1lID0gZGF0YS5zaXplTmFtZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTZW5kVGV4dEFwaSB9IGZyb20gJy4uL2FwaS9zZW5kVGV4dEFwaSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VuZFRleHREYXRhIHtcclxuICAgIHRleHQ6IHN0cmluZztcclxuICAgIGhpZGRlbjogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhPzogU2VuZFRleHRBcGkpIHtcclxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGV4dCA9IGRhdGEudGV4dDtcclxuICAgICAgICB0aGlzLmhpZGRlbiA9IGRhdGEuaGlkZGVuO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFNlbmRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VuZFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgU2VuZEZpbGVEYXRhIH0gZnJvbSAnLi9zZW5kRmlsZURhdGEnO1xyXG5pbXBvcnQgeyBTZW5kVGV4dERhdGEgfSBmcm9tICcuL3NlbmRUZXh0RGF0YSc7XHJcblxyXG5pbXBvcnQgeyBTZW5kUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9zZW5kUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbmREYXRhIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBhY2Nlc3NJZDogc3RyaW5nO1xyXG4gICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBTZW5kVHlwZTtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG5vdGVzOiBzdHJpbmc7XHJcbiAgICBmaWxlOiBTZW5kRmlsZURhdGE7XHJcbiAgICB0ZXh0OiBTZW5kVGV4dERhdGE7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIG1heEFjY2Vzc0NvdW50PzogbnVtYmVyO1xyXG4gICAgYWNjZXNzQ291bnQ6IG51bWJlcjtcclxuICAgIHJldmlzaW9uRGF0ZTogc3RyaW5nO1xyXG4gICAgZXhwaXJhdGlvbkRhdGU6IHN0cmluZztcclxuICAgIGRlbGV0aW9uRGF0ZTogc3RyaW5nO1xyXG4gICAgcGFzc3dvcmQ6IHN0cmluZztcclxuICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgaGlkZUVtYWlsOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlPzogU2VuZFJlc3BvbnNlLCB1c2VySWQ/OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlkID0gcmVzcG9uc2UuaWQ7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NJZCA9IHJlc3BvbnNlLmFjY2Vzc0lkO1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHJlc3BvbnNlLnR5cGU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gcmVzcG9uc2UubmFtZTtcclxuICAgICAgICB0aGlzLm5vdGVzID0gcmVzcG9uc2Uubm90ZXM7XHJcbiAgICAgICAgdGhpcy5rZXkgPSByZXNwb25zZS5rZXk7XHJcbiAgICAgICAgdGhpcy5tYXhBY2Nlc3NDb3VudCA9IHJlc3BvbnNlLm1heEFjY2Vzc0NvdW50O1xyXG4gICAgICAgIHRoaXMuYWNjZXNzQ291bnQgPSByZXNwb25zZS5hY2Nlc3NDb3VudDtcclxuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IHJlc3BvbnNlLnJldmlzaW9uRGF0ZTtcclxuICAgICAgICB0aGlzLmV4cGlyYXRpb25EYXRlID0gcmVzcG9uc2UuZXhwaXJhdGlvbkRhdGU7XHJcbiAgICAgICAgdGhpcy5kZWxldGlvbkRhdGUgPSByZXNwb25zZS5kZWxldGlvbkRhdGU7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHJlc3BvbnNlLnBhc3N3b3JkO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSByZXNwb25zZS5kaXNhYmxlO1xyXG4gICAgICAgIHRoaXMuaGlkZUVtYWlsID0gcmVzcG9uc2UuaGlkZUVtYWlsO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLlRleHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBuZXcgU2VuZFRleHREYXRhKHJlc3BvbnNlLnRleHQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU2VuZFR5cGUuRmlsZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZSA9IG5ldyBTZW5kRmlsZURhdGEocmVzcG9uc2UuZmlsZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbmRGaWxlQXBpIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBmaWxlTmFtZTogc3RyaW5nO1xyXG4gICAga2V5OiBzdHJpbmc7XHJcbiAgICBzaXplOiBzdHJpbmc7XHJcbiAgICBzaXplTmFtZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcclxuICAgICAgICBzdXBlcihkYXRhKTtcclxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLmZpbGVOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGaWxlTmFtZScpO1xyXG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXknKTtcclxuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NpemUnKTtcclxuICAgICAgICB0aGlzLnNpemVOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTaXplTmFtZScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VuZFRleHRBcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gICAgaGlkZGVuOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcclxuICAgICAgICBzdXBlcihkYXRhKTtcclxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUZXh0Jyk7XHJcbiAgICAgICAgdGhpcy5oaWRkZW4gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hpZGRlbicpIHx8IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENhcmREYXRhIH0gZnJvbSAnLi4vZGF0YS9jYXJkRGF0YSc7XHJcblxyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4vZW5jU3RyaW5nJztcclxuXHJcbmltcG9ydCB7IENhcmRWaWV3IH0gZnJvbSAnLi4vdmlldy9jYXJkVmlldyc7XHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJkIGV4dGVuZHMgRG9tYWluIHtcclxuICAgIGNhcmRob2xkZXJOYW1lOiBFbmNTdHJpbmc7XHJcbiAgICBicmFuZDogRW5jU3RyaW5nO1xyXG4gICAgbnVtYmVyOiBFbmNTdHJpbmc7XHJcbiAgICBleHBNb250aDogRW5jU3RyaW5nO1xyXG4gICAgZXhwWWVhcjogRW5jU3RyaW5nO1xyXG4gICAgY29kZTogRW5jU3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IENhcmREYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XHJcbiAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiBudWxsLFxyXG4gICAgICAgICAgICBicmFuZDogbnVsbCxcclxuICAgICAgICAgICAgbnVtYmVyOiBudWxsLFxyXG4gICAgICAgICAgICBleHBNb250aDogbnVsbCxcclxuICAgICAgICAgICAgZXhwWWVhcjogbnVsbCxcclxuICAgICAgICAgICAgY29kZTogbnVsbCxcclxuICAgICAgICB9LCBhbHJlYWR5RW5jcnlwdGVkLCBbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVjcnlwdChvcmdJZDogc3RyaW5nLCBlbmNLZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPENhcmRWaWV3PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgQ2FyZFZpZXcodGhpcyksIHtcclxuICAgICAgICAgICAgY2FyZGhvbGRlck5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIGJyYW5kOiBudWxsLFxyXG4gICAgICAgICAgICBudW1iZXI6IG51bGwsXHJcbiAgICAgICAgICAgIGV4cE1vbnRoOiBudWxsLFxyXG4gICAgICAgICAgICBleHBZZWFyOiBudWxsLFxyXG4gICAgICAgICAgICBjb2RlOiBudWxsLFxyXG4gICAgICAgIH0sIG9yZ0lkLCBlbmNLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvQ2FyZERhdGEoKTogQ2FyZERhdGEge1xyXG4gICAgICAgIGNvbnN0IGMgPSBuZXcgQ2FyZERhdGEoKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGMsIHtcclxuICAgICAgICAgICAgY2FyZGhvbGRlck5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIGJyYW5kOiBudWxsLFxyXG4gICAgICAgICAgICBudW1iZXI6IG51bGwsXHJcbiAgICAgICAgICAgIGV4cE1vbnRoOiBudWxsLFxyXG4gICAgICAgICAgICBleHBZZWFyOiBudWxsLFxyXG4gICAgICAgICAgICBjb2RlOiBudWxsLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2ZpZWxkVHlwZSc7XHJcbmltcG9ydCB7IExpbmtlZElkVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2xpbmtlZElkVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBGaWVsZERhdGEgfSBmcm9tICcuLi9kYXRhL2ZpZWxkRGF0YSc7XHJcblxyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4vZW5jU3RyaW5nJztcclxuXHJcbmltcG9ydCB7IEZpZWxkVmlldyB9IGZyb20gJy4uL3ZpZXcvZmllbGRWaWV3JztcclxuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpZWxkIGV4dGVuZHMgRG9tYWluIHtcclxuICAgIG5hbWU6IEVuY1N0cmluZztcclxuICAgIHZhbHVlOiBFbmNTdHJpbmc7XHJcbiAgICB0eXBlOiBGaWVsZFR5cGU7XHJcbiAgICBsaW5rZWRJZDogTGlua2VkSWRUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IEZpZWxkRGF0YSwgYWxyZWFkeUVuY3J5cHRlZDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50eXBlID0gb2JqLnR5cGU7XHJcbiAgICAgICAgdGhpcy5saW5rZWRJZCA9IG9iai5saW5rZWRJZDtcclxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQsIFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWNyeXB0KG9yZ0lkOiBzdHJpbmcsIGVuY0tleT86IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8RmllbGRWaWV3PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgRmllbGRWaWV3KHRoaXMpLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIH0sIG9yZ0lkLCBlbmNLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvRmllbGREYXRhKCk6IEZpZWxkRGF0YSB7XHJcbiAgICAgICAgY29uc3QgZiA9IG5ldyBGaWVsZERhdGEoKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGYsIHtcclxuICAgICAgICAgICAgbmFtZTogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6IG51bGwsXHJcbiAgICAgICAgICAgIGxpbmtlZElkOiBudWxsLFxyXG4gICAgICAgIH0sIFsndHlwZScsICdsaW5rZWRJZCddKTtcclxuICAgICAgICByZXR1cm4gZjtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgdHlwZSBMaW5rZWRJZFR5cGUgPSBMb2dpbkxpbmtlZElkIHwgQ2FyZExpbmtlZElkIHwgSWRlbnRpdHlMaW5rZWRJZDtcclxuXHJcbi8vIExvZ2luVmlld1xyXG5leHBvcnQgZW51bSBMb2dpbkxpbmtlZElkIHtcclxuICAgIFVzZXJuYW1lID0gMTAwLFxyXG4gICAgUGFzc3dvcmQgPSAxMDEsXHJcbn1cclxuXHJcbi8vIENhcmRWaWV3XHJcbmV4cG9ydCBlbnVtIENhcmRMaW5rZWRJZCB7XHJcbiAgICBDYXJkaG9sZGVyTmFtZSA9IDMwMCxcclxuICAgIEV4cE1vbnRoID0gMzAxLFxyXG4gICAgRXhwWWVhciA9IDMwMixcclxuICAgIENvZGUgPSAzMDMsXHJcbiAgICBCcmFuZCA9IDMwNCxcclxuICAgIE51bWJlciA9IDMwNSxcclxufVxyXG5cclxuLy8gSWRlbnRpdHlWaWV3XHJcbmV4cG9ydCBlbnVtIElkZW50aXR5TGlua2VkSWQge1xyXG4gICAgVGl0bGUgPSA0MDAsXHJcbiAgICBNaWRkbGVOYW1lID0gNDAxLFxyXG4gICAgQWRkcmVzczEgPSA0MDIsXHJcbiAgICBBZGRyZXNzMiA9IDQwMyxcclxuICAgIEFkZHJlc3MzID0gNDA0LFxyXG4gICAgQ2l0eSA9IDQwNSxcclxuICAgIFN0YXRlID0gNDA2LFxyXG4gICAgUG9zdGFsQ29kZSA9IDQwNyxcclxuICAgIENvdW50cnkgPSA0MDgsXHJcbiAgICBDb21wYW55ID0gNDA5LFxyXG4gICAgRW1haWwgPSA0MTAsXHJcbiAgICBQaG9uZSA9IDQxMSxcclxuICAgIFNzbiA9IDQxMixcclxuICAgIFVzZXJuYW1lID0gNDEzLFxyXG4gICAgUGFzc3BvcnROdW1iZXIgPSA0MTQsXHJcbiAgICBMaWNlbnNlTnVtYmVyID0gNDE1LFxyXG4gICAgRmlyc3ROYW1lID0gNDE2LFxyXG4gICAgTGFzdE5hbWUgPSA0MTcsXHJcbiAgICBGdWxsTmFtZSA9IDQxOCxcclxufVxyXG4iLCJpbXBvcnQgeyBJZGVudGl0eURhdGEgfSBmcm9tICcuLi9kYXRhL2lkZW50aXR5RGF0YSc7XHJcblxyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4vZW5jU3RyaW5nJztcclxuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xyXG5cclxuaW1wb3J0IHsgSWRlbnRpdHlWaWV3IH0gZnJvbSAnLi4vdmlldy9pZGVudGl0eVZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIElkZW50aXR5IGV4dGVuZHMgRG9tYWluIHtcclxuICAgIHRpdGxlOiBFbmNTdHJpbmc7XHJcbiAgICBmaXJzdE5hbWU6IEVuY1N0cmluZztcclxuICAgIG1pZGRsZU5hbWU6IEVuY1N0cmluZztcclxuICAgIGxhc3ROYW1lOiBFbmNTdHJpbmc7XHJcbiAgICBhZGRyZXNzMTogRW5jU3RyaW5nO1xyXG4gICAgYWRkcmVzczI6IEVuY1N0cmluZztcclxuICAgIGFkZHJlc3MzOiBFbmNTdHJpbmc7XHJcbiAgICBjaXR5OiBFbmNTdHJpbmc7XHJcbiAgICBzdGF0ZTogRW5jU3RyaW5nO1xyXG4gICAgcG9zdGFsQ29kZTogRW5jU3RyaW5nO1xyXG4gICAgY291bnRyeTogRW5jU3RyaW5nO1xyXG4gICAgY29tcGFueTogRW5jU3RyaW5nO1xyXG4gICAgZW1haWw6IEVuY1N0cmluZztcclxuICAgIHBob25lOiBFbmNTdHJpbmc7XHJcbiAgICBzc246IEVuY1N0cmluZztcclxuICAgIHVzZXJuYW1lOiBFbmNTdHJpbmc7XHJcbiAgICBwYXNzcG9ydE51bWJlcjogRW5jU3RyaW5nO1xyXG4gICAgbGljZW5zZU51bWJlcjogRW5jU3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IElkZW50aXR5RGF0YSwgYWxyZWFkeUVuY3J5cHRlZDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5idWlsZERvbWFpbk1vZGVsKHRoaXMsIG9iaiwge1xyXG4gICAgICAgICAgICB0aXRsZTogbnVsbCxcclxuICAgICAgICAgICAgZmlyc3ROYW1lOiBudWxsLFxyXG4gICAgICAgICAgICBtaWRkbGVOYW1lOiBudWxsLFxyXG4gICAgICAgICAgICBsYXN0TmFtZTogbnVsbCxcclxuICAgICAgICAgICAgYWRkcmVzczE6IG51bGwsXHJcbiAgICAgICAgICAgIGFkZHJlc3MyOiBudWxsLFxyXG4gICAgICAgICAgICBhZGRyZXNzMzogbnVsbCxcclxuICAgICAgICAgICAgY2l0eTogbnVsbCxcclxuICAgICAgICAgICAgc3RhdGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IG51bGwsXHJcbiAgICAgICAgICAgIGNvdW50cnk6IG51bGwsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IG51bGwsXHJcbiAgICAgICAgICAgIGVtYWlsOiBudWxsLFxyXG4gICAgICAgICAgICBwaG9uZTogbnVsbCxcclxuICAgICAgICAgICAgc3NuOiBudWxsLFxyXG4gICAgICAgICAgICB1c2VybmFtZTogbnVsbCxcclxuICAgICAgICAgICAgcGFzc3BvcnROdW1iZXI6IG51bGwsXHJcbiAgICAgICAgICAgIGxpY2Vuc2VOdW1iZXI6IG51bGwsXHJcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY3J5cHQob3JnSWQ6IHN0cmluZywgZW5jS2V5PzogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxJZGVudGl0eVZpZXc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0T2JqKG5ldyBJZGVudGl0eVZpZXcodGhpcyksIHtcclxuICAgICAgICAgICAgdGl0bGU6IG51bGwsXHJcbiAgICAgICAgICAgIGZpcnN0TmFtZTogbnVsbCxcclxuICAgICAgICAgICAgbWlkZGxlTmFtZTogbnVsbCxcclxuICAgICAgICAgICAgbGFzdE5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIGFkZHJlc3MxOiBudWxsLFxyXG4gICAgICAgICAgICBhZGRyZXNzMjogbnVsbCxcclxuICAgICAgICAgICAgYWRkcmVzczM6IG51bGwsXHJcbiAgICAgICAgICAgIGNpdHk6IG51bGwsXHJcbiAgICAgICAgICAgIHN0YXRlOiBudWxsLFxyXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBudWxsLFxyXG4gICAgICAgICAgICBjb3VudHJ5OiBudWxsLFxyXG4gICAgICAgICAgICBjb21wYW55OiBudWxsLFxyXG4gICAgICAgICAgICBlbWFpbDogbnVsbCxcclxuICAgICAgICAgICAgcGhvbmU6IG51bGwsXHJcbiAgICAgICAgICAgIHNzbjogbnVsbCxcclxuICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhc3Nwb3J0TnVtYmVyOiBudWxsLFxyXG4gICAgICAgICAgICBsaWNlbnNlTnVtYmVyOiBudWxsLFxyXG4gICAgICAgIH0sIG9yZ0lkLCBlbmNLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvSWRlbnRpdHlEYXRhKCk6IElkZW50aXR5RGF0YSB7XHJcbiAgICAgICAgY29uc3QgaSA9IG5ldyBJZGVudGl0eURhdGEoKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGksIHtcclxuICAgICAgICAgICAgdGl0bGU6IG51bGwsXHJcbiAgICAgICAgICAgIGZpcnN0TmFtZTogbnVsbCxcclxuICAgICAgICAgICAgbWlkZGxlTmFtZTogbnVsbCxcclxuICAgICAgICAgICAgbGFzdE5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIGFkZHJlc3MxOiBudWxsLFxyXG4gICAgICAgICAgICBhZGRyZXNzMjogbnVsbCxcclxuICAgICAgICAgICAgYWRkcmVzczM6IG51bGwsXHJcbiAgICAgICAgICAgIGNpdHk6IG51bGwsXHJcbiAgICAgICAgICAgIHN0YXRlOiBudWxsLFxyXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBudWxsLFxyXG4gICAgICAgICAgICBjb3VudHJ5OiBudWxsLFxyXG4gICAgICAgICAgICBjb21wYW55OiBudWxsLFxyXG4gICAgICAgICAgICBlbWFpbDogbnVsbCxcclxuICAgICAgICAgICAgcGhvbmU6IG51bGwsXHJcbiAgICAgICAgICAgIHNzbjogbnVsbCxcclxuICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhc3Nwb3J0TnVtYmVyOiBudWxsLFxyXG4gICAgICAgICAgICBsaWNlbnNlTnVtYmVyOiBudWxsLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IExvZ2luVXJpIH0gZnJvbSAnLi9sb2dpblVyaSc7XHJcblxyXG5pbXBvcnQgeyBMb2dpbkRhdGEgfSBmcm9tICcuLi9kYXRhL2xvZ2luRGF0YSc7XHJcblxyXG5pbXBvcnQgeyBMb2dpblZpZXcgfSBmcm9tICcuLi92aWV3L2xvZ2luVmlldyc7XHJcblxyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4vZW5jU3RyaW5nJztcclxuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvZ2luIGV4dGVuZHMgRG9tYWluIHtcclxuICAgIHVyaXM6IExvZ2luVXJpW107XHJcbiAgICB1c2VybmFtZTogRW5jU3RyaW5nO1xyXG4gICAgcGFzc3dvcmQ6IEVuY1N0cmluZztcclxuICAgIHBhc3N3b3JkUmV2aXNpb25EYXRlPzogRGF0ZTtcclxuICAgIHRvdHA6IEVuY1N0cmluZztcclxuICAgIGF1dG9maWxsT25QYWdlTG9hZDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBMb2dpbkRhdGEsIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGFzc3dvcmRSZXZpc2lvbkRhdGUgPSBvYmoucGFzc3dvcmRSZXZpc2lvbkRhdGUgIT0gbnVsbCA/IG5ldyBEYXRlKG9iai5wYXNzd29yZFJldmlzaW9uRGF0ZSkgOiBudWxsO1xyXG4gICAgICAgIHRoaXMuYXV0b2ZpbGxPblBhZ2VMb2FkID0gb2JqLmF1dG9maWxsT25QYWdlTG9hZDtcclxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiBudWxsLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogbnVsbCxcclxuICAgICAgICAgICAgdG90cDogbnVsbCxcclxuICAgICAgICB9LCBhbHJlYWR5RW5jcnlwdGVkLCBbXSk7XHJcblxyXG4gICAgICAgIGlmIChvYmoudXJpcykge1xyXG4gICAgICAgICAgICB0aGlzLnVyaXMgPSBbXTtcclxuICAgICAgICAgICAgb2JqLnVyaXMuZm9yRWFjaCh1ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXJpcy5wdXNoKG5ldyBMb2dpblVyaSh1LCBhbHJlYWR5RW5jcnlwdGVkKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWNyeXB0KG9yZ0lkOiBzdHJpbmcsIGVuY0tleT86IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8TG9naW5WaWV3PiB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IGF3YWl0IHRoaXMuZGVjcnlwdE9iaihuZXcgTG9naW5WaWV3KHRoaXMpLCB7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiBudWxsLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogbnVsbCxcclxuICAgICAgICAgICAgdG90cDogbnVsbCxcclxuICAgICAgICB9LCBvcmdJZCwgZW5jS2V5KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudXJpcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZpZXcudXJpcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudXJpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXJpID0gYXdhaXQgdGhpcy51cmlzW2ldLmRlY3J5cHQob3JnSWQsIGVuY0tleSk7XHJcbiAgICAgICAgICAgICAgICB2aWV3LnVyaXMucHVzaCh1cmkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmlldztcclxuICAgIH1cclxuXHJcbiAgICB0b0xvZ2luRGF0YSgpOiBMb2dpbkRhdGEge1xyXG4gICAgICAgIGNvbnN0IGwgPSBuZXcgTG9naW5EYXRhKCk7XHJcbiAgICAgICAgbC5wYXNzd29yZFJldmlzaW9uRGF0ZSA9IHRoaXMucGFzc3dvcmRSZXZpc2lvbkRhdGUgIT0gbnVsbCA/IHRoaXMucGFzc3dvcmRSZXZpc2lvbkRhdGUudG9JU09TdHJpbmcoKSA6IG51bGw7XHJcbiAgICAgICAgbC5hdXRvZmlsbE9uUGFnZUxvYWQgPSB0aGlzLmF1dG9maWxsT25QYWdlTG9hZDtcclxuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGwsIHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiBudWxsLFxyXG4gICAgICAgICAgICB0b3RwOiBudWxsLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy51cmlzICE9IG51bGwgJiYgdGhpcy51cmlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbC51cmlzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMudXJpcy5mb3JFYWNoKHUgPT4ge1xyXG4gICAgICAgICAgICAgICAgbC51cmlzLnB1c2godS50b0xvZ2luVXJpRGF0YSgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVcmlNYXRjaFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy91cmlNYXRjaFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgTG9naW5VcmlEYXRhIH0gZnJvbSAnLi4vZGF0YS9sb2dpblVyaURhdGEnO1xyXG5cclxuaW1wb3J0IHsgTG9naW5VcmlWaWV3IH0gZnJvbSAnLi4vdmlldy9sb2dpblVyaVZpZXcnO1xyXG5cclxuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xyXG5pbXBvcnQgeyBFbmNTdHJpbmcgfSBmcm9tICcuL2VuY1N0cmluZyc7XHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBMb2dpblVyaSBleHRlbmRzIERvbWFpbiB7XHJcbiAgICB1cmk6IEVuY1N0cmluZztcclxuICAgIG1hdGNoOiBVcmlNYXRjaFR5cGU7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob2JqPzogTG9naW5VcmlEYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm1hdGNoID0gb2JqLm1hdGNoO1xyXG4gICAgICAgIHRoaXMuYnVpbGREb21haW5Nb2RlbCh0aGlzLCBvYmosIHtcclxuICAgICAgICAgICAgdXJpOiBudWxsLFxyXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQsIFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWNyeXB0KG9yZ0lkOiBzdHJpbmcsIGVuY0tleT86IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8TG9naW5VcmlWaWV3PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgTG9naW5VcmlWaWV3KHRoaXMpLCB7XHJcbiAgICAgICAgICAgIHVyaTogbnVsbCxcclxuICAgICAgICB9LCBvcmdJZCwgZW5jS2V5KTtcclxuICAgIH1cclxuXHJcbiAgICB0b0xvZ2luVXJpRGF0YSgpOiBMb2dpblVyaURhdGEge1xyXG4gICAgICAgIGNvbnN0IHUgPSBuZXcgTG9naW5VcmlEYXRhKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZERhdGFNb2RlbCh0aGlzLCB1LCB7XHJcbiAgICAgICAgICAgIHVyaTogbnVsbCxcclxuICAgICAgICB9LCBbJ21hdGNoJ10pO1xyXG4gICAgICAgIHJldHVybiB1O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFNlY3VyZU5vdGVUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VjdXJlTm90ZVR5cGUnO1xyXG5cclxuaW1wb3J0IHsgU2VjdXJlTm90ZURhdGEgfSBmcm9tICcuLi9kYXRhL3NlY3VyZU5vdGVEYXRhJztcclxuXHJcbmltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcclxuXHJcbmltcG9ydCB7IFNlY3VyZU5vdGVWaWV3IH0gZnJvbSAnLi4vdmlldy9zZWN1cmVOb3RlVmlldyc7XHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWN1cmVOb3RlIGV4dGVuZHMgRG9tYWluIHtcclxuICAgIHR5cGU6IFNlY3VyZU5vdGVUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IFNlY3VyZU5vdGVEYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBvYmoudHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBkZWNyeXB0KG9yZ0lkOiBzdHJpbmcsIGVuY0tleT86IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8U2VjdXJlTm90ZVZpZXc+IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBTZWN1cmVOb3RlVmlldyh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TZWN1cmVOb3RlRGF0YSgpOiBTZWN1cmVOb3RlRGF0YSB7XHJcbiAgICAgICAgY29uc3QgbiA9IG5ldyBTZWN1cmVOb3RlRGF0YSgpO1xyXG4gICAgICAgIG4udHlwZSA9IHRoaXMudHlwZTtcclxuICAgICAgICByZXR1cm4gbjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy90d29GYWN0b3JQcm92aWRlclR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF1dGhSZXN1bHQge1xyXG4gICAgdHdvRmFjdG9yOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBjYXB0Y2hhU2l0ZUtleTogc3RyaW5nID0gJyc7XHJcbiAgICByZXNldE1hc3RlclBhc3N3b3JkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBmb3JjZVBhc3N3b3JkUmVzZXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHR3b0ZhY3RvclByb3ZpZGVyczogTWFwPFR3b0ZhY3RvclByb3ZpZGVyVHlwZSwgeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0+ID0gbnVsbDtcclxufVxyXG4iLCJpbXBvcnQgeyBLZXlzUmVxdWVzdCB9IGZyb20gJy4uL2tleXNSZXF1ZXN0JztcclxuXHJcbmltcG9ydCB7IEtkZlR5cGUgfSBmcm9tICcuLi8uLi8uLi9lbnVtcy9rZGZUeXBlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXRLZXlDb25uZWN0b3JLZXlSZXF1ZXN0IHtcclxuICAgIGtleTogc3RyaW5nO1xyXG4gICAga2V5czogS2V5c1JlcXVlc3Q7XHJcbiAgICBrZGY6IEtkZlR5cGU7XHJcbiAgICBrZGZJdGVyYXRpb25zOiBudW1iZXI7XHJcbiAgICBvcmdJZGVudGlmaWVyOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcsIGtkZjogS2RmVHlwZSwga2RmSXRlcmF0aW9uczogbnVtYmVyLCBvcmdJZGVudGlmaWVyOiBzdHJpbmcsIGtleXM6IEtleXNSZXF1ZXN0KSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5rZGYgPSBrZGY7XHJcbiAgICAgICAgdGhpcy5rZGZJdGVyYXRpb25zID0ga2RmSXRlcmF0aW9ucztcclxuICAgICAgICB0aGlzLm9yZ0lkZW50aWZpZXIgPSBvcmdJZGVudGlmaWVyO1xyXG4gICAgICAgIHRoaXMua2V5cyA9IGtleXM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRGV2aWNlVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2RldmljZVR5cGUnO1xyXG5cclxuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEZXZpY2VSZXF1ZXN0IHtcclxuICAgIHR5cGU6IERldmljZVR5cGU7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBpZGVudGlmaWVyOiBzdHJpbmc7XHJcbiAgICBwdXNoVG9rZW4/OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwSWQ6IHN0cmluZywgcGxhdGZvcm1VdGlsc1NlcnZpY2U6IFBsYXRmb3JtVXRpbHNTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gcGxhdGZvcm1VdGlsc1NlcnZpY2UuZ2V0RGV2aWNlKCk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gcGxhdGZvcm1VdGlsc1NlcnZpY2UuZ2V0RGV2aWNlU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gYXBwSWQ7XHJcbiAgICAgICAgdGhpcy5wdXNoVG9rZW4gPSBudWxsO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBQcmVsb2dpblJlcXVlc3Qge1xyXG4gICAgZW1haWw6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihlbWFpbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5lbWFpbCA9IGVtYWlsO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3R3b0ZhY3RvclByb3ZpZGVyVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBDYXB0Y2hhUHJvdGVjdGVkUmVxdWVzdCB9IGZyb20gJy4vY2FwdGNoYVByb3RlY3RlZFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBEZXZpY2VSZXF1ZXN0IH0gZnJvbSAnLi9kZXZpY2VSZXF1ZXN0JztcclxuXHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vbWlzYy91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgVG9rZW5SZXF1ZXN0IGltcGxlbWVudHMgQ2FwdGNoYVByb3RlY3RlZFJlcXVlc3Qge1xyXG4gICAgZW1haWw6IHN0cmluZztcclxuICAgIG1hc3RlclBhc3N3b3JkSGFzaDogc3RyaW5nO1xyXG4gICAgY29kZTogc3RyaW5nO1xyXG4gICAgY29kZVZlcmlmaWVyOiBzdHJpbmc7XHJcbiAgICByZWRpcmVjdFVyaTogc3RyaW5nO1xyXG4gICAgY2xpZW50SWQ6IHN0cmluZztcclxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nO1xyXG4gICAgZGV2aWNlPzogRGV2aWNlUmVxdWVzdDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjcmVkZW50aWFsczogc3RyaW5nW10sIGNvZGVzOiBzdHJpbmdbXSwgY2xpZW50SWRDbGllbnRTZWNyZXQ6IHN0cmluZ1tdLCBwdWJsaWMgcHJvdmlkZXI6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSxcclxuICAgICAgICBwdWJsaWMgdG9rZW46IHN0cmluZywgcHVibGljIHJlbWVtYmVyOiBib29sZWFuLCBwdWJsaWMgY2FwdGNoYVJlc3BvbnNlOiBzdHJpbmcsIGRldmljZT86IERldmljZVJlcXVlc3QpIHtcclxuICAgICAgICBpZiAoY3JlZGVudGlhbHMgIT0gbnVsbCAmJiBjcmVkZW50aWFscy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1haWwgPSBjcmVkZW50aWFsc1swXTtcclxuICAgICAgICAgICAgdGhpcy5tYXN0ZXJQYXNzd29yZEhhc2ggPSBjcmVkZW50aWFsc1sxXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNvZGVzICE9IG51bGwgJiYgY29kZXMubGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICB0aGlzLmNvZGUgPSBjb2Rlc1swXTtcclxuICAgICAgICAgICAgdGhpcy5jb2RlVmVyaWZpZXIgPSBjb2Rlc1sxXTtcclxuICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFVyaSA9IGNvZGVzWzJdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2xpZW50SWRDbGllbnRTZWNyZXQgIT0gbnVsbCAmJiBjbGllbnRJZENsaWVudFNlY3JldC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZENsaWVudFNlY3JldFswXTtcclxuICAgICAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBjbGllbnRJZENsaWVudFNlY3JldFsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kZXZpY2UgPSBkZXZpY2UgIT0gbnVsbCA/IGRldmljZSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgdG9JZGVudGl0eVRva2VuKGNsaWVudElkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBvYmo6IGFueSA9IHtcclxuICAgICAgICAgICAgc2NvcGU6ICdhcGkgb2ZmbGluZV9hY2Nlc3MnLFxyXG4gICAgICAgICAgICBjbGllbnRfaWQ6IGNsaWVudElkLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNsaWVudFNlY3JldCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIG9iai5zY29wZSA9IGNsaWVudElkLnN0YXJ0c1dpdGgoJ29yZ2FuaXphdGlvbicpID8gJ2FwaS5vcmdhbml6YXRpb24nIDogJ2FwaSc7XHJcbiAgICAgICAgICAgIG9iai5ncmFudF90eXBlID0gJ2NsaWVudF9jcmVkZW50aWFscyc7XHJcbiAgICAgICAgICAgIG9iai5jbGllbnRfc2VjcmV0ID0gdGhpcy5jbGllbnRTZWNyZXQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hc3RlclBhc3N3b3JkSGFzaCAhPSBudWxsICYmIHRoaXMuZW1haWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBvYmouZ3JhbnRfdHlwZSA9ICdwYXNzd29yZCc7XHJcbiAgICAgICAgICAgIG9iai51c2VybmFtZSA9IHRoaXMuZW1haWw7XHJcbiAgICAgICAgICAgIG9iai5wYXNzd29yZCA9IHRoaXMubWFzdGVyUGFzc3dvcmRIYXNoO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb2RlICE9IG51bGwgJiYgdGhpcy5jb2RlVmVyaWZpZXIgIT0gbnVsbCAmJiB0aGlzLnJlZGlyZWN0VXJpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgb2JqLmdyYW50X3R5cGUgPSAnYXV0aG9yaXphdGlvbl9jb2RlJztcclxuICAgICAgICAgICAgb2JqLmNvZGUgPSB0aGlzLmNvZGU7XHJcbiAgICAgICAgICAgIG9iai5jb2RlX3ZlcmlmaWVyID0gdGhpcy5jb2RlVmVyaWZpZXI7XHJcbiAgICAgICAgICAgIG9iai5yZWRpcmVjdF91cmkgPSB0aGlzLnJlZGlyZWN0VXJpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzIG9yIGNvZGVzJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kZXZpY2UpIHtcclxuICAgICAgICAgICAgb2JqLmRldmljZVR5cGUgPSB0aGlzLmRldmljZS50eXBlO1xyXG4gICAgICAgICAgICBvYmouZGV2aWNlSWRlbnRpZmllciA9IHRoaXMuZGV2aWNlLmlkZW50aWZpZXI7XHJcbiAgICAgICAgICAgIG9iai5kZXZpY2VOYW1lID0gdGhpcy5kZXZpY2UubmFtZTtcclxuICAgICAgICAgICAgLy8gbm8gcHVzaCB0b2tlbnMgZm9yIGJyb3dzZXIgYXBwcyB5ZXRcclxuICAgICAgICAgICAgLy8gb2JqLmRldmljZVB1c2hUb2tlbiA9IHRoaXMuZGV2aWNlLnB1c2hUb2tlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRva2VuICYmIHRoaXMucHJvdmlkZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBvYmoudHdvRmFjdG9yVG9rZW4gPSB0aGlzLnRva2VuO1xyXG4gICAgICAgICAgICBvYmoudHdvRmFjdG9yUHJvdmlkZXIgPSB0aGlzLnByb3ZpZGVyO1xyXG4gICAgICAgICAgICBvYmoudHdvRmFjdG9yUmVtZW1iZXIgPSB0aGlzLnJlbWVtYmVyID8gJzEnIDogJzAnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2FwdGNoYVJlc3BvbnNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgb2JqLmNhcHRjaGFSZXNwb25zZSA9IHRoaXMuY2FwdGNoYVJlc3BvbnNlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgYWx0ZXJJZGVudGl0eVRva2VuSGVhZGVycyhoZWFkZXJzOiBIZWFkZXJzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xpZW50U2VjcmV0ID09IG51bGwgJiYgdGhpcy5tYXN0ZXJQYXNzd29yZEhhc2ggIT0gbnVsbCAmJiB0aGlzLmVtYWlsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaGVhZGVycy5zZXQoJ0F1dGgtRW1haWwnLCBVdGlscy5mcm9tVXRmOFRvVXJsQjY0KHRoaXMuZW1haWwpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSGFzaFB1cnBvc2UgfSBmcm9tICcuLi9lbnVtcy9oYXNoUHVycG9zZSc7XHJcbmltcG9ydCB7IEtkZlR5cGUgfSBmcm9tICcuLi9lbnVtcy9rZGZUeXBlJztcclxuaW1wb3J0IHsgVHdvRmFjdG9yUHJvdmlkZXJUeXBlIH0gZnJvbSAnLi4vZW51bXMvdHdvRmFjdG9yUHJvdmlkZXJUeXBlJztcclxuXHJcbmltcG9ydCB7IEF1dGhSZXN1bHQgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2F1dGhSZXN1bHQnO1xyXG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3N5bW1ldHJpY0NyeXB0b0tleSc7XHJcblxyXG5pbXBvcnQgeyBTZXRLZXlDb25uZWN0b3JLZXlSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvYWNjb3VudC9zZXRLZXlDb25uZWN0b3JLZXlSZXF1ZXN0JztcclxuaW1wb3J0IHsgRGV2aWNlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2RldmljZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBLZXlDb25uZWN0b3JVc2VyS2V5UmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2tleUNvbm5lY3RvclVzZXJLZXlSZXF1ZXN0JztcclxuaW1wb3J0IHsgS2V5c1JlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9rZXlzUmVxdWVzdCc7XHJcbmltcG9ydCB7IFByZWxvZ2luUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3ByZWxvZ2luUmVxdWVzdCc7XHJcbmltcG9ydCB7IFRva2VuUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Rva2VuUmVxdWVzdCc7XHJcblxyXG5pbXBvcnQgeyBJZGVudGl0eVRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvaWRlbnRpdHlUb2tlblJlc3BvbnNlJztcclxuaW1wb3J0IHsgSWRlbnRpdHlUd29GYWN0b3JSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9pZGVudGl0eVR3b0ZhY3RvclJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBcHBJZFNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBwSWQuc2VydmljZSc7XHJcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIGFzIEF1dGhTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXV0aC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XHJcbmltcG9ydCB7IENyeXB0b0Z1bmN0aW9uU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRW52aXJvbm1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2Vudmlyb25tZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBLZXlDb25uZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2tleUNvbm5lY3Rvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2luZ1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvbWVzc2FnaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWxzU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUb2tlblNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdG9rZW4uc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFZhdWx0VGltZW91dFNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBUd29GYWN0b3JQcm92aWRlcnMgPSB7XHJcbiAgICBbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkF1dGhlbnRpY2F0b3JdOiB7XHJcbiAgICAgICAgdHlwZTogVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkF1dGhlbnRpY2F0b3IsXHJcbiAgICAgICAgbmFtZTogbnVsbCBhcyBzdHJpbmcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwgYXMgc3RyaW5nLFxyXG4gICAgICAgIHByaW9yaXR5OiAxLFxyXG4gICAgICAgIHNvcnQ6IDEsXHJcbiAgICAgICAgcHJlbWl1bTogZmFsc2UsXHJcbiAgICB9LFxyXG4gICAgW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5ZdWJpa2V5XToge1xyXG4gICAgICAgIHR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5ZdWJpa2V5LFxyXG4gICAgICAgIG5hbWU6IG51bGwgYXMgc3RyaW5nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBudWxsIGFzIHN0cmluZyxcclxuICAgICAgICBwcmlvcml0eTogMyxcclxuICAgICAgICBzb3J0OiAyLFxyXG4gICAgICAgIHByZW1pdW06IHRydWUsXHJcbiAgICB9LFxyXG4gICAgW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5EdW9dOiB7XHJcbiAgICAgICAgdHlwZTogVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkR1byxcclxuICAgICAgICBuYW1lOiAnRHVvJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCBhcyBzdHJpbmcsXHJcbiAgICAgICAgcHJpb3JpdHk6IDIsXHJcbiAgICAgICAgc29ydDogMyxcclxuICAgICAgICBwcmVtaXVtOiB0cnVlLFxyXG4gICAgfSxcclxuICAgIFtUd29GYWN0b3JQcm92aWRlclR5cGUuT3JnYW5pemF0aW9uRHVvXToge1xyXG4gICAgICAgIHR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5Pcmdhbml6YXRpb25EdW8sXHJcbiAgICAgICAgbmFtZTogJ0R1byAoT3JnYW5pemF0aW9uKScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwgYXMgc3RyaW5nLFxyXG4gICAgICAgIHByaW9yaXR5OiAxMCxcclxuICAgICAgICBzb3J0OiA0LFxyXG4gICAgICAgIHByZW1pdW06IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIFtUd29GYWN0b3JQcm92aWRlclR5cGUuRW1haWxdOiB7XHJcbiAgICAgICAgdHlwZTogVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkVtYWlsLFxyXG4gICAgICAgIG5hbWU6IG51bGwgYXMgc3RyaW5nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBudWxsIGFzIHN0cmluZyxcclxuICAgICAgICBwcmlvcml0eTogMCxcclxuICAgICAgICBzb3J0OiA2LFxyXG4gICAgICAgIHByZW1pdW06IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIFtUd29GYWN0b3JQcm92aWRlclR5cGUuV2ViQXV0aG5dOiB7XHJcbiAgICAgICAgdHlwZTogVHdvRmFjdG9yUHJvdmlkZXJUeXBlLldlYkF1dGhuLFxyXG4gICAgICAgIG5hbWU6IG51bGwgYXMgc3RyaW5nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBudWxsIGFzIHN0cmluZyxcclxuICAgICAgICBwcmlvcml0eTogNCxcclxuICAgICAgICBzb3J0OiA1LFxyXG4gICAgICAgIHByZW1pdW06IHRydWUsXHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEF1dGhTZXJ2aWNlIGltcGxlbWVudHMgQXV0aFNlcnZpY2VBYnN0cmFjdGlvbiB7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgbWFzdGVyUGFzc3dvcmRIYXNoOiBzdHJpbmc7XHJcbiAgICBsb2NhbE1hc3RlclBhc3N3b3JkSGFzaDogc3RyaW5nO1xyXG4gICAgY29kZTogc3RyaW5nO1xyXG4gICAgY29kZVZlcmlmaWVyOiBzdHJpbmc7XHJcbiAgICBzc29SZWRpcmVjdFVybDogc3RyaW5nO1xyXG4gICAgY2xpZW50SWQ6IHN0cmluZztcclxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nO1xyXG4gICAgdHdvRmFjdG9yUHJvdmlkZXJzRGF0YTogTWFwPFR3b0ZhY3RvclByb3ZpZGVyVHlwZSwgeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0+O1xyXG4gICAgc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSA9IG51bGw7XHJcbiAgICBjYXB0Y2hhVG9rZW46IHN0cmluZztcclxuXHJcbiAgICBwcml2YXRlIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZSwgcHJvdGVjdGVkIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsIHByb3RlY3RlZCB0b2tlblNlcnZpY2U6IFRva2VuU2VydmljZSxcclxuICAgICAgICBwcm90ZWN0ZWQgYXBwSWRTZXJ2aWNlOiBBcHBJZFNlcnZpY2UsIHByaXZhdGUgaTE4blNlcnZpY2U6IEkxOG5TZXJ2aWNlLFxyXG4gICAgICAgIHByb3RlY3RlZCBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UsIHByaXZhdGUgbWVzc2FnaW5nU2VydmljZTogTWVzc2FnaW5nU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHZhdWx0VGltZW91dFNlcnZpY2U6IFZhdWx0VGltZW91dFNlcnZpY2UsIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNyeXB0b0Z1bmN0aW9uU2VydmljZTogQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlLCBwcml2YXRlIGVudmlyb25tZW50U2VydmljZTogRW52aXJvbm1lbnRTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUga2V5Q29ubmVjdG9yU2VydmljZTogS2V5Q29ubmVjdG9yU2VydmljZSwgcHJpdmF0ZSBzZXRDcnlwdG9LZXlzID0gdHJ1ZSkge1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5FbWFpbF0ubmFtZSA9IHRoaXMuaTE4blNlcnZpY2UudCgnZW1haWxUaXRsZScpO1xyXG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuRW1haWxdLmRlc2NyaXB0aW9uID0gdGhpcy5pMThuU2VydmljZS50KCdlbWFpbERlc2MnKTtcclxuXHJcbiAgICAgICAgVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5BdXRoZW50aWNhdG9yXS5uYW1lID0gdGhpcy5pMThuU2VydmljZS50KCdhdXRoZW50aWNhdG9yQXBwVGl0bGUnKTtcclxuICAgICAgICBUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkF1dGhlbnRpY2F0b3JdLmRlc2NyaXB0aW9uID1cclxuICAgICAgICAgICAgdGhpcy5pMThuU2VydmljZS50KCdhdXRoZW50aWNhdG9yQXBwRGVzYycpO1xyXG5cclxuICAgICAgICBUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkR1b10uZGVzY3JpcHRpb24gPSB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2R1b0Rlc2MnKTtcclxuXHJcbiAgICAgICAgVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5Pcmdhbml6YXRpb25EdW9dLm5hbWUgPVxyXG4gICAgICAgICAgICAnRHVvICgnICsgdGhpcy5pMThuU2VydmljZS50KCdvcmdhbml6YXRpb24nKSArICcpJztcclxuICAgICAgICBUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLk9yZ2FuaXphdGlvbkR1b10uZGVzY3JpcHRpb24gPVxyXG4gICAgICAgICAgICB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2R1b09yZ2FuaXphdGlvbkRlc2MnKTtcclxuXHJcbiAgICAgICAgVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5XZWJBdXRobl0ubmFtZSA9IHRoaXMuaTE4blNlcnZpY2UudCgnd2ViQXV0aG5UaXRsZScpO1xyXG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuV2ViQXV0aG5dLmRlc2NyaXB0aW9uID0gdGhpcy5pMThuU2VydmljZS50KCd3ZWJBdXRobkRlc2MnKTtcclxuXHJcbiAgICAgICAgVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5ZdWJpa2V5XS5uYW1lID0gdGhpcy5pMThuU2VydmljZS50KCd5dWJpS2V5VGl0bGUnKTtcclxuICAgICAgICBUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLll1YmlrZXldLmRlc2NyaXB0aW9uID0gdGhpcy5pMThuU2VydmljZS50KCd5dWJpS2V5RGVzYycpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvZ0luKGVtYWlsOiBzdHJpbmcsIG1hc3RlclBhc3N3b3JkOiBzdHJpbmcsIGNhcHRjaGFUb2tlbj86IHN0cmluZyk6IFByb21pc2U8QXV0aFJlc3VsdD4ge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGUgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHRoaXMubWFrZVByZWxvZ2luS2V5KG1hc3RlclBhc3N3b3JkLCBlbWFpbCk7XHJcbiAgICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzaFBhc3N3b3JkKG1hc3RlclBhc3N3b3JkLCBrZXkpO1xyXG4gICAgICAgIGNvbnN0IGxvY2FsSGFzaGVkUGFzc3dvcmQgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzaFBhc3N3b3JkKG1hc3RlclBhc3N3b3JkLCBrZXksXHJcbiAgICAgICAgICAgIEhhc2hQdXJwb3NlLkxvY2FsQXV0aG9yaXphdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubG9nSW5IZWxwZXIoZW1haWwsIGhhc2hlZFBhc3N3b3JkLCBsb2NhbEhhc2hlZFBhc3N3b3JkLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLFxyXG4gICAgICAgICAgICBrZXksIG51bGwsIG51bGwsIG51bGwsIGNhcHRjaGFUb2tlbiwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9nSW5Tc28oY29kZTogc3RyaW5nLCBjb2RlVmVyaWZpZXI6IHN0cmluZywgcmVkaXJlY3RVcmw6IHN0cmluZywgb3JnSWQ6IHN0cmluZyk6IFByb21pc2U8QXV0aFJlc3VsdD4ge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGUgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvZ0luSGVscGVyKG51bGwsIG51bGwsIG51bGwsIGNvZGUsIGNvZGVWZXJpZmllciwgcmVkaXJlY3RVcmwsIG51bGwsIG51bGwsXHJcbiAgICAgICAgICAgIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG9yZ0lkKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBsb2dJbkFwaUtleShjbGllbnRJZDogc3RyaW5nLCBjbGllbnRTZWNyZXQ6IHN0cmluZyk6IFByb21pc2U8QXV0aFJlc3VsdD4ge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGUgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvZ0luSGVscGVyKG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIGNsaWVudElkLCBjbGllbnRTZWNyZXQsXHJcbiAgICAgICAgICAgIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvZ0luVHdvRmFjdG9yKHR3b0ZhY3RvclByb3ZpZGVyOiBUd29GYWN0b3JQcm92aWRlclR5cGUsIHR3b0ZhY3RvclRva2VuOiBzdHJpbmcsXHJcbiAgICAgICAgcmVtZW1iZXI/OiBib29sZWFuKTogUHJvbWlzZTxBdXRoUmVzdWx0PiB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubG9nSW5IZWxwZXIodGhpcy5lbWFpbCwgdGhpcy5tYXN0ZXJQYXNzd29yZEhhc2gsIHRoaXMubG9jYWxNYXN0ZXJQYXNzd29yZEhhc2gsIHRoaXMuY29kZSxcclxuICAgICAgICAgICAgdGhpcy5jb2RlVmVyaWZpZXIsIHRoaXMuc3NvUmVkaXJlY3RVcmwsIHRoaXMuY2xpZW50SWQsIHRoaXMuY2xpZW50U2VjcmV0LCB0aGlzLmtleSwgdHdvRmFjdG9yUHJvdmlkZXIsXHJcbiAgICAgICAgICAgIHR3b0ZhY3RvclRva2VuLCByZW1lbWJlciwgdGhpcy5jYXB0Y2hhVG9rZW4sIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvZ0luQ29tcGxldGUoZW1haWw6IHN0cmluZywgbWFzdGVyUGFzc3dvcmQ6IHN0cmluZywgdHdvRmFjdG9yUHJvdmlkZXI6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSxcclxuICAgICAgICB0d29GYWN0b3JUb2tlbjogc3RyaW5nLCByZW1lbWJlcj86IGJvb2xlYW4sIGNhcHRjaGFUb2tlbj86IHN0cmluZyk6IFByb21pc2U8QXV0aFJlc3VsdD4ge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGUgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHRoaXMubWFrZVByZWxvZ2luS2V5KG1hc3RlclBhc3N3b3JkLCBlbWFpbCk7XHJcbiAgICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzaFBhc3N3b3JkKG1hc3RlclBhc3N3b3JkLCBrZXkpO1xyXG4gICAgICAgIGNvbnN0IGxvY2FsSGFzaGVkUGFzc3dvcmQgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzaFBhc3N3b3JkKG1hc3RlclBhc3N3b3JkLCBrZXksXHJcbiAgICAgICAgICAgIEhhc2hQdXJwb3NlLkxvY2FsQXV0aG9yaXphdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubG9nSW5IZWxwZXIoZW1haWwsIGhhc2hlZFBhc3N3b3JkLCBsb2NhbEhhc2hlZFBhc3N3b3JkLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBrZXksXHJcbiAgICAgICAgICAgIHR3b0ZhY3RvclByb3ZpZGVyLCB0d29GYWN0b3JUb2tlbiwgcmVtZW1iZXIsIGNhcHRjaGFUb2tlbiwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9nSW5Tc29Db21wbGV0ZShjb2RlOiBzdHJpbmcsIGNvZGVWZXJpZmllcjogc3RyaW5nLCByZWRpcmVjdFVybDogc3RyaW5nLFxyXG4gICAgICAgIHR3b0ZhY3RvclByb3ZpZGVyOiBUd29GYWN0b3JQcm92aWRlclR5cGUsIHR3b0ZhY3RvclRva2VuOiBzdHJpbmcsIHJlbWVtYmVyPzogYm9vbGVhbik6IFByb21pc2U8QXV0aFJlc3VsdD4ge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGUgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvZ0luSGVscGVyKG51bGwsIG51bGwsIG51bGwsIGNvZGUsIGNvZGVWZXJpZmllciwgcmVkaXJlY3RVcmwsIG51bGwsXHJcbiAgICAgICAgICAgIG51bGwsIG51bGwsIHR3b0ZhY3RvclByb3ZpZGVyLCB0d29GYWN0b3JUb2tlbiwgcmVtZW1iZXIsIG51bGwsIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvZ0luQXBpS2V5Q29tcGxldGUoY2xpZW50SWQ6IHN0cmluZywgY2xpZW50U2VjcmV0OiBzdHJpbmcsIHR3b0ZhY3RvclByb3ZpZGVyOiBUd29GYWN0b3JQcm92aWRlclR5cGUsXHJcbiAgICAgICAgdHdvRmFjdG9yVG9rZW46IHN0cmluZywgcmVtZW1iZXI/OiBib29sZWFuKTogUHJvbWlzZTxBdXRoUmVzdWx0PiB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFR3b0ZhY3RvclByb3ZpZGVyVHlwZSA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubG9nSW5IZWxwZXIobnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCwgbnVsbCxcclxuICAgICAgICAgICAgdHdvRmFjdG9yUHJvdmlkZXIsIHR3b0ZhY3RvclRva2VuLCByZW1lbWJlciwgbnVsbCwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nT3V0KGNhbGxiYWNrOiBGdW5jdGlvbikge1xyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ2xvZ2dlZE91dCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN1cHBvcnRlZFR3b0ZhY3RvclByb3ZpZGVycyh3aW46IFdpbmRvdyk6IGFueVtdIHtcclxuICAgICAgICBjb25zdCBwcm92aWRlcnM6IGFueVtdID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlcnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy50d29GYWN0b3JQcm92aWRlcnNEYXRhLmhhcyhUd29GYWN0b3JQcm92aWRlclR5cGUuT3JnYW5pemF0aW9uRHVvKSAmJlxyXG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLnN1cHBvcnRzRHVvKCkpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2goVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5Pcmdhbml6YXRpb25EdW9dKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnR3b0ZhY3RvclByb3ZpZGVyc0RhdGEuaGFzKFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5BdXRoZW50aWNhdG9yKSkge1xyXG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkF1dGhlbnRpY2F0b3JdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnR3b0ZhY3RvclByb3ZpZGVyc0RhdGEuaGFzKFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5ZdWJpa2V5KSkge1xyXG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLll1YmlrZXldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnR3b0ZhY3RvclByb3ZpZGVyc0RhdGEuaGFzKFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5EdW8pICYmIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2Uuc3VwcG9ydHNEdW8oKSkge1xyXG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkR1b10pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YS5oYXMoVHdvRmFjdG9yUHJvdmlkZXJUeXBlLldlYkF1dGhuKSAmJiB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLnN1cHBvcnRzV2ViQXV0aG4od2luKSkge1xyXG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLldlYkF1dGhuXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy50d29GYWN0b3JQcm92aWRlcnNEYXRhLmhhcyhUd29GYWN0b3JQcm92aWRlclR5cGUuRW1haWwpKSB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVycy5wdXNoKFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuRW1haWxdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwcm92aWRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGVmYXVsdFR3b0ZhY3RvclByb3ZpZGVyKHdlYkF1dGhuU3VwcG9ydGVkOiBib29sZWFuKTogVHdvRmFjdG9yUHJvdmlkZXJUeXBlIHtcclxuICAgICAgICBpZiAodGhpcy50d29GYWN0b3JQcm92aWRlcnNEYXRhID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFR3b0ZhY3RvclByb3ZpZGVyVHlwZSAhPSBudWxsICYmXHJcbiAgICAgICAgICAgIHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YS5oYXModGhpcy5zZWxlY3RlZFR3b0ZhY3RvclByb3ZpZGVyVHlwZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcHJvdmlkZXJUeXBlOiBUd29GYWN0b3JQcm92aWRlclR5cGUgPSBudWxsO1xyXG4gICAgICAgIGxldCBwcm92aWRlclByaW9yaXR5ID0gLTE7XHJcbiAgICAgICAgdGhpcy50d29GYWN0b3JQcm92aWRlcnNEYXRhLmZvckVhY2goKHZhbHVlLCB0eXBlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gKFR3b0ZhY3RvclByb3ZpZGVycyBhcyBhbnkpW3R5cGVdO1xyXG4gICAgICAgICAgICBpZiAocHJvdmlkZXIgIT0gbnVsbCAmJiBwcm92aWRlci5wcmlvcml0eSA+IHByb3ZpZGVyUHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBUd29GYWN0b3JQcm92aWRlclR5cGUuV2ViQXV0aG4gJiYgIXdlYkF1dGhuU3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHByb3ZpZGVyVHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgICAgICBwcm92aWRlclByaW9yaXR5ID0gcHJvdmlkZXIucHJpb3JpdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBtYWtlUHJlbG9naW5LZXkobWFzdGVyUGFzc3dvcmQ6IHN0cmluZywgZW1haWw6IHN0cmluZyk6IFByb21pc2U8U3ltbWV0cmljQ3J5cHRvS2V5PiB7XHJcbiAgICAgICAgZW1haWwgPSBlbWFpbC50cmltKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBsZXQga2RmOiBLZGZUeXBlID0gbnVsbDtcclxuICAgICAgICBsZXQga2RmSXRlcmF0aW9uczogbnVtYmVyID0gbnVsbDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcmVsb2dpblJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RQcmVsb2dpbihuZXcgUHJlbG9naW5SZXF1ZXN0KGVtYWlsKSk7XHJcbiAgICAgICAgICAgIGlmIChwcmVsb2dpblJlc3BvbnNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGtkZiA9IHByZWxvZ2luUmVzcG9uc2Uua2RmO1xyXG4gICAgICAgICAgICAgICAga2RmSXRlcmF0aW9ucyA9IHByZWxvZ2luUmVzcG9uc2Uua2RmSXRlcmF0aW9ucztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUgPT0gbnVsbCB8fCBlLnN0YXR1c0NvZGUgIT09IDQwNCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jcnlwdG9TZXJ2aWNlLm1ha2VLZXkobWFzdGVyUGFzc3dvcmQsIGVtYWlsLCBrZGYsIGtkZkl0ZXJhdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGF1dGhpbmdXaXRoQXBpS2V5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudElkICE9IG51bGwgJiYgdGhpcy5jbGllbnRTZWNyZXQgIT0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhdXRoaW5nV2l0aFNzbygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2RlICE9IG51bGwgJiYgdGhpcy5jb2RlVmVyaWZpZXIgIT0gbnVsbCAmJiB0aGlzLnNzb1JlZGlyZWN0VXJsICE9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXV0aGluZ1dpdGhQYXNzd29yZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbWFpbCAhPSBudWxsICYmIHRoaXMubWFzdGVyUGFzc3dvcmRIYXNoICE9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBsb2dJbkhlbHBlcihlbWFpbDogc3RyaW5nLCBoYXNoZWRQYXNzd29yZDogc3RyaW5nLCBsb2NhbEhhc2hlZFBhc3N3b3JkOiBzdHJpbmcsIGNvZGU6IHN0cmluZyxcclxuICAgICAgICBjb2RlVmVyaWZpZXI6IHN0cmluZywgcmVkaXJlY3RVcmw6IHN0cmluZywgY2xpZW50SWQ6IHN0cmluZywgY2xpZW50U2VjcmV0OiBzdHJpbmcsIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5LFxyXG4gICAgICAgIHR3b0ZhY3RvclByb3ZpZGVyPzogVHdvRmFjdG9yUHJvdmlkZXJUeXBlLCB0d29GYWN0b3JUb2tlbj86IHN0cmluZywgcmVtZW1iZXI/OiBib29sZWFuLCBjYXB0Y2hhVG9rZW4/OiBzdHJpbmcsXHJcbiAgICAgICAgb3JnSWQ/OiBzdHJpbmcpOiBQcm9taXNlPEF1dGhSZXN1bHQ+IHtcclxuICAgICAgICBjb25zdCBzdG9yZWRUd29GYWN0b3JUb2tlbiA9IGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLmdldFR3b0ZhY3RvclRva2VuKGVtYWlsKTtcclxuICAgICAgICBjb25zdCBhcHBJZCA9IGF3YWl0IHRoaXMuYXBwSWRTZXJ2aWNlLmdldEFwcElkKCk7XHJcbiAgICAgICAgY29uc3QgZGV2aWNlUmVxdWVzdCA9IG5ldyBEZXZpY2VSZXF1ZXN0KGFwcElkLCB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlKTtcclxuXHJcbiAgICAgICAgbGV0IGVtYWlsUGFzc3dvcmQ6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IGNvZGVDb2RlVmVyaWZpZXI6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IGNsaWVudElkQ2xpZW50U2VjcmV0OiBbc3RyaW5nLCBzdHJpbmddID0gW251bGwsIG51bGxdO1xyXG5cclxuICAgICAgICBpZiAoZW1haWwgIT0gbnVsbCAmJiBoYXNoZWRQYXNzd29yZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVtYWlsUGFzc3dvcmQgPSBbZW1haWwsIGhhc2hlZFBhc3N3b3JkXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbWFpbFBhc3N3b3JkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvZGUgIT0gbnVsbCAmJiBjb2RlVmVyaWZpZXIgIT0gbnVsbCAmJiByZWRpcmVjdFVybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvZGVDb2RlVmVyaWZpZXIgPSBbY29kZSwgY29kZVZlcmlmaWVyLCByZWRpcmVjdFVybF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29kZUNvZGVWZXJpZmllciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGllbnRJZCAhPSBudWxsICYmIGNsaWVudFNlY3JldCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNsaWVudElkQ2xpZW50U2VjcmV0ID0gW2NsaWVudElkLCBjbGllbnRTZWNyZXRdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNsaWVudElkQ2xpZW50U2VjcmV0ID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXF1ZXN0OiBUb2tlblJlcXVlc3Q7XHJcbiAgICAgICAgaWYgKHR3b0ZhY3RvclRva2VuICE9IG51bGwgJiYgdHdvRmFjdG9yUHJvdmlkZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXF1ZXN0ID0gbmV3IFRva2VuUmVxdWVzdChlbWFpbFBhc3N3b3JkLCBjb2RlQ29kZVZlcmlmaWVyLCBjbGllbnRJZENsaWVudFNlY3JldCwgdHdvRmFjdG9yUHJvdmlkZXIsXHJcbiAgICAgICAgICAgICAgICB0d29GYWN0b3JUb2tlbiwgcmVtZW1iZXIsIGNhcHRjaGFUb2tlbiwgZGV2aWNlUmVxdWVzdCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdG9yZWRUd29GYWN0b3JUb2tlbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgVG9rZW5SZXF1ZXN0KGVtYWlsUGFzc3dvcmQsIGNvZGVDb2RlVmVyaWZpZXIsIGNsaWVudElkQ2xpZW50U2VjcmV0LFxyXG4gICAgICAgICAgICAgICAgVHdvRmFjdG9yUHJvdmlkZXJUeXBlLlJlbWVtYmVyLCBzdG9yZWRUd29GYWN0b3JUb2tlbiwgZmFsc2UsIGNhcHRjaGFUb2tlbiwgZGV2aWNlUmVxdWVzdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVxdWVzdCA9IG5ldyBUb2tlblJlcXVlc3QoZW1haWxQYXNzd29yZCwgY29kZUNvZGVWZXJpZmllciwgY2xpZW50SWRDbGllbnRTZWNyZXQsIG51bGwsXHJcbiAgICAgICAgICAgICAgICBudWxsLCBmYWxzZSwgY2FwdGNoYVRva2VuLCBkZXZpY2VSZXF1ZXN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RJZGVudGl0eVRva2VuKHJlcXVlc3QpO1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFyU3RhdGUoKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXV0aFJlc3VsdCgpO1xyXG4gICAgICAgIHJlc3VsdC5jYXB0Y2hhU2l0ZUtleSA9IChyZXNwb25zZSBhcyBhbnkpLnNpdGVLZXk7XHJcbiAgICAgICAgaWYgKCEhcmVzdWx0LmNhcHRjaGFTaXRlS2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdC50d29GYWN0b3IgPSAhIShyZXNwb25zZSBhcyBhbnkpLnR3b0ZhY3RvclByb3ZpZGVyczI7XHJcblxyXG4gICAgICAgIGlmIChyZXN1bHQudHdvRmFjdG9yKSB7XHJcbiAgICAgICAgICAgIC8vIHR3byBmYWN0b3IgcmVxdWlyZWRcclxuICAgICAgICAgICAgdGhpcy5lbWFpbCA9IGVtYWlsO1xyXG4gICAgICAgICAgICB0aGlzLm1hc3RlclBhc3N3b3JkSGFzaCA9IGhhc2hlZFBhc3N3b3JkO1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsTWFzdGVyUGFzc3dvcmRIYXNoID0gbG9jYWxIYXNoZWRQYXNzd29yZDtcclxuICAgICAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICAgICAgdGhpcy5jb2RlVmVyaWZpZXIgPSBjb2RlVmVyaWZpZXI7XHJcbiAgICAgICAgICAgIHRoaXMuc3NvUmVkaXJlY3RVcmwgPSByZWRpcmVjdFVybDtcclxuICAgICAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xyXG4gICAgICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldDtcclxuICAgICAgICAgICAgdGhpcy5rZXkgPSB0aGlzLnNldENyeXB0b0tleXMgPyBrZXkgOiBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCB0d29GYWN0b3JSZXNwb25zZSA9IHJlc3BvbnNlIGFzIElkZW50aXR5VHdvRmFjdG9yUmVzcG9uc2U7XHJcbiAgICAgICAgICAgIHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YSA9IHR3b0ZhY3RvclJlc3BvbnNlLnR3b0ZhY3RvclByb3ZpZGVyczI7XHJcbiAgICAgICAgICAgIHJlc3VsdC50d29GYWN0b3JQcm92aWRlcnMgPSB0d29GYWN0b3JSZXNwb25zZS50d29GYWN0b3JQcm92aWRlcnMyO1xyXG4gICAgICAgICAgICB0aGlzLmNhcHRjaGFUb2tlbiA9IHR3b0ZhY3RvclJlc3BvbnNlLmNhcHRjaGFUb2tlbjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRva2VuUmVzcG9uc2UgPSByZXNwb25zZSBhcyBJZGVudGl0eVRva2VuUmVzcG9uc2U7XHJcbiAgICAgICAgcmVzdWx0LnJlc2V0TWFzdGVyUGFzc3dvcmQgPSB0b2tlblJlc3BvbnNlLnJlc2V0TWFzdGVyUGFzc3dvcmQ7XHJcbiAgICAgICAgcmVzdWx0LmZvcmNlUGFzc3dvcmRSZXNldCA9IHRva2VuUmVzcG9uc2UuZm9yY2VQYXNzd29yZFJlc2V0O1xyXG4gICAgICAgIGlmICh0b2tlblJlc3BvbnNlLnR3b0ZhY3RvclRva2VuICE9IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50b2tlblNlcnZpY2Uuc2V0VHdvRmFjdG9yVG9rZW4odG9rZW5SZXNwb25zZS50d29GYWN0b3JUb2tlbiwgZW1haWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy50b2tlblNlcnZpY2Uuc2V0VG9rZW5zKHRva2VuUmVzcG9uc2UuYWNjZXNzVG9rZW4sIHRva2VuUmVzcG9uc2UucmVmcmVzaFRva2VuLCBjbGllbnRJZENsaWVudFNlY3JldCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51c2VyU2VydmljZS5zZXRJbmZvcm1hdGlvbih0aGlzLnRva2VuU2VydmljZS5nZXRVc2VySWQoKSwgdGhpcy50b2tlblNlcnZpY2UuZ2V0RW1haWwoKSxcclxuICAgICAgICAgICAgdG9rZW5SZXNwb25zZS5rZGYsIHRva2VuUmVzcG9uc2Uua2RmSXRlcmF0aW9ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0Q3J5cHRvS2V5cykge1xyXG4gICAgICAgICAgICBpZiAoa2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5zZXRLZXkoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobG9jYWxIYXNoZWRQYXNzd29yZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2Uuc2V0S2V5SGFzaChsb2NhbEhhc2hlZFBhc3N3b3JkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2tpcCB0aGlzIHN0ZXAgZHVyaW5nIFNTTyBuZXcgdXNlciBmbG93LiBObyBrZXkgaXMgcmV0dXJuZWQgZnJvbSBzZXJ2ZXIuXHJcbiAgICAgICAgICAgIGlmIChjb2RlID09IG51bGwgfHwgdG9rZW5SZXNwb25zZS5rZXkgIT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0b2tlblJlc3BvbnNlLmtleUNvbm5lY3RvclVybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5rZXlDb25uZWN0b3JTZXJ2aWNlLmdldEFuZFNldEtleSh0b2tlblJlc3BvbnNlLmtleUNvbm5lY3RvclVybCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuUmVzcG9uc2UuYXBpVXNlS2V5Q29ubmVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5Q29ubmVjdG9yVXJsID0gdGhpcy5lbnZpcm9ubWVudFNlcnZpY2UuZ2V0S2V5Q29ubmVjdG9yVXJsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5rZXlDb25uZWN0b3JTZXJ2aWNlLmdldEFuZFNldEtleShrZXlDb25uZWN0b3JVcmwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5zZXRFbmNLZXkodG9rZW5SZXNwb25zZS5rZXkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVzZXIgZG9lc24ndCBoYXZlIGEga2V5IHBhaXIgeWV0IChvbGQgYWNjb3VudCksIGxldCdzIGdlbmVyYXRlIG9uZSBmb3IgdGhlbVxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuUmVzcG9uc2UucHJpdmF0ZUtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5UGFpciA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5tYWtlS2V5UGFpcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucG9zdEFjY291bnRLZXlzKG5ldyBLZXlzUmVxdWVzdChrZXlQYWlyWzBdLCBrZXlQYWlyWzFdLmVuY3J5cHRlZFN0cmluZykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlblJlc3BvbnNlLnByaXZhdGVLZXkgPSBrZXlQYWlyWzFdLmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldEVuY1ByaXZhdGVLZXkodG9rZW5SZXNwb25zZS5wcml2YXRlS2V5KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlblJlc3BvbnNlLmtleUNvbm5lY3RvclVybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXNzd29yZCA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJhbmRvbUJ5dGVzKDY0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBrID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLm1ha2VLZXkoVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KHBhc3N3b3JkKSwgdGhpcy50b2tlblNlcnZpY2UuZ2V0RW1haWwoKSwgdG9rZW5SZXNwb25zZS5rZGYsIHRva2VuUmVzcG9uc2Uua2RmSXRlcmF0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlDb25uZWN0b3JSZXF1ZXN0ID0gbmV3IEtleUNvbm5lY3RvclVzZXJLZXlSZXF1ZXN0KGsuZW5jS2V5QjY0KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5zZXRLZXkoayk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZW5jS2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLm1ha2VFbmNLZXkoayk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2Uuc2V0RW5jS2V5KGVuY0tleVsxXS5lbmNyeXB0ZWRTdHJpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IFtwdWJLZXksIHByaXZLZXldID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLm1ha2VLZXlQYWlyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucG9zdFVzZXJLZXlUb0tleUNvbm5lY3Rvcih0b2tlblJlc3BvbnNlLmtleUNvbm5lY3RvclVybCwga2V5Q29ubmVjdG9yUmVxdWVzdCk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmVhY2gga2V5IGNvbm5lY3RvcicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBuZXcgS2V5c1JlcXVlc3QocHViS2V5LCBwcml2S2V5LmVuY3J5cHRlZFN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXRQYXNzd29yZFJlcXVlc3QgPSBuZXcgU2V0S2V5Q29ubmVjdG9yS2V5UmVxdWVzdChcclxuICAgICAgICAgICAgICAgICAgICBlbmNLZXlbMV0uZW5jcnlwdGVkU3RyaW5nLCB0b2tlblJlc3BvbnNlLmtkZiwgdG9rZW5SZXNwb25zZS5rZGZJdGVyYXRpb25zLCBvcmdJZCwga2V5c1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0U2V0S2V5Q29ubmVjdG9yS2V5KHNldFBhc3N3b3JkUmVxdWVzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UuYmlvbWV0cmljTG9ja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdsb2dnZWRJbicpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjbGVhclN0YXRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMua2V5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVtYWlsID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1hc3RlclBhc3N3b3JkSGFzaCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5sb2NhbE1hc3RlclBhc3N3b3JkSGFzaCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvZGVWZXJpZmllciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zc29SZWRpcmVjdFVybCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFR3b0ZhY3RvclByb3ZpZGVyVHlwZSA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFVzZSBhcyBhIERlY29yYXRvciBvbiBhc3luYyBmdW5jdGlvbnMsIGl0IHdpbGwgcHJldmVudCBtdWx0aXBsZSAnYWN0aXZlJyBjYWxscyBhcyB0aGUgc2FtZSB0aW1lXHJcbiAqXHJcbiAqIElmIGEgcHJvbWlzZSB3YXMgcmV0dXJuZWQgZnJvbSBhIHByZXZpb3VzIGNhbGwgdG8gdGhpcyBmdW5jdGlvbiwgdGhhdCBoYXNuJ3QgeWV0IHJlc29sdmVkIGl0IHdpbGxcclxuICogYmUgcmV0dXJuZWQsIGluc3RlYWQgb2YgY2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gYWdhaW5cclxuICpcclxuICogUmVzdWx0cyBhcmUgbm90IGNhY2hlZCwgb25jZSB0aGUgcHJvbWlzZSBoYXMgcmV0dXJuZWQsIHRoZSBuZXh0IGNhbGwgd2lsbCByZXN1bHQgaW4gYSBmcmVzaCBjYWxsXHJcbiAqXHJcbiAqIFJlYWQgbW9yZSBhdCBodHRwczovL2dpdGh1Yi5jb20vYml0d2FyZGVuL2pzbGliL3B1bGwvN1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxpemUoY2FjaGVLZXk6IChhcmdzOiBhbnlbXSkgPT4gc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nIHwgc3ltYm9sLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbE1ldGhvZDogKCkgPT4gUHJvbWlzZTxhbnk+ID0gZGVzY3JpcHRvci52YWx1ZTtcclxuICAgICAgICBjb25zdCBjYWNoZXMgPSBuZXcgTWFwPGFueSwgTWFwPHN0cmluZywgUHJvbWlzZTxhbnk+Pj4oKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ2V0Q2FjaGUgPSAob2JqOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgbGV0IGNhY2hlID0gY2FjaGVzLmdldChvYmopO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIFByb21pc2U8YW55Pj4oKTtcclxuICAgICAgICAgICAgY2FjaGVzLnNldChvYmosIGNhY2hlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FjaGUgPSBnZXRDYWNoZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3NDYWNoZUtleSA9IGNhY2hlS2V5KGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0gY2FjaGUuZ2V0KGFyZ3NDYWNoZUtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbkZpbmFsbHkgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUuZGVsZXRlKGFyZ3NDYWNoZUtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVzLmRlbGV0ZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKS50aGVuKCh2YWw6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRmluYWxseSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvbkZpbmFsbHkoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQoYXJnc0NhY2hlS2V5LCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgSXRlbVZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9pdGVtVmlldyc7XHJcblxyXG5pbXBvcnQgeyBMaW5rZWRJZFR5cGUgfSBmcm9tICcuLi9lbnVtcy9saW5rZWRJZFR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIExpbmtlZE1ldGFkYXRhIHtcclxuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHByb3BlcnR5S2V5OiBzdHJpbmcsIHByaXZhdGUgcmVhZG9ubHkgX2kxOG5LZXk/OiBzdHJpbmcpIHsgfVxyXG5cclxuICAgIGdldCBpMThuS2V5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pMThuS2V5ID8/IHRoaXMucHJvcGVydHlLZXk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGRlY29yYXRvciB1c2VkIHRvIHNldCBtZXRhZGF0YSB1c2VkIGJ5IExpbmtlZCBjdXN0b20gZmllbGRzLiBBcHBseSBpdCB0byBhIGNsYXNzIHByb3BlcnR5IG9yIGdldHRlciB0byBtYWtlIGl0XHJcbiAqICAgIGF2YWlsYWJsZSBhcyBhIExpbmtlZCBjdXN0b20gZmllbGQgb3B0aW9uLlxyXG4gKiBAcGFyYW0gaWQgLSBBIHVuaXF1ZSB2YWx1ZSB0aGF0IGlzIHNhdmVkIGluIHRoZSBGaWVsZCBtb2RlbC4gSXQgaXMgdXNlZCB0byBsb29rIHVwIHRoZSBkZWNvcmF0ZWQgY2xhc3MgcHJvcGVydHkuXHJcbiAqIEBwYXJhbSBpMThuS2V5IC0gVGhlIGkxOG4ga2V5IHVzZWQgdG8gZGVzY3JpYmUgdGhlIGRlY29yYXRlZCBjbGFzcyBwcm9wZXJ0eSBpbiB0aGUgVUkuIElmIGl0IGlzIG51bGwsIHRoZW4gdGhlIG5hbWVcclxuICogICAgb2YgdGhlIGNsYXNzIHByb3BlcnR5IHdpbGwgYmUgdXNlZCBhcyB0aGUgaTE4biBrZXkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGlua2VkRmllbGRPcHRpb24oaWQ6IExpbmtlZElkVHlwZSwgaTE4bktleT86IHN0cmluZykge1xyXG4gICAgcmV0dXJuIChwcm90b3R5cGU6IEl0ZW1WaWV3LCBwcm9wZXJ0eUtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgaWYgKHByb3RvdHlwZS5saW5rZWRGaWVsZE9wdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwcm90b3R5cGUubGlua2VkRmllbGRPcHRpb25zID0gbmV3IE1hcDxMaW5rZWRJZFR5cGUsIExpbmtlZE1ldGFkYXRhPigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdG90eXBlLmxpbmtlZEZpZWxkT3B0aW9ucy5zZXQoaWQsIG5ldyBMaW5rZWRNZXRhZGF0YShwcm9wZXJ0eUtleSwgaTE4bktleSkpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBFbmNyeXB0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2VuY3J5cHRpb25UeXBlJztcclxuXHJcbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi8uLi9hYnN0cmFjdGlvbnMvY3J5cHRvLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBFbmNTdHJpbmcge1xyXG4gICAgZW5jcnlwdGVkU3RyaW5nPzogc3RyaW5nO1xyXG4gICAgZW5jcnlwdGlvblR5cGU/OiBFbmNyeXB0aW9uVHlwZTtcclxuICAgIGRlY3J5cHRlZFZhbHVlPzogc3RyaW5nO1xyXG4gICAgZGF0YT86IHN0cmluZztcclxuICAgIGl2Pzogc3RyaW5nO1xyXG4gICAgbWFjPzogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVuY3J5cHRlZFN0cmluZ09yVHlwZTogc3RyaW5nIHwgRW5jcnlwdGlvblR5cGUsIGRhdGE/OiBzdHJpbmcsIGl2Pzogc3RyaW5nLCBtYWM/OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIGRhdGEgYW5kIGhlYWRlclxyXG4gICAgICAgICAgICBjb25zdCBlbmNUeXBlID0gZW5jcnlwdGVkU3RyaW5nT3JUeXBlIGFzIEVuY3J5cHRpb25UeXBlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGl2ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5jcnlwdGVkU3RyaW5nID0gZW5jVHlwZSArICcuJyArIGl2ICsgJ3wnICsgZGF0YTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5jcnlwdGVkU3RyaW5nID0gZW5jVHlwZSArICcuJyArIGRhdGE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG1hY1xyXG4gICAgICAgICAgICBpZiAobWFjICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5jcnlwdGVkU3RyaW5nICs9ICgnfCcgKyBtYWMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVuY3J5cHRpb25UeXBlID0gZW5jVHlwZTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgdGhpcy5pdiA9IGl2O1xyXG4gICAgICAgICAgICB0aGlzLm1hYyA9IG1hYztcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZW5jcnlwdGVkU3RyaW5nID0gZW5jcnlwdGVkU3RyaW5nT3JUeXBlIGFzIHN0cmluZztcclxuICAgICAgICBpZiAoIXRoaXMuZW5jcnlwdGVkU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlclBpZWNlcyA9IHRoaXMuZW5jcnlwdGVkU3RyaW5nLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgbGV0IGVuY1BpZWNlczogc3RyaW5nW10gPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAoaGVhZGVyUGllY2VzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmNyeXB0aW9uVHlwZSA9IHBhcnNlSW50KGhlYWRlclBpZWNlc1swXSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBlbmNQaWVjZXMgPSBoZWFkZXJQaWVjZXNbMV0uc3BsaXQoJ3wnKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZW5jUGllY2VzID0gdGhpcy5lbmNyeXB0ZWRTdHJpbmcuc3BsaXQoJ3wnKTtcclxuICAgICAgICAgICAgdGhpcy5lbmNyeXB0aW9uVHlwZSA9IGVuY1BpZWNlcy5sZW5ndGggPT09IDMgPyBFbmNyeXB0aW9uVHlwZS5BZXNDYmMxMjhfSG1hY1NoYTI1Nl9CNjQgOlxyXG4gICAgICAgICAgICAgICAgRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0I2NDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5lbmNyeXB0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLkFlc0NiYzEyOF9IbWFjU2hhMjU2X0I2NDpcclxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMyNTZfSG1hY1NoYTI1Nl9CNjQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoZW5jUGllY2VzLmxlbmd0aCAhPT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLml2ID0gZW5jUGllY2VzWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gZW5jUGllY2VzWzFdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYWMgPSBlbmNQaWVjZXNbMl07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMyNTZfQjY0OlxyXG4gICAgICAgICAgICAgICAgaWYgKGVuY1BpZWNlcy5sZW5ndGggIT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pdiA9IGVuY1BpZWNlc1swXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGVuY1BpZWNlc1sxXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTI1Nl9CNjQ6XHJcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuUnNhMjA0OF9PYWVwU2hhMV9CNjQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoZW5jUGllY2VzLmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBlbmNQaWVjZXNbMF07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVjcnlwdChvcmdJZDogc3RyaW5nLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSA9IG51bGwpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGlmICh0aGlzLmRlY3J5cHRlZFZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdGVkVmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZTtcclxuICAgICAgICBjb25zdCBjb250YWluZXJTZXJ2aWNlID0gKFV0aWxzLmdsb2JhbCBhcyBhbnkpLmJpdHdhcmRlbkNvbnRhaW5lclNlcnZpY2U7XHJcbiAgICAgICAgaWYgKGNvbnRhaW5lclNlcnZpY2UpIHtcclxuICAgICAgICAgICAgY3J5cHRvU2VydmljZSA9IGNvbnRhaW5lclNlcnZpY2UuZ2V0Q3J5cHRvU2VydmljZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZ2xvYmFsIGJpdHdhcmRlbkNvbnRhaW5lclNlcnZpY2Ugbm90IGluaXRpYWxpemVkLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBrZXkgPSBhd2FpdCBjcnlwdG9TZXJ2aWNlLmdldE9yZ0tleShvcmdJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kZWNyeXB0ZWRWYWx1ZSA9IGF3YWl0IGNyeXB0b1NlcnZpY2UuZGVjcnlwdFRvVXRmOCh0aGlzLCBrZXkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWNyeXB0ZWRWYWx1ZSA9ICdbZXJyb3I6IGNhbm5vdCBkZWNyeXB0XSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRlZFZhbHVlO1xyXG4gICAgfVxyXG59XHJcbiIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUFzeW5jQ29udGV4dChyZXEpIHtcblx0Ly8gSGVyZSBQcm9taXNlLnJlc29sdmUoKS50aGVuKCkgaXMgdXNlZCBpbnN0ZWFkIG9mIG5ldyBQcm9taXNlKCkgdG8gcHJldmVudFxuXHQvLyB1bmNhdWdodCBleGNlcHRpb24gcG9wcGluZyB1cCBpbiBkZXZ0b29sc1xuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH0pO1xufVxud2VicGFja0VtcHR5QXN5bmNDb250ZXh0LmtleXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFtdOyB9O1xud2VicGFja0VtcHR5QXN5bmNDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUFzeW5jQ29udGV4dDtcbndlYnBhY2tFbXB0eUFzeW5jQ29udGV4dC5pZCA9IDIxNTsiLCJleHBvcnQgZW51bSBTZWN1cmVOb3RlVHlwZSB7XHJcbiAgICBHZW5lcmljID0gMCxcclxufVxyXG4iLCJpbXBvcnQgeyBTZW5kVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3NlbmRUeXBlJztcclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IFNlbmQgfSBmcm9tICcuLi9kb21haW4vc2VuZCc7XHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4uL2RvbWFpbi9zeW1tZXRyaWNDcnlwdG9LZXknO1xyXG5cclxuaW1wb3J0IHsgU2VuZEZpbGVWaWV3IH0gZnJvbSAnLi9zZW5kRmlsZVZpZXcnO1xyXG5pbXBvcnQgeyBTZW5kVGV4dFZpZXcgfSBmcm9tICcuL3NlbmRUZXh0Vmlldyc7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbmRWaWV3IGltcGxlbWVudHMgVmlldyB7XHJcbiAgICBpZDogc3RyaW5nID0gbnVsbDtcclxuICAgIGFjY2Vzc0lkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgbmFtZTogc3RyaW5nID0gbnVsbDtcclxuICAgIG5vdGVzOiBzdHJpbmcgPSBudWxsO1xyXG4gICAga2V5OiBBcnJheUJ1ZmZlcjtcclxuICAgIGNyeXB0b0tleTogU3ltbWV0cmljQ3J5cHRvS2V5O1xyXG4gICAgdHlwZTogU2VuZFR5cGUgPSBudWxsO1xyXG4gICAgdGV4dCA9IG5ldyBTZW5kVGV4dFZpZXcoKTtcclxuICAgIGZpbGUgPSBuZXcgU2VuZEZpbGVWaWV3KCk7XHJcbiAgICBtYXhBY2Nlc3NDb3VudD86IG51bWJlciA9IG51bGw7XHJcbiAgICBhY2Nlc3NDb3VudDogbnVtYmVyID0gMDtcclxuICAgIHJldmlzaW9uRGF0ZTogRGF0ZSA9IG51bGw7XHJcbiAgICBkZWxldGlvbkRhdGU6IERhdGUgPSBudWxsO1xyXG4gICAgZXhwaXJhdGlvbkRhdGU6IERhdGUgPSBudWxsO1xyXG4gICAgcGFzc3dvcmQ6IHN0cmluZyA9IG51bGw7XHJcbiAgICBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgaGlkZUVtYWlsOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3Iocz86IFNlbmQpIHtcclxuICAgICAgICBpZiAoIXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pZCA9IHMuaWQ7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NJZCA9IHMuYWNjZXNzSWQ7XHJcbiAgICAgICAgdGhpcy50eXBlID0gcy50eXBlO1xyXG4gICAgICAgIHRoaXMubWF4QWNjZXNzQ291bnQgPSBzLm1heEFjY2Vzc0NvdW50O1xyXG4gICAgICAgIHRoaXMuYWNjZXNzQ291bnQgPSBzLmFjY2Vzc0NvdW50O1xyXG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gcy5yZXZpc2lvbkRhdGU7XHJcbiAgICAgICAgdGhpcy5kZWxldGlvbkRhdGUgPSBzLmRlbGV0aW9uRGF0ZTtcclxuICAgICAgICB0aGlzLmV4cGlyYXRpb25EYXRlID0gcy5leHBpcmF0aW9uRGF0ZTtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gcy5kaXNhYmxlZDtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkID0gcy5wYXNzd29yZDtcclxuICAgICAgICB0aGlzLmhpZGVFbWFpbCA9IHMuaGlkZUVtYWlsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1cmxCNjRLZXkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gVXRpbHMuZnJvbUJ1ZmZlclRvVXJsQjY0KHRoaXMua2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWF4QWNjZXNzQ291bnRSZWFjaGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLm1heEFjY2Vzc0NvdW50ID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3NDb3VudCA+PSB0aGlzLm1heEFjY2Vzc0NvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBleHBpcmVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLmV4cGlyYXRpb25EYXRlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5leHBpcmF0aW9uRGF0ZSA8PSBuZXcgRGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwZW5kaW5nRGVsZXRlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlbGV0aW9uRGF0ZSA8PSBuZXcgRGF0ZSgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IE1lc3NhZ2luZ1NlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL21lc3NhZ2luZy5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyb3dzZXJNZXNzYWdpbmdTZXJ2aWNlIGltcGxlbWVudHMgTWVzc2FnaW5nU2VydmljZSB7XHJcbiAgICBzZW5kKHN1YnNjcmliZXI6IHN0cmluZywgYXJnOiBhbnkgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBPYmplY3QuYXNzaWduKHt9LCB7IGNvbW1hbmQ6IHN1YnNjcmliZXIgfSwgYXJnKTtcclxuICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZShtZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTdGF0ZVNlcnZpY2UgYXMgU3RhdGVTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RhdGUuc2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhdGVTZXJ2aWNlIGltcGxlbWVudHMgU3RhdGVTZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgcHJpdmF0ZSBzdGF0ZTogYW55ID0ge307XHJcblxyXG4gICAgZ2V0PFQ+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuc3RhdGVba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZShrZXk6IHN0cmluZywgb2JqOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRoaXMuc3RhdGVba2V5XSA9IG9iajtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBkZWxldGUgdGhpcy5zdGF0ZVtrZXldO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdXJnZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgbHVuciBmcm9tICdsdW5yJztcclxuXHJcbmltcG9ydCB7IENpcGhlclZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9jaXBoZXJWaWV3JztcclxuXHJcbmltcG9ydCB7IENpcGhlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY2lwaGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2xvZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VhcmNoU2VydmljZSBhcyBTZWFyY2hTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc2VhcmNoLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJy4uL2VudW1zL2NpcGhlclR5cGUnO1xyXG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLi9lbnVtcy9maWVsZFR5cGUnO1xyXG5pbXBvcnQgeyBVcmlNYXRjaFR5cGUgfSBmcm9tICcuLi9lbnVtcy91cmlNYXRjaFR5cGUnO1xyXG5pbXBvcnQgeyBTZW5kVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L3NlbmRWaWV3JztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWFyY2hTZXJ2aWNlIGltcGxlbWVudHMgU2VhcmNoU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIGluZGV4ZWRFbnRpdHlJZD86IHN0cmluZyA9IG51bGw7XHJcbiAgICBwcml2YXRlIGluZGV4aW5nID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGluZGV4OiBsdW5yLkluZGV4ID0gbnVsbDtcclxuICAgIHByaXZhdGUgc2VhcmNoYWJsZU1pbkxlbmd0aCA9IDI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjaXBoZXJTZXJ2aWNlOiBDaXBoZXJTZXJ2aWNlLCBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UpIHtcclxuICAgICAgICBpZiAoWyd6aC1DTicsICd6aC1UVyddLmluZGV4T2YoaTE4blNlcnZpY2UubG9jYWxlKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hhYmxlTWluTGVuZ3RoID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJJbmRleCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmluZGV4ZWRFbnRpdHlJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTZWFyY2hhYmxlKHF1ZXJ5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBub3RTZWFyY2hhYmxlID0gcXVlcnkgPT0gbnVsbCB8fCAodGhpcy5pbmRleCA9PSBudWxsICYmIHF1ZXJ5Lmxlbmd0aCA8IHRoaXMuc2VhcmNoYWJsZU1pbkxlbmd0aCkgfHxcclxuICAgICAgICAgICAgKHRoaXMuaW5kZXggIT0gbnVsbCAmJiBxdWVyeS5sZW5ndGggPCB0aGlzLnNlYXJjaGFibGVNaW5MZW5ndGggJiYgcXVlcnkuaW5kZXhPZignPicpICE9PSAwKTtcclxuICAgICAgICByZXR1cm4gIW5vdFNlYXJjaGFibGU7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaW5kZXhDaXBoZXJzKGluZGV4ZWRFbnRpdHlJZD86IHN0cmluZywgY2lwaGVycz86IENpcGhlclZpZXdbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4aW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubG9nU2VydmljZS50aW1lKCdzZWFyY2ggaW5kZXhpbmcnKTtcclxuICAgICAgICB0aGlzLmluZGV4aW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmluZGV4ZWRFbnRpdHlJZCA9IGluZGV4ZWRFbnRpdHlJZDtcclxuICAgICAgICB0aGlzLmluZGV4ID0gbnVsbDtcclxuICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IGx1bnIuQnVpbGRlcigpO1xyXG4gICAgICAgIGJ1aWxkZXIucmVmKCdpZCcpO1xyXG4gICAgICAgIGJ1aWxkZXIuZmllbGQoJ3Nob3J0aWQnLCB7IGJvb3N0OiAxMDAsIGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IGMuaWQuc3Vic3RyKDAsIDgpIH0pO1xyXG4gICAgICAgIGJ1aWxkZXIuZmllbGQoJ25hbWUnLCB7IGJvb3N0OiAxMCB9KTtcclxuICAgICAgICBidWlsZGVyLmZpZWxkKCdzdWJ0aXRsZScsIHtcclxuICAgICAgICAgICAgYm9vc3Q6IDUsXHJcbiAgICAgICAgICAgIGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjLnN1YlRpdGxlICE9IG51bGwgJiYgYy50eXBlID09PSBDaXBoZXJUeXBlLkNhcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5zdWJUaXRsZS5yZXBsYWNlKC9cXCovZywgJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGMuc3ViVGl0bGU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYnVpbGRlci5maWVsZCgnbm90ZXMnKTtcclxuICAgICAgICBidWlsZGVyLmZpZWxkKCdsb2dpbi51c2VybmFtZScsIHtcclxuICAgICAgICAgICAgZXh0cmFjdG9yOiAoYzogQ2lwaGVyVmlldykgPT4gYy50eXBlID09PSBDaXBoZXJUeXBlLkxvZ2luICYmIGMubG9naW4gIT0gbnVsbCA/IGMubG9naW4udXNlcm5hbWUgOiBudWxsLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJ1aWxkZXIuZmllbGQoJ2xvZ2luLnVyaXMnLCB7IGJvb3N0OiAyLCBleHRyYWN0b3I6IChjOiBDaXBoZXJWaWV3KSA9PiB0aGlzLnVyaUV4dHJhY3RvcihjKSB9KTtcclxuICAgICAgICBidWlsZGVyLmZpZWxkKCdmaWVsZHMnLCB7IGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IHRoaXMuZmllbGRFeHRyYWN0b3IoYywgZmFsc2UpIH0pO1xyXG4gICAgICAgIGJ1aWxkZXIuZmllbGQoJ2ZpZWxkc19qb2luZWQnLCB7IGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IHRoaXMuZmllbGRFeHRyYWN0b3IoYywgdHJ1ZSkgfSk7XHJcbiAgICAgICAgYnVpbGRlci5maWVsZCgnYXR0YWNobWVudHMnLCB7IGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IHRoaXMuYXR0YWNobWVudEV4dHJhY3RvcihjLCBmYWxzZSkgfSk7XHJcbiAgICAgICAgYnVpbGRlci5maWVsZCgnYXR0YWNobWVudHNfam9pbmVkJyxcclxuICAgICAgICAgICAgeyBleHRyYWN0b3I6IChjOiBDaXBoZXJWaWV3KSA9PiB0aGlzLmF0dGFjaG1lbnRFeHRyYWN0b3IoYywgdHJ1ZSkgfSk7XHJcbiAgICAgICAgYnVpbGRlci5maWVsZCgnb3JnYW5pemF0aW9uaWQnLCB7IGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IGMub3JnYW5pemF0aW9uSWQgfSk7XHJcbiAgICAgICAgY2lwaGVycyA9IGNpcGhlcnMgfHwgYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmdldEFsbERlY3J5cHRlZCgpO1xyXG4gICAgICAgIGNpcGhlcnMuZm9yRWFjaChjID0+IGJ1aWxkZXIuYWRkKGMpKTtcclxuICAgICAgICB0aGlzLmluZGV4ID0gYnVpbGRlci5idWlsZCgpO1xyXG5cclxuICAgICAgICB0aGlzLmluZGV4aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMubG9nU2VydmljZS50aW1lRW5kKCdzZWFyY2ggaW5kZXhpbmcnKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZWFyY2hDaXBoZXJzKHF1ZXJ5OiBzdHJpbmcsXHJcbiAgICAgICAgZmlsdGVyOiAoKChjaXBoZXI6IENpcGhlclZpZXcpID0+IGJvb2xlYW4pIHwgKCgoY2lwaGVyOiBDaXBoZXJWaWV3KSA9PiBib29sZWFuKVtdKSkgPSBudWxsLFxyXG4gICAgICAgIGNpcGhlcnM6IENpcGhlclZpZXdbXSA9IG51bGwpOlxyXG4gICAgICAgIFByb21pc2U8Q2lwaGVyVmlld1tdPiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0czogQ2lwaGVyVmlld1tdID0gW107XHJcbiAgICAgICAgaWYgKHF1ZXJ5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnkgPSBxdWVyeS50cmltKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHF1ZXJ5ID09PSAnJykge1xyXG4gICAgICAgICAgICBxdWVyeSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNpcGhlcnMgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0QWxsRGVjcnlwdGVkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmlsdGVyICE9IG51bGwgJiYgQXJyYXkuaXNBcnJheShmaWx0ZXIpICYmIGZpbHRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNpcGhlcnMgPSBjaXBoZXJzLmZpbHRlcihjID0+IGZpbHRlci5ldmVyeShmID0+IGYgPT0gbnVsbCB8fCBmKGMpKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjaXBoZXJzID0gY2lwaGVycy5maWx0ZXIoZmlsdGVyIGFzIChjaXBoZXI6IENpcGhlclZpZXcpID0+IGJvb2xlYW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzU2VhcmNoYWJsZShxdWVyeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pbmRleGluZykge1xyXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgMjUwKSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgNTAwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRJbmRleEZvclNlYXJjaCgpO1xyXG4gICAgICAgIGlmIChpbmRleCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIEZhbGwgYmFjayB0byBiYXNpYyBzZWFyY2ggaWYgaW5kZXggaXMgbm90IGF2YWlsYWJsZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hDaXBoZXJzQmFzaWMoY2lwaGVycywgcXVlcnkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY2lwaGVyc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBDaXBoZXJWaWV3PigpO1xyXG4gICAgICAgIGNpcGhlcnMuZm9yRWFjaChjID0+IGNpcGhlcnNNYXAuc2V0KGMuaWQsIGMpKTtcclxuXHJcbiAgICAgICAgbGV0IHNlYXJjaFJlc3VsdHM6IGx1bnIuSW5kZXguUmVzdWx0W10gPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGlzUXVlcnlTdHJpbmcgPSBxdWVyeSAhPSBudWxsICYmIHF1ZXJ5Lmxlbmd0aCA+IDEgJiYgcXVlcnkuaW5kZXhPZignPicpID09PSAwO1xyXG4gICAgICAgIGlmIChpc1F1ZXJ5U3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHRzID0gaW5kZXguc2VhcmNoKHF1ZXJ5LnN1YnN0cigxKS50cmltKCkpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICAgICAgY29uc3Qgc29XaWxkID0gbHVuci5RdWVyeS53aWxkY2FyZC5MRUFESU5HIHwgbHVuci5RdWVyeS53aWxkY2FyZC5UUkFJTElORztcclxuICAgICAgICAgICAgc2VhcmNoUmVzdWx0cyA9IGluZGV4LnF1ZXJ5KHEgPT4ge1xyXG4gICAgICAgICAgICAgICAgbHVuci50b2tlbml6ZXIocXVlcnkpLmZvckVhY2godG9rZW4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0b2tlbi50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHEudGVybSh0LCB7IGZpZWxkczogWyduYW1lJ10sIHdpbGRjYXJkOiBzb1dpbGQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcS50ZXJtKHQsIHsgZmllbGRzOiBbJ3N1YnRpdGxlJ10sIHdpbGRjYXJkOiBzb1dpbGQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcS50ZXJtKHQsIHsgZmllbGRzOiBbJ2xvZ2luLnVyaXMnXSwgd2lsZGNhcmQ6IHNvV2lsZCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBxLnRlcm0odCwge30pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNlYXJjaFJlc3VsdHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZWFyY2hSZXN1bHRzLmZvckVhY2gociA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2lwaGVyc01hcC5oYXMoci5yZWYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGNpcGhlcnNNYXAuZ2V0KHIucmVmKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH1cclxuXHJcbiAgICBzZWFyY2hDaXBoZXJzQmFzaWMoY2lwaGVyczogQ2lwaGVyVmlld1tdLCBxdWVyeTogc3RyaW5nLCBkZWxldGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHJldHVybiBjaXBoZXJzLmZpbHRlcihjID0+IHtcclxuICAgICAgICAgICAgaWYgKGRlbGV0ZWQgIT09IGMuaXNEZWxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGMubmFtZSAhPSBudWxsICYmIGMubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YocXVlcnkpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChxdWVyeS5sZW5ndGggPj0gOCAmJiBjLmlkLnN0YXJ0c1dpdGgocXVlcnkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYy5zdWJUaXRsZSAhPSBudWxsICYmIGMuc3ViVGl0bGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5KSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYy5sb2dpbiAmJiBjLmxvZ2luLnVyaSAhPSBudWxsICYmIGMubG9naW4udXJpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNlYXJjaFNlbmRzKHNlbmRzOiBTZW5kVmlld1tdLCBxdWVyeTogc3RyaW5nKSB7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS50cmltKCkudG9Mb2NhbGVMb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNlbmRzLmZpbHRlcihzID0+IHtcclxuICAgICAgICAgICAgaWYgKHMubmFtZSAhPSBudWxsICYmIHMubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YocXVlcnkpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChxdWVyeS5sZW5ndGggPj0gOCAmJiAocy5pZC5zdGFydHNXaXRoKHF1ZXJ5KSB8fCBzLmFjY2Vzc0lkLnRvTG9jYWxlTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChxdWVyeSkgfHwgKHMuZmlsZT8uaWQgIT0gbnVsbCAmJiBzLmZpbGUuaWQuc3RhcnRzV2l0aChxdWVyeSkpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHMubm90ZXMgIT0gbnVsbCAmJiBzLm5vdGVzLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHMudGV4dD8udGV4dCAhPSBudWxsICYmIHMudGV4dC50ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHMuZmlsZT8uZmlsZU5hbWUgIT0gbnVsbCAmJiBzLmZpbGUuZmlsZU5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5KSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEluZGV4Rm9yU2VhcmNoKCk6IGx1bnIuSW5kZXgge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmllbGRFeHRyYWN0b3IoYzogQ2lwaGVyVmlldywgam9pbmVkOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKCFjLmhhc0ZpZWxkcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGZpZWxkczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBjLmZpZWxkcy5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZi5uYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKGYubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGYudHlwZSA9PT0gRmllbGRUeXBlLlRleHQgJiYgZi52YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChmLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZpZWxkcyA9IGZpZWxkcy5maWx0ZXIoZiA9PiBmLnRyaW0oKSAhPT0gJycpO1xyXG4gICAgICAgIGlmIChmaWVsZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gam9pbmVkID8gZmllbGRzLmpvaW4oJyAnKSA6IGZpZWxkcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGF0dGFjaG1lbnRFeHRyYWN0b3IoYzogQ2lwaGVyVmlldywgam9pbmVkOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKCFjLmhhc0F0dGFjaG1lbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYXR0YWNobWVudHM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgYy5hdHRhY2htZW50cy5mb3JFYWNoKGEgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYSAhPSBudWxsICYmIGEuZmlsZU5hbWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpvaW5lZCAmJiBhLmZpbGVOYW1lLmluZGV4T2YoJy4nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudHMucHVzaChhLmZpbGVOYW1lLnN1YnN0cigwLCBhLmZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudHMucHVzaChhLmZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF0dGFjaG1lbnRzID0gYXR0YWNobWVudHMuZmlsdGVyKGYgPT4gZi50cmltKCkgIT09ICcnKTtcclxuICAgICAgICBpZiAoYXR0YWNobWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gam9pbmVkID8gYXR0YWNobWVudHMuam9pbignICcpIDogYXR0YWNobWVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cmlFeHRyYWN0b3IoYzogQ2lwaGVyVmlldykge1xyXG4gICAgICAgIGlmIChjLnR5cGUgIT09IENpcGhlclR5cGUuTG9naW4gfHwgYy5sb2dpbiA9PSBudWxsIHx8ICFjLmxvZ2luLmhhc1VyaXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHVyaXM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgYy5sb2dpbi51cmlzLmZvckVhY2godSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1LnVyaSA9PSBudWxsIHx8IHUudXJpID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1Lmhvc3RuYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHVyaXMucHVzaCh1Lmhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdXJpID0gdS51cmk7XHJcbiAgICAgICAgICAgIGlmICh1Lm1hdGNoICE9PSBVcmlNYXRjaFR5cGUuUmVndWxhckV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3RvY29sSW5kZXggPSB1cmkuaW5kZXhPZignOi8vJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvdG9jb2xJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJpID0gdXJpLnN1YnN0cihwcm90b2NvbEluZGV4ICsgMyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBxdWVyeUluZGV4ID0gdXJpLnNlYXJjaCgvXFw/fCZ8Iy8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5SW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVyaSA9IHVyaS5zdWJzdHJpbmcoMCwgcXVlcnlJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdXJpcy5wdXNoKHVyaSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHVyaXMubGVuZ3RoID4gMCA/IHVyaXMgOiBudWxsO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xyXG5cclxuaW1wb3J0IHsgUGFzc3dvcmQgfSBmcm9tICcuLi9kb21haW4vcGFzc3dvcmQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkSGlzdG9yeVZpZXcgaW1wbGVtZW50cyBWaWV3IHtcclxuICAgIHBhc3N3b3JkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgbGFzdFVzZWREYXRlOiBEYXRlID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwaD86IFBhc3N3b3JkKSB7XHJcbiAgICAgICAgaWYgKCFwaCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxhc3RVc2VkRGF0ZSA9IHBoLmxhc3RVc2VkRGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBCcm93c2VyQXBpIH0gZnJvbSAnLi4vLi4vYnJvd3Nlci9icm93c2VyQXBpJztcclxuXHJcbmltcG9ydCB7IFBsYXRmb3JtVXRpbHNTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUG9wdXBVdGlsc1NlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UpIHsgfVxyXG5cclxuICAgIGluU2lkZWJhcih3aW46IFdpbmRvdyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB3aW4ubG9jYXRpb24uc2VhcmNoICE9PSAnJyAmJiB3aW4ubG9jYXRpb24uc2VhcmNoLmluZGV4T2YoJ3VpbG9jYXRpb249c2lkZWJhcicpID4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgaW5UYWIod2luOiBXaW5kb3cpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gd2luLmxvY2F0aW9uLnNlYXJjaCAhPT0gJycgJiYgd2luLmxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKCd1aWxvY2F0aW9uPXRhYicpID4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgaW5Qb3BvdXQod2luOiBXaW5kb3cpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gd2luLmxvY2F0aW9uLnNlYXJjaCAhPT0gJycgJiYgd2luLmxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKCd1aWxvY2F0aW9uPXBvcG91dCcpID4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgaW5Qb3B1cCh3aW46IFdpbmRvdyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB3aW4ubG9jYXRpb24uc2VhcmNoID09PSAnJyB8fCB3aW4ubG9jYXRpb24uc2VhcmNoLmluZGV4T2YoJ3VpbG9jYXRpb249JykgPT09IC0xIHx8XHJcbiAgICAgICAgICAgIHdpbi5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZigndWlsb2NhdGlvbj1wb3B1cCcpID4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udGVudFNjcm9sbFkod2luOiBXaW5kb3csIHNjcm9sbGluZ0NvbnRhaW5lcjogc3RyaW5nID0gJ2NvbnRlbnQnKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gd2luLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNjcm9sbGluZ0NvbnRhaW5lcilbMF07XHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQuc2Nyb2xsVG9wO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbnRlbnRTY3JvbGxZKHdpbjogV2luZG93LCBzY3JvbGxZOiBudW1iZXIsIHNjcm9sbGluZ0NvbnRhaW5lcjogc3RyaW5nID0gJ2NvbnRlbnQnKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHNjcm9sbFkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gd2luLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNjcm9sbGluZ0NvbnRhaW5lcilbMF07XHJcbiAgICAgICAgICAgIGNvbnRlbnQuc2Nyb2xsVG9wID0gc2Nyb2xsWTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcG9wT3V0KHdpbjogV2luZG93LCBocmVmOiBzdHJpbmcgPSBudWxsKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmIChocmVmID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhyZWYgPSB3aW4ubG9jYXRpb24uaHJlZjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgodHlwZW9mIGNocm9tZSAhPT0gJ3VuZGVmaW5lZCcpICYmIGNocm9tZS53aW5kb3dzICYmIGNocm9tZS53aW5kb3dzLmNyZWF0ZSkge1xyXG4gICAgICAgICAgICBpZiAoaHJlZi5pbmRleE9mKCc/dWlsb2NhdGlvbj0nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBocmVmID0gaHJlZi5yZXBsYWNlKCd1aWxvY2F0aW9uPXBvcHVwJywgJ3VpbG9jYXRpb249cG9wb3V0JylcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgndWlsb2NhdGlvbj10YWInLCAndWlsb2NhdGlvbj1wb3BvdXQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd1aWxvY2F0aW9uPXNpZGViYXInLCAndWlsb2NhdGlvbj1wb3BvdXQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhyZWZQYXJ0cyA9IGhyZWYuc3BsaXQoJyMnKTtcclxuICAgICAgICAgICAgICAgIGhyZWYgPSBocmVmUGFydHNbMF0gKyAnP3VpbG9jYXRpb249cG9wb3V0JyArIChocmVmUGFydHMubGVuZ3RoID4gMCA/ICcjJyArIGhyZWZQYXJ0c1sxXSA6ICcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgYm9keVJlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGNocm9tZS53aW5kb3dzLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IGhyZWYsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncG9wdXAnLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IE1hdGgucm91bmQoYm9keVJlY3Qud2lkdGggPyBib2R5UmVjdC53aWR0aCArIDYwIDogMzc1KSxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChib2R5UmVjdC5oZWlnaHQgfHwgNjAwKSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pblBvcHVwKHdpbikpIHtcclxuICAgICAgICAgICAgICAgIEJyb3dzZXJBcGkuY2xvc2VQb3B1cCh3aW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICgodHlwZW9mIGNocm9tZSAhPT0gJ3VuZGVmaW5lZCcpICYmIGNocm9tZS50YWJzICYmIGNocm9tZS50YWJzLmNyZWF0ZSkge1xyXG4gICAgICAgICAgICBocmVmID0gaHJlZi5yZXBsYWNlKCd1aWxvY2F0aW9uPXBvcHVwJywgJ3VpbG9jYXRpb249dGFiJylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd1aWxvY2F0aW9uPXBvcG91dCcsICd1aWxvY2F0aW9uPXRhYicpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgndWlsb2NhdGlvbj1zaWRlYmFyJywgJ3VpbG9jYXRpb249dGFiJyk7XHJcbiAgICAgICAgICAgIGNocm9tZS50YWJzLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IGhyZWYsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFzdGVyUGFzc3dvcmRQb2xpY3lPcHRpb25zIGV4dGVuZHMgRG9tYWluIHtcclxuICAgIG1pbkNvbXBsZXhpdHk6IG51bWJlciA9IDA7XHJcbiAgICBtaW5MZW5ndGg6IG51bWJlciA9IDA7XHJcbiAgICByZXF1aXJlVXBwZXI6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHJlcXVpcmVMb3dlcjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcmVxdWlyZU51bWJlcnM6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHJlcXVpcmVTcGVjaWFsOiBib29sZWFuID0gZmFsc2U7XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJkQXBpIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGNhcmRob2xkZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBicmFuZDogc3RyaW5nO1xyXG4gICAgbnVtYmVyOiBzdHJpbmc7XHJcbiAgICBleHBNb250aDogc3RyaW5nO1xyXG4gICAgZXhwWWVhcjogc3RyaW5nO1xyXG4gICAgY29kZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcclxuICAgICAgICBzdXBlcihkYXRhKTtcclxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYXJkaG9sZGVyTmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2FyZGhvbGRlck5hbWUnKTtcclxuICAgICAgICB0aGlzLmJyYW5kID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCcmFuZCcpO1xyXG4gICAgICAgIHRoaXMubnVtYmVyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOdW1iZXInKTtcclxuICAgICAgICB0aGlzLmV4cE1vbnRoID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFeHBNb250aCcpO1xyXG4gICAgICAgIHRoaXMuZXhwWWVhciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXhwWWVhcicpO1xyXG4gICAgICAgIHRoaXMuY29kZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ29kZScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9maWVsZFR5cGUnO1xyXG5pbXBvcnQgeyBMaW5rZWRJZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9saW5rZWRJZFR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpZWxkQXBpIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBGaWVsZFR5cGU7XHJcbiAgICBsaW5rZWRJZDogTGlua2VkSWRUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcclxuICAgICAgICBzdXBlcihkYXRhKTtcclxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVmFsdWUnKTtcclxuICAgICAgICB0aGlzLmxpbmtlZElkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdsaW5rZWRJZCcpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgSWRlbnRpdHlBcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xyXG4gICAgbWlkZGxlTmFtZTogc3RyaW5nO1xyXG4gICAgbGFzdE5hbWU6IHN0cmluZztcclxuICAgIGFkZHJlc3MxOiBzdHJpbmc7XHJcbiAgICBhZGRyZXNzMjogc3RyaW5nO1xyXG4gICAgYWRkcmVzczM6IHN0cmluZztcclxuICAgIGNpdHk6IHN0cmluZztcclxuICAgIHN0YXRlOiBzdHJpbmc7XHJcbiAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XHJcbiAgICBjb3VudHJ5OiBzdHJpbmc7XHJcbiAgICBjb21wYW55OiBzdHJpbmc7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgcGhvbmU6IHN0cmluZztcclxuICAgIHNzbjogc3RyaW5nO1xyXG4gICAgdXNlcm5hbWU6IHN0cmluZztcclxuICAgIHBhc3Nwb3J0TnVtYmVyOiBzdHJpbmc7XHJcbiAgICBsaWNlbnNlTnVtYmVyOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YTogYW55ID0gbnVsbCkge1xyXG4gICAgICAgIHN1cGVyKGRhdGEpO1xyXG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUaXRsZScpO1xyXG4gICAgICAgIHRoaXMuZmlyc3ROYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGaXJzdE5hbWUnKTtcclxuICAgICAgICB0aGlzLm1pZGRsZU5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01pZGRsZU5hbWUnKTtcclxuICAgICAgICB0aGlzLmxhc3ROYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdMYXN0TmFtZScpO1xyXG4gICAgICAgIHRoaXMuYWRkcmVzczEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FkZHJlc3MxJyk7XHJcbiAgICAgICAgdGhpcy5hZGRyZXNzMiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQWRkcmVzczInKTtcclxuICAgICAgICB0aGlzLmFkZHJlc3MzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBZGRyZXNzMycpO1xyXG4gICAgICAgIHRoaXMuY2l0eSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2l0eScpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0YXRlJyk7XHJcbiAgICAgICAgdGhpcy5wb3N0YWxDb2RlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQb3N0YWxDb2RlJyk7XHJcbiAgICAgICAgdGhpcy5jb3VudHJ5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb3VudHJ5Jyk7XHJcbiAgICAgICAgdGhpcy5jb21wYW55ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb21wYW55Jyk7XHJcbiAgICAgICAgdGhpcy5lbWFpbCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW1haWwnKTtcclxuICAgICAgICB0aGlzLnBob25lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQaG9uZScpO1xyXG4gICAgICAgIHRoaXMuc3NuID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTU04nKTtcclxuICAgICAgICB0aGlzLnVzZXJuYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VybmFtZScpO1xyXG4gICAgICAgIHRoaXMucGFzc3BvcnROdW1iZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Bhc3Nwb3J0TnVtYmVyJyk7XHJcbiAgICAgICAgdGhpcy5saWNlbnNlTnVtYmVyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdMaWNlbnNlTnVtYmVyJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvYmFzZVJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IExvZ2luVXJpQXBpIH0gZnJvbSAnLi9sb2dpblVyaUFwaSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9naW5BcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdXJpczogTG9naW5VcmlBcGlbXTtcclxuICAgIHVzZXJuYW1lOiBzdHJpbmc7XHJcbiAgICBwYXNzd29yZDogc3RyaW5nO1xyXG4gICAgcGFzc3dvcmRSZXZpc2lvbkRhdGU6IHN0cmluZztcclxuICAgIHRvdHA6IHN0cmluZztcclxuICAgIGF1dG9maWxsT25QYWdlTG9hZDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YSk7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJuYW1lJyk7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGFzc3dvcmQnKTtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkUmV2aXNpb25EYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQYXNzd29yZFJldmlzaW9uRGF0ZScpO1xyXG4gICAgICAgIHRoaXMudG90cCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVG90cCcpO1xyXG4gICAgICAgIHRoaXMuYXV0b2ZpbGxPblBhZ2VMb2FkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBdXRvZmlsbE9uUGFnZUxvYWQnKTtcclxuXHJcbiAgICAgICAgY29uc3QgdXJpcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXJpcycpO1xyXG4gICAgICAgIGlmICh1cmlzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy51cmlzID0gdXJpcy5tYXAoKHU6IGFueSkgPT4gbmV3IExvZ2luVXJpQXBpKHUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvYmFzZVJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IFVyaU1hdGNoVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3VyaU1hdGNoVHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9naW5VcmlBcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdXJpOiBzdHJpbmc7XHJcbiAgICBtYXRjaDogVXJpTWF0Y2hUeXBlID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YSk7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXJpID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVcmknKTtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF0Y2gnKTtcclxuICAgICAgICB0aGlzLm1hdGNoID0gbWF0Y2ggIT0gbnVsbCA/IG1hdGNoIDogbnVsbDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9iYXNlUmVzcG9uc2UnO1xyXG5cclxuaW1wb3J0IHsgU2VjdXJlTm90ZVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zZWN1cmVOb3RlVHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VjdXJlTm90ZUFwaSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICB0eXBlOiBTZWN1cmVOb3RlVHlwZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YSk7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF0dGFjaG1lbnRSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2F0dGFjaG1lbnRSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXR0YWNobWVudERhdGEge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHVybDogc3RyaW5nO1xyXG4gICAgZmlsZU5hbWU6IHN0cmluZztcclxuICAgIGtleTogc3RyaW5nO1xyXG4gICAgc2l6ZTogc3RyaW5nO1xyXG4gICAgc2l6ZU5hbWU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IEF0dGFjaG1lbnRSZXNwb25zZSkge1xyXG4gICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pZCA9IHJlc3BvbnNlLmlkO1xyXG4gICAgICAgIHRoaXMudXJsID0gcmVzcG9uc2UudXJsO1xyXG4gICAgICAgIHRoaXMuZmlsZU5hbWUgPSByZXNwb25zZS5maWxlTmFtZTtcclxuICAgICAgICB0aGlzLmtleSA9IHJlc3BvbnNlLmtleTtcclxuICAgICAgICB0aGlzLnNpemUgPSByZXNwb25zZS5zaXplO1xyXG4gICAgICAgIHRoaXMuc2l6ZU5hbWUgPSByZXNwb25zZS5zaXplTmFtZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDYXJkQXBpIH0gZnJvbSAnLi4vYXBpL2NhcmRBcGknO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhcmREYXRhIHtcclxuICAgIGNhcmRob2xkZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBicmFuZDogc3RyaW5nO1xyXG4gICAgbnVtYmVyOiBzdHJpbmc7XHJcbiAgICBleHBNb250aDogc3RyaW5nO1xyXG4gICAgZXhwWWVhcjogc3RyaW5nO1xyXG4gICAgY29kZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBDYXJkQXBpKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNhcmRob2xkZXJOYW1lID0gZGF0YS5jYXJkaG9sZGVyTmFtZTtcclxuICAgICAgICB0aGlzLmJyYW5kID0gZGF0YS5icmFuZDtcclxuICAgICAgICB0aGlzLm51bWJlciA9IGRhdGEubnVtYmVyO1xyXG4gICAgICAgIHRoaXMuZXhwTW9udGggPSBkYXRhLmV4cE1vbnRoO1xyXG4gICAgICAgIHRoaXMuZXhwWWVhciA9IGRhdGEuZXhwWWVhcjtcclxuICAgICAgICB0aGlzLmNvZGUgPSBkYXRhLmNvZGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZmllbGRUeXBlJztcclxuaW1wb3J0IHsgTGlua2VkSWRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvbGlua2VkSWRUeXBlJztcclxuXHJcbmltcG9ydCB7IEZpZWxkQXBpIH0gZnJvbSAnLi4vYXBpL2ZpZWxkQXBpJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWVsZERhdGEge1xyXG4gICAgdHlwZTogRmllbGRUeXBlO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIGxpbmtlZElkOiBMaW5rZWRJZFR5cGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U/OiBGaWVsZEFwaSkge1xyXG4gICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50eXBlID0gcmVzcG9uc2UudHlwZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSByZXNwb25zZS5uYW1lO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSByZXNwb25zZS52YWx1ZTtcclxuICAgICAgICB0aGlzLmxpbmtlZElkID0gcmVzcG9uc2UubGlua2VkSWQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSWRlbnRpdHlBcGkgfSBmcm9tICcuLi9hcGkvaWRlbnRpdHlBcGknO1xyXG5cclxuZXhwb3J0IGNsYXNzIElkZW50aXR5RGF0YSB7XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgZmlyc3ROYW1lOiBzdHJpbmc7XHJcbiAgICBtaWRkbGVOYW1lOiBzdHJpbmc7XHJcbiAgICBsYXN0TmFtZTogc3RyaW5nO1xyXG4gICAgYWRkcmVzczE6IHN0cmluZztcclxuICAgIGFkZHJlc3MyOiBzdHJpbmc7XHJcbiAgICBhZGRyZXNzMzogc3RyaW5nO1xyXG4gICAgY2l0eTogc3RyaW5nO1xyXG4gICAgc3RhdGU6IHN0cmluZztcclxuICAgIHBvc3RhbENvZGU6IHN0cmluZztcclxuICAgIGNvdW50cnk6IHN0cmluZztcclxuICAgIGNvbXBhbnk6IHN0cmluZztcclxuICAgIGVtYWlsOiBzdHJpbmc7XHJcbiAgICBwaG9uZTogc3RyaW5nO1xyXG4gICAgc3NuOiBzdHJpbmc7XHJcbiAgICB1c2VybmFtZTogc3RyaW5nO1xyXG4gICAgcGFzc3BvcnROdW1iZXI6IHN0cmluZztcclxuICAgIGxpY2Vuc2VOdW1iZXI6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhPzogSWRlbnRpdHlBcGkpIHtcclxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlO1xyXG4gICAgICAgIHRoaXMuZmlyc3ROYW1lID0gZGF0YS5maXJzdE5hbWU7XHJcbiAgICAgICAgdGhpcy5taWRkbGVOYW1lID0gZGF0YS5taWRkbGVOYW1lO1xyXG4gICAgICAgIHRoaXMubGFzdE5hbWUgPSBkYXRhLmxhc3ROYW1lO1xyXG4gICAgICAgIHRoaXMuYWRkcmVzczEgPSBkYXRhLmFkZHJlc3MxO1xyXG4gICAgICAgIHRoaXMuYWRkcmVzczIgPSBkYXRhLmFkZHJlc3MyO1xyXG4gICAgICAgIHRoaXMuYWRkcmVzczMgPSBkYXRhLmFkZHJlc3MzO1xyXG4gICAgICAgIHRoaXMuY2l0eSA9IGRhdGEuY2l0eTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gZGF0YS5zdGF0ZTtcclxuICAgICAgICB0aGlzLnBvc3RhbENvZGUgPSBkYXRhLnBvc3RhbENvZGU7XHJcbiAgICAgICAgdGhpcy5jb3VudHJ5ID0gZGF0YS5jb3VudHJ5O1xyXG4gICAgICAgIHRoaXMuY29tcGFueSA9IGRhdGEuY29tcGFueTtcclxuICAgICAgICB0aGlzLmVtYWlsID0gZGF0YS5lbWFpbDtcclxuICAgICAgICB0aGlzLnBob25lID0gZGF0YS5waG9uZTtcclxuICAgICAgICB0aGlzLnNzbiA9IGRhdGEuc3NuO1xyXG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBkYXRhLnVzZXJuYW1lO1xyXG4gICAgICAgIHRoaXMucGFzc3BvcnROdW1iZXIgPSBkYXRhLnBhc3Nwb3J0TnVtYmVyO1xyXG4gICAgICAgIHRoaXMubGljZW5zZU51bWJlciA9IGRhdGEubGljZW5zZU51bWJlcjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMb2dpbkFwaSB9IGZyb20gJy4uL2FwaS9sb2dpbkFwaSc7XHJcblxyXG5pbXBvcnQgeyBMb2dpblVyaURhdGEgfSBmcm9tICcuL2xvZ2luVXJpRGF0YSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9naW5EYXRhIHtcclxuICAgIHVyaXM6IExvZ2luVXJpRGF0YVtdO1xyXG4gICAgdXNlcm5hbWU6IHN0cmluZztcclxuICAgIHBhc3N3b3JkOiBzdHJpbmc7XHJcbiAgICBwYXNzd29yZFJldmlzaW9uRGF0ZTogc3RyaW5nO1xyXG4gICAgdG90cDogc3RyaW5nO1xyXG4gICAgYXV0b2ZpbGxPblBhZ2VMb2FkOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBMb2dpbkFwaSkge1xyXG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IGRhdGEudXNlcm5hbWU7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IGRhdGEucGFzc3dvcmQ7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZFJldmlzaW9uRGF0ZSA9IGRhdGEucGFzc3dvcmRSZXZpc2lvbkRhdGU7XHJcbiAgICAgICAgdGhpcy50b3RwID0gZGF0YS50b3RwO1xyXG4gICAgICAgIHRoaXMuYXV0b2ZpbGxPblBhZ2VMb2FkID0gZGF0YS5hdXRvZmlsbE9uUGFnZUxvYWQ7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLnVyaXMpIHtcclxuICAgICAgICAgICAgdGhpcy51cmlzID0gZGF0YS51cmlzLm1hcCh1ID0+IG5ldyBMb2dpblVyaURhdGEodSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVcmlNYXRjaFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy91cmlNYXRjaFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgTG9naW5VcmlBcGkgfSBmcm9tICcuLi9hcGkvbG9naW5VcmlBcGknO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvZ2luVXJpRGF0YSB7XHJcbiAgICB1cmk6IHN0cmluZztcclxuICAgIG1hdGNoOiBVcmlNYXRjaFR5cGUgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBMb2dpblVyaUFwaSkge1xyXG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVyaSA9IGRhdGEudXJpO1xyXG4gICAgICAgIHRoaXMubWF0Y2ggPSBkYXRhLm1hdGNoO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFBhc3N3b3JkSGlzdG9yeVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvcGFzc3dvcmRIaXN0b3J5UmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkSGlzdG9yeURhdGEge1xyXG4gICAgcGFzc3dvcmQ6IHN0cmluZztcclxuICAgIGxhc3RVc2VkRGF0ZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlPzogUGFzc3dvcmRIaXN0b3J5UmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBhc3N3b3JkID0gcmVzcG9uc2UucGFzc3dvcmQ7XHJcbiAgICAgICAgdGhpcy5sYXN0VXNlZERhdGUgPSByZXNwb25zZS5sYXN0VXNlZERhdGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU2VjdXJlTm90ZVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zZWN1cmVOb3RlVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBTZWN1cmVOb3RlQXBpIH0gZnJvbSAnLi4vYXBpL3NlY3VyZU5vdGVBcGknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlY3VyZU5vdGVEYXRhIHtcclxuICAgIHR5cGU6IFNlY3VyZU5vdGVUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBTZWN1cmVOb3RlQXBpKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUGFzc3dvcmRIaXN0b3J5RGF0YSB9IGZyb20gJy4uL2RhdGEvcGFzc3dvcmRIaXN0b3J5RGF0YSc7XHJcblxyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4vZW5jU3RyaW5nJztcclxuXHJcbmltcG9ydCB7IFBhc3N3b3JkSGlzdG9yeVZpZXcgfSBmcm9tICcuLi92aWV3L3Bhc3N3b3JkSGlzdG9yeVZpZXcnO1xyXG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICcuL3N5bW1ldHJpY0NyeXB0b0tleSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFzc3dvcmQgZXh0ZW5kcyBEb21haW4ge1xyXG4gICAgcGFzc3dvcmQ6IEVuY1N0cmluZztcclxuICAgIGxhc3RVc2VkRGF0ZTogRGF0ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBQYXNzd29yZEhpc3RvcnlEYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiBudWxsLFxyXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQpO1xyXG4gICAgICAgIHRoaXMubGFzdFVzZWREYXRlID0gbmV3IERhdGUob2JqLmxhc3RVc2VkRGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVjcnlwdChvcmdJZDogc3RyaW5nLCBlbmNLZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFBhc3N3b3JkSGlzdG9yeVZpZXc+IHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgUGFzc3dvcmRIaXN0b3J5Vmlldyh0aGlzKSwge1xyXG4gICAgICAgICAgICBwYXNzd29yZDogbnVsbCxcclxuICAgICAgICB9LCBvcmdJZCwgZW5jS2V5KTtcclxuICAgIH1cclxuXHJcbiAgICB0b1Bhc3N3b3JkSGlzdG9yeURhdGEoKTogUGFzc3dvcmRIaXN0b3J5RGF0YSB7XHJcbiAgICAgICAgY29uc3QgcGggPSBuZXcgUGFzc3dvcmRIaXN0b3J5RGF0YSgpO1xyXG4gICAgICAgIHBoLmxhc3RVc2VkRGF0ZSA9IHRoaXMubGFzdFVzZWREYXRlLnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZERhdGFNb2RlbCh0aGlzLCBwaCwge1xyXG4gICAgICAgICAgICBwYXNzd29yZDogbnVsbCxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcGg7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xyXG5pbXBvcnQgeyBFbmNTdHJpbmcgfSBmcm9tICcuL2VuY1N0cmluZyc7XHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuXHJcbmltcG9ydCB7IFNlbmRGaWxlRGF0YSB9IGZyb20gJy4uL2RhdGEvc2VuZEZpbGVEYXRhJztcclxuXHJcbmltcG9ydCB7IFNlbmRGaWxlVmlldyB9IGZyb20gJy4uL3ZpZXcvc2VuZEZpbGVWaWV3JztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZW5kRmlsZSBleHRlbmRzIERvbWFpbiB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgc2l6ZTogc3RyaW5nO1xyXG4gICAgc2l6ZU5hbWU6IHN0cmluZztcclxuICAgIGZpbGVOYW1lOiBFbmNTdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob2JqPzogU2VuZEZpbGVEYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNpemUgPSBvYmouc2l6ZTtcclxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICBzaXplTmFtZTogbnVsbCxcclxuICAgICAgICAgICAgZmlsZU5hbWU6IG51bGwsXHJcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgWydpZCcsICdzaXplTmFtZSddKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWNyeXB0KGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxTZW5kRmlsZVZpZXc+IHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gYXdhaXQgdGhpcy5kZWNyeXB0T2JqKG5ldyBTZW5kRmlsZVZpZXcodGhpcyksIHtcclxuICAgICAgICAgICAgZmlsZU5hbWU6IG51bGwsXHJcbiAgICAgICAgfSwgbnVsbCwga2V5KTtcclxuICAgICAgICByZXR1cm4gdmlldztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4vZW5jU3RyaW5nJztcclxuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xyXG5cclxuaW1wb3J0IHsgU2VuZFRleHREYXRhIH0gZnJvbSAnLi4vZGF0YS9zZW5kVGV4dERhdGEnO1xyXG5cclxuaW1wb3J0IHsgU2VuZFRleHRWaWV3IH0gZnJvbSAnLi4vdmlldy9zZW5kVGV4dFZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbmRUZXh0IGV4dGVuZHMgRG9tYWluIHtcclxuICAgIHRleHQ6IEVuY1N0cmluZztcclxuICAgIGhpZGRlbjogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBTZW5kVGV4dERhdGEsIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaGlkZGVuID0gb2JqLmhpZGRlbjtcclxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IG51bGwsXHJcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY3J5cHQoa2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFNlbmRUZXh0Vmlldz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRPYmoobmV3IFNlbmRUZXh0Vmlldyh0aGlzKSwge1xyXG4gICAgICAgICAgICB0ZXh0OiBudWxsLFxyXG4gICAgICAgIH0sIG51bGwsIGtleSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gRW5jcnlwdGlvblR5cGUge1xyXG4gICAgQWVzQ2JjMjU2X0I2NCA9IDAsXHJcbiAgICBBZXNDYmMxMjhfSG1hY1NoYTI1Nl9CNjQgPSAxLFxyXG4gICAgQWVzQ2JjMjU2X0htYWNTaGEyNTZfQjY0ID0gMixcclxuICAgIFJzYTIwNDhfT2FlcFNoYTI1Nl9CNjQgPSAzLFxyXG4gICAgUnNhMjA0OF9PYWVwU2hhMV9CNjQgPSA0LFxyXG4gICAgUnNhMjA0OF9PYWVwU2hhMjU2X0htYWNTaGEyNTZfQjY0ID0gNSxcclxuICAgIFJzYTIwNDhfT2FlcFNoYTFfSG1hY1NoYTI1Nl9CNjQgPSA2LFxyXG59XHJcbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xyXG5cclxuaW1wb3J0IHsgQXR0YWNobWVudCB9IGZyb20gJy4uL2RvbWFpbi9hdHRhY2htZW50JztcclxuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi4vZG9tYWluL3N5bW1ldHJpY0NyeXB0b0tleSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXR0YWNobWVudFZpZXcgaW1wbGVtZW50cyBWaWV3IHtcclxuICAgIGlkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgdXJsOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgc2l6ZTogc3RyaW5nID0gbnVsbDtcclxuICAgIHNpemVOYW1lOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgZmlsZU5hbWU6IHN0cmluZyA9IG51bGw7XHJcbiAgICBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYT86IEF0dGFjaG1lbnQpIHtcclxuICAgICAgICBpZiAoIWEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pZCA9IGEuaWQ7XHJcbiAgICAgICAgdGhpcy51cmwgPSBhLnVybDtcclxuICAgICAgICB0aGlzLnNpemUgPSBhLnNpemU7XHJcbiAgICAgICAgdGhpcy5zaXplTmFtZSA9IGEuc2l6ZU5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZpbGVTaXplKCk6IG51bWJlciB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2l6ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zaXplLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgICAvLyBJbnZhbGlkIGZpbGUgc2l6ZS5cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXR0YWNobWVudERhdGEgfSBmcm9tICcuLi9kYXRhL2F0dGFjaG1lbnREYXRhJztcclxuXHJcbmltcG9ydCB7IEF0dGFjaG1lbnRWaWV3IH0gZnJvbSAnLi4vdmlldy9hdHRhY2htZW50Vmlldyc7XHJcblxyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4vZW5jU3RyaW5nJztcclxuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xyXG5cclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uLy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL21pc2MvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF0dGFjaG1lbnQgZXh0ZW5kcyBEb21haW4ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHVybDogc3RyaW5nO1xyXG4gICAgc2l6ZTogc3RyaW5nO1xyXG4gICAgc2l6ZU5hbWU6IHN0cmluZztcclxuICAgIGtleTogRW5jU3RyaW5nO1xyXG4gICAgZmlsZU5hbWU6IEVuY1N0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBBdHRhY2htZW50RGF0YSwgYWxyZWFkeUVuY3J5cHRlZDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zaXplID0gb2JqLnNpemU7XHJcbiAgICAgICAgdGhpcy5idWlsZERvbWFpbk1vZGVsKHRoaXMsIG9iaiwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdXJsOiBudWxsLFxyXG4gICAgICAgICAgICBzaXplTmFtZTogbnVsbCxcclxuICAgICAgICAgICAgZmlsZU5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIGtleTogbnVsbCxcclxuICAgICAgICB9LCBhbHJlYWR5RW5jcnlwdGVkLCBbJ2lkJywgJ3VybCcsICdzaXplTmFtZSddKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWNyeXB0KG9yZ0lkOiBzdHJpbmcsIGVuY0tleT86IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8QXR0YWNobWVudFZpZXc+IHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gYXdhaXQgdGhpcy5kZWNyeXB0T2JqKG5ldyBBdHRhY2htZW50Vmlldyh0aGlzKSwge1xyXG4gICAgICAgICAgICBmaWxlTmFtZTogbnVsbCxcclxuICAgICAgICB9LCBvcmdJZCwgZW5jS2V5KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IGNyeXB0b1NlcnZpY2U6IENyeXB0b1NlcnZpY2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclNlcnZpY2UgPSAoVXRpbHMuZ2xvYmFsIGFzIGFueSkuYml0d2FyZGVuQ29udGFpbmVyU2VydmljZTtcclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lclNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgIGNyeXB0b1NlcnZpY2UgPSBjb250YWluZXJTZXJ2aWNlLmdldENyeXB0b1NlcnZpY2UoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZ2xvYmFsIGJpdHdhcmRlbkNvbnRhaW5lclNlcnZpY2Ugbm90IGluaXRpYWxpemVkLicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JnS2V5ID0gYXdhaXQgY3J5cHRvU2VydmljZS5nZXRPcmdLZXkob3JnSWQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVjVmFsdWUgPSBhd2FpdCBjcnlwdG9TZXJ2aWNlLmRlY3J5cHRUb0J5dGVzKHRoaXMua2V5LCBvcmdLZXkgPz8gZW5jS2V5KTtcclxuICAgICAgICAgICAgICAgIHZpZXcua2V5ID0gbmV3IFN5bW1ldHJpY0NyeXB0b0tleShkZWNWYWx1ZSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGVycm9yP1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmlldztcclxuICAgIH1cclxuXHJcbiAgICB0b0F0dGFjaG1lbnREYXRhKCk6IEF0dGFjaG1lbnREYXRhIHtcclxuICAgICAgICBjb25zdCBhID0gbmV3IEF0dGFjaG1lbnREYXRhKCk7XHJcbiAgICAgICAgYS5zaXplID0gdGhpcy5zaXplO1xyXG4gICAgICAgIHRoaXMuYnVpbGREYXRhTW9kZWwodGhpcywgYSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdXJsOiBudWxsLFxyXG4gICAgICAgICAgICBzaXplTmFtZTogbnVsbCxcclxuICAgICAgICAgICAgZmlsZU5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIGtleTogbnVsbCxcclxuICAgICAgICB9LCBbJ2lkJywgJ3VybCcsICdzaXplTmFtZSddKTtcclxuICAgICAgICByZXR1cm4gYTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IFNlbmRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VuZFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IFNlbmREYXRhIH0gZnJvbSAnLi4vZGF0YS9zZW5kRGF0YSc7XHJcblxyXG5pbXBvcnQgeyBTZW5kVmlldyB9IGZyb20gJy4uL3ZpZXcvc2VuZFZpZXcnO1xyXG5cclxuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xyXG5pbXBvcnQgeyBFbmNTdHJpbmcgfSBmcm9tICcuL2VuY1N0cmluZyc7XHJcbmltcG9ydCB7IFNlbmRGaWxlIH0gZnJvbSAnLi9zZW5kRmlsZSc7XHJcbmltcG9ydCB7IFNlbmRUZXh0IH0gZnJvbSAnLi9zZW5kVGV4dCc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VuZCBleHRlbmRzIERvbWFpbiB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgYWNjZXNzSWQ6IHN0cmluZztcclxuICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgdHlwZTogU2VuZFR5cGU7XHJcbiAgICBuYW1lOiBFbmNTdHJpbmc7XHJcbiAgICBub3RlczogRW5jU3RyaW5nO1xyXG4gICAgZmlsZTogU2VuZEZpbGU7XHJcbiAgICB0ZXh0OiBTZW5kVGV4dDtcclxuICAgIGtleTogRW5jU3RyaW5nO1xyXG4gICAgbWF4QWNjZXNzQ291bnQ/OiBudW1iZXI7XHJcbiAgICBhY2Nlc3NDb3VudDogbnVtYmVyO1xyXG4gICAgcmV2aXNpb25EYXRlOiBEYXRlO1xyXG4gICAgZXhwaXJhdGlvbkRhdGU6IERhdGU7XHJcbiAgICBkZWxldGlvbkRhdGU6IERhdGU7XHJcbiAgICBwYXNzd29yZDogc3RyaW5nO1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBoaWRlRW1haWw6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3Iob2JqPzogU2VuZERhdGEsIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYnVpbGREb21haW5Nb2RlbCh0aGlzLCBvYmosIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIGFjY2Vzc0lkOiBudWxsLFxyXG4gICAgICAgICAgICB1c2VySWQ6IG51bGwsXHJcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIG5vdGVzOiBudWxsLFxyXG4gICAgICAgICAgICBrZXk6IG51bGwsXHJcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgWydpZCcsICdhY2Nlc3NJZCcsICd1c2VySWQnXSk7XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IG9iai50eXBlO1xyXG4gICAgICAgIHRoaXMubWF4QWNjZXNzQ291bnQgPSBvYmoubWF4QWNjZXNzQ291bnQ7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NDb3VudCA9IG9iai5hY2Nlc3NDb3VudDtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkID0gb2JqLnBhc3N3b3JkO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBvYmouZGlzYWJsZWQ7XHJcbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSBvYmoucmV2aXNpb25EYXRlICE9IG51bGwgPyBuZXcgRGF0ZShvYmoucmV2aXNpb25EYXRlKSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZWxldGlvbkRhdGUgPSBvYmouZGVsZXRpb25EYXRlICE9IG51bGwgPyBuZXcgRGF0ZShvYmouZGVsZXRpb25EYXRlKSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5leHBpcmF0aW9uRGF0ZSA9IG9iai5leHBpcmF0aW9uRGF0ZSAhPSBudWxsID8gbmV3IERhdGUob2JqLmV4cGlyYXRpb25EYXRlKSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5oaWRlRW1haWwgPSBvYmouaGlkZUVtYWlsO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLlRleHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBuZXcgU2VuZFRleHQob2JqLnRleHQsIGFscmVhZHlFbmNyeXB0ZWQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU2VuZFR5cGUuRmlsZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZSA9IG5ldyBTZW5kRmlsZShvYmouZmlsZSwgYWxyZWFkeUVuY3J5cHRlZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWNyeXB0KCk6IFByb21pc2U8U2VuZFZpZXc+IHtcclxuICAgICAgICBjb25zdCBtb2RlbCA9IG5ldyBTZW5kVmlldyh0aGlzKTtcclxuXHJcbiAgICAgICAgbGV0IGNyeXB0b1NlcnZpY2U6IENyeXB0b1NlcnZpY2U7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyU2VydmljZSA9IChVdGlscy5nbG9iYWwgYXMgYW55KS5iaXR3YXJkZW5Db250YWluZXJTZXJ2aWNlO1xyXG4gICAgICAgIGlmIChjb250YWluZXJTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIGNyeXB0b1NlcnZpY2UgPSBjb250YWluZXJTZXJ2aWNlLmdldENyeXB0b1NlcnZpY2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dsb2JhbCBiaXR3YXJkZW5Db250YWluZXJTZXJ2aWNlIG5vdCBpbml0aWFsaXplZC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIG1vZGVsLmtleSA9IGF3YWl0IGNyeXB0b1NlcnZpY2UuZGVjcnlwdFRvQnl0ZXModGhpcy5rZXksIG51bGwpO1xyXG4gICAgICAgICAgICBtb2RlbC5jcnlwdG9LZXkgPSBhd2FpdCBjcnlwdG9TZXJ2aWNlLm1ha2VTZW5kS2V5KG1vZGVsLmtleSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBlcnJvcj9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuZGVjcnlwdE9iaihtb2RlbCwge1xyXG4gICAgICAgICAgICBuYW1lOiBudWxsLFxyXG4gICAgICAgICAgICBub3RlczogbnVsbCxcclxuICAgICAgICB9LCBudWxsLCBtb2RlbC5jcnlwdG9LZXkpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLkZpbGU6XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5maWxlID0gYXdhaXQgdGhpcy5maWxlLmRlY3J5cHQobW9kZWwuY3J5cHRvS2V5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLlRleHQ6XHJcbiAgICAgICAgICAgICAgICBtb2RlbC50ZXh0ID0gYXdhaXQgdGhpcy50ZXh0LmRlY3J5cHQobW9kZWwuY3J5cHRvS2V5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW9kZWw7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRGV2aWNlVHlwZSB9IGZyb20gJy4uL2VudW1zL2RldmljZVR5cGUnO1xyXG5pbXBvcnQgeyBUaGVtZVR5cGUgfSBmcm9tICcuLi9lbnVtcy90aGVtZVR5cGUnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBsYXRmb3JtVXRpbHNTZXJ2aWNlIHtcclxuICAgIGlkZW50aXR5Q2xpZW50SWQ6IHN0cmluZztcclxuICAgIGdldERldmljZTogKCkgPT4gRGV2aWNlVHlwZTtcclxuICAgIGdldERldmljZVN0cmluZzogKCkgPT4gc3RyaW5nO1xyXG4gICAgaXNGaXJlZm94OiAoKSA9PiBib29sZWFuO1xyXG4gICAgaXNDaHJvbWU6ICgpID0+IGJvb2xlYW47XHJcbiAgICBpc0VkZ2U6ICgpID0+IGJvb2xlYW47XHJcbiAgICBpc09wZXJhOiAoKSA9PiBib29sZWFuO1xyXG4gICAgaXNWaXZhbGRpOiAoKSA9PiBib29sZWFuO1xyXG4gICAgaXNTYWZhcmk6ICgpID0+IGJvb2xlYW47XHJcbiAgICBpc0lFOiAoKSA9PiBib29sZWFuO1xyXG4gICAgaXNNYWNBcHBTdG9yZTogKCkgPT4gYm9vbGVhbjtcclxuICAgIGlzVmlld09wZW46ICgpID0+IFByb21pc2U8Ym9vbGVhbj47XHJcbiAgICBsYXVuY2hVcmk6ICh1cmk6IHN0cmluZywgb3B0aW9ucz86IGFueSkgPT4gdm9pZDtcclxuICAgIHNhdmVGaWxlOiAod2luOiBXaW5kb3csIGJsb2JEYXRhOiBhbnksIGJsb2JPcHRpb25zOiBhbnksIGZpbGVOYW1lOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICBnZXRBcHBsaWNhdGlvblZlcnNpb246ICgpID0+IFByb21pc2U8c3RyaW5nPjtcclxuICAgIHN1cHBvcnRzV2ViQXV0aG46ICh3aW46IFdpbmRvdykgPT4gYm9vbGVhbjtcclxuICAgIHN1cHBvcnRzRHVvOiAoKSA9PiBib29sZWFuO1xyXG4gICAgc2hvd1RvYXN0OiAodHlwZTogJ2Vycm9yJyB8ICdzdWNjZXNzJyB8ICd3YXJuaW5nJyB8ICdpbmZvJywgdGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nIHwgc3RyaW5nW10sXHJcbiAgICAgICAgb3B0aW9ucz86IGFueSkgPT4gdm9pZDtcclxuICAgIHNob3dEaWFsb2c6IChib2R5OiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBjb25maXJtVGV4dD86IHN0cmluZywgY2FuY2VsVGV4dD86IHN0cmluZyxcclxuICAgICAgICB0eXBlPzogc3RyaW5nLCBib2R5SXNIdG1sPzogYm9vbGVhbikgPT4gUHJvbWlzZTxib29sZWFuPjtcclxuICAgIGlzRGV2OiAoKSA9PiBib29sZWFuO1xyXG4gICAgaXNTZWxmSG9zdDogKCkgPT4gYm9vbGVhbjtcclxuICAgIGNvcHlUb0NsaXBib2FyZDogKHRleHQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkgPT4gdm9pZCB8IGJvb2xlYW47XHJcbiAgICByZWFkRnJvbUNsaXBib2FyZDogKG9wdGlvbnM/OiBhbnkpID0+IFByb21pc2U8c3RyaW5nPjtcclxuICAgIHN1cHBvcnRzQmlvbWV0cmljOiAoKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xyXG4gICAgYXV0aGVudGljYXRlQmlvbWV0cmljOiAoKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xyXG4gICAgZ2V0RGVmYXVsdFN5c3RlbVRoZW1lOiAoKSA9PiBQcm9taXNlPFRoZW1lVHlwZS5MaWdodCB8IFRoZW1lVHlwZS5EYXJrPjtcclxuICAgIG9uRGVmYXVsdFN5c3RlbVRoZW1lQ2hhbmdlOiAoY2FsbGJhY2s6ICgodGhlbWU6IFRoZW1lVHlwZS5MaWdodCB8IFRoZW1lVHlwZS5EYXJrKSA9PiB1bmtub3duKSkgPT4gdW5rbm93bjtcclxuICAgIGdldEVmZmVjdGl2ZVRoZW1lOiAoKSA9PiBQcm9taXNlPFRoZW1lVHlwZT47XHJcbiAgICBzdXBwb3J0c1NlY3VyZVN0b3JhZ2U6ICgpID0+IGJvb2xlYW47XHJcbn1cclxuIiwiaW1wb3J0IHsgRW5jU3RyaW5nIH0gZnJvbSAnLi9lbmNTdHJpbmcnO1xyXG5cclxuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4uL3ZpZXcvdmlldyc7XHJcblxyXG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICcuL3N5bW1ldHJpY0NyeXB0b0tleSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb21haW4ge1xyXG4gICAgcHJvdGVjdGVkIGJ1aWxkRG9tYWluTW9kZWw8RCBleHRlbmRzIERvbWFpbj4oZG9tYWluOiBELCBkYXRhT2JqOiBhbnksIG1hcDogYW55LFxyXG4gICAgICAgIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4sIG5vdEVuY0xpc3Q6IGFueVtdID0gW10pIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gbWFwKSB7XHJcbiAgICAgICAgICAgIGlmICghbWFwLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb2JqUHJvcCA9IGRhdGFPYmpbKG1hcFtwcm9wXSB8fCBwcm9wKV07XHJcbiAgICAgICAgICAgIGlmIChhbHJlYWR5RW5jcnlwdGVkID09PSB0cnVlIHx8IG5vdEVuY0xpc3QuaW5kZXhPZihwcm9wKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAoZG9tYWluIGFzIGFueSlbcHJvcF0gPSBvYmpQcm9wID8gb2JqUHJvcCA6IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAoZG9tYWluIGFzIGFueSlbcHJvcF0gPSBvYmpQcm9wID8gbmV3IEVuY1N0cmluZyhvYmpQcm9wKSA6IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgYnVpbGREYXRhTW9kZWw8RCBleHRlbmRzIERvbWFpbj4oZG9tYWluOiBELCBkYXRhT2JqOiBhbnksIG1hcDogYW55LCBub3RFbmNTdHJpbmdMaXN0OiBhbnlbXSA9IFtdKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIG1hcCkge1xyXG4gICAgICAgICAgICBpZiAoIW1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9ialByb3AgPSAoZG9tYWluIGFzIGFueSlbKG1hcFtwcm9wXSB8fCBwcm9wKV07XHJcbiAgICAgICAgICAgIGlmIChub3RFbmNTdHJpbmdMaXN0LmluZGV4T2YocHJvcCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgKGRhdGFPYmogYXMgYW55KVtwcm9wXSA9IG9ialByb3AgIT0gbnVsbCA/IG9ialByb3AgOiBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgKGRhdGFPYmogYXMgYW55KVtwcm9wXSA9IG9ialByb3AgIT0gbnVsbCA/IChvYmpQcm9wIGFzIEVuY1N0cmluZykuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgZGVjcnlwdE9iajxUIGV4dGVuZHMgVmlldz4odmlld01vZGVsOiBULCBtYXA6IGFueSwgb3JnSWQ6IHN0cmluZyxcclxuICAgICAgICBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSA9IG51bGwpOiBQcm9taXNlPFQ+IHtcclxuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBtYXApIHtcclxuICAgICAgICAgICAgaWYgKCFtYXAuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICAgICAgKGZ1bmN0aW9uICh0aGVQcm9wKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFwUHJvcCA9IG1hcFt0aGVQcm9wXSB8fCB0aGVQcm9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmW21hcFByb3BdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmW21hcFByb3BdLmRlY3J5cHQob3JnSWQsIGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSkudGhlbigodmFsOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAodmlld01vZGVsIGFzIGFueSlbdGhlUHJvcF0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gocCk7XHJcbiAgICAgICAgICAgIH0pKHByb3ApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgICAgIHJldHVybiB2aWV3TW9kZWw7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gVXJpTWF0Y2hUeXBlIHtcclxuICAgIERvbWFpbiA9IDAsXHJcbiAgICBIb3N0ID0gMSxcclxuICAgIFN0YXJ0c1dpdGggPSAyLFxyXG4gICAgRXhhY3QgPSAzLFxyXG4gICAgUmVndWxhckV4cHJlc3Npb24gPSA0LFxyXG4gICAgTmV2ZXIgPSA1LFxyXG59XHJcbiIsIi8qIChpZ25vcmVkKSAqLyIsImV4cG9ydCBjbGFzcyBDaXBoZXJCdWxrRGVsZXRlUmVxdWVzdCB7XHJcbiAgICBpZHM6IHN0cmluZ1tdO1xyXG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpZHM6IHN0cmluZ1tdLCBvcmdhbml6YXRpb25JZD86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuaWRzID0gaWRzID09IG51bGwgPyBbXSA6IGlkcztcclxuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gb3JnYW5pemF0aW9uSWQ7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gRGV2aWNlVHlwZSB7XHJcbiAgICBBbmRyb2lkID0gMCxcclxuICAgIGlPUyA9IDEsXHJcbiAgICBDaHJvbWVFeHRlbnNpb24gPSAyLFxyXG4gICAgRmlyZWZveEV4dGVuc2lvbiA9IDMsXHJcbiAgICBPcGVyYUV4dGVuc2lvbiA9IDQsXHJcbiAgICBFZGdlRXh0ZW5zaW9uID0gNSxcclxuICAgIFdpbmRvd3NEZXNrdG9wID0gNixcclxuICAgIE1hY09zRGVza3RvcCA9IDcsXHJcbiAgICBMaW51eERlc2t0b3AgPSA4LFxyXG4gICAgQ2hyb21lQnJvd3NlciA9IDksXHJcbiAgICBGaXJlZm94QnJvd3NlciA9IDEwLFxyXG4gICAgT3BlcmFCcm93c2VyID0gMTEsXHJcbiAgICBFZGdlQnJvd3NlciA9IDEyLFxyXG4gICAgSUVCcm93c2VyID0gMTMsXHJcbiAgICBVbmtub3duQnJvd3NlciA9IDE0LFxyXG4gICAgQW5kcm9pZEFtYXpvbiA9IDE1LFxyXG4gICAgVVdQID0gMTYsXHJcbiAgICBTYWZhcmlCcm93c2VyID0gMTcsXHJcbiAgICBWaXZhbGRpQnJvd3NlciA9IDE4LFxyXG4gICAgVml2YWxkaUV4dGVuc2lvbiA9IDE5LFxyXG4gICAgU2FmYXJpRXh0ZW5zaW9uID0gMjAsXHJcbn1cclxuIiwiZXhwb3J0IGVudW0gU2VuZFR5cGUge1xyXG4gICAgVGV4dCA9IDAsXHJcbiAgICBGaWxlID0gMSxcclxufVxyXG4iLCJpbXBvcnQgeyBDaXBoZXJUeXBlIH0gZnJvbSAnLi4vZW51bXMvY2lwaGVyVHlwZSc7XHJcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4uL2VudW1zL2ZpZWxkVHlwZSc7XHJcbmltcG9ydCB7IFVyaU1hdGNoVHlwZSB9IGZyb20gJy4uL2VudW1zL3VyaU1hdGNoVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBDaXBoZXJEYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvY2lwaGVyRGF0YSc7XHJcblxyXG5pbXBvcnQgeyBBdHRhY2htZW50IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9hdHRhY2htZW50JztcclxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4uL21vZGVscy9kb21haW4vY2FyZCc7XHJcbmltcG9ydCB7IENpcGhlciB9IGZyb20gJy4uL21vZGVscy9kb21haW4vY2lwaGVyJztcclxuaW1wb3J0IERvbWFpbiBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2RvbWFpbkJhc2UnO1xyXG5pbXBvcnQgeyBFbmNBcnJheUJ1ZmZlciB9IGZyb20gJy4uL21vZGVscy9kb21haW4vZW5jQXJyYXlCdWZmZXInO1xyXG5pbXBvcnQgeyBFbmNTdHJpbmcgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2VuY1N0cmluZyc7XHJcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9maWVsZCc7XHJcbmltcG9ydCB7IElkZW50aXR5IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9pZGVudGl0eSc7XHJcbmltcG9ydCB7IExvZ2luIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9sb2dpbic7XHJcbmltcG9ydCB7IExvZ2luVXJpIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9sb2dpblVyaSc7XHJcbmltcG9ydCB7IFBhc3N3b3JkIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9wYXNzd29yZCc7XHJcbmltcG9ydCB7IFNlY3VyZU5vdGUgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3NlY3VyZU5vdGUnO1xyXG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3N5bW1ldHJpY0NyeXB0b0tleSc7XHJcblxyXG5pbXBvcnQgeyBBdHRhY2htZW50UmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2F0dGFjaG1lbnRSZXF1ZXN0JztcclxuaW1wb3J0IHsgQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrRGVsZXRlUmVxdWVzdCc7XHJcbmltcG9ydCB7IENpcGhlckJ1bGtNb3ZlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlckJ1bGtNb3ZlUmVxdWVzdCc7XHJcbmltcG9ydCB7IENpcGhlckJ1bGtSZXN0b3JlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlckJ1bGtSZXN0b3JlUmVxdWVzdCc7XHJcbmltcG9ydCB7IENpcGhlckJ1bGtTaGFyZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrU2hhcmVSZXF1ZXN0JztcclxuaW1wb3J0IHsgQ2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0JztcclxuaW1wb3J0IHsgQ2lwaGVyQ3JlYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlckNyZWF0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBDaXBoZXJSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY2lwaGVyUmVxdWVzdCc7XHJcbmltcG9ydCB7IENpcGhlclNoYXJlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlclNoYXJlUmVxdWVzdCc7XHJcblxyXG5pbXBvcnQgeyBDaXBoZXJSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9jaXBoZXJSZXNwb25zZSc7XHJcbmltcG9ydCB7IEVycm9yUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvZXJyb3JSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBBdHRhY2htZW50VmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2F0dGFjaG1lbnRWaWV3JztcclxuaW1wb3J0IHsgQ2lwaGVyVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2NpcGhlclZpZXcnO1xyXG5pbXBvcnQgeyBGaWVsZFZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9maWVsZFZpZXcnO1xyXG5pbXBvcnQgeyBQYXNzd29yZEhpc3RvcnlWaWV3IH0gZnJvbSAnLi4vbW9kZWxzL3ZpZXcvcGFzc3dvcmRIaXN0b3J5Vmlldyc7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy92aWV3JztcclxuXHJcbmltcG9ydCB7IFNvcnRlZENpcGhlcnNDYWNoZSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc29ydGVkQ2lwaGVyc0NhY2hlJztcclxuXHJcbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIGFzIENpcGhlclNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jaXBoZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY3J5cHRvLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9maWxlVXBsb2FkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTZWFyY2hTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NlYXJjaC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NldHRpbmdzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy91c2VyLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgQ29uc3RhbnRzU2VydmljZSB9IGZyb20gJy4vY29uc3RhbnRzLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcbmltcG9ydCB7IHNlcXVlbnRpYWxpemUgfSBmcm9tICcuLi9taXNjL3NlcXVlbnRpYWxpemUnO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xyXG5cclxuY29uc3QgS2V5cyA9IHtcclxuICAgIGNpcGhlcnNQcmVmaXg6ICdjaXBoZXJzXycsXHJcbiAgICBsb2NhbERhdGE6ICdzaXRlc0xvY2FsRGF0YScsXHJcbiAgICBuZXZlckRvbWFpbnM6ICduZXZlckRvbWFpbnMnLFxyXG59O1xyXG5cclxuY29uc3QgRG9tYWluTWF0Y2hCbGFja2xpc3QgPSBuZXcgTWFwPHN0cmluZywgU2V0PHN0cmluZz4+KFtcclxuICAgIFsnZ29vZ2xlLmNvbScsIG5ldyBTZXQoWydzY3JpcHQuZ29vZ2xlLmNvbSddKV0sXHJcbl0pO1xyXG5cclxuZXhwb3J0IGNsYXNzIENpcGhlclNlcnZpY2UgaW1wbGVtZW50cyBDaXBoZXJTZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICBfZGVjcnlwdGVkQ2lwaGVyQ2FjaGU6IENpcGhlclZpZXdbXTtcclxuXHJcbiAgICBwcml2YXRlIHNvcnRlZENpcGhlcnNDYWNoZTogU29ydGVkQ2lwaGVyc0NhY2hlID0gbmV3IFNvcnRlZENpcGhlcnNDYWNoZSh0aGlzLnNvcnRDaXBoZXJzQnlMYXN0VXNlZCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLCBwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHNldHRpbmdzU2VydmljZTogU2V0dGluZ3NTZXJ2aWNlLCBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBmaWxlVXBsb2FkU2VydmljZTogRmlsZVVwbG9hZFNlcnZpY2UsIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaTE4blNlcnZpY2U6IEkxOG5TZXJ2aWNlLCBwcml2YXRlIHNlYXJjaFNlcnZpY2U6ICgpID0+IFNlYXJjaFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRlY3J5cHRlZENpcGhlckNhY2hlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWNyeXB0ZWRDaXBoZXJDYWNoZTtcclxuICAgIH1cclxuICAgIHNldCBkZWNyeXB0ZWRDaXBoZXJDYWNoZSh2YWx1ZTogQ2lwaGVyVmlld1tdKSB7XHJcbiAgICAgICAgdGhpcy5fZGVjcnlwdGVkQ2lwaGVyQ2FjaGUgPSB2YWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5zZWFyY2hTZXJ2aWNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoU2VydmljZSgpLmNsZWFySW5kZXgoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoU2VydmljZSgpLmluZGV4Q2lwaGVycygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyQ2FjaGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zb3J0ZWRDaXBoZXJzQ2FjaGUuY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlbmNyeXB0KG1vZGVsOiBDaXBoZXJWaWV3LCBrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXksIG9yaWdpbmFsQ2lwaGVyOiBDaXBoZXIgPSBudWxsKTogUHJvbWlzZTxDaXBoZXI+IHtcclxuICAgICAgICAvLyBBZGp1c3QgcGFzc3dvcmQgaGlzdG9yeVxyXG4gICAgICAgIGlmIChtb2RlbC5pZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbENpcGhlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbENpcGhlciA9IGF3YWl0IHRoaXMuZ2V0KG1vZGVsLmlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxDaXBoZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdDaXBoZXIgPSBhd2FpdCBvcmlnaW5hbENpcGhlci5kZWNyeXB0KCk7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5wYXNzd29yZEhpc3RvcnkgPSBleGlzdGluZ0NpcGhlci5wYXNzd29yZEhpc3RvcnkgfHwgW107XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZWwudHlwZSA9PT0gQ2lwaGVyVHlwZS5Mb2dpbiAmJiBleGlzdGluZ0NpcGhlci50eXBlID09PSBDaXBoZXJUeXBlLkxvZ2luKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ2lwaGVyLmxvZ2luLnBhc3N3b3JkICE9IG51bGwgJiYgZXhpc3RpbmdDaXBoZXIubG9naW4ucGFzc3dvcmQgIT09ICcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nQ2lwaGVyLmxvZ2luLnBhc3N3b3JkICE9PSBtb2RlbC5sb2dpbi5wYXNzd29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwaCA9IG5ldyBQYXNzd29yZEhpc3RvcnlWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBoLnBhc3N3b3JkID0gZXhpc3RpbmdDaXBoZXIubG9naW4ucGFzc3dvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBoLmxhc3RVc2VkRGF0ZSA9IG1vZGVsLmxvZ2luLnBhc3N3b3JkUmV2aXNpb25EYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwucGFzc3dvcmRIaXN0b3J5LnNwbGljZSgwLCAwLCBwaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwubG9naW4ucGFzc3dvcmRSZXZpc2lvbkRhdGUgPSBleGlzdGluZ0NpcGhlci5sb2dpbi5wYXNzd29yZFJldmlzaW9uRGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdDaXBoZXIuaGFzRmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdIaWRkZW5GaWVsZHMgPSBleGlzdGluZ0NpcGhlci5maWVsZHMuZmlsdGVyKGYgPT4gZi50eXBlID09PSBGaWVsZFR5cGUuSGlkZGVuICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYubmFtZSAhPSBudWxsICYmIGYubmFtZSAhPT0gJycgJiYgZi52YWx1ZSAhPSBudWxsICYmIGYudmFsdWUgIT09ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoaWRkZW5GaWVsZHMgPSBtb2RlbC5maWVsZHMgPT0gbnVsbCA/IFtdIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuZmllbGRzLmZpbHRlcihmID0+IGYudHlwZSA9PT0gRmllbGRUeXBlLkhpZGRlbiAmJiBmLm5hbWUgIT0gbnVsbCAmJiBmLm5hbWUgIT09ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0hpZGRlbkZpZWxkcy5mb3JFYWNoKGVmID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlZEZpZWxkID0gaGlkZGVuRmllbGRzLmZpbmQoZiA9PiBmLm5hbWUgPT09IGVmLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlZEZpZWxkID09IG51bGwgfHwgbWF0Y2hlZEZpZWxkLnZhbHVlICE9PSBlZi52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGggPSBuZXcgUGFzc3dvcmRIaXN0b3J5VmlldygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGgucGFzc3dvcmQgPSBlZi5uYW1lICsgJzogJyArIGVmLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGgubGFzdFVzZWREYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnBhc3N3b3JkSGlzdG9yeS5zcGxpY2UoMCwgMCwgcGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1vZGVsLnBhc3N3b3JkSGlzdG9yeSAhPSBudWxsICYmIG1vZGVsLnBhc3N3b3JkSGlzdG9yeS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIG1vZGVsLnBhc3N3b3JkSGlzdG9yeSA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwucGFzc3dvcmRIaXN0b3J5ICE9IG51bGwgJiYgbW9kZWwucGFzc3dvcmRIaXN0b3J5Lmxlbmd0aCA+IDUpIHtcclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgc2F2ZSBsYXN0IDUgaGlzdG9yeVxyXG4gICAgICAgICAgICAgICAgbW9kZWwucGFzc3dvcmRIaXN0b3J5ID0gbW9kZWwucGFzc3dvcmRIaXN0b3J5LnNsaWNlKDAsIDUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjaXBoZXIgPSBuZXcgQ2lwaGVyKCk7XHJcbiAgICAgICAgY2lwaGVyLmlkID0gbW9kZWwuaWQ7XHJcbiAgICAgICAgY2lwaGVyLmZvbGRlcklkID0gbW9kZWwuZm9sZGVySWQ7XHJcbiAgICAgICAgY2lwaGVyLmZhdm9yaXRlID0gbW9kZWwuZmF2b3JpdGU7XHJcbiAgICAgICAgY2lwaGVyLm9yZ2FuaXphdGlvbklkID0gbW9kZWwub3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgY2lwaGVyLnR5cGUgPSBtb2RlbC50eXBlO1xyXG4gICAgICAgIGNpcGhlci5jb2xsZWN0aW9uSWRzID0gbW9kZWwuY29sbGVjdGlvbklkcztcclxuICAgICAgICBjaXBoZXIucmV2aXNpb25EYXRlID0gbW9kZWwucmV2aXNpb25EYXRlO1xyXG4gICAgICAgIGNpcGhlci5yZXByb21wdCA9IG1vZGVsLnJlcHJvbXB0O1xyXG5cclxuICAgICAgICBpZiAoa2V5ID09IG51bGwgJiYgY2lwaGVyLm9yZ2FuaXphdGlvbklkICE9IG51bGwpIHtcclxuICAgICAgICAgICAga2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmdldE9yZ0tleShjaXBoZXIub3JnYW5pemF0aW9uSWQpO1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGVuY3J5cHQgY2lwaGVyIGZvciBvcmdhbml6YXRpb24uIE5vIGtleS4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgIHRoaXMuZW5jcnlwdE9ialByb3BlcnR5KG1vZGVsLCBjaXBoZXIsIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBub3RlczogbnVsbCxcclxuICAgICAgICAgICAgfSwga2V5KSxcclxuICAgICAgICAgICAgdGhpcy5lbmNyeXB0Q2lwaGVyRGF0YShjaXBoZXIsIG1vZGVsLCBrZXkpLFxyXG4gICAgICAgICAgICB0aGlzLmVuY3J5cHRGaWVsZHMobW9kZWwuZmllbGRzLCBrZXkpLnRoZW4oZmllbGRzID0+IHtcclxuICAgICAgICAgICAgICAgIGNpcGhlci5maWVsZHMgPSBmaWVsZHM7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB0aGlzLmVuY3J5cHRQYXNzd29yZEhpc3Rvcmllcyhtb2RlbC5wYXNzd29yZEhpc3RvcnksIGtleSkudGhlbihwaCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjaXBoZXIucGFzc3dvcmRIaXN0b3J5ID0gcGg7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB0aGlzLmVuY3J5cHRBdHRhY2htZW50cyhtb2RlbC5hdHRhY2htZW50cywga2V5KS50aGVuKGF0dGFjaG1lbnRzID0+IHtcclxuICAgICAgICAgICAgICAgIGNpcGhlci5hdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNpcGhlcjtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlbmNyeXB0QXR0YWNobWVudHMoYXR0YWNobWVudHNNb2RlbDogQXR0YWNobWVudFZpZXdbXSwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEF0dGFjaG1lbnRbXT4ge1xyXG4gICAgICAgIGlmIChhdHRhY2htZW50c01vZGVsID09IG51bGwgfHwgYXR0YWNobWVudHNNb2RlbC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwcm9taXNlczogUHJvbWlzZTxhbnk+W10gPSBbXTtcclxuICAgICAgICBjb25zdCBlbmNBdHRhY2htZW50czogQXR0YWNobWVudFtdID0gW107XHJcbiAgICAgICAgYXR0YWNobWVudHNNb2RlbC5mb3JFYWNoKGFzeW5jIG1vZGVsID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXR0YWNobWVudCA9IG5ldyBBdHRhY2htZW50KCk7XHJcbiAgICAgICAgICAgIGF0dGFjaG1lbnQuaWQgPSBtb2RlbC5pZDtcclxuICAgICAgICAgICAgYXR0YWNobWVudC5zaXplID0gbW9kZWwuc2l6ZTtcclxuICAgICAgICAgICAgYXR0YWNobWVudC5zaXplTmFtZSA9IG1vZGVsLnNpemVOYW1lO1xyXG4gICAgICAgICAgICBhdHRhY2htZW50LnVybCA9IG1vZGVsLnVybDtcclxuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuZW5jcnlwdE9ialByb3BlcnR5KG1vZGVsLCBhdHRhY2htZW50LCB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogbnVsbCxcclxuICAgICAgICAgICAgfSwga2V5KS50aGVuKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQua2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHQobW9kZWwua2V5LmtleSwga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVuY0F0dGFjaG1lbnRzLnB1c2goYXR0YWNobWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHByb21pc2UpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcbiAgICAgICAgcmV0dXJuIGVuY0F0dGFjaG1lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGVuY3J5cHRGaWVsZHMoZmllbGRzTW9kZWw6IEZpZWxkVmlld1tdLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8RmllbGRbXT4ge1xyXG4gICAgICAgIGlmICghZmllbGRzTW9kZWwgfHwgIWZpZWxkc01vZGVsLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGVuY0ZpZWxkczogRmllbGRbXSA9IFtdO1xyXG4gICAgICAgIGF3YWl0IGZpZWxkc01vZGVsLnJlZHVjZSgocHJvbWlzZSwgZmllbGQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5lbmNyeXB0RmllbGQoZmllbGQsIGtleSk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oKGVuY0ZpZWxkOiBGaWVsZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZW5jRmllbGRzLnB1c2goZW5jRmllbGQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlbmNGaWVsZHM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZW5jcnlwdEZpZWxkKGZpZWxkTW9kZWw6IEZpZWxkVmlldywga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEZpZWxkPiB7XHJcbiAgICAgICAgY29uc3QgZmllbGQgPSBuZXcgRmllbGQoKTtcclxuICAgICAgICBmaWVsZC50eXBlID0gZmllbGRNb2RlbC50eXBlO1xyXG4gICAgICAgIGZpZWxkLmxpbmtlZElkID0gZmllbGRNb2RlbC5saW5rZWRJZDtcclxuICAgICAgICAvLyBub3JtYWxpemUgYm9vbGVhbiB0eXBlIGZpZWxkIHZhbHVlc1xyXG4gICAgICAgIGlmIChmaWVsZE1vZGVsLnR5cGUgPT09IEZpZWxkVHlwZS5Cb29sZWFuICYmIGZpZWxkTW9kZWwudmFsdWUgIT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICBmaWVsZE1vZGVsLnZhbHVlID0gJ2ZhbHNlJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuZW5jcnlwdE9ialByb3BlcnR5KGZpZWxkTW9kZWwsIGZpZWxkLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIH0sIGtleSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlbmNyeXB0UGFzc3dvcmRIaXN0b3JpZXMocGhNb2RlbHM6IFBhc3N3b3JkSGlzdG9yeVZpZXdbXSwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFBhc3N3b3JkW10+IHtcclxuICAgICAgICBpZiAoIXBoTW9kZWxzIHx8ICFwaE1vZGVscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBlbmNQaHM6IFBhc3N3b3JkW10gPSBbXTtcclxuICAgICAgICBhd2FpdCBwaE1vZGVscy5yZWR1Y2UoKHByb21pc2UsIHBoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZW5jcnlwdFBhc3N3b3JkSGlzdG9yeShwaCwga2V5KTtcclxuICAgICAgICAgICAgfSkudGhlbigoZW5jUGg6IFBhc3N3b3JkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbmNQaHMucHVzaChlbmNQaCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIFByb21pc2UucmVzb2x2ZSgpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVuY1BocztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlbmNyeXB0UGFzc3dvcmRIaXN0b3J5KHBoTW9kZWw6IFBhc3N3b3JkSGlzdG9yeVZpZXcsIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxQYXNzd29yZD4ge1xyXG4gICAgICAgIGNvbnN0IHBoID0gbmV3IFBhc3N3b3JkKCk7XHJcbiAgICAgICAgcGgubGFzdFVzZWREYXRlID0gcGhNb2RlbC5sYXN0VXNlZERhdGU7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuZW5jcnlwdE9ialByb3BlcnR5KHBoTW9kZWwsIHBoLCB7XHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiBudWxsLFxyXG4gICAgICAgIH0sIGtleSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwaDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXQoaWQ6IHN0cmluZyk6IFByb21pc2U8Q2lwaGVyPiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBsb2NhbERhdGEgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxhbnk+KEtleXMubG9jYWxEYXRhKTtcclxuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IENpcGhlckRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChjaXBoZXJzID09IG51bGwgfHwgIWNpcGhlcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXIoY2lwaGVyc1tpZF0sIGZhbHNlLCBsb2NhbERhdGEgPyBsb2NhbERhdGFbaWRdIDogbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0QWxsKCk6IFByb21pc2U8Q2lwaGVyW10+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGNvbnN0IGxvY2FsRGF0YSA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGFueT4oS2V5cy5sb2NhbERhdGEpO1xyXG4gICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfT4oXHJcbiAgICAgICAgICAgIEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCk7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2U6IENpcGhlcltdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBjaXBoZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaXBoZXJzLmhhc093blByb3BlcnR5KGlkKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucHVzaChuZXcgQ2lwaGVyKGNpcGhlcnNbaWRdLCBmYWxzZSwgbG9jYWxEYXRhID8gbG9jYWxEYXRhW2lkXSA6IG51bGwpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9XHJcblxyXG4gICAgQHNlcXVlbnRpYWxpemUoKCkgPT4gJ2dldEFsbERlY3J5cHRlZCcpXHJcbiAgICBhc3luYyBnZXRBbGxEZWNyeXB0ZWQoKTogUHJvbWlzZTxDaXBoZXJWaWV3W10+IHtcclxuICAgICAgICBpZiAodGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaFNlcnZpY2UgIT0gbnVsbCAmJiAodGhpcy5zZWFyY2hTZXJ2aWNlKCkuaW5kZXhlZEVudGl0eUlkID8/IHVzZXJJZCkgIT09IHVzZXJJZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZWFyY2hTZXJ2aWNlKCkuaW5kZXhDaXBoZXJzKHVzZXJJZCwgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkZWNDaXBoZXJzOiBDaXBoZXJWaWV3W10gPSBbXTtcclxuICAgICAgICBjb25zdCBoYXNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzS2V5KCk7XHJcbiAgICAgICAgaWYgKCFoYXNLZXkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBrZXkuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwcm9taXNlczogYW55W10gPSBbXTtcclxuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5nZXRBbGwoKTtcclxuICAgICAgICBjaXBoZXJzLmZvckVhY2goY2lwaGVyID0+IHtcclxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChjaXBoZXIuZGVjcnlwdCgpLnRoZW4oYyA9PiBkZWNDaXBoZXJzLnB1c2goYykpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgICAgIGRlY0NpcGhlcnMuc29ydCh0aGlzLmdldExvY2FsZVNvcnRpbmdGdW5jdGlvbigpKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlID0gZGVjQ2lwaGVycztcclxuICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRBbGxEZWNyeXB0ZWRGb3JHcm91cGluZyhncm91cGluZ0lkOiBzdHJpbmcsIGZvbGRlcjogYm9vbGVhbiA9IHRydWUpOiBQcm9taXNlPENpcGhlclZpZXdbXT4ge1xyXG4gICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLmdldEFsbERlY3J5cHRlZCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2lwaGVycy5maWx0ZXIoY2lwaGVyID0+IHtcclxuICAgICAgICAgICAgaWYgKGNpcGhlci5pc0RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZm9sZGVyICYmIGNpcGhlci5mb2xkZXJJZCA9PT0gZ3JvdXBpbmdJZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZvbGRlciAmJiBjaXBoZXIuY29sbGVjdGlvbklkcyAhPSBudWxsICYmIGNpcGhlci5jb2xsZWN0aW9uSWRzLmluZGV4T2YoZ3JvdXBpbmdJZCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRBbGxEZWNyeXB0ZWRGb3JVcmwodXJsOiBzdHJpbmcsIGluY2x1ZGVPdGhlclR5cGVzPzogQ2lwaGVyVHlwZVtdLFxyXG4gICAgICAgIGRlZmF1bHRNYXRjaDogVXJpTWF0Y2hUeXBlID0gbnVsbCk6IFByb21pc2U8Q2lwaGVyVmlld1tdPiB7XHJcbiAgICAgICAgaWYgKHVybCA9PSBudWxsICYmIGluY2x1ZGVPdGhlclR5cGVzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkb21haW4gPSBVdGlscy5nZXREb21haW4odXJsKTtcclxuICAgICAgICBjb25zdCBlcURvbWFpbnNQcm9taXNlID0gZG9tYWluID09IG51bGwgPyBQcm9taXNlLnJlc29sdmUoW10pIDpcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5nc1NlcnZpY2UuZ2V0RXF1aXZhbGVudERvbWFpbnMoKS50aGVuKChlcURvbWFpbnM6IGFueVtdW10pID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBtYXRjaGVzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZXFEb21haW5zLmZvckVhY2goZXFEb21haW4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcURvbWFpbi5sZW5ndGggJiYgZXFEb21haW4uaW5kZXhPZihkb21haW4pID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IG1hdGNoZXMuY29uY2F0KGVxRG9tYWluKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGRvbWFpbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLmFsbChbZXFEb21haW5zUHJvbWlzZSwgdGhpcy5nZXRBbGxEZWNyeXB0ZWQoKV0pO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoaW5nRG9tYWlucyA9IHJlc3VsdFswXTtcclxuICAgICAgICBjb25zdCBjaXBoZXJzID0gcmVzdWx0WzFdO1xyXG5cclxuICAgICAgICBpZiAoZGVmYXVsdE1hdGNoID09IG51bGwpIHtcclxuICAgICAgICAgICAgZGVmYXVsdE1hdGNoID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8VXJpTWF0Y2hUeXBlPihDb25zdGFudHNTZXJ2aWNlLmRlZmF1bHRVcmlNYXRjaCk7XHJcbiAgICAgICAgICAgIGlmIChkZWZhdWx0TWF0Y2ggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdE1hdGNoID0gVXJpTWF0Y2hUeXBlLkRvbWFpbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNpcGhlcnMuZmlsdGVyKGNpcGhlciA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjaXBoZXIuZGVsZXRlZERhdGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3RoZXJUeXBlcyAhPSBudWxsICYmIGluY2x1ZGVPdGhlclR5cGVzLmluZGV4T2YoY2lwaGVyLnR5cGUpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXJsICE9IG51bGwgJiYgY2lwaGVyLnR5cGUgPT09IENpcGhlclR5cGUuTG9naW4gJiYgY2lwaGVyLmxvZ2luLnVyaXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaXBoZXIubG9naW4udXJpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHUgPSBjaXBoZXIubG9naW4udXJpc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodS51cmkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gdS5tYXRjaCA9PSBudWxsID8gZGVmYXVsdE1hdGNoIDogdS5tYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVXJpTWF0Y2hUeXBlLkRvbWFpbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21haW4gIT0gbnVsbCAmJiB1LmRvbWFpbiAhPSBudWxsICYmIG1hdGNoaW5nRG9tYWlucy5pbmRleE9mKHUuZG9tYWluKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERvbWFpbk1hdGNoQmxhY2tsaXN0Lmhhcyh1LmRvbWFpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9tYWluVXJsSG9zdCA9IFV0aWxzLmdldEhvc3QodXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFEb21haW5NYXRjaEJsYWNrbGlzdC5nZXQodS5kb21haW4pLmhhcyhkb21haW5VcmxIb3N0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBVcmlNYXRjaFR5cGUuSG9zdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybEhvc3QgPSBVdGlscy5nZXRIb3N0KHVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJsSG9zdCAhPSBudWxsICYmIHVybEhvc3QgPT09IFV0aWxzLmdldEhvc3QodS51cmkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBVcmlNYXRjaFR5cGUuRXhhY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJsID09PSB1LnVyaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVXJpTWF0Y2hUeXBlLlN0YXJ0c1dpdGg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJsLnN0YXJ0c1dpdGgodS51cmkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBVcmlNYXRjaFR5cGUuUmVndWxhckV4cHJlc3Npb246XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh1LnVyaSwgJ2knKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXgudGVzdCh1cmwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBVcmlNYXRjaFR5cGUuTmV2ZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRBbGxGcm9tQXBpRm9yT3JnYW5pemF0aW9uKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPENpcGhlclZpZXdbXT4ge1xyXG4gICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZ2V0Q2lwaGVyc09yZ2FuaXphdGlvbihvcmdhbml6YXRpb25JZCk7XHJcbiAgICAgICAgaWYgKGNpcGhlcnMgIT0gbnVsbCAmJiBjaXBoZXJzLmRhdGEgIT0gbnVsbCAmJiBjaXBoZXJzLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY0NpcGhlcnM6IENpcGhlclZpZXdbXSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9taXNlczogYW55W10gPSBbXTtcclxuICAgICAgICAgICAgY2lwaGVycy5kYXRhLmZvckVhY2gociA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IENpcGhlckRhdGEocik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBuZXcgQ2lwaGVyKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChjaXBoZXIuZGVjcnlwdCgpLnRoZW4oYyA9PiBkZWNDaXBoZXJzLnB1c2goYykpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuICAgICAgICAgICAgZGVjQ2lwaGVycy5zb3J0KHRoaXMuZ2V0TG9jYWxlU29ydGluZ0Z1bmN0aW9uKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVjQ2lwaGVycztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldExhc3RVc2VkRm9yVXJsKHVybDogc3RyaW5nLCBhdXRvZmlsbE9uUGFnZUxvYWQ6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8Q2lwaGVyVmlldz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENpcGhlckZvclVybCh1cmwsIHRydWUsIGZhbHNlLCBhdXRvZmlsbE9uUGFnZUxvYWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldExhc3RMYXVuY2hlZEZvclVybCh1cmw6IHN0cmluZywgYXV0b2ZpbGxPblBhZ2VMb2FkOiBib29sZWFuID0gZmFsc2UpOiBQcm9taXNlPENpcGhlclZpZXc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaXBoZXJGb3JVcmwodXJsLCBmYWxzZSwgdHJ1ZSwgYXV0b2ZpbGxPblBhZ2VMb2FkKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXROZXh0Q2lwaGVyRm9yVXJsKHVybDogc3RyaW5nKTogUHJvbWlzZTxDaXBoZXJWaWV3PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2lwaGVyRm9yVXJsKHVybCwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTGFzdFVzZWRJbmRleEZvclVybCh1cmw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc29ydGVkQ2lwaGVyc0NhY2hlLnVwZGF0ZUxhc3RVc2VkSW5kZXgodXJsKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1cGRhdGVMYXN0VXNlZERhdGUoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGxldCBjaXBoZXJzTG9jYWxEYXRhID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8YW55PihLZXlzLmxvY2FsRGF0YSk7XHJcbiAgICAgICAgaWYgKCFjaXBoZXJzTG9jYWxEYXRhKSB7XHJcbiAgICAgICAgICAgIGNpcGhlcnNMb2NhbERhdGEgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaXBoZXJzTG9jYWxEYXRhW2lkXSkge1xyXG4gICAgICAgICAgICBjaXBoZXJzTG9jYWxEYXRhW2lkXS5sYXN0VXNlZERhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjaXBoZXJzTG9jYWxEYXRhW2lkXSA9IHtcclxuICAgICAgICAgICAgICAgIGxhc3RVc2VkRGF0ZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5sb2NhbERhdGEsIGNpcGhlcnNMb2NhbERhdGEpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlW2ldO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkLmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGVkLmxvY2FsRGF0YSA9IGNpcGhlcnNMb2NhbERhdGFbaWRdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdXBkYXRlTGFzdExhdW5jaGVkRGF0ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgbGV0IGNpcGhlcnNMb2NhbERhdGEgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxhbnk+KEtleXMubG9jYWxEYXRhKTtcclxuICAgICAgICBpZiAoIWNpcGhlcnNMb2NhbERhdGEpIHtcclxuICAgICAgICAgICAgY2lwaGVyc0xvY2FsRGF0YSA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNpcGhlcnNMb2NhbERhdGFbaWRdKSB7XHJcbiAgICAgICAgICAgIGNpcGhlcnNMb2NhbERhdGFbaWRdLmxhc3RMYXVuY2hlZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNpcGhlcnNMb2NhbERhdGFbaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgbGFzdFVzZWREYXRlOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmxvY2FsRGF0YSwgY2lwaGVyc0xvY2FsRGF0YSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGVbaV07XHJcbiAgICAgICAgICAgIGlmIChjYWNoZWQuaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICBjYWNoZWQubG9jYWxEYXRhID0gY2lwaGVyc0xvY2FsRGF0YVtpZF07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzYXZlTmV2ZXJEb21haW4oZG9tYWluOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBpZiAoZG9tYWluID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGRvbWFpbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogYW55OyB9PihLZXlzLm5ldmVyRG9tYWlucyk7XHJcbiAgICAgICAgaWYgKCFkb21haW5zKSB7XHJcbiAgICAgICAgICAgIGRvbWFpbnMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9tYWluc1tkb21haW5dID0gbnVsbDtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5uZXZlckRvbWFpbnMsIGRvbWFpbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVXaXRoU2VydmVyKGNpcGhlcjogQ2lwaGVyKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBsZXQgcmVzcG9uc2U6IENpcGhlclJlc3BvbnNlO1xyXG4gICAgICAgIGlmIChjaXBoZXIuaWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoY2lwaGVyLmNvbGxlY3Rpb25JZHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBDaXBoZXJDcmVhdGVSZXF1ZXN0KGNpcGhlcik7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0Q2lwaGVyQ3JlYXRlKHJlcXVlc3QpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBDaXBoZXJSZXF1ZXN0KGNpcGhlcik7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0Q2lwaGVyKHJlcXVlc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNpcGhlci5pZCA9IHJlc3BvbnNlLmlkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgQ2lwaGVyUmVxdWVzdChjaXBoZXIpO1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wdXRDaXBoZXIoY2lwaGVyLmlkLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBDaXBoZXJEYXRhKHJlc3BvbnNlLCB1c2VySWQsIGNpcGhlci5jb2xsZWN0aW9uSWRzKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnVwc2VydChkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzaGFyZVdpdGhTZXJ2ZXIoY2lwaGVyOiBDaXBoZXJWaWV3LCBvcmdhbml6YXRpb25JZDogc3RyaW5nLCBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgYXR0YWNobWVudFByb21pc2VzOiBQcm9taXNlPGFueT5bXSA9IFtdO1xyXG4gICAgICAgIGlmIChjaXBoZXIuYXR0YWNobWVudHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjaXBoZXIuYXR0YWNobWVudHMuZm9yRWFjaChhdHRhY2htZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChhdHRhY2htZW50LmtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudFByb21pc2VzLnB1c2godGhpcy5zaGFyZUF0dGFjaG1lbnRXaXRoU2VydmVyKGF0dGFjaG1lbnQsIGNpcGhlci5pZCwgb3JnYW5pemF0aW9uSWQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGF0dGFjaG1lbnRQcm9taXNlcyk7XHJcblxyXG4gICAgICAgIGNpcGhlci5vcmdhbml6YXRpb25JZCA9IG9yZ2FuaXphdGlvbklkO1xyXG4gICAgICAgIGNpcGhlci5jb2xsZWN0aW9uSWRzID0gY29sbGVjdGlvbklkcztcclxuICAgICAgICBjb25zdCBlbmNDaXBoZXIgPSBhd2FpdCB0aGlzLmVuY3J5cHQoY2lwaGVyKTtcclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IENpcGhlclNoYXJlUmVxdWVzdChlbmNDaXBoZXIpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dFNoYXJlQ2lwaGVyKGNpcGhlci5pZCwgcmVxdWVzdCk7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBkYXRhID0gbmV3IENpcGhlckRhdGEocmVzcG9uc2UsIHVzZXJJZCwgY29sbGVjdGlvbklkcyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cHNlcnQoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2hhcmVNYW55V2l0aFNlcnZlcihjaXBoZXJzOiBDaXBoZXJWaWV3W10sIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCBwcm9taXNlczogUHJvbWlzZTxhbnk+W10gPSBbXTtcclxuICAgICAgICBjb25zdCBlbmNDaXBoZXJzOiBDaXBoZXJbXSA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2lwaGVyIG9mIGNpcGhlcnMpIHtcclxuICAgICAgICAgICAgY2lwaGVyLm9yZ2FuaXphdGlvbklkID0gb3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgICAgIGNpcGhlci5jb2xsZWN0aW9uSWRzID0gY29sbGVjdGlvbklkcztcclxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmVuY3J5cHQoY2lwaGVyKS50aGVuKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgZW5jQ2lwaGVycy5wdXNoKGMpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IENpcGhlckJ1bGtTaGFyZVJlcXVlc3QoZW5jQ2lwaGVycywgY29sbGVjdGlvbklkcyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dFNoYXJlQ2lwaGVycyhyZXF1ZXN0KTtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBzZXJ0KGVuY0NpcGhlcnMubWFwKGMgPT4gYy50b0NpcGhlckRhdGEodXNlcklkKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVBdHRhY2htZW50V2l0aFNlcnZlcihjaXBoZXI6IENpcGhlciwgdW5lbmNyeXB0ZWRGaWxlOiBhbnksIGFkbWluID0gZmFsc2UpOiBQcm9taXNlPENpcGhlcj4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcih1bmVuY3J5cHRlZEZpbGUpO1xyXG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gYXN5bmMgKGV2dDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNEYXRhID0gYXdhaXQgdGhpcy5zYXZlQXR0YWNobWVudFJhd1dpdGhTZXJ2ZXIoY2lwaGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmVuY3J5cHRlZEZpbGUubmFtZSwgZXZ0LnRhcmdldC5yZXN1bHQsIGFkbWluKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNEYXRhKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlYWRlci5vbmVycm9yID0gZXZ0ID0+IHtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgnRXJyb3IgcmVhZGluZyBmaWxlLicpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVBdHRhY2htZW50UmF3V2l0aFNlcnZlcihjaXBoZXI6IENpcGhlciwgZmlsZW5hbWU6IHN0cmluZyxcclxuICAgICAgICBkYXRhOiBBcnJheUJ1ZmZlciwgYWRtaW4gPSBmYWxzZSk6IFByb21pc2U8Q2lwaGVyPiB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmdldE9yZ0tleShjaXBoZXIub3JnYW5pemF0aW9uSWQpO1xyXG4gICAgICAgIGNvbnN0IGVuY0ZpbGVOYW1lID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHQoZmlsZW5hbWUsIGtleSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGFFbmNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UubWFrZUVuY0tleShrZXkpO1xyXG4gICAgICAgIGNvbnN0IGVuY0RhdGEgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdFRvQnl0ZXMoZGF0YSwgZGF0YUVuY0tleVswXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IEF0dGFjaG1lbnRSZXF1ZXN0ID0ge1xyXG4gICAgICAgICAgICBrZXk6IGRhdGFFbmNLZXlbMV0uZW5jcnlwdGVkU3RyaW5nLFxyXG4gICAgICAgICAgICBmaWxlTmFtZTogZW5jRmlsZU5hbWUuZW5jcnlwdGVkU3RyaW5nLFxyXG4gICAgICAgICAgICBmaWxlU2l6ZTogZW5jRGF0YS5idWZmZXIuYnl0ZUxlbmd0aCxcclxuICAgICAgICAgICAgYWRtaW5SZXF1ZXN0OiBhZG1pbixcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgcmVzcG9uc2U6IENpcGhlclJlc3BvbnNlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwbG9hZERhdGFSZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0Q2lwaGVyQXR0YWNobWVudChjaXBoZXIuaWQsIHJlcXVlc3QpO1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IGFkbWluID8gdXBsb2FkRGF0YVJlc3BvbnNlLmNpcGhlck1pbmlSZXNwb25zZSA6IHVwbG9hZERhdGFSZXNwb25zZS5jaXBoZXJSZXNwb25zZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5maWxlVXBsb2FkU2VydmljZS51cGxvYWRDaXBoZXJBdHRhY2htZW50KGFkbWluLCB1cGxvYWREYXRhUmVzcG9uc2UsIGVuY0ZpbGVOYW1lLCBlbmNEYXRhKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3JSZXNwb25zZSAmJiAoZSBhcyBFcnJvclJlc3BvbnNlKS5zdGF0dXNDb2RlID09PSA0MDQgfHwgKGUgYXMgRXJyb3JSZXNwb25zZSkuc3RhdHVzQ29kZSA9PT0gNDA1KSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMubGVnYWN5U2VydmVyQXR0YWNobWVudEZpbGVVcGxvYWQoYWRtaW4sIGNpcGhlci5pZCwgZW5jRmlsZU5hbWUsIGVuY0RhdGEsIGRhdGFFbmNLZXlbMV0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBFcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKGUgYXMgRXJyb3JSZXNwb25zZSkuZ2V0U2luZ2xlTWVzc2FnZSgpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3QgY0RhdGEgPSBuZXcgQ2lwaGVyRGF0YShyZXNwb25zZSwgdXNlcklkLCBjaXBoZXIuY29sbGVjdGlvbklkcyk7XHJcbiAgICAgICAgaWYgKCFhZG1pbikge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwc2VydChjRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgQ2lwaGVyKGNEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIE1hciAyNSAyMDIxOiBUaGlzIG1ldGhvZCBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGRpcmVjdCB1cGxvYWRzLlxyXG4gICAgICogVGhpcyBtZXRob2Qgc3RpbGwgZXhpc3RzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggb2xkIHNlcnZlciB2ZXJzaW9ucy5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgbGVnYWN5U2VydmVyQXR0YWNobWVudEZpbGVVcGxvYWQoYWRtaW46IGJvb2xlYW4sIGNpcGhlcklkOiBzdHJpbmcsIGVuY0ZpbGVOYW1lOiBFbmNTdHJpbmcsXHJcbiAgICAgICAgZW5jRGF0YTogRW5jQXJyYXlCdWZmZXIsIGtleTogRW5jU3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2VuY0RhdGEuYnVmZmVyXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB9KTtcclxuICAgICAgICAgICAgZmQuYXBwZW5kKCdrZXknLCBrZXkuZW5jcnlwdGVkU3RyaW5nKTtcclxuICAgICAgICAgICAgZmQuYXBwZW5kKCdkYXRhJywgYmxvYiwgZW5jRmlsZU5hbWUuZW5jcnlwdGVkU3RyaW5nKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChVdGlscy5pc05vZGUgJiYgIVV0aWxzLmlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKCdrZXknLCBrZXkuZW5jcnlwdGVkU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZCgnZGF0YScsIEJ1ZmZlci5mcm9tKGVuY0RhdGEuYnVmZmVyKSBhcyBhbnksIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlcGF0aDogZW5jRmlsZU5hbWUuZW5jcnlwdGVkU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyxcclxuICAgICAgICAgICAgICAgIH0gYXMgYW55KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXNwb25zZTogQ2lwaGVyUmVzcG9uc2U7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGFkbWluKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0Q2lwaGVyQXR0YWNobWVudEFkbWluTGVnYWN5KGNpcGhlcklkLCBmZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0Q2lwaGVyQXR0YWNobWVudExlZ2FjeShjaXBoZXJJZCwgZmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKGUgYXMgRXJyb3JSZXNwb25zZSkuZ2V0U2luZ2xlTWVzc2FnZSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzYXZlQ29sbGVjdGlvbnNXaXRoU2VydmVyKGNpcGhlcjogQ2lwaGVyKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IENpcGhlckNvbGxlY3Rpb25zUmVxdWVzdChjaXBoZXIuY29sbGVjdGlvbklkcyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dENpcGhlckNvbGxlY3Rpb25zKGNpcGhlci5pZCwgcmVxdWVzdCk7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBkYXRhID0gY2lwaGVyLnRvQ2lwaGVyRGF0YSh1c2VySWQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBzZXJ0KGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHVwc2VydChjaXBoZXI6IENpcGhlckRhdGEgfCBDaXBoZXJEYXRhW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgbGV0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfT4oXHJcbiAgICAgICAgICAgIEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCk7XHJcbiAgICAgICAgaWYgKGNpcGhlcnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjaXBoZXJzID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2lwaGVyIGluc3RhbmNlb2YgQ2lwaGVyRGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCBjID0gY2lwaGVyIGFzIENpcGhlckRhdGE7XHJcbiAgICAgICAgICAgIGNpcGhlcnNbYy5pZF0gPSBjO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIChjaXBoZXIgYXMgQ2lwaGVyRGF0YVtdKS5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2lwaGVyc1tjLmlkXSA9IGM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCwgY2lwaGVycyk7XHJcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVwbGFjZShjaXBoZXJzOiB7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkLCBjaXBoZXJzKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhcih1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBtb3ZlTWFueVdpdGhTZXJ2ZXIoaWRzOiBzdHJpbmdbXSwgZm9sZGVySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dE1vdmVDaXBoZXJzKG5ldyBDaXBoZXJCdWxrTW92ZVJlcXVlc3QoaWRzLCBmb2xkZXJJZCkpO1xyXG5cclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGxldCBjaXBoZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IENpcGhlckRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChjaXBoZXJzID09IG51bGwpIHtcclxuICAgICAgICAgICAgY2lwaGVycyA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWRzLmZvckVhY2goaWQgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2lwaGVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcclxuICAgICAgICAgICAgICAgIGNpcGhlcnNbaWRdLmZvbGRlcklkID0gZm9sZGVySWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCwgY2lwaGVycyk7XHJcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IENpcGhlckRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChjaXBoZXJzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKGNpcGhlcnNbaWRdID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWxldGUgY2lwaGVyc1tpZF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgKGlkIGFzIHN0cmluZ1tdKS5mb3JFYWNoKGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNpcGhlcnNbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCwgY2lwaGVycyk7XHJcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlV2l0aFNlcnZlcihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZGVsZXRlQ2lwaGVyKGlkKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZShpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlTWFueVdpdGhTZXJ2ZXIoaWRzOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLmRlbGV0ZU1hbnlDaXBoZXJzKG5ldyBDaXBoZXJCdWxrRGVsZXRlUmVxdWVzdChpZHMpKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZShpZHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGRlbGV0ZUF0dGFjaG1lbnQoaWQ6IHN0cmluZywgYXR0YWNobWVudElkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfT4oXHJcbiAgICAgICAgICAgIEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCk7XHJcblxyXG4gICAgICAgIGlmIChjaXBoZXJzID09IG51bGwgfHwgIWNpcGhlcnMuaGFzT3duUHJvcGVydHkoaWQpIHx8IGNpcGhlcnNbaWRdLmF0dGFjaG1lbnRzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaXBoZXJzW2lkXS5hdHRhY2htZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoY2lwaGVyc1tpZF0uYXR0YWNobWVudHNbaV0uaWQgPT09IGF0dGFjaG1lbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgY2lwaGVyc1tpZF0uYXR0YWNobWVudHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkLCBjaXBoZXJzKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWxldGVBdHRhY2htZW50V2l0aFNlcnZlcihpZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5kZWxldGVDaXBoZXJBdHRhY2htZW50KGlkLCBhdHRhY2htZW50SWQpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KChlIGFzIEVycm9yUmVzcG9uc2UpLmdldFNpbmdsZU1lc3NhZ2UoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlQXR0YWNobWVudChpZCwgYXR0YWNobWVudElkKTtcclxuICAgIH1cclxuXHJcbiAgICBzb3J0Q2lwaGVyc0J5TGFzdFVzZWQoYTogQ2lwaGVyVmlldywgYjogQ2lwaGVyVmlldyk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgYUxhc3RVc2VkID0gYS5sb2NhbERhdGEgJiYgYS5sb2NhbERhdGEubGFzdFVzZWREYXRlID8gYS5sb2NhbERhdGEubGFzdFVzZWREYXRlIGFzIG51bWJlciA6IG51bGw7XHJcbiAgICAgICAgY29uc3QgYkxhc3RVc2VkID0gYi5sb2NhbERhdGEgJiYgYi5sb2NhbERhdGEubGFzdFVzZWREYXRlID8gYi5sb2NhbERhdGEubGFzdFVzZWREYXRlIGFzIG51bWJlciA6IG51bGw7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvdGhOb3ROdWxsID0gYUxhc3RVc2VkICE9IG51bGwgJiYgYkxhc3RVc2VkICE9IG51bGw7XHJcbiAgICAgICAgaWYgKGJvdGhOb3ROdWxsICYmIGFMYXN0VXNlZCA8IGJMYXN0VXNlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFMYXN0VXNlZCAhPSBudWxsICYmIGJMYXN0VXNlZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChib3RoTm90TnVsbCAmJiBhTGFzdFVzZWQgPiBiTGFzdFVzZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYkxhc3RVc2VkICE9IG51bGwgJiYgYUxhc3RVc2VkID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBzb3J0Q2lwaGVyc0J5TGFzdFVzZWRUaGVuTmFtZShhOiBDaXBoZXJWaWV3LCBiOiBDaXBoZXJWaWV3KTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNvcnRDaXBoZXJzQnlMYXN0VXNlZChhLCBiKTtcclxuICAgICAgICBpZiAocmVzdWx0ICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRMb2NhbGVTb3J0aW5nRnVuY3Rpb24oKShhLCBiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMb2NhbGVTb3J0aW5nRnVuY3Rpb24oKTogKGE6IENpcGhlclZpZXcsIGI6IENpcGhlclZpZXcpID0+IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBhTmFtZSA9IGEubmFtZTtcclxuICAgICAgICAgICAgbGV0IGJOYW1lID0gYi5uYW1lO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFOYW1lID09IG51bGwgJiYgYk5hbWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhTmFtZSAhPSBudWxsICYmIGJOYW1lID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhTmFtZSA9PSBudWxsICYmIGJOYW1lID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmkxOG5TZXJ2aWNlLmNvbGxhdG9yID8gdGhpcy5pMThuU2VydmljZS5jb2xsYXRvci5jb21wYXJlKGFOYW1lLCBiTmFtZSkgOlxyXG4gICAgICAgICAgICAgICAgYU5hbWUubG9jYWxlQ29tcGFyZShiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSAwIHx8IGEudHlwZSAhPT0gQ2lwaGVyVHlwZS5Mb2dpbiB8fCBiLnR5cGUgIT09IENpcGhlclR5cGUuTG9naW4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhLmxvZ2luLnVzZXJuYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGFOYW1lICs9IGEubG9naW4udXNlcm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChiLmxvZ2luLnVzZXJuYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGJOYW1lICs9IGIubG9naW4udXNlcm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmkxOG5TZXJ2aWNlLmNvbGxhdG9yID8gdGhpcy5pMThuU2VydmljZS5jb2xsYXRvci5jb21wYXJlKGFOYW1lLCBiTmFtZSkgOlxyXG4gICAgICAgICAgICAgICAgYU5hbWUubG9jYWxlQ29tcGFyZShiTmFtZSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzb2Z0RGVsZXRlKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IENpcGhlckRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChjaXBoZXJzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2V0RGVsZXRlZERhdGUgPSAoY2lwaGVySWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2lwaGVyc1tjaXBoZXJJZF0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNpcGhlcnNbY2lwaGVySWRdLmRlbGV0ZWREYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHNldERlbGV0ZWREYXRlKGlkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAoaWQgYXMgc3RyaW5nW10pLmZvckVhY2goc2V0RGVsZXRlZERhdGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCwgY2lwaGVycyk7XHJcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc29mdERlbGV0ZVdpdGhTZXJ2ZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dERlbGV0ZUNpcGhlcihpZCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zb2Z0RGVsZXRlKGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzb2Z0RGVsZXRlTWFueVdpdGhTZXJ2ZXIoaWRzOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dERlbGV0ZU1hbnlDaXBoZXJzKG5ldyBDaXBoZXJCdWxrRGVsZXRlUmVxdWVzdChpZHMpKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnNvZnREZWxldGUoaWRzKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZXN0b3JlKGNpcGhlcjogeyBpZDogc3RyaW5nLCByZXZpc2lvbkRhdGU6IHN0cmluZzsgfSB8IHsgaWQ6IHN0cmluZywgcmV2aXNpb25EYXRlOiBzdHJpbmc7IH1bXSkge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBDaXBoZXJEYXRhOyB9PihcclxuICAgICAgICAgICAgS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNsZWFyRGVsZXRlZERhdGUgPSAoYzogeyBpZDogc3RyaW5nLCByZXZpc2lvbkRhdGU6IHN0cmluZzsgfSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2lwaGVyc1tjLmlkXSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2lwaGVyc1tjLmlkXS5kZWxldGVkRGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGNpcGhlcnNbYy5pZF0ucmV2aXNpb25EYXRlID0gYy5yZXZpc2lvbkRhdGU7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGlmIChjaXBoZXIuY29uc3RydWN0b3IubmFtZSA9PT0gJ0FycmF5Jykge1xyXG4gICAgICAgICAgICAoY2lwaGVyIGFzIHsgaWQ6IHN0cmluZywgcmV2aXNpb25EYXRlOiBzdHJpbmc7IH1bXSkuZm9yRWFjaChjbGVhckRlbGV0ZWREYXRlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjbGVhckRlbGV0ZWREYXRlKGNpcGhlciBhcyB7IGlkOiBzdHJpbmcsIHJldmlzaW9uRGF0ZTogc3RyaW5nOyB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQsIGNpcGhlcnMpO1xyXG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlc3RvcmVXaXRoU2VydmVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dFJlc3RvcmVDaXBoZXIoaWQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVzdG9yZSh7IGlkOiBpZCwgcmV2aXNpb25EYXRlOiByZXNwb25zZS5yZXZpc2lvbkRhdGUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVzdG9yZU1hbnlXaXRoU2VydmVyKGlkczogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dFJlc3RvcmVNYW55Q2lwaGVycyhuZXcgQ2lwaGVyQnVsa1Jlc3RvcmVSZXF1ZXN0KGlkcykpO1xyXG4gICAgICAgIGNvbnN0IHJlc3RvcmVzOiB7IGlkOiBzdHJpbmcsIHJldmlzaW9uRGF0ZTogc3RyaW5nOyB9W10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNpcGhlciBvZiByZXNwb25zZS5kYXRhKSB7XHJcbiAgICAgICAgICAgIHJlc3RvcmVzLnB1c2goeyBpZDogY2lwaGVyLmlkLCByZXZpc2lvbkRhdGU6IGNpcGhlci5yZXZpc2lvbkRhdGUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHRoaXMucmVzdG9yZShyZXN0b3Jlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGVscGVyc1xyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc2hhcmVBdHRhY2htZW50V2l0aFNlcnZlcihhdHRhY2htZW50VmlldzogQXR0YWNobWVudFZpZXcsIGNpcGhlcklkOiBzdHJpbmcsXHJcbiAgICAgICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgYXR0YWNobWVudFJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLm5hdGl2ZUZldGNoKFxyXG4gICAgICAgICAgICBuZXcgUmVxdWVzdChhdHRhY2htZW50Vmlldy51cmwsIHsgY2FjaGU6ICduby1zdG9yZScgfSkpO1xyXG4gICAgICAgIGlmIChhdHRhY2htZW50UmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0ZhaWxlZCB0byBkb3dubG9hZCBhdHRhY2htZW50OiAnICsgYXR0YWNobWVudFJlc3BvbnNlLnN0YXR1cy50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1ZiA9IGF3YWl0IGF0dGFjaG1lbnRSZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xyXG4gICAgICAgIGNvbnN0IGRlY0J1ZiA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5kZWNyeXB0RnJvbUJ5dGVzKGJ1ZiwgbnVsbCk7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmdldE9yZ0tleShvcmdhbml6YXRpb25JZCk7XHJcbiAgICAgICAgY29uc3QgZW5jRmlsZU5hbWUgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChhdHRhY2htZW50Vmlldy5maWxlTmFtZSwga2V5KTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YUVuY0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5tYWtlRW5jS2V5KGtleSk7XHJcbiAgICAgICAgY29uc3QgZW5jRGF0YSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0VG9CeXRlcyhkZWNCdWYsIGRhdGFFbmNLZXlbMF0pO1xyXG5cclxuICAgICAgICBjb25zdCBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZW5jRGF0YS5idWZmZXJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pO1xyXG4gICAgICAgICAgICBmZC5hcHBlbmQoJ2tleScsIGRhdGFFbmNLZXlbMV0uZW5jcnlwdGVkU3RyaW5nKTtcclxuICAgICAgICAgICAgZmQuYXBwZW5kKCdkYXRhJywgYmxvYiwgZW5jRmlsZU5hbWUuZW5jcnlwdGVkU3RyaW5nKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChVdGlscy5pc05vZGUgJiYgIVV0aWxzLmlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKCdrZXknLCBkYXRhRW5jS2V5WzFdLmVuY3J5cHRlZFN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ2RhdGEnLCBCdWZmZXIuZnJvbShlbmNEYXRhLmJ1ZmZlcikgYXMgYW55LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZXBhdGg6IGVuY0ZpbGVOYW1lLmVuY3J5cHRlZFN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXHJcbiAgICAgICAgICAgICAgICB9IGFzIGFueSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucG9zdFNoYXJlQ2lwaGVyQXR0YWNobWVudChjaXBoZXJJZCwgYXR0YWNobWVudFZpZXcuaWQsIGZkLCBvcmdhbml6YXRpb25JZCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKGUgYXMgRXJyb3JSZXNwb25zZSkuZ2V0U2luZ2xlTWVzc2FnZSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBlbmNyeXB0T2JqUHJvcGVydHk8ViBleHRlbmRzIFZpZXcsIEQgZXh0ZW5kcyBEb21haW4+KG1vZGVsOiBWLCBvYmo6IEQsXHJcbiAgICAgICAgbWFwOiBhbnksIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIG1hcCkge1xyXG4gICAgICAgICAgICBpZiAoIW1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gKHRoZVByb3AsIHRoZU9iaikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcCA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGVsUHJvcCA9IChtb2RlbCBhcyBhbnkpWyhtYXBbdGhlUHJvcF0gfHwgdGhlUHJvcCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbFByb3AgJiYgbW9kZWxQcm9wICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jcnlwdG9TZXJ2aWNlLmVuY3J5cHQobW9kZWxQcm9wLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHZhbDogRW5jU3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoZU9iaiBhcyBhbnkpW3RoZVByb3BdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHApO1xyXG4gICAgICAgICAgICB9KShwcm9wLCBvYmopO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZW5jcnlwdENpcGhlckRhdGEoY2lwaGVyOiBDaXBoZXIsIG1vZGVsOiBDaXBoZXJWaWV3LCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSkge1xyXG4gICAgICAgIHN3aXRjaCAoY2lwaGVyLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkxvZ2luOlxyXG4gICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luID0gbmV3IExvZ2luKCk7XHJcbiAgICAgICAgICAgICAgICBjaXBoZXIubG9naW4ucGFzc3dvcmRSZXZpc2lvbkRhdGUgPSBtb2RlbC5sb2dpbi5wYXNzd29yZFJldmlzaW9uRGF0ZTtcclxuICAgICAgICAgICAgICAgIGNpcGhlci5sb2dpbi5hdXRvZmlsbE9uUGFnZUxvYWQgPSBtb2RlbC5sb2dpbi5hdXRvZmlsbE9uUGFnZUxvYWQ7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVuY3J5cHRPYmpQcm9wZXJ0eShtb2RlbC5sb2dpbiwgY2lwaGVyLmxvZ2luLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdG90cDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH0sIGtleSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLmxvZ2luLnVyaXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5sb2dpbi51cmlzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbC5sb2dpbi51cmlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvZ2luVXJpID0gbmV3IExvZ2luVXJpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luVXJpLm1hdGNoID0gbW9kZWwubG9naW4udXJpc1tpXS5tYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmNyeXB0T2JqUHJvcGVydHkobW9kZWwubG9naW4udXJpc1tpXSwgbG9naW5VcmksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVyaTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luLnVyaXMucHVzaChsb2dpblVyaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuU2VjdXJlTm90ZTpcclxuICAgICAgICAgICAgICAgIGNpcGhlci5zZWN1cmVOb3RlID0gbmV3IFNlY3VyZU5vdGUoKTtcclxuICAgICAgICAgICAgICAgIGNpcGhlci5zZWN1cmVOb3RlLnR5cGUgPSBtb2RlbC5zZWN1cmVOb3RlLnR5cGU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5DYXJkOlxyXG4gICAgICAgICAgICAgICAgY2lwaGVyLmNhcmQgPSBuZXcgQ2FyZCgpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmNyeXB0T2JqUHJvcGVydHkobW9kZWwuY2FyZCwgY2lwaGVyLmNhcmQsIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaG9sZGVyTmFtZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBicmFuZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBudW1iZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwTW9udGg6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwWWVhcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfSwga2V5KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLklkZW50aXR5OlxyXG4gICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5ID0gbmV3IElkZW50aXR5KCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVuY3J5cHRPYmpQcm9wZXJ0eShtb2RlbC5pZGVudGl0eSwgY2lwaGVyLmlkZW50aXR5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZU5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgY2l0eTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBwb3N0YWxDb2RlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnk6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBzc246IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc3BvcnROdW1iZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbGljZW5zZU51bWJlcjogbnVsbCxcclxuICAgICAgICAgICAgICAgIH0sIGtleSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY2lwaGVyIHR5cGUuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0Q2lwaGVyRm9yVXJsKHVybDogc3RyaW5nLCBsYXN0VXNlZDogYm9vbGVhbiwgbGFzdExhdW5jaGVkOiBib29sZWFuLCBhdXRvZmlsbE9uUGFnZUxvYWQ6IGJvb2xlYW4pOiBQcm9taXNlPENpcGhlclZpZXc+IHtcclxuICAgICAgICBjb25zdCBjYWNoZUtleSA9IGF1dG9maWxsT25QYWdlTG9hZCA/ICdhdXRvZmlsbE9uUGFnZUxvYWQtJyArIHVybCA6IHVybDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnNvcnRlZENpcGhlcnNDYWNoZS5pc0NhY2hlZChjYWNoZUtleSkpIHtcclxuICAgICAgICAgICAgbGV0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLmdldEFsbERlY3J5cHRlZEZvclVybCh1cmwpO1xyXG4gICAgICAgICAgICBpZiAoIWNpcGhlcnMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXV0b2ZpbGxPblBhZ2VMb2FkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdXRvZmlsbE9uUGFnZUxvYWREZWZhdWx0ID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQoQ29uc3RhbnRzU2VydmljZS5hdXRvRmlsbE9uUGFnZUxvYWREZWZhdWx0S2V5KTtcclxuICAgICAgICAgICAgICAgIGNpcGhlcnMgPSBjaXBoZXJzLmZpbHRlcihjaXBoZXIgPT4gY2lwaGVyLmxvZ2luLmF1dG9maWxsT25QYWdlTG9hZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChjaXBoZXIubG9naW4uYXV0b2ZpbGxPblBhZ2VMb2FkID09IG51bGwgJiYgYXV0b2ZpbGxPblBhZ2VMb2FkRGVmYXVsdCAhPT0gZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaXBoZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNvcnRlZENpcGhlcnNDYWNoZS5hZGRDaXBoZXJzKGNhY2hlS2V5LCBjaXBoZXJzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsYXN0TGF1bmNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ydGVkQ2lwaGVyc0NhY2hlLmdldExhc3RMYXVuY2hlZChjYWNoZUtleSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0VXNlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRDaXBoZXJzQ2FjaGUuZ2V0TGFzdFVzZWQoY2FjaGVLZXkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvcnRlZENpcGhlcnNDYWNoZS5nZXROZXh0KGNhY2hlS2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIENpcGhlckJ1bGtNb3ZlUmVxdWVzdCB7XHJcbiAgICBpZHM6IHN0cmluZ1tdO1xyXG4gICAgZm9sZGVySWQ6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpZHM6IHN0cmluZ1tdLCBmb2xkZXJJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pZHMgPSBpZHMgPT0gbnVsbCA/IFtdIDogaWRzO1xyXG4gICAgICAgIHRoaXMuZm9sZGVySWQgPSBmb2xkZXJJZDtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgQ2lwaGVyQnVsa1Jlc3RvcmVSZXF1ZXN0IHtcclxuICAgIGlkczogc3RyaW5nW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoaWRzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuaWRzID0gaWRzID09IG51bGwgPyBbXSA6IGlkcztcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgQ2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0IHtcclxuICAgIGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uSWRzID0gY29sbGVjdGlvbklkcyA9PSBudWxsID8gW10gOiBjb2xsZWN0aW9uSWRzO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENpcGhlclJlcXVlc3QgfSBmcm9tICcuL2NpcGhlclJlcXVlc3QnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyIH0gZnJvbSAnLi4vZG9tYWluL2NpcGhlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2lwaGVyQ3JlYXRlUmVxdWVzdCB7XHJcbiAgICBjaXBoZXI6IENpcGhlclJlcXVlc3Q7XHJcbiAgICBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjaXBoZXI6IENpcGhlcikge1xyXG4gICAgICAgIHRoaXMuY2lwaGVyID0gbmV3IENpcGhlclJlcXVlc3QoY2lwaGVyKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZHMgPSBjaXBoZXIuY29sbGVjdGlvbklkcztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDaXBoZXJSZXF1ZXN0IH0gZnJvbSAnLi9jaXBoZXJSZXF1ZXN0JztcclxuXHJcbmltcG9ydCB7IENpcGhlciB9IGZyb20gJy4uL2RvbWFpbi9jaXBoZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIENpcGhlclNoYXJlUmVxdWVzdCB7XHJcbiAgICBjaXBoZXI6IENpcGhlclJlcXVlc3Q7XHJcbiAgICBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjaXBoZXI6IENpcGhlcikge1xyXG4gICAgICAgIHRoaXMuY2lwaGVyID0gbmV3IENpcGhlclJlcXVlc3QoY2lwaGVyKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZHMgPSBjaXBoZXIuY29sbGVjdGlvbklkcztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnLi4vdmlldy9jaXBoZXJWaWV3JztcclxuXHJcbmNvbnN0IENhY2hlVFRMID0gMzAwMDtcclxuXHJcbmV4cG9ydCBjbGFzcyBTb3J0ZWRDaXBoZXJzQ2FjaGUge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzb3J0ZWRDaXBoZXJzQnlVcmw6IE1hcDxzdHJpbmcsIENpcGhlcnM+ID0gbmV3IE1hcDxzdHJpbmcsIENpcGhlcnM+KCk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRpbWVvdXRzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNvbXBhcmF0b3I6IChhOiBDaXBoZXJWaWV3LCBiOiBDaXBoZXJWaWV3KSA9PiBudW1iZXIpIHsgfVxyXG5cclxuICAgIGlzQ2FjaGVkKHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydGVkQ2lwaGVyc0J5VXJsLmhhcyh1cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENpcGhlcnModXJsOiBzdHJpbmcsIGNpcGhlcnM6IENpcGhlclZpZXdbXSkge1xyXG4gICAgICAgIGNpcGhlcnMuc29ydCh0aGlzLmNvbXBhcmF0b3IpO1xyXG4gICAgICAgIHRoaXMuc29ydGVkQ2lwaGVyc0J5VXJsLnNldCh1cmwsIG5ldyBDaXBoZXJzKGNpcGhlcnMpKTtcclxuICAgICAgICB0aGlzLnJlc2V0VGltZXIodXJsKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMYXN0VXNlZCh1cmw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMucmVzZXRUaW1lcih1cmwpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQ2FjaGVkKHVybCkgPyB0aGlzLnNvcnRlZENpcGhlcnNCeVVybC5nZXQodXJsKS5nZXRMYXN0VXNlZCgpIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMYXN0TGF1bmNoZWQodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0NhY2hlZCh1cmwpID8gdGhpcy5zb3J0ZWRDaXBoZXJzQnlVcmwuZ2V0KHVybCkuZ2V0TGFzdExhdW5jaGVkKCkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5leHQodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnJlc2V0VGltZXIodXJsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0NhY2hlZCh1cmwpID8gdGhpcy5zb3J0ZWRDaXBoZXJzQnlVcmwuZ2V0KHVybCkuZ2V0TmV4dCgpIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVMYXN0VXNlZEluZGV4KHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDYWNoZWQodXJsKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNvcnRlZENpcGhlcnNCeVVybC5nZXQodXJsKS51cGRhdGVMYXN0VXNlZEluZGV4KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuc29ydGVkQ2lwaGVyc0J5VXJsLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0cy5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVzZXRUaW1lcih1cmw6IHN0cmluZykge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRzLmdldCh1cmwpKTtcclxuICAgICAgICB0aGlzLnRpbWVvdXRzLnNldCh1cmwsIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNvcnRlZENpcGhlcnNCeVVybC5kZWxldGUodXJsKTtcclxuICAgICAgICAgICAgdGhpcy50aW1lb3V0cy5kZWxldGUodXJsKTtcclxuICAgICAgICB9LCBDYWNoZVRUTCkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBDaXBoZXJzIHtcclxuICAgIGxhc3RVc2VkSW5kZXggPSAtMTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNpcGhlcnM6IENpcGhlclZpZXdbXSkgeyB9XHJcblxyXG4gICAgZ2V0TGFzdFVzZWQoKSB7XHJcbiAgICAgICAgdGhpcy5sYXN0VXNlZEluZGV4ID0gTWF0aC5tYXgodGhpcy5sYXN0VXNlZEluZGV4LCAwKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaXBoZXJzW3RoaXMubGFzdFVzZWRJbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGFzdExhdW5jaGVkKCkge1xyXG4gICAgICAgIGNvbnN0IHVzZWRDaXBoZXJzID0gdGhpcy5jaXBoZXJzLmZpbHRlcihjaXBoZXIgPT4gY2lwaGVyLmxvY2FsRGF0YT8ubGFzdExhdW5jaGVkKTtcclxuICAgICAgICBjb25zdCBzb3J0ZWRDaXBoZXJzID0gdXNlZENpcGhlcnMuc29ydCgoeCwgeSkgPT4geS5sb2NhbERhdGEubGFzdExhdW5jaGVkLnZhbHVlT2YoKSAtIHgubG9jYWxEYXRhLmxhc3RMYXVuY2hlZC52YWx1ZU9mKCkpO1xyXG4gICAgICAgIHJldHVybiBzb3J0ZWRDaXBoZXJzWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5leHRJbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMubGFzdFVzZWRJbmRleCArIDEpICUgdGhpcy5jaXBoZXJzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXROZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNpcGhlcnNbdGhpcy5nZXROZXh0SW5kZXgoKV07XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTGFzdFVzZWRJbmRleCgpIHtcclxuICAgICAgICB0aGlzLmxhc3RVc2VkSW5kZXggPSB0aGlzLmdldE5leHRJbmRleCgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgRW5jQXJyYXlCdWZmZXIgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2VuY0FycmF5QnVmZmVyJztcclxuXHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQml0d2FyZGVuRmlsZVVwbG9hZFNlcnZpY2Vcclxue1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlKSB7IH1cclxuXHJcbiAgICBhc3luYyB1cGxvYWQoZW5jcnlwdGVkRmlsZU5hbWU6IHN0cmluZywgZW5jcnlwdGVkRmlsZURhdGE6IEVuY0FycmF5QnVmZmVyLCBhcGlDYWxsOiAoZmQ6IEZvcm1EYXRhKSA9PiBQcm9taXNlPGFueT4pIHtcclxuICAgICAgICBjb25zdCBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZW5jcnlwdGVkRmlsZURhdGEuYnVmZmVyXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB9KTtcclxuICAgICAgICAgICAgZmQuYXBwZW5kKCdkYXRhJywgYmxvYiwgZW5jcnlwdGVkRmlsZU5hbWUpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKFV0aWxzLmlzTm9kZSAmJiAhVXRpbHMuaXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ2RhdGEnLCBCdWZmZXIuZnJvbShlbmNyeXB0ZWRGaWxlRGF0YS5idWZmZXIpIGFzIGFueSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVwYXRoOiBlbmNyeXB0ZWRGaWxlTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXHJcbiAgICAgICAgICAgICAgICB9IGFzIGFueSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCBhcGlDYWxsKGZkKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTZW5kRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL3NlbmREYXRhJztcclxuXHJcbmltcG9ydCB7IFNlbmRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvc2VuZFJlcXVlc3QnO1xyXG5cclxuaW1wb3J0IHsgRXJyb3JSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9lcnJvclJlc3BvbnNlJztcclxuaW1wb3J0IHsgU2VuZFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3NlbmRSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBFbmNBcnJheUJ1ZmZlciB9IGZyb20gJy4uL21vZGVscy9kb21haW4vZW5jQXJyYXlCdWZmZXInO1xyXG5pbXBvcnQgeyBFbmNTdHJpbmcgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2VuY1N0cmluZyc7XHJcbmltcG9ydCB7IFNlbmQgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3NlbmQnO1xyXG5pbXBvcnQgeyBTZW5kRmlsZSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc2VuZEZpbGUnO1xyXG5pbXBvcnQgeyBTZW5kVGV4dCB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc2VuZFRleHQnO1xyXG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3N5bW1ldHJpY0NyeXB0b0tleSc7XHJcblxyXG5pbXBvcnQgeyBGaWxlVXBsb2FkVHlwZSB9IGZyb20gJy4uL2VudW1zL2ZpbGVVcGxvYWRUeXBlJztcclxuaW1wb3J0IHsgU2VuZFR5cGUgfSBmcm9tICcuLi9lbnVtcy9zZW5kVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBTZW5kVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L3NlbmRWaWV3JztcclxuXHJcbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0b0Z1bmN0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9maWxlVXBsb2FkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTZW5kU2VydmljZSBhcyBTZW5kU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NlbmQuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xyXG5cclxuY29uc3QgS2V5cyA9IHtcclxuICAgIHNlbmRzUHJlZml4OiAnc2VuZHNfJyxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZW5kU2VydmljZSBpbXBsZW1lbnRzIFNlbmRTZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgZGVjcnlwdGVkU2VuZENhY2hlOiBTZW5kVmlld1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZSwgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLCBwcml2YXRlIGZpbGVVcGxvYWRTZXJ2aWNlOiBGaWxlVXBsb2FkU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBjcnlwdG9GdW5jdGlvblNlcnZpY2U6IENyeXB0b0Z1bmN0aW9uU2VydmljZSkgeyB9XHJcblxyXG4gICAgY2xlYXJDYWNoZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZFNlbmRDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZW5jcnlwdChtb2RlbDogU2VuZFZpZXcsIGZpbGU6IEZpbGUgfCBBcnJheUJ1ZmZlciwgcGFzc3dvcmQ6IHN0cmluZyxcclxuICAgICAgICBrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFtTZW5kLCBFbmNBcnJheUJ1ZmZlcl0+IHtcclxuICAgICAgICBsZXQgZmlsZURhdGE6IEVuY0FycmF5QnVmZmVyID0gbnVsbDtcclxuICAgICAgICBjb25zdCBzZW5kID0gbmV3IFNlbmQoKTtcclxuICAgICAgICBzZW5kLmlkID0gbW9kZWwuaWQ7XHJcbiAgICAgICAgc2VuZC50eXBlID0gbW9kZWwudHlwZTtcclxuICAgICAgICBzZW5kLmRpc2FibGVkID0gbW9kZWwuZGlzYWJsZWQ7XHJcbiAgICAgICAgc2VuZC5oaWRlRW1haWwgPSBtb2RlbC5oaWRlRW1haWw7XHJcbiAgICAgICAgc2VuZC5tYXhBY2Nlc3NDb3VudCA9IG1vZGVsLm1heEFjY2Vzc0NvdW50O1xyXG4gICAgICAgIGlmIChtb2RlbC5rZXkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBtb2RlbC5rZXkgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yYW5kb21CeXRlcygxNik7XHJcbiAgICAgICAgICAgIG1vZGVsLmNyeXB0b0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5tYWtlU2VuZEtleShtb2RlbC5rZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFzc3dvcmQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXNzd29yZEhhc2ggPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5wYmtkZjIocGFzc3dvcmQsIG1vZGVsLmtleSwgJ3NoYTI1NicsIDEwMDAwMCk7XHJcbiAgICAgICAgICAgIHNlbmQucGFzc3dvcmQgPSBVdGlscy5mcm9tQnVmZmVyVG9CNjQocGFzc3dvcmRIYXNoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VuZC5rZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChtb2RlbC5rZXksIGtleSk7XHJcbiAgICAgICAgc2VuZC5uYW1lID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHQobW9kZWwubmFtZSwgbW9kZWwuY3J5cHRvS2V5KTtcclxuICAgICAgICBzZW5kLm5vdGVzID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHQobW9kZWwubm90ZXMsIG1vZGVsLmNyeXB0b0tleSk7XHJcbiAgICAgICAgaWYgKHNlbmQudHlwZSA9PT0gU2VuZFR5cGUuVGV4dCkge1xyXG4gICAgICAgICAgICBzZW5kLnRleHQgPSBuZXcgU2VuZFRleHQoKTtcclxuICAgICAgICAgICAgc2VuZC50ZXh0LnRleHQgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChtb2RlbC50ZXh0LnRleHQsIG1vZGVsLmNyeXB0b0tleSk7XHJcbiAgICAgICAgICAgIHNlbmQudGV4dC5oaWRkZW4gPSBtb2RlbC50ZXh0LmhpZGRlbjtcclxuICAgICAgICB9IGVsc2UgaWYgKHNlbmQudHlwZSA9PT0gU2VuZFR5cGUuRmlsZSkge1xyXG4gICAgICAgICAgICBzZW5kLmZpbGUgPSBuZXcgU2VuZEZpbGUoKTtcclxuICAgICAgICAgICAgaWYgKGZpbGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtuYW1lLCBkYXRhXSA9IGF3YWl0IHRoaXMuZW5jcnlwdEZpbGVEYXRhKG1vZGVsLmZpbGUuZmlsZU5hbWUsIGZpbGUsIG1vZGVsLmNyeXB0b0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZC5maWxlLmZpbGVOYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVEYXRhID0gYXdhaXQgdGhpcy5wYXJzZUZpbGUoc2VuZCwgZmlsZSwgbW9kZWwuY3J5cHRvS2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtzZW5kLCBmaWxlRGF0YV07XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPFNlbmQ+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGNvbnN0IHNlbmRzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IFNlbmREYXRhOyB9PihcclxuICAgICAgICAgICAgS2V5cy5zZW5kc1ByZWZpeCArIHVzZXJJZCk7XHJcbiAgICAgICAgaWYgKHNlbmRzID09IG51bGwgfHwgIXNlbmRzLmhhc093blByb3BlcnR5KGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgU2VuZChzZW5kc1tpZF0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEFsbCgpOiBQcm9taXNlPFNlbmRbXT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3Qgc2VuZHMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogU2VuZERhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLnNlbmRzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICBjb25zdCByZXNwb25zZTogU2VuZFtdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzZW5kcykge1xyXG4gICAgICAgICAgICBpZiAoc2VuZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKG5ldyBTZW5kKHNlbmRzW2lkXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRBbGxEZWNyeXB0ZWQoKTogUHJvbWlzZTxTZW5kVmlld1tdPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVjcnlwdGVkU2VuZENhY2hlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdGVkU2VuZENhY2hlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaGFzS2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmhhc0tleSgpO1xyXG4gICAgICAgIGlmICghaGFzS2V5KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8ga2V5LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGVjU2VuZHM6IFNlbmRWaWV3W10gPSBbXTtcclxuICAgICAgICBjb25zdCBwcm9taXNlczogUHJvbWlzZTxhbnk+W10gPSBbXTtcclxuICAgICAgICBjb25zdCBzZW5kcyA9IGF3YWl0IHRoaXMuZ2V0QWxsKCk7XHJcbiAgICAgICAgc2VuZHMuZm9yRWFjaChzZW5kID0+IHtcclxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChzZW5kLmRlY3J5cHQoKS50aGVuKGYgPT4gZGVjU2VuZHMucHVzaChmKSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcbiAgICAgICAgZGVjU2VuZHMuc29ydChVdGlscy5nZXRTb3J0RnVuY3Rpb24odGhpcy5pMThuU2VydmljZSwgJ25hbWUnKSk7XHJcblxyXG4gICAgICAgIHRoaXMuZGVjcnlwdGVkU2VuZENhY2hlID0gZGVjU2VuZHM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdGVkU2VuZENhY2hlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVXaXRoU2VydmVyKHNlbmREYXRhOiBbU2VuZCwgRW5jQXJyYXlCdWZmZXJdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFNlbmRSZXF1ZXN0KHNlbmREYXRhWzBdLCBzZW5kRGF0YVsxXT8uYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGxldCByZXNwb25zZTogU2VuZFJlc3BvbnNlO1xyXG4gICAgICAgIGlmIChzZW5kRGF0YVswXS5pZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChzZW5kRGF0YVswXS50eXBlID09PSBTZW5kVHlwZS5UZXh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0U2VuZChyZXF1ZXN0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBsb2FkRGF0YVJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RGaWxlVHlwZVNlbmQocmVxdWVzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB1cGxvYWREYXRhUmVzcG9uc2Uuc2VuZFJlc3BvbnNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmZpbGVVcGxvYWRTZXJ2aWNlLnVwbG9hZFNlbmRGaWxlKHVwbG9hZERhdGFSZXNwb25zZSwgc2VuZERhdGFbMF0uZmlsZS5maWxlTmFtZSwgc2VuZERhdGFbMV0pO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3JSZXNwb25zZSAmJiAoZSBhcyBFcnJvclJlc3BvbnNlKS5zdGF0dXNDb2RlID09PSA0MDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmxlZ2FjeVNlcnZlclNlbmRGaWxlVXBsb2FkKHNlbmREYXRhLCByZXF1ZXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBFcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoZSBhcyBFcnJvclJlc3BvbnNlKS5nZXRTaW5nbGVNZXNzYWdlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNlbmREYXRhWzBdLmlkID0gcmVzcG9uc2UuaWQ7XHJcbiAgICAgICAgICAgIHNlbmREYXRhWzBdLmFjY2Vzc0lkID0gcmVzcG9uc2UuYWNjZXNzSWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucHV0U2VuZChzZW5kRGF0YVswXS5pZCwgcmVxdWVzdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgU2VuZERhdGEocmVzcG9uc2UsIHVzZXJJZCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cHNlcnQoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBNYXIgMjUgMjAyMTogVGhpcyBtZXRob2QgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBkaXJlY3QgdXBsb2Fkcy5cclxuICAgICAqIFRoaXMgbWV0aG9kIHN0aWxsIGV4aXN0cyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIG9sZCBzZXJ2ZXIgdmVyc2lvbnMuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGxlZ2FjeVNlcnZlclNlbmRGaWxlVXBsb2FkKHNlbmREYXRhOiBbU2VuZCwgRW5jQXJyYXlCdWZmZXJdLCByZXF1ZXN0OiBTZW5kUmVxdWVzdCk6IFByb21pc2U8U2VuZFJlc3BvbnNlPlxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtzZW5kRGF0YVsxXS5idWZmZXJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pO1xyXG4gICAgICAgICAgICBmZC5hcHBlbmQoJ21vZGVsJywgSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpO1xyXG4gICAgICAgICAgICBmZC5hcHBlbmQoJ2RhdGEnLCBibG9iLCBzZW5kRGF0YVswXS5maWxlLmZpbGVOYW1lLmVuY3J5cHRlZFN0cmluZyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNOb2RlICYmICFVdGlscy5pc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZCgnbW9kZWwnLCBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSk7XHJcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ2RhdGEnLCBCdWZmZXIuZnJvbShzZW5kRGF0YVsxXS5idWZmZXIpIGFzIGFueSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVwYXRoOiBzZW5kRGF0YVswXS5maWxlLmZpbGVOYW1lLmVuY3J5cHRlZFN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXHJcbiAgICAgICAgICAgICAgICB9IGFzIGFueSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucG9zdFNlbmRGaWxlTGVnYWN5KGZkKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1cHNlcnQoc2VuZDogU2VuZERhdGEgfCBTZW5kRGF0YVtdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGxldCBzZW5kcyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBTZW5kRGF0YTsgfT4oXHJcbiAgICAgICAgICAgIEtleXMuc2VuZHNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChzZW5kcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHNlbmRzID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2VuZCBpbnN0YW5jZW9mIFNlbmREYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHMgPSBzZW5kIGFzIFNlbmREYXRhO1xyXG4gICAgICAgICAgICBzZW5kc1tzLmlkXSA9IHM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgKHNlbmQgYXMgU2VuZERhdGFbXSkuZm9yRWFjaChzID0+IHtcclxuICAgICAgICAgICAgICAgIHNlbmRzW3MuaWRdID0gcztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5zZW5kc1ByZWZpeCArIHVzZXJJZCwgc2VuZHMpO1xyXG4gICAgICAgIHRoaXMuZGVjcnlwdGVkU2VuZENhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZXBsYWNlKHNlbmRzOiB7IFtpZDogc3RyaW5nXTogU2VuZERhdGE7IH0pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuc2VuZHNQcmVmaXggKyB1c2VySWQsIHNlbmRzKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZFNlbmRDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2xlYXIodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMuc2VuZHNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIHRoaXMuZGVjcnlwdGVkU2VuZENhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWxldGUoaWQ6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGNvbnN0IHNlbmRzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IFNlbmREYXRhOyB9PihcclxuICAgICAgICAgICAgS2V5cy5zZW5kc1ByZWZpeCArIHVzZXJJZCk7XHJcbiAgICAgICAgaWYgKHNlbmRzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKHNlbmRzW2lkXSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVsZXRlIHNlbmRzW2lkXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAoaWQgYXMgc3RyaW5nW10pLmZvckVhY2goaSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgc2VuZHNbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuc2VuZHNQcmVmaXggKyB1c2VySWQsIHNlbmRzKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZFNlbmRDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlV2l0aFNlcnZlcihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZGVsZXRlU2VuZChpZCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5kZWxldGUoaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlbW92ZVBhc3N3b3JkV2l0aFNlcnZlcihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wdXRTZW5kUmVtb3ZlUGFzc3dvcmQoaWQpO1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBTZW5kRGF0YShyZXNwb25zZSwgdXNlcklkKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnVwc2VydChkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBhcnNlRmlsZShzZW5kOiBTZW5kLCBmaWxlOiBGaWxlLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8RW5jQXJyYXlCdWZmZXI+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XHJcbiAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBhc3luYyBldnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBbbmFtZSwgZGF0YV0gPSBhd2FpdCB0aGlzLmVuY3J5cHRGaWxlRGF0YShmaWxlLm5hbWUsIGV2dC50YXJnZXQucmVzdWx0IGFzIEFycmF5QnVmZmVyLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbmQuZmlsZS5maWxlTmFtZSA9IG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlYWRlci5vbmVycm9yID0gZXZ0ID0+IHtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgnRXJyb3IgcmVhZGluZyBmaWxlLicpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZW5jcnlwdEZpbGVEYXRhKGZpbGVOYW1lOiBzdHJpbmcsIGRhdGE6IEFycmF5QnVmZmVyLFxyXG4gICAgICAgIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxbRW5jU3RyaW5nLCBFbmNBcnJheUJ1ZmZlcl0+IHtcclxuICAgICAgICBjb25zdCBlbmNGaWxlTmFtZSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KGZpbGVOYW1lLCBrZXkpO1xyXG4gICAgICAgIGNvbnN0IGVuY0ZpbGVEYXRhID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHRUb0J5dGVzKGRhdGEsIGtleSk7XHJcbiAgICAgICAgcmV0dXJuIFtlbmNGaWxlTmFtZSwgZW5jRmlsZURhdGFdO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFNlbmRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VuZFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgU2VuZEZpbGVBcGkgfSBmcm9tICcuLi9hcGkvc2VuZEZpbGVBcGknO1xyXG5pbXBvcnQgeyBTZW5kVGV4dEFwaSB9IGZyb20gJy4uL2FwaS9zZW5kVGV4dEFwaSc7XHJcblxyXG5pbXBvcnQgeyBTZW5kIH0gZnJvbSAnLi4vZG9tYWluL3NlbmQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbmRSZXF1ZXN0IHtcclxuICAgIHR5cGU6IFNlbmRUeXBlO1xyXG4gICAgZmlsZUxlbmd0aD86IG51bWJlcjtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG5vdGVzOiBzdHJpbmc7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIG1heEFjY2Vzc0NvdW50PzogbnVtYmVyO1xyXG4gICAgZXhwaXJhdGlvbkRhdGU6IHN0cmluZztcclxuICAgIGRlbGV0aW9uRGF0ZTogc3RyaW5nO1xyXG4gICAgdGV4dDogU2VuZFRleHRBcGk7XHJcbiAgICBmaWxlOiBTZW5kRmlsZUFwaTtcclxuICAgIHBhc3N3b3JkOiBzdHJpbmc7XHJcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIGhpZGVFbWFpbDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzZW5kOiBTZW5kLCBmaWxlTGVuZ3RoPzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gc2VuZC50eXBlO1xyXG4gICAgICAgIHRoaXMuZmlsZUxlbmd0aCA9IGZpbGVMZW5ndGg7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gc2VuZC5uYW1lID8gc2VuZC5uYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5ub3RlcyA9IHNlbmQubm90ZXMgPyBzZW5kLm5vdGVzLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5tYXhBY2Nlc3NDb3VudCA9IHNlbmQubWF4QWNjZXNzQ291bnQ7XHJcbiAgICAgICAgdGhpcy5leHBpcmF0aW9uRGF0ZSA9IHNlbmQuZXhwaXJhdGlvbkRhdGUgIT0gbnVsbCA/IHNlbmQuZXhwaXJhdGlvbkRhdGUudG9JU09TdHJpbmcoKSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZWxldGlvbkRhdGUgPSBzZW5kLmRlbGV0aW9uRGF0ZSAhPSBudWxsID8gc2VuZC5kZWxldGlvbkRhdGUudG9JU09TdHJpbmcoKSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBzZW5kLmtleSAhPSBudWxsID8gc2VuZC5rZXkuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkID0gc2VuZC5wYXNzd29yZDtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gc2VuZC5kaXNhYmxlZDtcclxuICAgICAgICB0aGlzLmhpZGVFbWFpbCA9IHNlbmQuaGlkZUVtYWlsO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLlRleHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBuZXcgU2VuZFRleHRBcGkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGV4dC50ZXh0ID0gc2VuZC50ZXh0LnRleHQgIT0gbnVsbCA/IHNlbmQudGV4dC50ZXh0LmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQuaGlkZGVuID0gc2VuZC50ZXh0LmhpZGRlbjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLkZpbGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGUgPSBuZXcgU2VuZEZpbGVBcGkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZS5maWxlTmFtZSA9IHNlbmQuZmlsZS5maWxlTmFtZSAhPSBudWxsID8gc2VuZC5maWxlLmZpbGVOYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDaXBoZXJSZXF1ZXN0IH0gZnJvbSAnLi9jaXBoZXJSZXF1ZXN0JztcclxuXHJcbmltcG9ydCB7IENpcGhlciB9IGZyb20gJy4uL2RvbWFpbi9jaXBoZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIENpcGhlcldpdGhJZFJlcXVlc3QgZXh0ZW5kcyBDaXBoZXJSZXF1ZXN0IHtcclxuICAgIGlkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY2lwaGVyOiBDaXBoZXIpIHtcclxuICAgICAgICBzdXBlcihjaXBoZXIpO1xyXG4gICAgICAgIHRoaXMuaWQgPSBjaXBoZXIuaWQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2lwaGVyV2l0aElkUmVxdWVzdCB9IGZyb20gJy4vY2lwaGVyV2l0aElkUmVxdWVzdCc7XHJcblxyXG5pbXBvcnQgeyBDaXBoZXIgfSBmcm9tICcuLi9kb21haW4vY2lwaGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDaXBoZXJCdWxrU2hhcmVSZXF1ZXN0IHtcclxuICAgIGNpcGhlcnM6IENpcGhlcldpdGhJZFJlcXVlc3RbXTtcclxuICAgIGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNpcGhlcnM6IENpcGhlcltdLCBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGlmIChjaXBoZXJzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jaXBoZXJzID0gW107XHJcbiAgICAgICAgICAgIGNpcGhlcnMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2lwaGVycy5wdXNoKG5ldyBDaXBoZXJXaXRoSWRSZXF1ZXN0KGMpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbklkcyA9IGNvbGxlY3Rpb25JZHM7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gQ2lwaGVyUmVwcm9tcHRUeXBlIHtcclxuICAgIE5vbmUgPSAwLFxyXG4gICAgUGFzc3dvcmQgPSAxLFxyXG59XHJcbiIsImV4cG9ydCBlbnVtIEV2ZW50VHlwZSB7XHJcbiAgICBVc2VyX0xvZ2dlZEluID0gMTAwMCxcclxuICAgIFVzZXJfQ2hhbmdlZFBhc3N3b3JkID0gMTAwMSxcclxuICAgIFVzZXJfVXBkYXRlZDJmYSA9IDEwMDIsXHJcbiAgICBVc2VyX0Rpc2FibGVkMmZhID0gMTAwMyxcclxuICAgIFVzZXJfUmVjb3ZlcmVkMmZhID0gMTAwNCxcclxuICAgIFVzZXJfRmFpbGVkTG9nSW4gPSAxMDA1LFxyXG4gICAgVXNlcl9GYWlsZWRMb2dJbjJmYSA9IDEwMDYsXHJcbiAgICBVc2VyX0NsaWVudEV4cG9ydGVkVmF1bHQgPSAxMDA3LFxyXG4gICAgVXNlcl9VcGRhdGVkVGVtcFBhc3N3b3JkID0gMTAwOCxcclxuICAgIFVzZXJfTWlncmF0ZWRLZXlUb0tleUNvbm5lY3RvciA9IDEwMDksXHJcblxyXG4gICAgQ2lwaGVyX0NyZWF0ZWQgPSAxMTAwLFxyXG4gICAgQ2lwaGVyX1VwZGF0ZWQgPSAxMTAxLFxyXG4gICAgQ2lwaGVyX0RlbGV0ZWQgPSAxMTAyLFxyXG4gICAgQ2lwaGVyX0F0dGFjaG1lbnRDcmVhdGVkID0gMTEwMyxcclxuICAgIENpcGhlcl9BdHRhY2htZW50RGVsZXRlZCA9IDExMDQsXHJcbiAgICBDaXBoZXJfU2hhcmVkID0gMTEwNSxcclxuICAgIENpcGhlcl9VcGRhdGVkQ29sbGVjdGlvbnMgPSAxMTA2LFxyXG4gICAgQ2lwaGVyX0NsaWVudFZpZXdlZCA9IDExMDcsXHJcbiAgICBDaXBoZXJfQ2xpZW50VG9nZ2xlZFBhc3N3b3JkVmlzaWJsZSA9IDExMDgsXHJcbiAgICBDaXBoZXJfQ2xpZW50VG9nZ2xlZEhpZGRlbkZpZWxkVmlzaWJsZSA9IDExMDksXHJcbiAgICBDaXBoZXJfQ2xpZW50VG9nZ2xlZENhcmRDb2RlVmlzaWJsZSA9IDExMTAsXHJcbiAgICBDaXBoZXJfQ2xpZW50Q29waWVkUGFzc3dvcmQgPSAxMTExLFxyXG4gICAgQ2lwaGVyX0NsaWVudENvcGllZEhpZGRlbkZpZWxkID0gMTExMixcclxuICAgIENpcGhlcl9DbGllbnRDb3BpZWRDYXJkQ29kZSA9IDExMTMsXHJcbiAgICBDaXBoZXJfQ2xpZW50QXV0b2ZpbGxlZCA9IDExMTQsXHJcbiAgICBDaXBoZXJfU29mdERlbGV0ZWQgPSAxMTE1LFxyXG4gICAgQ2lwaGVyX1Jlc3RvcmVkID0gMTExNixcclxuICAgIENpcGhlcl9DbGllbnRUb2dnbGVkQ2FyZE51bWJlclZpc2libGUgPSAxMTE3LFxyXG5cclxuICAgIENvbGxlY3Rpb25fQ3JlYXRlZCA9IDEzMDAsXHJcbiAgICBDb2xsZWN0aW9uX1VwZGF0ZWQgPSAxMzAxLFxyXG4gICAgQ29sbGVjdGlvbl9EZWxldGVkID0gMTMwMixcclxuXHJcbiAgICBHcm91cF9DcmVhdGVkID0gMTQwMCxcclxuICAgIEdyb3VwX1VwZGF0ZWQgPSAxNDAxLFxyXG4gICAgR3JvdXBfRGVsZXRlZCA9IDE0MDIsXHJcblxyXG4gICAgT3JnYW5pemF0aW9uVXNlcl9JbnZpdGVkID0gMTUwMCxcclxuICAgIE9yZ2FuaXphdGlvblVzZXJfQ29uZmlybWVkID0gMTUwMSxcclxuICAgIE9yZ2FuaXphdGlvblVzZXJfVXBkYXRlZCA9IDE1MDIsXHJcbiAgICBPcmdhbml6YXRpb25Vc2VyX1JlbW92ZWQgPSAxNTAzLFxyXG4gICAgT3JnYW5pemF0aW9uVXNlcl9VcGRhdGVkR3JvdXBzID0gMTUwNCxcclxuICAgIE9yZ2FuaXphdGlvblVzZXJfVW5saW5rZWRTc28gPSAxNTA1LFxyXG4gICAgT3JnYW5pemF0aW9uVXNlcl9SZXNldFBhc3N3b3JkX0Vucm9sbCA9IDE1MDYsXHJcbiAgICBPcmdhbml6YXRpb25Vc2VyX1Jlc2V0UGFzc3dvcmRfV2l0aGRyYXcgPSAxNTA3LFxyXG4gICAgT3JnYW5pemF0aW9uVXNlcl9BZG1pblJlc2V0UGFzc3dvcmQgPSAxNTA4LFxyXG4gICAgT3JnYW5pemF0aW9uVXNlcl9SZXNldFNzb0xpbmsgPSAxNTA5LFxyXG4gICAgT3JnYW5pemF0aW9uVXNlcl9GaXJzdFNzb0xvZ2luID0gMTUxMCxcclxuXHJcbiAgICBPcmdhbml6YXRpb25fVXBkYXRlZCA9IDE2MDAsXHJcbiAgICBPcmdhbml6YXRpb25fUHVyZ2VkVmF1bHQgPSAxNjAxLFxyXG4gICAgLy8gT3JnYW5pemF0aW9uX0NsaWVudEV4cG9ydGVkVmF1bHQgPSAxNjAyLFxyXG4gICAgT3JnYW5pemF0aW9uX1ZhdWx0QWNjZXNzZWQgPSAxNjAzLFxyXG4gICAgT3JnYW5pemF0aW9uX0VuYWJsZWRTc28gPSAxNjA0LFxyXG4gICAgT3JnYW5pemF0aW9uX0Rpc2FibGVkU3NvID0gMTYwNSxcclxuICAgIE9yZ2FuaXphdGlvbl9FbmFibGVkS2V5Q29ubmVjdG9yID0gMTYwNixcclxuICAgIE9yZ2FuaXphdGlvbl9EaXNhYmxlZEtleUNvbm5lY3RvciA9IDE2MDcsXHJcblxyXG4gICAgUG9saWN5X1VwZGF0ZWQgPSAxNzAwLFxyXG5cclxuICAgIFByb3ZpZGVyVXNlcl9JbnZpdGVkID0gMTgwMCxcclxuICAgIFByb3ZpZGVyVXNlcl9Db25maXJtZWQgPSAxODAxLFxyXG4gICAgUHJvdmlkZXJVc2VyX1VwZGF0ZWQgPSAxODAyLFxyXG4gICAgUHJvdmlkZXJVc2VyX1JlbW92ZWQgPSAxODAzLFxyXG5cclxuICAgIFByb3ZpZGVyT3JnYW5pemF0aW9uX0NyZWF0ZWQgPSAxOTAwLFxyXG4gICAgUHJvdmlkZXJPcmdhbml6YXRpb25fQWRkZWQgPSAxOTAxLFxyXG4gICAgUHJvdmlkZXJPcmdhbml6YXRpb25fUmVtb3ZlZCA9IDE5MDIsXHJcbiAgICBQcm92aWRlck9yZ2FuaXphdGlvbl9WYXVsdEFjY2Vzc2VkID0gMTkwMyxcclxufVxyXG4iLCJleHBvcnQgZW51bSBGaWVsZFR5cGUge1xyXG4gICAgVGV4dCA9IDAsXHJcbiAgICBIaWRkZW4gPSAxLFxyXG4gICAgQm9vbGVhbiA9IDIsXHJcbiAgICBMaW5rZWQgPSAzLFxyXG59XHJcbiIsImV4cG9ydCBlbnVtIFBvbGljeVR5cGUge1xyXG4gICAgVHdvRmFjdG9yQXV0aGVudGljYXRpb24gPSAwLCAvLyBSZXF1aXJlcyB1c2VycyB0byBoYXZlIDJmYSBlbmFibGVkXHJcbiAgICBNYXN0ZXJQYXNzd29yZCA9IDEsIC8vIFNldHMgbWluaW11bSByZXF1aXJlbWVudHMgZm9yIG1hc3RlciBwYXNzd29yZCBjb21wbGV4aXR5XHJcbiAgICBQYXNzd29yZEdlbmVyYXRvciA9IDIsIC8vIFNldHMgbWluaW11bSByZXF1aXJlbWVudHMvZGVmYXVsdCB0eXBlIGZvciBnZW5lcmF0ZWQgcGFzc3dvcmRzL3Bhc3NwaHJhc2VzXHJcbiAgICBTaW5nbGVPcmcgPSAzLCAvLyBBbGxvd3MgdXNlcnMgdG8gb25seSBiZSBhcGFydCBvZiBvbmUgb3JnYW5pemF0aW9uXHJcbiAgICBSZXF1aXJlU3NvID0gNCwgLy8gUmVxdWlyZXMgdXNlcnMgdG8gYXV0aGVudGljYXRlIHdpdGggU1NPXHJcbiAgICBQZXJzb25hbE93bmVyc2hpcCA9IDUsIC8vIERpc2FibGVzIHBlcnNvbmFsIHZhdWx0IG93bmVyc2hpcCBmb3IgYWRkaW5nL2Nsb25pbmcgaXRlbXNcclxuICAgIERpc2FibGVTZW5kID0gNiwgLy8gRGlzYWJsZXMgdGhlIGFiaWxpdHkgdG8gY3JlYXRlIGFuZCBlZGl0IEJpdHdhcmRlbiBTZW5kc1xyXG4gICAgU2VuZE9wdGlvbnMgPSA3LCAvLyBTZXRzIHJlc3RyaWN0aW9ucyBvciBkZWZhdWx0cyBmb3IgQml0d2FyZGVuIFNlbmRzXHJcbiAgICBSZXNldFBhc3N3b3JkID0gOCwgLy8gQWxsb3dzIG9yZ3MgdG8gdXNlIHJlc2V0IHBhc3N3b3JkIDogYWxzbyBjYW4gZW5hYmxlIGF1dG8tZW5yb2xsbWVudCBkdXJpbmcgaW52aXRlIGZsb3dcclxuICAgIE1heGltdW1WYXVsdFRpbWVvdXQgPSA5LCAvLyBTZXRzIHRoZSBtYXhpbXVtIGFsbG93ZWQgdmF1bHQgdGltZW91dFxyXG4gICAgRGlzYWJsZVBlcnNvbmFsVmF1bHRFeHBvcnQgPSAxMCwgLy8gRGlzYWJsZSBwZXJzb25hbCB2YXVsdCBleHBvcnRcclxufVxyXG4iLCJpbXBvcnQgKiBhcyB0bGRqcyBmcm9tICd0bGRqcyc7XHJcblxyXG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbmNvbnN0IG5vZGVVUkwgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHJlcXVpcmUoJ3VybCcpIDogbnVsbDtcclxuXHJcbmV4cG9ydCBjbGFzcyBVdGlscyB7XHJcbiAgICBzdGF0aWMgaW5pdGVkID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgaXNOYXRpdmVTY3JpcHQgPSBmYWxzZTtcclxuICAgIHN0YXRpYyBpc05vZGUgPSBmYWxzZTtcclxuICAgIHN0YXRpYyBpc0Jyb3dzZXIgPSB0cnVlO1xyXG4gICAgc3RhdGljIGlzTW9iaWxlQnJvd3NlciA9IGZhbHNlO1xyXG4gICAgc3RhdGljIGlzQXBwbGVNb2JpbGVCcm93c2VyID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgZ2xvYmFsOiBhbnkgPSBudWxsO1xyXG4gICAgc3RhdGljIHRsZEVuZGluZ1JlZ2V4ID0gLy4qXFwuKGNvbXxuZXR8b3JnfGVkdXx1a3xnb3Z8Y2F8ZGV8anB8ZnJ8YXV8cnV8Y2h8aW98ZXN8dXN8Y298eHl6fGluZm98bHl8bWlsKSQvO1xyXG4gICAgLy8gVHJhbnNwaWxlZCB2ZXJzaW9uIG9mIC9cXHB7RW1vamlfUHJlc2VudGF0aW9ufS9ndSB1c2luZyBodHRwczovL21vdGhlcmVmZi5pbi9yZWdleHB1LiBVc2VkIGZvciBjb21wYXRhYmlsaXR5IGluIG9sZGVyIGJyb3dzZXJzLlxyXG4gICAgc3RhdGljIHJlZ2V4cEVtb2ppUHJlc2VudGF0aW9uID0gIC8oPzpbXFx1MjMxQVxcdTIzMUJcXHUyM0U5LVxcdTIzRUNcXHUyM0YwXFx1MjNGM1xcdTI1RkRcXHUyNUZFXFx1MjYxNFxcdTI2MTVcXHUyNjQ4LVxcdTI2NTNcXHUyNjdGXFx1MjY5M1xcdTI2QTFcXHUyNkFBXFx1MjZBQlxcdTI2QkRcXHUyNkJFXFx1MjZDNFxcdTI2QzVcXHUyNkNFXFx1MjZENFxcdTI2RUFcXHUyNkYyXFx1MjZGM1xcdTI2RjVcXHUyNkZBXFx1MjZGRFxcdTI3MDVcXHUyNzBBXFx1MjcwQlxcdTI3MjhcXHUyNzRDXFx1Mjc0RVxcdTI3NTMtXFx1Mjc1NVxcdTI3NTdcXHUyNzk1LVxcdTI3OTdcXHUyN0IwXFx1MjdCRlxcdTJCMUJcXHUyQjFDXFx1MkI1MFxcdTJCNTVdfFxcdUQ4M0NbXFx1REMwNFxcdURDQ0ZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1RERFNi1cXHVEREZGXFx1REUwMVxcdURFMUFcXHVERTJGXFx1REUzMi1cXHVERTM2XFx1REUzOC1cXHVERTNBXFx1REU1MFxcdURFNTFcXHVERjAwLVxcdURGMjBcXHVERjJELVxcdURGMzVcXHVERjM3LVxcdURGN0NcXHVERjdFLVxcdURGOTNcXHVERkEwLVxcdURGQ0FcXHVERkNGLVxcdURGRDNcXHVERkUwLVxcdURGRjBcXHVERkY0XFx1REZGOC1cXHVERkZGXXxcXHVEODNEW1xcdURDMDAtXFx1REMzRVxcdURDNDBcXHVEQzQyLVxcdURDRkNcXHVEQ0ZGLVxcdUREM0RcXHVERDRCLVxcdURENEVcXHVERDUwLVxcdURENjdcXHVERDdBXFx1REQ5NVxcdUREOTZcXHVEREE0XFx1RERGQi1cXHVERTRGXFx1REU4MC1cXHVERUM1XFx1REVDQ1xcdURFRDAtXFx1REVEMlxcdURFRDUtXFx1REVEN1xcdURFRUJcXHVERUVDXFx1REVGNC1cXHVERUZDXFx1REZFMC1cXHVERkVCXXxcXHVEODNFW1xcdUREMEMtXFx1REQzQVxcdUREM0MtXFx1REQ0NVxcdURENDctXFx1REQ3OFxcdUREN0EtXFx1RERDQlxcdUREQ0QtXFx1RERGRlxcdURFNzAtXFx1REU3NFxcdURFNzgtXFx1REU3QVxcdURFODAtXFx1REU4NlxcdURFOTAtXFx1REVBOFxcdURFQjAtXFx1REVCNlxcdURFQzAtXFx1REVDMlxcdURFRDAtXFx1REVENl0pL2c7XHJcblxyXG4gICAgc3RhdGljIGluaXQoKSB7XHJcbiAgICAgICAgaWYgKFV0aWxzLmluaXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBVdGlscy5pbml0ZWQgPSB0cnVlO1xyXG4gICAgICAgIFV0aWxzLmlzTm9kZSA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAocHJvY2VzcyBhcyBhbnkpLnJlbGVhc2UgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAocHJvY2VzcyBhcyBhbnkpLnJlbGVhc2UubmFtZSA9PT0gJ25vZGUnO1xyXG4gICAgICAgIFV0aWxzLmlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgIFV0aWxzLmlzTmF0aXZlU2NyaXB0ID0gIVV0aWxzLmlzTm9kZSAmJiAhVXRpbHMuaXNCcm93c2VyO1xyXG4gICAgICAgIFV0aWxzLmlzTW9iaWxlQnJvd3NlciA9IFV0aWxzLmlzQnJvd3NlciAmJiB0aGlzLmlzTW9iaWxlKHdpbmRvdyk7XHJcbiAgICAgICAgVXRpbHMuaXNBcHBsZU1vYmlsZUJyb3dzZXIgPSBVdGlscy5pc0Jyb3dzZXIgJiYgdGhpcy5pc0FwcGxlTW9iaWxlKHdpbmRvdyk7XHJcbiAgICAgICAgVXRpbHMuZ2xvYmFsID0gVXRpbHMuaXNOYXRpdmVTY3JpcHQgPyBnbG9iYWwgOiAoVXRpbHMuaXNOb2RlICYmICFVdGlscy5pc0Jyb3dzZXIgPyBnbG9iYWwgOiB3aW5kb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tQjY0VG9BcnJheShzdHI6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGlmIChVdGlscy5pc05vZGUgfHwgVXRpbHMuaXNOYXRpdmVTY3JpcHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KEJ1ZmZlci5mcm9tKHN0ciwgJ2Jhc2U2NCcpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5hcnlTdHJpbmcgPSB3aW5kb3cuYXRvYihzdHIpO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJpbmFyeVN0cmluZy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmFyeVN0cmluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYnl0ZXNbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYnl0ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tVXJsQjY0VG9BcnJheShzdHI6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIHJldHVybiBVdGlscy5mcm9tQjY0VG9BcnJheShVdGlscy5mcm9tVXJsQjY0VG9CNjQoc3RyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21IZXhUb0FycmF5KHN0cjogc3RyaW5nKTogVWludDhBcnJheSB7XHJcbiAgICAgICAgaWYgKFV0aWxzLmlzTm9kZSB8fCBVdGlscy5pc05hdGl2ZVNjcmlwdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmZyb20oc3RyLCAnaGV4JykpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aCAvIDIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgYnl0ZXNbaSAvIDJdID0gcGFyc2VJbnQoc3RyLnN1YnN0cihpLCAyKSwgMTYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBieXRlcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21VdGY4VG9BcnJheShzdHI6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGlmIChVdGlscy5pc05vZGUgfHwgVXRpbHMuaXNOYXRpdmVTY3JpcHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KEJ1ZmZlci5mcm9tKHN0ciwgJ3V0ZjgnKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RyVXRmOCA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTtcclxuICAgICAgICAgICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoc3RyVXRmOC5sZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0clV0ZjgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFycltpXSA9IHN0clV0ZjguY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbUJ5dGVTdHJpbmdUb0FycmF5KHN0cjogc3RyaW5nKTogVWludDhBcnJheSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYXJyW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21CdWZmZXJUb0I2NChidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoVXRpbHMuaXNOb2RlIHx8IFV0aWxzLmlzTmF0aXZlU2NyaXB0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShidWZmZXIpLnRvU3RyaW5nKCdiYXNlNjQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgYmluYXJ5ID0gJyc7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5ieXRlTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmJ0b2EoYmluYXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21CdWZmZXJUb1VybEI2NChidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gVXRpbHMuZnJvbUI2NHRvVXJsQjY0KFV0aWxzLmZyb21CdWZmZXJUb0I2NChidWZmZXIpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbUI2NHRvVXJsQjY0KGI2NFN0cjogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIGI2NFN0ci5yZXBsYWNlKC9cXCsvZywgJy0nKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csICdfJylcclxuICAgICAgICAgICAgLnJlcGxhY2UoLz0vZywgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tQnVmZmVyVG9VdGY4KGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChVdGlscy5pc05vZGUgfHwgVXRpbHMuaXNOYXRpdmVTY3JpcHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ1ZmZlcikudG9TdHJpbmcoJ3V0ZjgnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRTdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJ5dGVzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoZW5jb2RlZFN0cmluZykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbUJ1ZmZlclRvQnl0ZVN0cmluZyhidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShidWZmZXIpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZWY6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MDAzMTk3OS8xMDkwMzU5XHJcbiAgICBzdGF0aWMgZnJvbUJ1ZmZlclRvSGV4KGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChVdGlscy5pc05vZGUgfHwgVXRpbHMuaXNOYXRpdmVTY3JpcHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ1ZmZlcikudG9TdHJpbmcoJ2hleCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChieXRlcywgKHg6IG51bWJlcikgPT4gKCcwMCcgKyB4LnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpKS5qb2luKCcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21VcmxCNjRUb0I2NCh1cmxCNjRTdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IG91dHB1dCA9IHVybEI2NFN0ci5yZXBsYWNlKC8tL2csICcrJykucmVwbGFjZSgvXy9nLCAnLycpO1xyXG4gICAgICAgIHN3aXRjaCAob3V0cHV0Lmxlbmd0aCAlIDQpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIG91dHB1dCArPSAnPT0nO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIG91dHB1dCArPSAnPSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBiYXNlNjR1cmwgc3RyaW5nIScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbVVybEI2NFRvVXRmOCh1cmxCNjRTdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFV0aWxzLmZyb21CNjRUb1V0ZjgoVXRpbHMuZnJvbVVybEI2NFRvQjY0KHVybEI2NFN0cikpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tVXRmOFRvQjY0KHV0ZlN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoVXRpbHMuaXNOb2RlIHx8IFV0aWxzLmlzTmF0aXZlU2NyaXB0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh1dGZTdHIsICd1dGY4JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHdpbmRvdy5idG9hKHV0ZlN0cikpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21VdGY4VG9VcmxCNjQodXRmU3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBVdGlscy5mcm9tQnVmZmVyVG9VcmxCNjQoVXRpbHMuZnJvbVV0ZjhUb0FycmF5KHV0ZlN0cikpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tQjY0VG9VdGY4KGI2NFN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoVXRpbHMuaXNOb2RlIHx8IFV0aWxzLmlzTmF0aXZlU2NyaXB0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShiNjRTdHIsICdiYXNlNjQnKS50b1N0cmluZygndXRmOCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHdpbmRvdy5hdG9iKGI2NFN0cikpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVmOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTE3NTIzLzEwOTAzNTlcclxuICAgIHN0YXRpYyBuZXdHdWlkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgYyA9PiB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgIGNvbnN0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGlzR3VpZChpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIFJlZ0V4cCgvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC8sICdpJykudGVzdChpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEhvc3RuYW1lKHVyaVN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB1cmwgPSBVdGlscy5nZXRVcmwodXJpU3RyaW5nKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gdXJsICE9IG51bGwgJiYgdXJsLmhvc3RuYW1lICE9PSAnJyA/IHVybC5ob3N0bmFtZSA6IG51bGw7XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0SG9zdCh1cmlTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gVXRpbHMuZ2V0VXJsKHVyaVN0cmluZyk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHVybCAhPSBudWxsICYmIHVybC5ob3N0ICE9PSAnJyA/IHVybC5ob3N0IDogbnVsbDtcclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXREb21haW4odXJpU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh1cmlTdHJpbmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVyaVN0cmluZyA9IHVyaVN0cmluZy50cmltKCk7XHJcbiAgICAgICAgaWYgKHVyaVN0cmluZyA9PT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodXJpU3RyaW5nLnN0YXJ0c1dpdGgoJ2RhdGE6JykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaHR0cFVybCA9IHVyaVN0cmluZy5zdGFydHNXaXRoKCdodHRwOi8vJykgfHwgdXJpU3RyaW5nLnN0YXJ0c1dpdGgoJ2h0dHBzOi8vJyk7XHJcbiAgICAgICAgaWYgKCFodHRwVXJsICYmIHVyaVN0cmluZy5pbmRleE9mKCc6Ly8nKSA8IDAgJiYgVXRpbHMudGxkRW5kaW5nUmVnZXgudGVzdCh1cmlTdHJpbmcpICYmXHJcbiAgICAgICAgICAgIHVyaVN0cmluZy5pbmRleE9mKCdAJykgPCAwKSB7XHJcbiAgICAgICAgICAgIHVyaVN0cmluZyA9ICdodHRwOi8vJyArIHVyaVN0cmluZztcclxuICAgICAgICAgICAgaHR0cFVybCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaHR0cFVybCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gVXRpbHMuZ2V0VXJsT2JqZWN0KHVyaVN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZEhvc3RuYW1lID0gdGxkanM/LmlzVmFsaWQgIT0gbnVsbCA/IHRsZGpzLmlzVmFsaWQodXJsLmhvc3RuYW1lKSA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkSG9zdG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXJsLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fCBVdGlscy52YWxpZElwQWRkcmVzcyh1cmwuaG9zdG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybC5ob3N0bmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB1cmxEb21haW4gPSB0bGRqcyAhPSBudWxsICYmIHRsZGpzLmdldERvbWFpbiAhPSBudWxsID8gdGxkanMuZ2V0RG9tYWluKHVybC5ob3N0bmFtZSkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybERvbWFpbiAhPSBudWxsID8gdXJsRG9tYWluIDogdXJsLmhvc3RuYW1lO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJbnZhbGlkIGRvbWFpbiwgdHJ5IGFub3RoZXIgYXBwcm9hY2ggYmVsb3cuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbWFpbiA9IHRsZGpzICE9IG51bGwgJiYgdGxkanMuZ2V0RG9tYWluICE9IG51bGwgPyB0bGRqcy5nZXREb21haW4odXJpU3RyaW5nKSA6IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoZG9tYWluICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb21haW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UXVlcnlQYXJhbXModXJpU3RyaW5nOiBzdHJpbmcpOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBVdGlscy5nZXRVcmwodXJpU3RyaW5nKTtcclxuICAgICAgICBpZiAodXJsID09IG51bGwgfHwgdXJsLnNlYXJjaCA9PSBudWxsIHx8IHVybC5zZWFyY2ggPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xyXG4gICAgICAgIGNvbnN0IHBhaXJzID0gKHVybC5zZWFyY2hbMF0gPT09ICc/JyA/IHVybC5zZWFyY2guc3Vic3RyKDEpIDogdXJsLnNlYXJjaCkuc3BsaXQoJyYnKTtcclxuICAgICAgICBwYWlycy5mb3JFYWNoKHBhaXIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IHBhaXIuc3BsaXQoJz0nKTtcclxuICAgICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXAuc2V0KGRlY29kZVVSSUNvbXBvbmVudChwYXJ0c1swXSkudG9Mb3dlckNhc2UoKSwgcGFydHNbMV0gPT0gbnVsbCA/ICcnIDogZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzWzFdKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG1hcDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0U29ydEZ1bmN0aW9uKGkxOG5TZXJ2aWNlOiBJMThuU2VydmljZSwgcHJvcDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIChhOiBhbnksIGI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYVtwcm9wXSA9PSBudWxsICYmIGJbcHJvcF0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhW3Byb3BdICE9IG51bGwgJiYgYltwcm9wXSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYVtwcm9wXSA9PSBudWxsICYmIGJbcHJvcF0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpMThuU2VydmljZS5jb2xsYXRvciA/IGkxOG5TZXJ2aWNlLmNvbGxhdG9yLmNvbXBhcmUoYVtwcm9wXSwgYltwcm9wXSkgOlxyXG4gICAgICAgICAgICAgICAgYVtwcm9wXS5sb2NhbGVDb21wYXJlKGJbcHJvcF0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGlzTnVsbE9yV2hpdGVzcGFjZShzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBzdHIgPT0gbnVsbCB8fCB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBzdHIudHJpbSgpID09PSAnJztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbmFtZU9mPFQ+KG5hbWU6IHN0cmluZyAmIGtleW9mIFQpIHtcclxuICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXNzaWduPFQ+KHRhcmdldDogVCwgc291cmNlOiBQYXJ0aWFsPFQ+KTogVCB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpdGVyYXRlRW51bTxPIGV4dGVuZHMgb2JqZWN0LCBLIGV4dGVuZHMga2V5b2YgTyA9IGtleW9mIE8+KG9iajogTykge1xyXG4gICAgICAgIHJldHVybiAoT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoayA9PiBOdW1iZXIuaXNOYU4oK2spKSBhcyBLW10pLm1hcChrID0+IG9ialtrXSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBnZXRVcmwodXJpU3RyaW5nOiBzdHJpbmcpOiBVUkwge1xyXG4gICAgICAgIGlmICh1cmlTdHJpbmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVyaVN0cmluZyA9IHVyaVN0cmluZy50cmltKCk7XHJcbiAgICAgICAgaWYgKHVyaVN0cmluZyA9PT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdXJsID0gVXRpbHMuZ2V0VXJsT2JqZWN0KHVyaVN0cmluZyk7XHJcbiAgICAgICAgaWYgKHVybCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhc0h0dHBQcm90b2NvbCA9IHVyaVN0cmluZy5pbmRleE9mKCdodHRwOi8vJykgPT09IDAgfHwgdXJpU3RyaW5nLmluZGV4T2YoJ2h0dHBzOi8vJykgPT09IDA7XHJcbiAgICAgICAgICAgIGlmICghaGFzSHR0cFByb3RvY29sICYmIHVyaVN0cmluZy5pbmRleE9mKCcuJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdXJsID0gVXRpbHMuZ2V0VXJsT2JqZWN0KCdodHRwOi8vJyArIHVyaVN0cmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY2FtZWxUb1Bhc2NhbENhc2Uoczogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzLnNsaWNlKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHZhbGlkSXBBZGRyZXNzKGlwU3RyaW5nOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICBjb25zdCBpcFJlZ2V4ID0gL14oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSQvO1xyXG4gICAgICAgIHJldHVybiBpcFJlZ2V4LnRlc3QoaXBTdHJpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGlzTW9iaWxlKHdpbjogV2luZG93KSB7XHJcbiAgICAgICAgbGV0IG1vYmlsZSA9IGZhbHNlO1xyXG4gICAgICAgIChhID0+IHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgIGlmICgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdChhKSB8fCAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KGEuc3Vic3RyKDAsIDQpKSkge1xyXG4gICAgICAgICAgICAgICAgbW9iaWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKHdpbi5uYXZpZ2F0b3IudXNlckFnZW50IHx8IHdpbi5uYXZpZ2F0b3IudmVuZG9yIHx8ICh3aW4gYXMgYW55KS5vcGVyYSk7XHJcbiAgICAgICAgcmV0dXJuIG1vYmlsZSB8fCB3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKSAhPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGlzQXBwbGVNb2JpbGUod2luOiBXaW5kb3cpIHtcclxuICAgICAgICByZXR1cm4gd2luLm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKSAhPSBudWxsIHx8IHdpbi5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGFkL2kpICE9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0VXJsT2JqZWN0KHVyaVN0cmluZzogc3RyaW5nKTogVVJMIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAobm9kZVVSTCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVVSTC5VUkwgPyBuZXcgbm9kZVVSTC5VUkwodXJpU3RyaW5nKSA6IG5vZGVVUkwucGFyc2UodXJpU3RyaW5nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgVVJMID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVSTCh1cmlTdHJpbmcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNQcm90b2NvbCA9IHVyaVN0cmluZy5pbmRleE9mKCc6Ly8nKSA+IC0xO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoYXNQcm90b2NvbCAmJiB1cmlTdHJpbmcuaW5kZXhPZignLicpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmlTdHJpbmcgPSAnaHR0cDovLycgKyB1cmlTdHJpbmc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFoYXNQcm90b2NvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgICAgIGFuY2hvci5ocmVmID0gdXJpU3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuY2hvciBhcyBhbnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIElnbm9yZSBlcnJvclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcblV0aWxzLmluaXQoKTtcclxuIiwiaW1wb3J0IHsgRW5jcnlwdGlvblR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9lbmNyeXB0aW9uVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL21pc2MvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN5bW1ldHJpY0NyeXB0b0tleSB7XHJcbiAgICBrZXk6IEFycmF5QnVmZmVyO1xyXG4gICAgZW5jS2V5PzogQXJyYXlCdWZmZXI7XHJcbiAgICBtYWNLZXk/OiBBcnJheUJ1ZmZlcjtcclxuICAgIGVuY1R5cGU6IEVuY3J5cHRpb25UeXBlO1xyXG5cclxuICAgIGtleUI2NDogc3RyaW5nO1xyXG4gICAgZW5jS2V5QjY0OiBzdHJpbmc7XHJcbiAgICBtYWNLZXlCNjQ6IHN0cmluZztcclxuXHJcbiAgICBtZXRhOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioa2V5OiBBcnJheUJ1ZmZlciwgZW5jVHlwZT86IEVuY3J5cHRpb25UeXBlKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGtleScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVuY1R5cGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoa2V5LmJ5dGVMZW5ndGggPT09IDMyKSB7XHJcbiAgICAgICAgICAgICAgICBlbmNUeXBlID0gRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0I2NDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkuYnl0ZUxlbmd0aCA9PT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIGVuY1R5cGUgPSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMyNTZfSG1hY1NoYTI1Nl9CNjQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBkZXRlcm1pbmUgZW5jVHlwZS4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5lbmNUeXBlID0gZW5jVHlwZTtcclxuXHJcbiAgICAgICAgaWYgKGVuY1R5cGUgPT09IEVuY3J5cHRpb25UeXBlLkFlc0NiYzI1Nl9CNjQgJiYga2V5LmJ5dGVMZW5ndGggPT09IDMyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5jS2V5ID0ga2V5O1xyXG4gICAgICAgICAgICB0aGlzLm1hY0tleSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbmNUeXBlID09PSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMxMjhfSG1hY1NoYTI1Nl9CNjQgJiYga2V5LmJ5dGVMZW5ndGggPT09IDMyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5jS2V5ID0ga2V5LnNsaWNlKDAsIDE2KTtcclxuICAgICAgICAgICAgdGhpcy5tYWNLZXkgPSBrZXkuc2xpY2UoMTYsIDMyKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGVuY1R5cGUgPT09IEVuY3J5cHRpb25UeXBlLkFlc0NiYzI1Nl9IbWFjU2hhMjU2X0I2NCAmJiBrZXkuYnl0ZUxlbmd0aCA9PT0gNjQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbmNLZXkgPSBrZXkuc2xpY2UoMCwgMzIpO1xyXG4gICAgICAgICAgICB0aGlzLm1hY0tleSA9IGtleS5zbGljZSgzMiwgNjQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgZW5jVHlwZS9rZXkgbGVuZ3RoLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlCNjQgPSBVdGlscy5mcm9tQnVmZmVyVG9CNjQodGhpcy5rZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5lbmNLZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmVuY0tleUI2NCA9IFV0aWxzLmZyb21CdWZmZXJUb0I2NCh0aGlzLmVuY0tleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm1hY0tleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFjS2V5QjY0ID0gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KHRoaXMubWFjS2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFcnJvclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIHZhbGlkYXRpb25FcnJvcnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW107IH07XHJcbiAgICBzdGF0dXNDb2RlOiBudW1iZXI7XHJcbiAgICBjYXB0Y2hhUmVxdWlyZWQ6IGJvb2xlYW47XHJcbiAgICBjYXB0Y2hhU2l0ZUtleTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnksIHN0YXR1czogbnVtYmVyLCBpZGVudGl0eVJlc3BvbnNlPzogYm9vbGVhbikge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICBsZXQgZXJyb3JNb2RlbCA9IG51bGw7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VFcnJvck1vZGVsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFcnJvck1vZGVsJyk7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZUVycm9yTW9kZWwgJiYgaWRlbnRpdHlSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNb2RlbCA9IHJlc3BvbnNlRXJyb3JNb2RlbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTW9kZWwgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVycm9yTW9kZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNZXNzYWdlJywgZXJyb3JNb2RlbCk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVmFsaWRhdGlvbkVycm9ycycsIGVycm9yTW9kZWwpO1xyXG4gICAgICAgICAgICB0aGlzLmNhcHRjaGFTaXRlS2V5ID0gdGhpcy52YWxpZGF0aW9uRXJyb3JzPy5IQ2FwdGNoYV9TaXRlS2V5Py5bMF07XHJcbiAgICAgICAgICAgIHRoaXMuY2FwdGNoYVJlcXVpcmVkID0gIVV0aWxzLmlzTnVsbE9yV2hpdGVzcGFjZSh0aGlzLmNhcHRjaGFTaXRlS2V5KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSA0MjkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9ICdSYXRlIGxpbWl0IGV4Y2VlZGVkLiBUcnkgYWdhaW4gbGF0ZXIuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2luZ2xlTWVzc2FnZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbGlkYXRpb25FcnJvcnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnZhbGlkYXRpb25FcnJvcnMpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25FcnJvcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGlvbkVycm9yc1trZXldLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkVycm9yc1trZXldWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWxsTWVzc2FnZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnZhbGlkYXRpb25FcnJvcnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMudmFsaWRhdGlvbkVycm9ycykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudmFsaWRhdGlvbkVycm9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnNba2V5XS5mb3JFYWNoKChpdGVtOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBwcmVmaXggPSAnJztcclxuICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignWycpID4gLTEgJiYga2V5LmluZGV4T2YoJ10nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdFNlcCA9IGtleS5sYXN0SW5kZXhPZignLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IGtleS5zdWJzdHIoMCwgbGFzdFNlcCA+IC0xID8gbGFzdFNlcCA6IGtleS5sZW5ndGgpICsgJzogJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWVzc2FnZXM7XHJcbiAgICB9XHJcbn1cclxuIiwiLyogKGlnbm9yZWQpICovIiwiLyogKGlnbm9yZWQpICovIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XHJcblxyXG5pbXBvcnQgeyBMaW5rZWRNZXRhZGF0YSB9IGZyb20gJy4uLy4uL21pc2MvbGlua2VkRmllbGRPcHRpb24uZGVjb3JhdG9yJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJdGVtVmlldyBpbXBsZW1lbnRzIFZpZXcge1xyXG4gICAgbGlua2VkRmllbGRPcHRpb25zOiBNYXA8bnVtYmVyLCBMaW5rZWRNZXRhZGF0YT47XHJcbiAgICBhYnN0cmFjdCBnZXQgc3ViVGl0bGUoKTogc3RyaW5nO1xyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBcGlLZXlSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBhcGlLZXk6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuYXBpS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBcGlLZXknKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXR0YWNobWVudFJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICB1cmw6IHN0cmluZztcclxuICAgIGZpbGVOYW1lOiBzdHJpbmc7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIHNpemU6IHN0cmluZztcclxuICAgIHNpemVOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMudXJsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVcmwnKTtcclxuICAgICAgICB0aGlzLmZpbGVOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGaWxlTmFtZScpO1xyXG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXknKTtcclxuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NpemUnKTtcclxuICAgICAgICB0aGlzLnNpemVOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTaXplTmFtZScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXNzd29yZEhpc3RvcnlSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBwYXNzd29yZDogc3RyaW5nO1xyXG4gICAgbGFzdFVzZWREYXRlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQYXNzd29yZCcpO1xyXG4gICAgICAgIHRoaXMubGFzdFVzZWREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdMYXN0VXNlZERhdGUnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBdHRhY2htZW50UmVzcG9uc2UgfSBmcm9tICcuL2F0dGFjaG1lbnRSZXNwb25zZSc7XHJcbmltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuaW1wb3J0IHsgUGFzc3dvcmRIaXN0b3J5UmVzcG9uc2UgfSBmcm9tICcuL3Bhc3N3b3JkSGlzdG9yeVJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IENpcGhlclJlcHJvbXB0VHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2NpcGhlclJlcHJvbXB0VHlwZSc7XHJcbmltcG9ydCB7IENhcmRBcGkgfSBmcm9tICcuLi9hcGkvY2FyZEFwaSc7XHJcbmltcG9ydCB7IEZpZWxkQXBpIH0gZnJvbSAnLi4vYXBpL2ZpZWxkQXBpJztcclxuaW1wb3J0IHsgSWRlbnRpdHlBcGkgfSBmcm9tICcuLi9hcGkvaWRlbnRpdHlBcGknO1xyXG5pbXBvcnQgeyBMb2dpbkFwaSB9IGZyb20gJy4uL2FwaS9sb2dpbkFwaSc7XHJcbmltcG9ydCB7IFNlY3VyZU5vdGVBcGkgfSBmcm9tICcuLi9hcGkvc2VjdXJlTm90ZUFwaSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2lwaGVyUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICBmb2xkZXJJZDogc3RyaW5nO1xyXG4gICAgdHlwZTogbnVtYmVyO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgbm90ZXM6IHN0cmluZztcclxuICAgIGZpZWxkczogRmllbGRBcGlbXTtcclxuICAgIGxvZ2luOiBMb2dpbkFwaTtcclxuICAgIGNhcmQ6IENhcmRBcGk7XHJcbiAgICBpZGVudGl0eTogSWRlbnRpdHlBcGk7XHJcbiAgICBzZWN1cmVOb3RlOiBTZWN1cmVOb3RlQXBpO1xyXG4gICAgZmF2b3JpdGU6IGJvb2xlYW47XHJcbiAgICBlZGl0OiBib29sZWFuO1xyXG4gICAgdmlld1Bhc3N3b3JkOiBib29sZWFuO1xyXG4gICAgb3JnYW5pemF0aW9uVXNlVG90cDogYm9vbGVhbjtcclxuICAgIHJldmlzaW9uRGF0ZTogc3RyaW5nO1xyXG4gICAgYXR0YWNobWVudHM6IEF0dGFjaG1lbnRSZXNwb25zZVtdO1xyXG4gICAgcGFzc3dvcmRIaXN0b3J5OiBQYXNzd29yZEhpc3RvcnlSZXNwb25zZVtdO1xyXG4gICAgY29sbGVjdGlvbklkczogc3RyaW5nW107XHJcbiAgICBkZWxldGVkRGF0ZTogc3RyaW5nO1xyXG4gICAgcmVwcm9tcHQ6IENpcGhlclJlcHJvbXB0VHlwZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XHJcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnT3JnYW5pemF0aW9uSWQnKTtcclxuICAgICAgICB0aGlzLmZvbGRlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGb2xkZXJJZCcpIHx8IG51bGw7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5ub3RlcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTm90ZXMnKTtcclxuICAgICAgICB0aGlzLmZhdm9yaXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGYXZvcml0ZScpIHx8IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZWRpdCA9ICEhdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFZGl0Jyk7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVmlld1Bhc3N3b3JkJykgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdQYXNzd29yZCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3UGFzc3dvcmQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1ZpZXdQYXNzd29yZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvblVzZVRvdHAgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ09yZ2FuaXphdGlvblVzZVRvdHAnKTtcclxuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmV2aXNpb25EYXRlJyk7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uSWRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb2xsZWN0aW9uSWRzJyk7XHJcbiAgICAgICAgdGhpcy5kZWxldGVkRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGVsZXRlZERhdGUnKTtcclxuXHJcbiAgICAgICAgY29uc3QgbG9naW4gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0xvZ2luJyk7XHJcbiAgICAgICAgaWYgKGxvZ2luICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dpbiA9IG5ldyBMb2dpbkFwaShsb2dpbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjYXJkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDYXJkJyk7XHJcbiAgICAgICAgaWYgKGNhcmQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhcmQgPSBuZXcgQ2FyZEFwaShjYXJkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGlkZW50aXR5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZGVudGl0eScpO1xyXG4gICAgICAgIGlmIChpZGVudGl0eSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkgPSBuZXcgSWRlbnRpdHlBcGkoaWRlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VjdXJlTm90ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VjdXJlTm90ZScpO1xyXG4gICAgICAgIGlmIChzZWN1cmVOb3RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWN1cmVOb3RlID0gbmV3IFNlY3VyZU5vdGVBcGkoc2VjdXJlTm90ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBmaWVsZHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0ZpZWxkcycpO1xyXG4gICAgICAgIGlmIChmaWVsZHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpZWxkcyA9IGZpZWxkcy5tYXAoKGY6IGFueSkgPT4gbmV3IEZpZWxkQXBpKGYpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGF0dGFjaG1lbnRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBdHRhY2htZW50cycpO1xyXG4gICAgICAgIGlmIChhdHRhY2htZW50cyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudHMgPSBhdHRhY2htZW50cy5tYXAoKGE6IGFueSkgPT4gbmV3IEF0dGFjaG1lbnRSZXNwb25zZShhKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwYXNzd29yZEhpc3RvcnkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Bhc3N3b3JkSGlzdG9yeScpO1xyXG4gICAgICAgIGlmIChwYXNzd29yZEhpc3RvcnkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhc3N3b3JkSGlzdG9yeSA9IHBhc3N3b3JkSGlzdG9yeS5tYXAoKGg6IGFueSkgPT4gbmV3IFBhc3N3b3JkSGlzdG9yeVJlc3BvbnNlKGgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVwcm9tcHQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1JlcHJvbXB0JykgfHwgQ2lwaGVyUmVwcm9tcHRUeXBlLk5vbmU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRmlsZVVwbG9hZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9maWxlVXBsb2FkVHlwZSc7XHJcbmltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuaW1wb3J0IHsgQ2lwaGVyUmVzcG9uc2UgfSBmcm9tICcuL2NpcGhlclJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBdHRhY2htZW50VXBsb2FkRGF0YVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGF0dGFjaG1lbnRJZDogc3RyaW5nO1xyXG4gICAgZmlsZVVwbG9hZFR5cGU6IEZpbGVVcGxvYWRUeXBlO1xyXG4gICAgY2lwaGVyUmVzcG9uc2U6IENpcGhlclJlc3BvbnNlO1xyXG4gICAgY2lwaGVyTWluaVJlc3BvbnNlOiBDaXBoZXJSZXNwb25zZTtcclxuICAgIHVybDogc3RyaW5nID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2htZW50SWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0F0dGFjaG1lbnRJZCcpO1xyXG4gICAgICAgIHRoaXMuZmlsZVVwbG9hZFR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0ZpbGVVcGxvYWRUeXBlJyk7XHJcbiAgICAgICAgY29uc3QgY2lwaGVyUmVzcG9uc2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NpcGhlclJlc3BvbnNlJyk7XHJcbiAgICAgICAgY29uc3QgY2lwaGVyTWluaVJlc3BvbnNlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDaXBoZXJNaW5pUmVzcG9uc2UnKTtcclxuICAgICAgICB0aGlzLmNpcGhlclJlc3BvbnNlID0gY2lwaGVyUmVzcG9uc2UgPT0gbnVsbCA/IG51bGwgOiBuZXcgQ2lwaGVyUmVzcG9uc2UoY2lwaGVyUmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuY2lwaGVyTWluaVJlc3BvbnNlID0gY2lwaGVyTWluaVJlc3BvbnNlID09IG51bGwgPyBudWxsIDogbmV3IENpcGhlclJlc3BvbnNlKGNpcGhlck1pbmlSZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VybCcpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBQYXltZW50TWV0aG9kVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3BheW1lbnRNZXRob2RUeXBlJztcclxuaW1wb3J0IHsgVHJhbnNhY3Rpb25UeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvdHJhbnNhY3Rpb25UeXBlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCaWxsaW5nUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgYmFsYW5jZTogbnVtYmVyO1xyXG4gICAgcGF5bWVudFNvdXJjZTogQmlsbGluZ1NvdXJjZVJlc3BvbnNlO1xyXG4gICAgaW52b2ljZXM6IEJpbGxpbmdJbnZvaWNlUmVzcG9uc2VbXSA9IFtdO1xyXG4gICAgdHJhbnNhY3Rpb25zOiBCaWxsaW5nVHJhbnNhY3Rpb25SZXNwb25zZVtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmJhbGFuY2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0JhbGFuY2UnKTtcclxuICAgICAgICBjb25zdCBwYXltZW50U291cmNlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQYXltZW50U291cmNlJyk7XHJcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUcmFuc2FjdGlvbnMnKTtcclxuICAgICAgICBjb25zdCBpbnZvaWNlcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSW52b2ljZXMnKTtcclxuICAgICAgICB0aGlzLnBheW1lbnRTb3VyY2UgPSBwYXltZW50U291cmNlID09IG51bGwgPyBudWxsIDogbmV3IEJpbGxpbmdTb3VyY2VSZXNwb25zZShwYXltZW50U291cmNlKTtcclxuICAgICAgICBpZiAodHJhbnNhY3Rpb25zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbnMgPSB0cmFuc2FjdGlvbnMubWFwKCh0OiBhbnkpID0+IG5ldyBCaWxsaW5nVHJhbnNhY3Rpb25SZXNwb25zZSh0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnZvaWNlcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW52b2ljZXMgPSBpbnZvaWNlcy5tYXAoKGk6IGFueSkgPT4gbmV3IEJpbGxpbmdJbnZvaWNlUmVzcG9uc2UoaSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJpbGxpbmdTb3VyY2VSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICB0eXBlOiBQYXltZW50TWV0aG9kVHlwZTtcclxuICAgIGNhcmRCcmFuZDogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICAgIG5lZWRzVmVyaWZpY2F0aW9uOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5jYXJkQnJhbmQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NhcmRCcmFuZCcpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Rlc2NyaXB0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5uZWVkc1ZlcmlmaWNhdGlvbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmVlZHNWZXJpZmljYXRpb24nKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJpbGxpbmdJbnZvaWNlUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdXJsOiBzdHJpbmc7XHJcbiAgICBwZGZVcmw6IHN0cmluZztcclxuICAgIG51bWJlcjogc3RyaW5nO1xyXG4gICAgcGFpZDogYm9vbGVhbjtcclxuICAgIGRhdGU6IHN0cmluZztcclxuICAgIGFtb3VudDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VybCcpO1xyXG4gICAgICAgIHRoaXMucGRmVXJsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQZGZVcmwnKTtcclxuICAgICAgICB0aGlzLm51bWJlciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTnVtYmVyJyk7XHJcbiAgICAgICAgdGhpcy5wYWlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQYWlkJyk7XHJcbiAgICAgICAgdGhpcy5kYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEYXRlJyk7XHJcbiAgICAgICAgdGhpcy5hbW91bnQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Ftb3VudCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmlsbGluZ1RyYW5zYWN0aW9uUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgY3JlYXRlZERhdGU6IHN0cmluZztcclxuICAgIGFtb3VudDogbnVtYmVyO1xyXG4gICAgcmVmdW5kZWQ6IGJvb2xlYW47XHJcbiAgICBwYXJ0aWFsbHlSZWZ1bmRlZDogYm9vbGVhbjtcclxuICAgIHJlZnVuZGVkQW1vdW50OiBudW1iZXI7XHJcbiAgICB0eXBlOiBUcmFuc2FjdGlvblR5cGU7XHJcbiAgICBwYXltZW50TWV0aG9kVHlwZTogUGF5bWVudE1ldGhvZFR5cGU7XHJcbiAgICBkZXRhaWxzOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZWREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDcmVhdGVkRGF0ZScpO1xyXG4gICAgICAgIHRoaXMuYW1vdW50ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBbW91bnQnKTtcclxuICAgICAgICB0aGlzLnJlZnVuZGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdSZWZ1bmRlZCcpO1xyXG4gICAgICAgIHRoaXMucGFydGlhbGx5UmVmdW5kZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1BhcnRpYWxseVJlZnVuZGVkJyk7XHJcbiAgICAgICAgdGhpcy5yZWZ1bmRlZEFtb3VudCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmVmdW5kZWRBbW91bnQnKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcclxuICAgICAgICB0aGlzLnBheW1lbnRNZXRob2RUeXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQYXltZW50TWV0aG9kVHlwZScpO1xyXG4gICAgICAgIHRoaXMuZGV0YWlscyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGV0YWlscycpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCcmVhY2hBY2NvdW50UmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgYWRkZWREYXRlOiBzdHJpbmc7XHJcbiAgICBicmVhY2hEYXRlOiBzdHJpbmc7XHJcbiAgICBkYXRhQ2xhc3Nlczogc3RyaW5nW107XHJcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gICAgZG9tYWluOiBzdHJpbmc7XHJcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcclxuICAgIGlzVmVyaWZpZWQ6IGJvb2xlYW47XHJcbiAgICBsb2dvUGF0aDogc3RyaW5nO1xyXG4gICAgbW9kaWZpZWREYXRlOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBwd25Db3VudDogbnVtYmVyO1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuYWRkZWREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBZGRlZERhdGUnKTtcclxuICAgICAgICB0aGlzLmJyZWFjaERhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0JyZWFjaERhdGUnKTtcclxuICAgICAgICB0aGlzLmRhdGFDbGFzc2VzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEYXRhQ2xhc3NlcycpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Rlc2NyaXB0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5kb21haW4gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0RvbWFpbicpO1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lzQWN0aXZlJyk7XHJcbiAgICAgICAgdGhpcy5pc1ZlcmlmaWVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJc1ZlcmlmaWVkJyk7XHJcbiAgICAgICAgdGhpcy5sb2dvUGF0aCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTG9nb1BhdGgnKTtcclxuICAgICAgICB0aGlzLm1vZGlmaWVkRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTW9kaWZpZWREYXRlJyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5wd25Db3VudCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUHduQ291bnQnKTtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUaXRsZScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICByZWFkT25seTogYm9vbGVhbjtcclxuICAgIGhpZGVQYXNzd29yZHM6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMucmVhZE9ubHkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1JlYWRPbmx5Jyk7XHJcbiAgICAgICAgdGhpcy5oaWRlUGFzc3dvcmRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIaWRlUGFzc3dvcmRzJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlIH0gZnJvbSAnLi9zZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ09yZ2FuaXphdGlvbklkJyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5leHRlcm5hbElkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFeHRlcm5hbElkJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlIGV4dGVuZHMgQ29sbGVjdGlvblJlc3BvbnNlIHtcclxuICAgIHJlYWRPbmx5OiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5yZWFkT25seSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmVhZE9ubHknKSB8fCBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25Hcm91cERldGFpbHNSZXNwb25zZSBleHRlbmRzIENvbGxlY3Rpb25SZXNwb25zZSB7XHJcbiAgICBncm91cHM6IFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2VbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgY29uc3QgZ3JvdXBzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdHcm91cHMnKTtcclxuICAgICAgICBpZiAoZ3JvdXBzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5ncm91cHMgPSBncm91cHMubWFwKChnOiBhbnkpID0+IG5ldyBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlKGcpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdsb2JhbERvbWFpblJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIHR5cGU6IG51bWJlcjtcclxuICAgIGRvbWFpbnM6IHN0cmluZ1tdO1xyXG4gICAgZXhjbHVkZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcclxuICAgICAgICB0aGlzLmRvbWFpbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0RvbWFpbnMnKTtcclxuICAgICAgICB0aGlzLmV4Y2x1ZGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFeGNsdWRlZCcpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuaW1wb3J0IHsgR2xvYmFsRG9tYWluUmVzcG9uc2UgfSBmcm9tICcuL2dsb2JhbERvbWFpblJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEb21haW5zUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgZXF1aXZhbGVudERvbWFpbnM6IHN0cmluZ1tdW107XHJcbiAgICBnbG9iYWxFcXVpdmFsZW50RG9tYWluczogR2xvYmFsRG9tYWluUmVzcG9uc2VbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5lcXVpdmFsZW50RG9tYWlucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXF1aXZhbGVudERvbWFpbnMnKTtcclxuICAgICAgICBjb25zdCBnbG9iYWxFcXVpdmFsZW50RG9tYWlucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnR2xvYmFsRXF1aXZhbGVudERvbWFpbnMnKTtcclxuICAgICAgICBpZiAoZ2xvYmFsRXF1aXZhbGVudERvbWFpbnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmdsb2JhbEVxdWl2YWxlbnREb21haW5zID0gZ2xvYmFsRXF1aXZhbGVudERvbWFpbnMubWFwKChkOiBhbnkpID0+IG5ldyBHbG9iYWxEb21haW5SZXNwb25zZShkKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxFcXVpdmFsZW50RG9tYWlucyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBFbWVyZ2VuY3lBY2Nlc3NTdGF0dXNUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZW1lcmdlbmN5QWNjZXNzU3RhdHVzVHlwZSc7XHJcbmltcG9ydCB7IEVtZXJnZW5jeUFjY2Vzc1R5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9lbWVyZ2VuY3lBY2Nlc3NUeXBlJztcclxuaW1wb3J0IHsgS2RmVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2tkZlR5cGUnO1xyXG5pbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcbmltcG9ydCB7IENpcGhlclJlc3BvbnNlIH0gZnJvbSAnLi9jaXBoZXJSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRW1lcmdlbmN5QWNjZXNzR3JhbnRlZURldGFpbHNSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgZ3JhbnRlZUlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgdHlwZTogRW1lcmdlbmN5QWNjZXNzVHlwZTtcclxuICAgIHN0YXR1czogRW1lcmdlbmN5QWNjZXNzU3RhdHVzVHlwZTtcclxuICAgIHdhaXRUaW1lRGF5czogbnVtYmVyO1xyXG4gICAgY3JlYXRpb25EYXRlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMuZ3JhbnRlZUlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdHcmFudGVlSWQnKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcclxuICAgICAgICB0aGlzLmVtYWlsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbWFpbCcpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdGF0dXMnKTtcclxuICAgICAgICB0aGlzLndhaXRUaW1lRGF5cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnV2FpdFRpbWVEYXlzJyk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGlvbkRhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NyZWF0aW9uRGF0ZScpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW1lcmdlbmN5QWNjZXNzR3JhbnRvckRldGFpbHNSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgZ3JhbnRvcklkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgdHlwZTogRW1lcmdlbmN5QWNjZXNzVHlwZTtcclxuICAgIHN0YXR1czogRW1lcmdlbmN5QWNjZXNzU3RhdHVzVHlwZTtcclxuICAgIHdhaXRUaW1lRGF5czogbnVtYmVyO1xyXG4gICAgY3JlYXRpb25EYXRlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMuZ3JhbnRvcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdHcmFudG9ySWQnKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcclxuICAgICAgICB0aGlzLmVtYWlsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbWFpbCcpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdGF0dXMnKTtcclxuICAgICAgICB0aGlzLndhaXRUaW1lRGF5cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnV2FpdFRpbWVEYXlzJyk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGlvbkRhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NyZWF0aW9uRGF0ZScpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW1lcmdlbmN5QWNjZXNzVGFrZW92ZXJSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBrZXlFbmNyeXB0ZWQ6IHN0cmluZztcclxuICAgIGtkZjogS2RmVHlwZTtcclxuICAgIGtkZkl0ZXJhdGlvbnM6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICB0aGlzLmtleUVuY3J5cHRlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2V5RW5jcnlwdGVkJyk7XHJcbiAgICAgICAgdGhpcy5rZGYgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tkZicpO1xyXG4gICAgICAgIHRoaXMua2RmSXRlcmF0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2RmSXRlcmF0aW9ucycpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW1lcmdlbmN5QWNjZXNzVmlld1Jlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGtleUVuY3J5cHRlZDogc3RyaW5nO1xyXG4gICAgY2lwaGVyczogQ2lwaGVyUmVzcG9uc2VbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcblxyXG4gICAgICAgIHRoaXMua2V5RW5jcnlwdGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXlFbmNyeXB0ZWQnKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2lwaGVycycpO1xyXG4gICAgICAgIGlmIChjaXBoZXJzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jaXBoZXJzID0gY2lwaGVycy5tYXAoKGM6IGFueSkgPT4gbmV3IENpcGhlclJlc3BvbnNlKGMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuaW1wb3J0IHsgRGV2aWNlVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2RldmljZVR5cGUnO1xyXG5pbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9ldmVudFR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50UmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdHlwZTogRXZlbnRUeXBlO1xyXG4gICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xyXG4gICAgcHJvdmlkZXJJZDogc3RyaW5nO1xyXG4gICAgY2lwaGVySWQ6IHN0cmluZztcclxuICAgIGNvbGxlY3Rpb25JZDogc3RyaW5nO1xyXG4gICAgZ3JvdXBJZDogc3RyaW5nO1xyXG4gICAgcG9saWN5SWQ6IHN0cmluZztcclxuICAgIG9yZ2FuaXphdGlvblVzZXJJZDogc3RyaW5nO1xyXG4gICAgcHJvdmlkZXJVc2VySWQ6IHN0cmluZztcclxuICAgIHByb3ZpZGVyT3JnYW5pemF0aW9uSWQ6IHN0cmluZztcclxuICAgIGFjdGluZ1VzZXJJZDogc3RyaW5nO1xyXG4gICAgZGF0ZTogc3RyaW5nO1xyXG4gICAgZGV2aWNlVHlwZTogRGV2aWNlVHlwZTtcclxuICAgIGlwQWRkcmVzczogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XHJcbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJJZCcpO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ09yZ2FuaXphdGlvbklkJyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQcm92aWRlcklkJyk7XHJcbiAgICAgICAgdGhpcy5jaXBoZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2lwaGVySWQnKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ29sbGVjdGlvbklkJyk7XHJcbiAgICAgICAgdGhpcy5ncm91cElkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdHcm91cElkJyk7XHJcbiAgICAgICAgdGhpcy5wb2xpY3lJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUG9saWN5SWQnKTtcclxuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvblVzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnT3JnYW5pemF0aW9uVXNlcklkJyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlclVzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUHJvdmlkZXJVc2VySWQnKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyT3JnYW5pemF0aW9uSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Byb3ZpZGVyT3JnYW5pemF0aW9uSWQnKTtcclxuICAgICAgICB0aGlzLmFjdGluZ1VzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQWN0aW5nVXNlcklkJyk7XHJcbiAgICAgICAgdGhpcy5kYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEYXRlJyk7XHJcbiAgICAgICAgdGhpcy5kZXZpY2VUeXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEZXZpY2VUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5pcEFkZHJlc3MgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lwQWRkcmVzcycpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGb2xkZXJSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgcmV2aXNpb25EYXRlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xyXG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdSZXZpc2lvbkRhdGUnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcbmltcG9ydCB7IFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UgfSBmcm9tICcuL3NlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdyb3VwUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBhY2Nlc3NBbGw6IGJvb2xlYW47XHJcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ09yZ2FuaXphdGlvbklkJyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NBbGwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FjY2Vzc0FsbCcpO1xyXG4gICAgICAgIHRoaXMuZXh0ZXJuYWxJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXh0ZXJuYWxJZCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR3JvdXBEZXRhaWxzUmVzcG9uc2UgZXh0ZW5kcyBHcm91cFJlc3BvbnNlIHtcclxuICAgIGNvbGxlY3Rpb25zOiBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb2xsZWN0aW9ucycpO1xyXG4gICAgICAgIGlmIChjb2xsZWN0aW9ucyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBjb2xsZWN0aW9ucy5tYXAoKGM6IGFueSkgPT4gbmV3IFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UoYykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgSWRlbnRpdHlDYXB0Y2hhUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgc2l0ZUtleTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5zaXRlS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIQ2FwdGNoYV9TaXRlS2V5Jyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuaW1wb3J0IHsgS2RmVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2tkZlR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIElkZW50aXR5VG9rZW5SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xyXG4gICAgZXhwaXJlc0luOiBudW1iZXI7XHJcbiAgICByZWZyZXNoVG9rZW46IHN0cmluZztcclxuICAgIHRva2VuVHlwZTogc3RyaW5nO1xyXG5cclxuICAgIHJlc2V0TWFzdGVyUGFzc3dvcmQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlS2V5OiBzdHJpbmc7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIHR3b0ZhY3RvclRva2VuOiBzdHJpbmc7XHJcbiAgICBrZGY6IEtkZlR5cGU7XHJcbiAgICBrZGZJdGVyYXRpb25zOiBudW1iZXI7XHJcbiAgICBmb3JjZVBhc3N3b3JkUmVzZXQ6IGJvb2xlYW47XHJcbiAgICBhcGlVc2VLZXlDb25uZWN0b3I6IGJvb2xlYW47XHJcbiAgICBrZXlDb25uZWN0b3JVcmw6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgdGhpcy5leHBpcmVzSW4gPSByZXNwb25zZS5leHBpcmVzX2luO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaFRva2VuID0gcmVzcG9uc2UucmVmcmVzaF90b2tlbjtcclxuICAgICAgICB0aGlzLnRva2VuVHlwZSA9IHJlc3BvbnNlLnRva2VuX3R5cGU7XHJcblxyXG4gICAgICAgIHRoaXMucmVzZXRNYXN0ZXJQYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmVzZXRNYXN0ZXJQYXNzd29yZCcpO1xyXG4gICAgICAgIHRoaXMucHJpdmF0ZUtleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUHJpdmF0ZUtleScpO1xyXG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXknKTtcclxuICAgICAgICB0aGlzLnR3b0ZhY3RvclRva2VuID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUd29GYWN0b3JUb2tlbicpO1xyXG4gICAgICAgIHRoaXMua2RmID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZGYnKTtcclxuICAgICAgICB0aGlzLmtkZkl0ZXJhdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tkZkl0ZXJhdGlvbnMnKTtcclxuICAgICAgICB0aGlzLmZvcmNlUGFzc3dvcmRSZXNldCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRm9yY2VQYXNzd29yZFJlc2V0Jyk7XHJcbiAgICAgICAgdGhpcy5hcGlVc2VLZXlDb25uZWN0b3IgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FwaVVzZUtleUNvbm5lY3RvcicpO1xyXG4gICAgICAgIHRoaXMua2V5Q29ubmVjdG9yVXJsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXlDb25uZWN0b3JVcmwnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy90d29GYWN0b3JQcm92aWRlclR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIElkZW50aXR5VHdvRmFjdG9yUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdHdvRmFjdG9yUHJvdmlkZXJzOiBUd29GYWN0b3JQcm92aWRlclR5cGVbXTtcclxuICAgIHR3b0ZhY3RvclByb3ZpZGVyczIgPSBuZXcgTWFwPFR3b0ZhY3RvclByb3ZpZGVyVHlwZSwgeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0+KCk7XHJcbiAgICBjYXB0Y2hhVG9rZW46IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuY2FwdGNoYVRva2VuID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDYXB0Y2hhQnlwYXNzVG9rZW4nKTtcclxuICAgICAgICB0aGlzLnR3b0ZhY3RvclByb3ZpZGVycyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHdvRmFjdG9yUHJvdmlkZXJzJyk7XHJcbiAgICAgICAgY29uc3QgdHdvRmFjdG9yUHJvdmlkZXJzMiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHdvRmFjdG9yUHJvdmlkZXJzMicpO1xyXG4gICAgICAgIGlmICh0d29GYWN0b3JQcm92aWRlcnMyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHR3b0ZhY3RvclByb3ZpZGVyczIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0d29GYWN0b3JQcm92aWRlcnMyLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50d29GYWN0b3JQcm92aWRlcnMyLnNldChwYXJzZUludChwcm9wLCBudWxsKSwgdHdvRmFjdG9yUHJvdmlkZXJzMltwcm9wXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIExpc3RSZXNwb25zZTxUPiBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBkYXRhOiBUW107XHJcbiAgICBjb250aW51YXRpb25Ub2tlbjogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnksIHQ6IG5ldyAoZGF0YVJlc3BvbnNlOiBhbnkpID0+IFQpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGF0YScpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGEgPT0gbnVsbCA/IFtdIDogZGF0YS5tYXAoKGRyOiBhbnkpID0+IG5ldyB0KGRyKSk7XHJcbiAgICAgICAgdGhpcy5jb250aW51YXRpb25Ub2tlbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ29udGludWF0aW9uVG9rZW4nKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZW51bSBTc29UeXBlIHtcclxuICAgIE9wZW5JZENvbm5lY3QgPSAxLFxyXG4gICAgU2FtbDIgPSAyLFxyXG59XHJcblxyXG5lbnVtIE9wZW5JZENvbm5lY3RSZWRpcmVjdEJlaGF2aW9yIHtcclxuICAgIFJlZGlyZWN0R2V0ID0gMCxcclxuICAgIEZvcm1Qb3N0ID0gMSxcclxufVxyXG5cclxuZW51bSBTYW1sMkJpbmRpbmdUeXBlIHtcclxuICAgIEh0dHBSZWRpcmVjdCA9IDEsXHJcbiAgICBIdHRwUG9zdCA9IDIsXHJcbiAgICBBcnRpZmFjdCA9IDQsXHJcbn1cclxuXHJcbmVudW0gU2FtbDJOYW1lSWRGb3JtYXQge1xyXG4gICAgTm90Q29uZmlndXJlZCA9IDAsXHJcbiAgICBVbnNwZWNpZmllZCA9IDEsXHJcbiAgICBFbWFpbEFkZHJlc3MgPSAyLFxyXG4gICAgWDUwOVN1YmplY3ROYW1lID0gMyxcclxuICAgIFdpbmRvd3NEb21haW5RdWFsaWZpZWROYW1lID0gNCxcclxuICAgIEtlcmJlcm9zUHJpbmNpcGFsTmFtZSA9IDUsXHJcbiAgICBFbnRpdHlJZGVudGlmaWVyID0gNixcclxuICAgIFBlcnNpc3RlbnQgPSA3LFxyXG4gICAgVHJhbnNpZW50ID0gOCxcclxufVxyXG5cclxuZW51bSBTYW1sMlNpZ25pbmdCZWhhdmlvciB7XHJcbiAgICBJZklkcFdhbnRBdXRoblJlcXVlc3RzU2lnbmVkID0gMCxcclxuICAgIEFsd2F5cyA9IDEsXHJcbiAgICBOZXZlciA9IDMsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTc29Db25maWdBcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgY29uZmlnVHlwZTogU3NvVHlwZTtcclxuXHJcbiAgICBrZXlDb25uZWN0b3JFbmFibGVkOiBib29sZWFuO1xyXG4gICAga2V5Q29ubmVjdG9yVXJsOiBzdHJpbmc7XHJcblxyXG4gICAgLy8gT3BlbklkXHJcbiAgICBhdXRob3JpdHk6IHN0cmluZztcclxuICAgIGNsaWVudElkOiBzdHJpbmc7XHJcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZztcclxuICAgIG1ldGFkYXRhQWRkcmVzczogc3RyaW5nO1xyXG4gICAgcmVkaXJlY3RCZWhhdmlvcjogT3BlbklkQ29ubmVjdFJlZGlyZWN0QmVoYXZpb3I7XHJcbiAgICBnZXRDbGFpbXNGcm9tVXNlckluZm9FbmRwb2ludDogYm9vbGVhbjtcclxuICAgIGFkZGl0aW9uYWxTY29wZXM6IHN0cmluZztcclxuICAgIGFkZGl0aW9uYWxVc2VySWRDbGFpbVR5cGVzOiBzdHJpbmc7XHJcbiAgICBhZGRpdGlvbmFsRW1haWxDbGFpbVR5cGVzOiBzdHJpbmc7XHJcbiAgICBhZGRpdGlvbmFsTmFtZUNsYWltVHlwZXM6IHN0cmluZztcclxuICAgIGFjclZhbHVlczogc3RyaW5nO1xyXG4gICAgZXhwZWN0ZWRSZXR1cm5BY3JWYWx1ZTogc3RyaW5nO1xyXG5cclxuICAgIC8vIFNBTUxcclxuICAgIHNwTmFtZUlkRm9ybWF0OiBTYW1sMk5hbWVJZEZvcm1hdDtcclxuICAgIHNwT3V0Ym91bmRTaWduaW5nQWxnb3JpdGhtOiBzdHJpbmc7XHJcbiAgICBzcFNpZ25pbmdCZWhhdmlvcjogU2FtbDJTaWduaW5nQmVoYXZpb3I7XHJcbiAgICBzcE1pbkluY29taW5nU2lnbmluZ0FsZ29yaXRobTogYm9vbGVhbjtcclxuICAgIHNwV2FudEFzc2VydGlvbnNTaWduZWQ6IGJvb2xlYW47XHJcbiAgICBzcFZhbGlkYXRlQ2VydGlmaWNhdGVzOiBib29sZWFuO1xyXG5cclxuICAgIGlkcEVudGl0eUlkOiBzdHJpbmc7XHJcbiAgICBpZHBCaW5kaW5nVHlwZTogU2FtbDJCaW5kaW5nVHlwZTtcclxuICAgIGlkcFNpbmdsZVNpZ25PblNlcnZpY2VVcmw6IHN0cmluZztcclxuICAgIGlkcFNpbmdsZUxvZ291dFNlcnZpY2VVcmw6IHN0cmluZztcclxuICAgIGlkcEFydGlmYWN0UmVzb2x1dGlvblNlcnZpY2VVcmw6IHN0cmluZztcclxuICAgIGlkcFg1MDlQdWJsaWNDZXJ0OiBzdHJpbmc7XHJcbiAgICBpZHBPdXRib3VuZFNpZ25pbmdBbGdvcml0aG06IHN0cmluZztcclxuICAgIGlkcEFsbG93VW5zb2xpY2l0ZWRBdXRoblJlc3BvbnNlOiBib29sZWFuO1xyXG4gICAgaWRwRGlzYWJsZU91dGJvdW5kTG9nb3V0UmVxdWVzdHM6IGJvb2xlYW47XHJcbiAgICBpZHBXYW50QXV0aG5SZXF1ZXN0c1NpZ25lZDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YSk7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbmZpZ1R5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NvbmZpZ1R5cGUnKTtcclxuXHJcbiAgICAgICAgdGhpcy5rZXlDb25uZWN0b3JFbmFibGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXlDb25uZWN0b3JFbmFibGVkJyk7XHJcbiAgICAgICAgdGhpcy5rZXlDb25uZWN0b3JVcmwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleUNvbm5lY3RvclVybCcpO1xyXG5cclxuICAgICAgICB0aGlzLmF1dGhvcml0eSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQXV0aG9yaXR5Jyk7XHJcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2xpZW50SWQnKTtcclxuICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2xpZW50U2VjcmV0Jyk7XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YUFkZHJlc3MgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01ldGFkYXRhQWRkcmVzcycpO1xyXG4gICAgICAgIHRoaXMucmVkaXJlY3RCZWhhdmlvciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmVkaXJlY3RCZWhhdmlvcicpO1xyXG4gICAgICAgIHRoaXMuZ2V0Q2xhaW1zRnJvbVVzZXJJbmZvRW5kcG9pbnQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0dldENsYWltc0Zyb21Vc2VySW5mb0VuZHBvaW50Jyk7XHJcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsU2NvcGVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBZGRpdGlvbmFsU2NvcGVzJyk7XHJcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsVXNlcklkQ2xhaW1UeXBlcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQWRkaXRpb25hbFVzZXJJZENsYWltVHlwZXMnKTtcclxuICAgICAgICB0aGlzLmFkZGl0aW9uYWxFbWFpbENsYWltVHlwZXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FkZGl0aW9uYWxFbWFpbENsYWltVHlwZXMnKTtcclxuICAgICAgICB0aGlzLmFkZGl0aW9uYWxOYW1lQ2xhaW1UeXBlcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQWRkaXRpb25hbE5hbWVDbGFpbVR5cGVzJyk7XHJcbiAgICAgICAgdGhpcy5hY3JWYWx1ZXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FjclZhbHVlcycpO1xyXG4gICAgICAgIHRoaXMuZXhwZWN0ZWRSZXR1cm5BY3JWYWx1ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXhwZWN0ZWRSZXR1cm5BY3JWYWx1ZScpO1xyXG5cclxuICAgICAgICB0aGlzLnNwTmFtZUlkRm9ybWF0ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTcE5hbWVJZEZvcm1hdCcpO1xyXG4gICAgICAgIHRoaXMuc3BPdXRib3VuZFNpZ25pbmdBbGdvcml0aG0gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NwT3V0Ym91bmRTaWduaW5nQWxnb3JpdGhtJyk7XHJcbiAgICAgICAgdGhpcy5zcFNpZ25pbmdCZWhhdmlvciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3BTaWduaW5nQmVoYXZpb3InKTtcclxuICAgICAgICB0aGlzLnNwTWluSW5jb21pbmdTaWduaW5nQWxnb3JpdGhtID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTcE1pbkluY29taW5nU2lnbmluZ0FsZ29yaXRobScpO1xyXG4gICAgICAgIHRoaXMuc3BXYW50QXNzZXJ0aW9uc1NpZ25lZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3BXYW50QXNzZXJ0aW9uc1NpZ25lZCcpO1xyXG4gICAgICAgIHRoaXMuc3BWYWxpZGF0ZUNlcnRpZmljYXRlcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3BWYWxpZGF0ZUNlcnRpZmljYXRlcycpO1xyXG5cclxuICAgICAgICB0aGlzLmlkcEVudGl0eUlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZHBFbnRpdHlJZCcpO1xyXG4gICAgICAgIHRoaXMuaWRwQmluZGluZ1R5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkcEJpbmRpbmdUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5pZHBTaW5nbGVTaWduT25TZXJ2aWNlVXJsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZHBTaW5nbGVTaWduT25TZXJ2aWNlVXJsJyk7XHJcbiAgICAgICAgdGhpcy5pZHBTaW5nbGVMb2dvdXRTZXJ2aWNlVXJsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZHBTaW5nbGVMb2dvdXRTZXJ2aWNlVXJsJyk7XHJcbiAgICAgICAgdGhpcy5pZHBBcnRpZmFjdFJlc29sdXRpb25TZXJ2aWNlVXJsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZHBBcnRpZmFjdFJlc29sdXRpb25TZXJ2aWNlVXJsJyk7XHJcbiAgICAgICAgdGhpcy5pZHBYNTA5UHVibGljQ2VydCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWRwWDUwOVB1YmxpY0NlcnQnKTtcclxuICAgICAgICB0aGlzLmlkcE91dGJvdW5kU2lnbmluZ0FsZ29yaXRobSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWRwT3V0Ym91bmRTaWduaW5nQWxnb3JpdGhtJyk7XHJcbiAgICAgICAgdGhpcy5pZHBBbGxvd1Vuc29saWNpdGVkQXV0aG5SZXNwb25zZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWRwQWxsb3dVbnNvbGljaXRlZEF1dGhuUmVzcG9uc2UnKTtcclxuICAgICAgICB0aGlzLmlkcERpc2FibGVPdXRib3VuZExvZ291dFJlcXVlc3RzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZHBEaXNhYmxlT3V0Ym91bmRMb2dvdXRSZXF1ZXN0cycpO1xyXG4gICAgICAgIHRoaXMuaWRwV2FudEF1dGhuUmVxdWVzdHNTaWduZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkcFdhbnRBdXRoblJlcXVlc3RzU2lnbmVkJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3NvQ29uZmlnQXBpIH0gZnJvbSAnLi4vLi4vYXBpL3Nzb0NvbmZpZ0FwaSc7XHJcbmltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uU3NvUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgIGRhdGE6IFNzb0NvbmZpZ0FwaTtcclxuICAgIHVybHM6IFNzb1VybHM7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VuYWJsZWQnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgU3NvQ29uZmlnQXBpKHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGF0YScpKTtcclxuICAgICAgICB0aGlzLnVybHMgPSBuZXcgU3NvVXJscyh0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VybHMnKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFNzb1VybHMgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgY2FsbGJhY2tQYXRoOiBzdHJpbmc7XHJcbiAgICBzaWduZWRPdXRDYWxsYmFja1BhdGg6IHN0cmluZztcclxuICAgIHNwRW50aXR5SWQ6IHN0cmluZztcclxuICAgIHNwTWV0YWRhdGFVcmw6IHN0cmluZztcclxuICAgIHNwQWNzVXJsOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrUGF0aCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2FsbGJhY2tQYXRoJyk7XHJcbiAgICAgICAgdGhpcy5zaWduZWRPdXRDYWxsYmFja1BhdGggPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NpZ25lZE91dENhbGxiYWNrUGF0aCcpO1xyXG4gICAgICAgIHRoaXMuc3BFbnRpdHlJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3BFbnRpdHlJZCcpO1xyXG4gICAgICAgIHRoaXMuc3BNZXRhZGF0YVVybCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3BNZXRhZGF0YVVybCcpO1xyXG4gICAgICAgIHRoaXMuc3BBY3NVcmwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NwQWNzVXJsJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvbkF1dG9FbnJvbGxTdGF0dXNSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgcmVzZXRQYXNzd29yZEVuYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMucmVzZXRQYXNzd29yZEVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Jlc2V0UGFzc3dvcmRFbmFibGVkJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEtleXNSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBwcml2YXRlS2V5OiBzdHJpbmc7XHJcbiAgICBwdWJsaWNLZXk6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMucHJpdmF0ZUtleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUHJpdmF0ZUtleScpO1xyXG4gICAgICAgIHRoaXMucHVibGljS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQdWJsaWNLZXknKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBLZXlzUmVzcG9uc2UgfSBmcm9tICcuL2tleXNSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uS2V5c1Jlc3BvbnNlIGV4dGVuZHMgS2V5c1Jlc3BvbnNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUGxhblR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wbGFuVHlwZSc7XHJcbmltcG9ydCB7IFByb2R1Y3RUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvcHJvZHVjdFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBsYW5SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICB0eXBlOiBQbGFuVHlwZTtcclxuICAgIHByb2R1Y3Q6IFByb2R1Y3RUeXBlO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgaXNBbm51YWw6IGJvb2xlYW47XHJcbiAgICBuYW1lTG9jYWxpemF0aW9uS2V5OiBzdHJpbmc7XHJcbiAgICBkZXNjcmlwdGlvbkxvY2FsaXphdGlvbktleTogc3RyaW5nO1xyXG4gICAgY2FuQmVVc2VkQnlCdXNpbmVzczogYm9vbGVhbjtcclxuICAgIGJhc2VTZWF0czogbnVtYmVyO1xyXG4gICAgYmFzZVN0b3JhZ2VHYjogbnVtYmVyO1xyXG4gICAgbWF4Q29sbGVjdGlvbnM6IG51bWJlcjtcclxuICAgIG1heFVzZXJzOiBudW1iZXI7XHJcblxyXG4gICAgaGFzQWRkaXRpb25hbFNlYXRzT3B0aW9uOiBib29sZWFuO1xyXG4gICAgbWF4QWRkaXRpb25hbFNlYXRzOiBudW1iZXI7XHJcbiAgICBoYXNBZGRpdGlvbmFsU3RvcmFnZU9wdGlvbjogYm9vbGVhbjtcclxuICAgIG1heEFkZGl0aW9uYWxTdG9yYWdlOiBudW1iZXI7XHJcbiAgICBoYXNQcmVtaXVtQWNjZXNzT3B0aW9uOiBib29sZWFuO1xyXG4gICAgdHJpYWxQZXJpb2REYXlzOiBudW1iZXI7XHJcblxyXG4gICAgaGFzU2VsZkhvc3Q6IGJvb2xlYW47XHJcbiAgICBoYXNQb2xpY2llczogYm9vbGVhbjtcclxuICAgIGhhc0dyb3VwczogYm9vbGVhbjtcclxuICAgIGhhc0RpcmVjdG9yeTogYm9vbGVhbjtcclxuICAgIGhhc0V2ZW50czogYm9vbGVhbjtcclxuICAgIGhhc1RvdHA6IGJvb2xlYW47XHJcbiAgICBoYXMyZmE6IGJvb2xlYW47XHJcbiAgICBoYXNBcGk6IGJvb2xlYW47XHJcbiAgICBoYXNTc286IGJvb2xlYW47XHJcbiAgICBoYXNSZXNldFBhc3N3b3JkOiBib29sZWFuO1xyXG4gICAgdXNlcnNHZXRQcmVtaXVtOiBib29sZWFuO1xyXG5cclxuICAgIHVwZ3JhZGVTb3J0T3JkZXI6IG51bWJlcjtcclxuICAgIGRpc3BsYXlTb3J0T3JkZXI6IG51bWJlcjtcclxuICAgIGxlZ2FjeVllYXI6IG51bWJlcjtcclxuICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICAgIHN0cmlwZVBsYW5JZDogc3RyaW5nO1xyXG4gICAgc3RyaXBlU2VhdFBsYW5JZDogc3RyaW5nO1xyXG4gICAgc3RyaXBlU3RvcmFnZVBsYW5JZDogc3RyaW5nO1xyXG4gICAgc3RyaXBlUHJlbWl1bUFjY2Vzc1BsYW5JZDogc3RyaW5nO1xyXG4gICAgYmFzZVByaWNlOiBudW1iZXI7XHJcbiAgICBzZWF0UHJpY2U6IG51bWJlcjtcclxuICAgIGFkZGl0aW9uYWxTdG9yYWdlUHJpY2VQZXJHYjogbnVtYmVyO1xyXG4gICAgcHJlbWl1bUFjY2Vzc09wdGlvblByaWNlOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcclxuICAgICAgICB0aGlzLnByb2R1Y3QgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Byb2R1Y3QnKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcclxuICAgICAgICB0aGlzLmlzQW5udWFsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJc0FubnVhbCcpO1xyXG4gICAgICAgIHRoaXMubmFtZUxvY2FsaXphdGlvbktleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZUxvY2FsaXphdGlvbktleScpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25Mb2NhbGl6YXRpb25LZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Rlc2NyaXB0aW9uTG9jYWxpemF0aW9uS2V5Jyk7XHJcbiAgICAgICAgdGhpcy5jYW5CZVVzZWRCeUJ1c2luZXNzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDYW5CZVVzZWRCeUJ1c2luZXNzJyk7XHJcbiAgICAgICAgdGhpcy5iYXNlU2VhdHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Jhc2VTZWF0cycpO1xyXG4gICAgICAgIHRoaXMuYmFzZVN0b3JhZ2VHYiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQmFzZVN0b3JhZ2VHYicpO1xyXG4gICAgICAgIHRoaXMubWF4Q29sbGVjdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01heENvbGxlY3Rpb25zJyk7XHJcbiAgICAgICAgdGhpcy5tYXhVc2VycyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF4VXNlcnMnKTtcclxuICAgICAgICB0aGlzLmhhc0FkZGl0aW9uYWxTZWF0c09wdGlvbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGFzQWRkaXRpb25hbFNlYXRzT3B0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5tYXhBZGRpdGlvbmFsU2VhdHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01heEFkZGl0aW9uYWxTZWF0cycpO1xyXG4gICAgICAgIHRoaXMuaGFzQWRkaXRpb25hbFN0b3JhZ2VPcHRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc0FkZGl0aW9uYWxTdG9yYWdlT3B0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5tYXhBZGRpdGlvbmFsU3RvcmFnZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF4QWRkaXRpb25hbFN0b3JhZ2UnKTtcclxuICAgICAgICB0aGlzLmhhc1ByZW1pdW1BY2Nlc3NPcHRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc1ByZW1pdW1BY2Nlc3NPcHRpb24nKTtcclxuICAgICAgICB0aGlzLnRyaWFsUGVyaW9kRGF5cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHJpYWxQZXJpb2REYXlzJyk7XHJcbiAgICAgICAgdGhpcy5oYXNTZWxmSG9zdCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGFzU2VsZkhvc3QnKTtcclxuICAgICAgICB0aGlzLmhhc1BvbGljaWVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXNQb2xpY2llcycpO1xyXG4gICAgICAgIHRoaXMuaGFzR3JvdXBzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXNHcm91cHMnKTtcclxuICAgICAgICB0aGlzLmhhc0RpcmVjdG9yeSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGFzRGlyZWN0b3J5Jyk7XHJcbiAgICAgICAgdGhpcy5oYXNFdmVudHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc0V2ZW50cycpO1xyXG4gICAgICAgIHRoaXMuaGFzVG90cCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGFzVG90cCcpO1xyXG4gICAgICAgIHRoaXMuaGFzMmZhID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXMyZmEnKTtcclxuICAgICAgICB0aGlzLmhhc0FwaSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGFzQXBpJyk7XHJcbiAgICAgICAgdGhpcy5oYXNTc28gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc1NzbycpO1xyXG4gICAgICAgIHRoaXMuaGFzUmVzZXRQYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGFzUmVzZXRQYXNzd29yZCcpO1xyXG4gICAgICAgIHRoaXMudXNlcnNHZXRQcmVtaXVtID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2Vyc0dldFByZW1pdW0nKTtcclxuICAgICAgICB0aGlzLnVwZ3JhZGVTb3J0T3JkZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VwZ3JhZGVTb3J0T3JkZXInKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlTb3J0T3JkZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NvcnRPcmRlcicpO1xyXG4gICAgICAgIHRoaXMubGVnYWN5WWVhciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTGVnYWN5WWVhcicpO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Rpc2FibGVkJyk7XHJcbiAgICAgICAgdGhpcy5zdHJpcGVQbGFuSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0cmlwZVBsYW5JZCcpO1xyXG4gICAgICAgIHRoaXMuc3RyaXBlU2VhdFBsYW5JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RyaXBlU2VhdFBsYW5JZCcpO1xyXG4gICAgICAgIHRoaXMuc3RyaXBlU3RvcmFnZVBsYW5JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RyaXBlU3RvcmFnZVBsYW5JZCcpO1xyXG4gICAgICAgIHRoaXMuc3RyaXBlUHJlbWl1bUFjY2Vzc1BsYW5JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RyaXBlUHJlbWl1bUFjY2Vzc1BsYW5JZCcpO1xyXG4gICAgICAgIHRoaXMuYmFzZVByaWNlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCYXNlUHJpY2UnKTtcclxuICAgICAgICB0aGlzLnNlYXRQcmljZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VhdFByaWNlJyk7XHJcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsU3RvcmFnZVByaWNlUGVyR2IgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FkZGl0aW9uYWxTdG9yYWdlUHJpY2VQZXJHYicpO1xyXG4gICAgICAgIHRoaXMucHJlbWl1bUFjY2Vzc09wdGlvblByaWNlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQcmVtaXVtQWNjZXNzT3B0aW9uUHJpY2UnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcbmltcG9ydCB7IFBsYW5SZXNwb25zZSB9IGZyb20gJy4vcGxhblJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IFBsYW5UeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvcGxhblR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvblJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBpZGVudGlmaWVyOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBidXNpbmVzc05hbWU6IHN0cmluZztcclxuICAgIGJ1c2luZXNzQWRkcmVzczE6IHN0cmluZztcclxuICAgIGJ1c2luZXNzQWRkcmVzczI6IHN0cmluZztcclxuICAgIGJ1c2luZXNzQWRkcmVzczM6IHN0cmluZztcclxuICAgIGJ1c2luZXNzQ291bnRyeTogc3RyaW5nO1xyXG4gICAgYnVzaW5lc3NUYXhOdW1iZXI6IHN0cmluZztcclxuICAgIGJpbGxpbmdFbWFpbDogc3RyaW5nO1xyXG4gICAgcGxhbjogUGxhblJlc3BvbnNlO1xyXG4gICAgcGxhblR5cGU6IFBsYW5UeXBlO1xyXG4gICAgc2VhdHM6IG51bWJlcjtcclxuICAgIG1heEF1dG9zY2FsZVNlYXRzOiBudW1iZXI7XHJcbiAgICBtYXhDb2xsZWN0aW9uczogbnVtYmVyO1xyXG4gICAgbWF4U3RvcmFnZUdiOiBudW1iZXI7XHJcbiAgICB1c2VHcm91cHM6IGJvb2xlYW47XHJcbiAgICB1c2VEaXJlY3Rvcnk6IGJvb2xlYW47XHJcbiAgICB1c2VFdmVudHM6IGJvb2xlYW47XHJcbiAgICB1c2VUb3RwOiBib29sZWFuO1xyXG4gICAgdXNlMmZhOiBib29sZWFuO1xyXG4gICAgdXNlQXBpOiBib29sZWFuO1xyXG4gICAgdXNlUmVzZXRQYXNzd29yZDogYm9vbGVhbjtcclxuICAgIGhhc1B1YmxpY0FuZFByaXZhdGVLZXlzOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkZW50aWZpZXInKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcclxuICAgICAgICB0aGlzLmJ1c2luZXNzTmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQnVzaW5lc3NOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5idXNpbmVzc0FkZHJlc3MxID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCdXNpbmVzc0FkZHJlc3MxJyk7XHJcbiAgICAgICAgdGhpcy5idXNpbmVzc0FkZHJlc3MyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCdXNpbmVzc0FkZHJlc3MyJyk7XHJcbiAgICAgICAgdGhpcy5idXNpbmVzc0FkZHJlc3MzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCdXNpbmVzc0FkZHJlc3MzJyk7XHJcbiAgICAgICAgdGhpcy5idXNpbmVzc0NvdW50cnkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0J1c2luZXNzQ291bnRyeScpO1xyXG4gICAgICAgIHRoaXMuYnVzaW5lc3NUYXhOdW1iZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0J1c2luZXNzVGF4TnVtYmVyJyk7XHJcbiAgICAgICAgdGhpcy5iaWxsaW5nRW1haWwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0JpbGxpbmdFbWFpbCcpO1xyXG4gICAgICAgIGNvbnN0IHBsYW4gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1BsYW4nKTtcclxuICAgICAgICB0aGlzLnBsYW4gPSBwbGFuID09IG51bGwgPyBudWxsIDogbmV3IFBsYW5SZXNwb25zZShwbGFuKTtcclxuICAgICAgICB0aGlzLnBsYW5UeXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQbGFuVHlwZScpO1xyXG4gICAgICAgIHRoaXMuc2VhdHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NlYXRzJyk7XHJcbiAgICAgICAgdGhpcy5tYXhBdXRvc2NhbGVTZWF0cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF4QXV0b3NjYWxlU2VhdHMnKTtcclxuICAgICAgICB0aGlzLm1heENvbGxlY3Rpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYXhDb2xsZWN0aW9ucycpO1xyXG4gICAgICAgIHRoaXMubWF4U3RvcmFnZUdiID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYXhTdG9yYWdlR2InKTtcclxuICAgICAgICB0aGlzLnVzZUdyb3VwcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlR3JvdXBzJyk7XHJcbiAgICAgICAgdGhpcy51c2VEaXJlY3RvcnkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZURpcmVjdG9yeScpO1xyXG4gICAgICAgIHRoaXMudXNlRXZlbnRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VFdmVudHMnKTtcclxuICAgICAgICB0aGlzLnVzZVRvdHAgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZVRvdHAnKTtcclxuICAgICAgICB0aGlzLnVzZTJmYSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlMmZhJyk7XHJcbiAgICAgICAgdGhpcy51c2VBcGkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZUFwaScpO1xyXG4gICAgICAgIHRoaXMudXNlUmVzZXRQYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlUmVzZXRQYXNzd29yZCcpO1xyXG4gICAgICAgIHRoaXMuaGFzUHVibGljQW5kUHJpdmF0ZUtleXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc1B1YmxpY0FuZFByaXZhdGVLZXlzJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN1YnNjcmlwdGlvblJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIHN0b3JhZ2VOYW1lOiBzdHJpbmc7XHJcbiAgICBzdG9yYWdlR2I6IG51bWJlcjtcclxuICAgIG1heFN0b3JhZ2VHYjogbnVtYmVyO1xyXG4gICAgc3Vic2NyaXB0aW9uOiBCaWxsaW5nU3Vic2NyaXB0aW9uUmVzcG9uc2U7XHJcbiAgICB1cGNvbWluZ0ludm9pY2U6IEJpbGxpbmdTdWJzY3JpcHRpb25VcGNvbWluZ0ludm9pY2VSZXNwb25zZTtcclxuICAgIGxpY2Vuc2U6IGFueTtcclxuICAgIGV4cGlyYXRpb246IHN0cmluZztcclxuICAgIHVzaW5nSW5BcHBQdXJjaGFzZTogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZU5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0b3JhZ2VOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlR2IgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0b3JhZ2VHYicpO1xyXG4gICAgICAgIHRoaXMubWF4U3RvcmFnZUdiID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYXhTdG9yYWdlR2InKTtcclxuICAgICAgICB0aGlzLmxpY2Vuc2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0xpY2Vuc2UnKTtcclxuICAgICAgICB0aGlzLmV4cGlyYXRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0V4cGlyYXRpb24nKTtcclxuICAgICAgICB0aGlzLnVzaW5nSW5BcHBQdXJjaGFzZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNpbmdJbkFwcFB1cmNoYXNlJyk7XHJcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdWJzY3JpcHRpb24nKTtcclxuICAgICAgICBjb25zdCB1cGNvbWluZ0ludm9pY2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VwY29taW5nSW52b2ljZScpO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uID09IG51bGwgPyBudWxsIDogbmV3IEJpbGxpbmdTdWJzY3JpcHRpb25SZXNwb25zZShzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIHRoaXMudXBjb21pbmdJbnZvaWNlID0gdXBjb21pbmdJbnZvaWNlID09IG51bGwgPyBudWxsIDpcclxuICAgICAgICAgICAgbmV3IEJpbGxpbmdTdWJzY3JpcHRpb25VcGNvbWluZ0ludm9pY2VSZXNwb25zZSh1cGNvbWluZ0ludm9pY2UpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmlsbGluZ1N1YnNjcmlwdGlvblJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIHRyaWFsU3RhcnREYXRlOiBzdHJpbmc7XHJcbiAgICB0cmlhbEVuZERhdGU6IHN0cmluZztcclxuICAgIHBlcmlvZFN0YXJ0RGF0ZTogc3RyaW5nO1xyXG4gICAgcGVyaW9kRW5kRGF0ZTogc3RyaW5nO1xyXG4gICAgY2FuY2VsbGVkRGF0ZTogc3RyaW5nO1xyXG4gICAgY2FuY2VsQXRFbmREYXRlOiBib29sZWFuO1xyXG4gICAgc3RhdHVzOiBzdHJpbmc7XHJcbiAgICBjYW5jZWxsZWQ6IGJvb2xlYW47XHJcbiAgICBpdGVtczogQmlsbGluZ1N1YnNjcmlwdGlvbkl0ZW1SZXNwb25zZVtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLnRyaWFsRW5kRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHJpYWxTdGFydERhdGUnKTtcclxuICAgICAgICB0aGlzLnRyaWFsRW5kRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHJpYWxFbmREYXRlJyk7XHJcbiAgICAgICAgdGhpcy5wZXJpb2RTdGFydERhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1BlcmlvZFN0YXJ0RGF0ZScpO1xyXG4gICAgICAgIHRoaXMucGVyaW9kRW5kRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGVyaW9kRW5kRGF0ZScpO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsbGVkRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2FuY2VsbGVkRGF0ZScpO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsQXRFbmREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDYW5jZWxBdEVuZERhdGUnKTtcclxuICAgICAgICB0aGlzLnN0YXR1cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RhdHVzJyk7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NhbmNlbGxlZCcpO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJdGVtcycpO1xyXG4gICAgICAgIGlmIChpdGVtcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcy5tYXAoKGk6IGFueSkgPT4gbmV3IEJpbGxpbmdTdWJzY3JpcHRpb25JdGVtUmVzcG9uc2UoaSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJpbGxpbmdTdWJzY3JpcHRpb25JdGVtUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgYW1vdW50OiBudW1iZXI7XHJcbiAgICBxdWFudGl0eTogbnVtYmVyO1xyXG4gICAgaW50ZXJ2YWw6IHN0cmluZztcclxuICAgIHNwb25zb3JlZFN1YnNjcmlwdGlvbkl0ZW06IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcclxuICAgICAgICB0aGlzLmFtb3VudCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQW1vdW50Jyk7XHJcbiAgICAgICAgdGhpcy5xdWFudGl0eSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUXVhbnRpdHknKTtcclxuICAgICAgICB0aGlzLmludGVydmFsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJbnRlcnZhbCcpO1xyXG4gICAgICAgIHRoaXMuc3BvbnNvcmVkU3Vic2NyaXB0aW9uSXRlbSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3BvbnNvcmVkU3Vic2NyaXB0aW9uSXRlbScpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmlsbGluZ1N1YnNjcmlwdGlvblVwY29taW5nSW52b2ljZVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGRhdGU6IHN0cmluZztcclxuICAgIGFtb3VudDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5kYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEYXRlJyk7XHJcbiAgICAgICAgdGhpcy5hbW91bnQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Ftb3VudCcpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvblJlc3BvbnNlIH0gZnJvbSAnLi9vcmdhbml6YXRpb25SZXNwb25zZSc7XHJcbmltcG9ydCB7XHJcbiAgICBCaWxsaW5nU3Vic2NyaXB0aW9uUmVzcG9uc2UsXHJcbiAgICBCaWxsaW5nU3Vic2NyaXB0aW9uVXBjb21pbmdJbnZvaWNlUmVzcG9uc2UsXHJcbn0gZnJvbSAnLi9zdWJzY3JpcHRpb25SZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uU3Vic2NyaXB0aW9uUmVzcG9uc2UgZXh0ZW5kcyBPcmdhbml6YXRpb25SZXNwb25zZSB7XHJcbiAgICBzdG9yYWdlTmFtZTogc3RyaW5nO1xyXG4gICAgc3RvcmFnZUdiOiBudW1iZXI7XHJcbiAgICBzdWJzY3JpcHRpb246IEJpbGxpbmdTdWJzY3JpcHRpb25SZXNwb25zZTtcclxuICAgIHVwY29taW5nSW52b2ljZTogQmlsbGluZ1N1YnNjcmlwdGlvblVwY29taW5nSW52b2ljZVJlc3BvbnNlO1xyXG4gICAgZXhwaXJhdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlTmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RvcmFnZU5hbWUnKTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2VHYiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RvcmFnZUdiJyk7XHJcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdWJzY3JpcHRpb24nKTtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbiA9PSBudWxsID8gbnVsbCA6IG5ldyBCaWxsaW5nU3Vic2NyaXB0aW9uUmVzcG9uc2Uoc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICBjb25zdCB1cGNvbWluZ0ludm9pY2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VwY29taW5nSW52b2ljZScpO1xyXG4gICAgICAgIHRoaXMudXBjb21pbmdJbnZvaWNlID0gdXBjb21pbmdJbnZvaWNlID09IG51bGwgPyBudWxsIDpcclxuICAgICAgICAgICAgbmV3IEJpbGxpbmdTdWJzY3JpcHRpb25VcGNvbWluZ0ludm9pY2VSZXNwb25zZSh1cGNvbWluZ0ludm9pY2UpO1xyXG4gICAgICAgIHRoaXMuZXhwaXJhdGlvbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXhwaXJhdGlvbicpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb25Vc2VyQnVsa1B1YmxpY0tleVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxuICAgIGtleTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlcklkJyk7XHJcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb25Vc2VyQnVsa1Jlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBlcnJvcjogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLmVycm9yID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFcnJvcicpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGVybWlzc2lvbnNBcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgYWNjZXNzRXZlbnRMb2dzOiBib29sZWFuO1xyXG4gICAgYWNjZXNzSW1wb3J0RXhwb3J0OiBib29sZWFuO1xyXG4gICAgYWNjZXNzUmVwb3J0czogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgU2VwIDI5IDIwMjE6IFRoaXMgcGVybWlzc2lvbiBoYXMgYmVlbiBzcGxpdCBvdXQgdG8gYGNyZWF0ZU5ld0NvbGxlY3Rpb25zYCwgYGVkaXRBbnlDb2xsZWN0aW9uYCwgYW5kXHJcbiAgICAgKiBgZGVsZXRlQW55Q29sbGVjdGlvbmAuIEl0IGV4aXN0cyBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIFNlcnZlciB2ZXJzaW9ucyA8PSAxLjQzLjBcclxuICAgICAqL1xyXG4gICAgbWFuYWdlQWxsQ29sbGVjdGlvbnM6IGJvb2xlYW47XHJcbiAgICBjcmVhdGVOZXdDb2xsZWN0aW9uczogYm9vbGVhbjtcclxuICAgIGVkaXRBbnlDb2xsZWN0aW9uOiBib29sZWFuO1xyXG4gICAgZGVsZXRlQW55Q29sbGVjdGlvbjogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgU2VwIDI5IDIwMjE6IFRoaXMgcGVybWlzc2lvbiBoYXMgYmVlbiBzcGxpdCBvdXQgdG8gYGVkaXRBc3NpZ25lZENvbGxlY3Rpb25zYCBhbmRcclxuICAgICAqIGBkZWxldGVBc3NpZ25lZENvbGxlY3Rpb25zYC4gSXQgZXhpc3RzIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggU2VydmVyIHZlcnNpb25zIDw9IDEuNDMuMFxyXG4gICAgICovXHJcbiAgICBtYW5hZ2VBc3NpZ25lZENvbGxlY3Rpb25zOiBib29sZWFuO1xyXG4gICAgZWRpdEFzc2lnbmVkQ29sbGVjdGlvbnM6IGJvb2xlYW47XHJcbiAgICBkZWxldGVBc3NpZ25lZENvbGxlY3Rpb25zOiBib29sZWFuO1xyXG4gICAgbWFuYWdlQ2lwaGVyczogYm9vbGVhbjtcclxuICAgIG1hbmFnZUdyb3VwczogYm9vbGVhbjtcclxuICAgIG1hbmFnZVNzbzogYm9vbGVhbjtcclxuICAgIG1hbmFnZVBvbGljaWVzOiBib29sZWFuO1xyXG4gICAgbWFuYWdlVXNlcnM6IGJvb2xlYW47XHJcbiAgICBtYW5hZ2VSZXNldFBhc3N3b3JkOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcclxuICAgICAgICBzdXBlcihkYXRhKTtcclxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFjY2Vzc0V2ZW50TG9ncyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQWNjZXNzRXZlbnRMb2dzJyk7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NJbXBvcnRFeHBvcnQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FjY2Vzc0ltcG9ydEV4cG9ydCcpO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzUmVwb3J0cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQWNjZXNzUmVwb3J0cycpO1xyXG5cclxuICAgICAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBTZXJ2ZXIgPD0gMS40My4wXHJcbiAgICAgICAgdGhpcy5tYW5hZ2VBbGxDb2xsZWN0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWFuYWdlQWxsQ29sbGVjdGlvbnMnKTtcclxuICAgICAgICB0aGlzLm1hbmFnZUFzc2lnbmVkQ29sbGVjdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01hbmFnZUFzc2lnbmVkQ29sbGVjdGlvbnMnKTtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVOZXdDb2xsZWN0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ3JlYXRlTmV3Q29sbGVjdGlvbnMnKTtcclxuICAgICAgICB0aGlzLmVkaXRBbnlDb2xsZWN0aW9uID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFZGl0QW55Q29sbGVjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuZGVsZXRlQW55Q29sbGVjdGlvbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGVsZXRlQW55Q29sbGVjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuZWRpdEFzc2lnbmVkQ29sbGVjdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VkaXRBc3NpZ25lZENvbGxlY3Rpb25zJyk7XHJcbiAgICAgICAgdGhpcy5kZWxldGVBc3NpZ25lZENvbGxlY3Rpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEZWxldGVBc3NpZ25lZENvbGxlY3Rpb25zJyk7XHJcblxyXG4gICAgICAgIHRoaXMubWFuYWdlQ2lwaGVycyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWFuYWdlQ2lwaGVycycpO1xyXG4gICAgICAgIHRoaXMubWFuYWdlR3JvdXBzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYW5hZ2VHcm91cHMnKTtcclxuICAgICAgICB0aGlzLm1hbmFnZVNzbyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWFuYWdlU3NvJyk7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VQb2xpY2llcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWFuYWdlUG9saWNpZXMnKTtcclxuICAgICAgICB0aGlzLm1hbmFnZVVzZXJzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYW5hZ2VVc2VycycpO1xyXG4gICAgICAgIHRoaXMubWFuYWdlUmVzZXRQYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWFuYWdlUmVzZXRQYXNzd29yZCcpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuaW1wb3J0IHsgU2VsZWN0aW9uUmVhZE9ubHlSZXNwb25zZSB9IGZyb20gJy4vc2VsZWN0aW9uUmVhZE9ubHlSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBQZXJtaXNzaW9uc0FwaSB9IGZyb20gJy4uL2FwaS9wZXJtaXNzaW9uc0FwaSc7XHJcblxyXG5pbXBvcnQgeyBLZGZUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMva2RmVHlwZSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGUnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25Vc2VyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL29yZ2FuaXphdGlvblVzZXJUeXBlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb25Vc2VyUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgdHlwZTogT3JnYW5pemF0aW9uVXNlclR5cGU7XHJcbiAgICBzdGF0dXM6IE9yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlO1xyXG4gICAgYWNjZXNzQWxsOiBib29sZWFuO1xyXG4gICAgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zQXBpO1xyXG4gICAgcmVzZXRQYXNzd29yZEVucm9sbGVkOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlcklkJyk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0YXR1cycpO1xyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnMgPSBuZXcgUGVybWlzc2lvbnNBcGkodGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQZXJtaXNzaW9ucycpKTtcclxuICAgICAgICB0aGlzLmFjY2Vzc0FsbCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQWNjZXNzQWxsJyk7XHJcbiAgICAgICAgdGhpcy5yZXNldFBhc3N3b3JkRW5yb2xsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Jlc2V0UGFzc3dvcmRFbnJvbGxlZCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uVXNlclVzZXJEZXRhaWxzUmVzcG9uc2UgZXh0ZW5kcyBPcmdhbml6YXRpb25Vc2VyUmVzcG9uc2Uge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgZW1haWw6IHN0cmluZztcclxuICAgIHR3b0ZhY3RvckVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICB1c2VzS2V5Q29ubmVjdG9yOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5lbWFpbCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW1haWwnKTtcclxuICAgICAgICB0aGlzLnR3b0ZhY3RvckVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R3b0ZhY3RvckVuYWJsZWQnKTtcclxuICAgICAgICB0aGlzLnVzZXNLZXlDb25uZWN0b3IgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXNLZXlDb25uZWN0b3InKSA/PyBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvblVzZXJEZXRhaWxzUmVzcG9uc2UgZXh0ZW5kcyBPcmdhbml6YXRpb25Vc2VyUmVzcG9uc2Uge1xyXG4gICAgY29sbGVjdGlvbnM6IFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2VbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NvbGxlY3Rpb25zJyk7XHJcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zLm1hcCgoYzogYW55KSA9PiBuZXcgU2VsZWN0aW9uUmVhZE9ubHlSZXNwb25zZShjKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uVXNlclJlc2V0UGFzc3dvcmREZXRhaWxzUmVwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBrZGY6IEtkZlR5cGU7XHJcbiAgICBrZGZJdGVyYXRpb25zOiBudW1iZXI7XHJcbiAgICByZXNldFBhc3N3b3JkS2V5OiBzdHJpbmc7XHJcbiAgICBlbmNyeXB0ZWRQcml2YXRlS2V5OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmtkZiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2RmJyk7XHJcbiAgICAgICAgdGhpcy5rZGZJdGVyYXRpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZGZJdGVyYXRpb25zJyk7XHJcbiAgICAgICAgdGhpcy5yZXNldFBhc3N3b3JkS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdSZXNldFBhc3N3b3JkS2V5Jyk7XHJcbiAgICAgICAgdGhpcy5lbmNyeXB0ZWRQcml2YXRlS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbmNyeXB0ZWRQcml2YXRlS2V5Jyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9vcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclR5cGUnO1xyXG5pbXBvcnQgeyBQcm9kdWN0VHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3Byb2R1Y3RUeXBlJztcclxuaW1wb3J0IHsgUGVybWlzc2lvbnNBcGkgfSBmcm9tICcuLi9hcGkvcGVybWlzc2lvbnNBcGknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgdXNlUG9saWNpZXM6IGJvb2xlYW47XHJcbiAgICB1c2VHcm91cHM6IGJvb2xlYW47XHJcbiAgICB1c2VEaXJlY3Rvcnk6IGJvb2xlYW47XHJcbiAgICB1c2VFdmVudHM6IGJvb2xlYW47XHJcbiAgICB1c2VUb3RwOiBib29sZWFuO1xyXG4gICAgdXNlMmZhOiBib29sZWFuO1xyXG4gICAgdXNlQXBpOiBib29sZWFuO1xyXG4gICAgdXNlU3NvOiBib29sZWFuO1xyXG4gICAgdXNlS2V5Q29ubmVjdG9yOiBib29sZWFuO1xyXG4gICAgdXNlUmVzZXRQYXNzd29yZDogYm9vbGVhbjtcclxuICAgIHNlbGZIb3N0OiBib29sZWFuO1xyXG4gICAgdXNlcnNHZXRQcmVtaXVtOiBib29sZWFuO1xyXG4gICAgc2VhdHM6IG51bWJlcjtcclxuICAgIG1heENvbGxlY3Rpb25zOiBudW1iZXI7XHJcbiAgICBtYXhTdG9yYWdlR2I/OiBudW1iZXI7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIGhhc1B1YmxpY0FuZFByaXZhdGVLZXlzOiBib29sZWFuO1xyXG4gICAgc3RhdHVzOiBPcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZTtcclxuICAgIHR5cGU6IE9yZ2FuaXphdGlvblVzZXJUeXBlO1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgIHNzb0JvdW5kOiBib29sZWFuO1xyXG4gICAgaWRlbnRpZmllcjogc3RyaW5nO1xyXG4gICAgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zQXBpO1xyXG4gICAgcmVzZXRQYXNzd29yZEVucm9sbGVkOiBib29sZWFuO1xyXG4gICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICBwcm92aWRlcklkOiBzdHJpbmc7XHJcbiAgICBwcm92aWRlck5hbWU6IHN0cmluZztcclxuICAgIGZhbWlseVNwb25zb3JzaGlwRnJpZW5kbHlOYW1lOiBzdHJpbmc7XHJcbiAgICBmYW1pbHlTcG9uc29yc2hpcEF2YWlsYWJsZTogYm9vbGVhbjtcclxuICAgIHBsYW5Qcm9kdWN0VHlwZTogUHJvZHVjdFR5cGU7XHJcbiAgICBrZXlDb25uZWN0b3JFbmFibGVkOiBib29sZWFuO1xyXG4gICAga2V5Q29ubmVjdG9yVXJsOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xyXG4gICAgICAgIHRoaXMudXNlUG9saWNpZXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZVBvbGljaWVzJyk7XHJcbiAgICAgICAgdGhpcy51c2VHcm91cHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZUdyb3VwcycpO1xyXG4gICAgICAgIHRoaXMudXNlRGlyZWN0b3J5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VEaXJlY3RvcnknKTtcclxuICAgICAgICB0aGlzLnVzZUV2ZW50cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlRXZlbnRzJyk7XHJcbiAgICAgICAgdGhpcy51c2VUb3RwID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VUb3RwJyk7XHJcbiAgICAgICAgdGhpcy51c2UyZmEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZTJmYScpO1xyXG4gICAgICAgIHRoaXMudXNlQXBpID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VBcGknKTtcclxuICAgICAgICB0aGlzLnVzZVNzbyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlU3NvJyk7XHJcbiAgICAgICAgdGhpcy51c2VLZXlDb25uZWN0b3IgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZUtleUNvbm5lY3RvcicpID8/IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudXNlUmVzZXRQYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlUmVzZXRQYXNzd29yZCcpO1xyXG4gICAgICAgIHRoaXMuc2VsZkhvc3QgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NlbGZIb3N0Jyk7XHJcbiAgICAgICAgdGhpcy51c2Vyc0dldFByZW1pdW0gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJzR2V0UHJlbWl1bScpO1xyXG4gICAgICAgIHRoaXMuc2VhdHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NlYXRzJyk7XHJcbiAgICAgICAgdGhpcy5tYXhDb2xsZWN0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF4Q29sbGVjdGlvbnMnKTtcclxuICAgICAgICB0aGlzLm1heFN0b3JhZ2VHYiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF4U3RvcmFnZUdiJyk7XHJcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleScpO1xyXG4gICAgICAgIHRoaXMuaGFzUHVibGljQW5kUHJpdmF0ZUtleXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc1B1YmxpY0FuZFByaXZhdGVLZXlzJyk7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0YXR1cycpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW5hYmxlZCcpO1xyXG4gICAgICAgIHRoaXMuc3NvQm91bmQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Nzb0JvdW5kJyk7XHJcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZGVudGlmaWVyJyk7XHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9ucyA9IG5ldyBQZXJtaXNzaW9uc0FwaSh0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ3Blcm1pc3Npb25zJykpO1xyXG4gICAgICAgIHRoaXMucmVzZXRQYXNzd29yZEVucm9sbGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdSZXNldFBhc3N3b3JkRW5yb2xsZWQnKTtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlcklkJyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQcm92aWRlcklkJyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlck5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Byb3ZpZGVyTmFtZScpO1xyXG4gICAgICAgIHRoaXMuZmFtaWx5U3BvbnNvcnNoaXBGcmllbmRseU5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0ZhbWlseVNwb25zb3JzaGlwRnJpZW5kbHlOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5mYW1pbHlTcG9uc29yc2hpcEF2YWlsYWJsZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRmFtaWx5U3BvbnNvcnNoaXBBdmFpbGFibGUnKTtcclxuICAgICAgICB0aGlzLnBsYW5Qcm9kdWN0VHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGxhblByb2R1Y3RUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5rZXlDb25uZWN0b3JFbmFibGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXlDb25uZWN0b3JFbmFibGVkJykgPz8gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5rZXlDb25uZWN0b3JVcmwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleUNvbm5lY3RvclVybCcpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSB9IGZyb20gJy4vcHJvZmlsZU9yZ2FuaXphdGlvblJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9maWxlUHJvdmlkZXJPcmdhbml6YXRpb25SZXNwb25zZSBleHRlbmRzIFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMua2V5Q29ubmVjdG9yRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IFByb3ZpZGVyVXNlclN0YXR1c1R5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wcm92aWRlclVzZXJTdGF0dXNUeXBlJztcclxuaW1wb3J0IHsgUHJvdmlkZXJVc2VyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3Byb3ZpZGVyVXNlclR5cGUnO1xyXG5cclxuaW1wb3J0IHsgUGVybWlzc2lvbnNBcGkgfSBmcm9tICcuLi9hcGkvcGVybWlzc2lvbnNBcGknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb2ZpbGVQcm92aWRlclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIHN0YXR1czogUHJvdmlkZXJVc2VyU3RhdHVzVHlwZTtcclxuICAgIHR5cGU6IFByb3ZpZGVyVXNlclR5cGU7XHJcbiAgICBlbmFibGVkOiBib29sZWFuO1xyXG4gICAgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zQXBpO1xyXG4gICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICB1c2VFdmVudHM6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xyXG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXknKTtcclxuICAgICAgICB0aGlzLnN0YXR1cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RhdHVzJyk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbmFibGVkJyk7XHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9ucyA9IG5ldyBQZXJtaXNzaW9uc0FwaSh0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ3Blcm1pc3Npb25zJykpO1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VySWQnKTtcclxuICAgICAgICB0aGlzLnVzZUV2ZW50cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlRXZlbnRzJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBQcm9maWxlT3JnYW5pemF0aW9uUmVzcG9uc2UgfSBmcm9tICcuL3Byb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSc7XHJcbmltcG9ydCB7IFByb2ZpbGVQcm92aWRlck9yZ2FuaXphdGlvblJlc3BvbnNlIH0gZnJvbSAnLi9wcm9maWxlUHJvdmlkZXJPcmdhbml6YXRpb25SZXNwb25zZSc7XHJcbmltcG9ydCB7IFByb2ZpbGVQcm92aWRlclJlc3BvbnNlIH0gZnJvbSAnLi9wcm9maWxlUHJvdmlkZXJSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvZmlsZVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgZW1haWxWZXJpZmllZDogYm9vbGVhbjtcclxuICAgIG1hc3RlclBhc3N3b3JkSGludDogc3RyaW5nO1xyXG4gICAgcHJlbWl1bTogYm9vbGVhbjtcclxuICAgIGN1bHR1cmU6IHN0cmluZztcclxuICAgIHR3b0ZhY3RvckVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIHByaXZhdGVLZXk6IHN0cmluZztcclxuICAgIHNlY3VyaXR5U3RhbXA6IHN0cmluZztcclxuICAgIGZvcmNlUGFzc3dvcmRSZXNldDogYm9vbGVhbjtcclxuICAgIHVzZXNLZXlDb25uZWN0b3I6IGJvb2xlYW47XHJcbiAgICBvcmdhbml6YXRpb25zOiBQcm9maWxlT3JnYW5pemF0aW9uUmVzcG9uc2VbXSA9IFtdO1xyXG4gICAgcHJvdmlkZXJzOiBQcm9maWxlUHJvdmlkZXJSZXNwb25zZVtdID0gW107XHJcbiAgICBwcm92aWRlck9yZ2FuaXphdGlvbnM6IFByb2ZpbGVQcm92aWRlck9yZ2FuaXphdGlvblJlc3BvbnNlW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5lbWFpbCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW1haWwnKTtcclxuICAgICAgICB0aGlzLmVtYWlsVmVyaWZpZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VtYWlsVmVyaWZpZWQnKTtcclxuICAgICAgICB0aGlzLm1hc3RlclBhc3N3b3JkSGludCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWFzdGVyUGFzc3dvcmRIaW50Jyk7XHJcbiAgICAgICAgdGhpcy5wcmVtaXVtID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQcmVtaXVtJyk7XHJcbiAgICAgICAgdGhpcy5jdWx0dXJlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDdWx0dXJlJyk7XHJcbiAgICAgICAgdGhpcy50d29GYWN0b3JFbmFibGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUd29GYWN0b3JFbmFibGVkJyk7XHJcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleScpO1xyXG4gICAgICAgIHRoaXMucHJpdmF0ZUtleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUHJpdmF0ZUtleScpO1xyXG4gICAgICAgIHRoaXMuc2VjdXJpdHlTdGFtcCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VjdXJpdHlTdGFtcCcpO1xyXG4gICAgICAgIHRoaXMuZm9yY2VQYXNzd29yZFJlc2V0ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGb3JjZVBhc3N3b3JkUmVzZXQnKSA/PyBmYWxzZTtcclxuICAgICAgICB0aGlzLnVzZXNLZXlDb25uZWN0b3IgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXNLZXlDb25uZWN0b3InKSA/PyBmYWxzZTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnT3JnYW5pemF0aW9ucycpO1xyXG4gICAgICAgIGlmIChvcmdhbml6YXRpb25zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5vcmdhbml6YXRpb25zID0gb3JnYW5pemF0aW9ucy5tYXAoKG86IGFueSkgPT4gbmV3IFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZShvKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUHJvdmlkZXJzJyk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVycyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzID0gcHJvdmlkZXJzLm1hcCgobzogYW55KSA9PiBuZXcgUHJvZmlsZVByb3ZpZGVyUmVzcG9uc2UobykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwcm92aWRlck9yZ2FuaXphdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Byb3ZpZGVyT3JnYW5pemF0aW9ucycpO1xyXG4gICAgICAgIGlmIChwcm92aWRlck9yZ2FuaXphdGlvbnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyT3JnYW5pemF0aW9ucyA9IHByb3ZpZGVyT3JnYW5pemF0aW9ucy5tYXAoKG86IGFueSkgPT4gbmV3IFByb2ZpbGVQcm92aWRlck9yZ2FuaXphdGlvblJlc3BvbnNlKG8pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBQcm9maWxlUmVzcG9uc2UgfSBmcm9tICcuL3Byb2ZpbGVSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGF5bWVudFJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIHVzZXJQcm9maWxlOiBQcm9maWxlUmVzcG9uc2U7XHJcbiAgICBwYXltZW50SW50ZW50Q2xpZW50U2VjcmV0OiBzdHJpbmc7XHJcbiAgICBzdWNjZXNzOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgY29uc3QgdXNlclByb2ZpbGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJQcm9maWxlJyk7XHJcbiAgICAgICAgaWYgKHVzZXJQcm9maWxlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy51c2VyUHJvZmlsZSA9IG5ldyBQcm9maWxlUmVzcG9uc2UodXNlclByb2ZpbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBheW1lbnRJbnRlbnRDbGllbnRTZWNyZXQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1BheW1lbnRJbnRlbnRDbGllbnRTZWNyZXQnKTtcclxuICAgICAgICB0aGlzLnN1Y2Nlc3MgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N1Y2Nlc3MnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBQb2xpY3lUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvcG9saWN5VHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9saWN5UmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBQb2xpY3lUeXBlO1xyXG4gICAgZGF0YTogYW55O1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XHJcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnT3JnYW5pemF0aW9uSWQnKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0RhdGEnKTtcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VuYWJsZWQnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBLZGZUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMva2RmVHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJlbG9naW5SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBrZGY6IEtkZlR5cGU7XHJcbiAgICBrZGZJdGVyYXRpb25zOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmtkZiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2RmJyk7XHJcbiAgICAgICAgdGhpcy5rZGZJdGVyYXRpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZGZJdGVyYXRpb25zJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm92aWRlck9yZ2FuaXphdGlvblJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBwcm92aWRlcklkOiBzdHJpbmc7XHJcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xyXG4gICAga2V5OiBzdHJpbmc7XHJcbiAgICBzZXR0aW5nczogc3RyaW5nO1xyXG4gICAgY3JlYXRpb25EYXRlOiBzdHJpbmc7XHJcbiAgICByZXZpc2lvbkRhdGU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQcm92aWRlcklkJyk7XHJcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnT3JnYW5pemF0aW9uSWQnKTtcclxuICAgICAgICB0aGlzLmtleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2V5Jyk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2V0dGluZ3MnKTtcclxuICAgICAgICB0aGlzLmNyZWF0aW9uRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ3JlYXRpb25EYXRlJyk7XHJcbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1JldmlzaW9uRGF0ZScpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJPcmdhbml6YXRpb25Pcmdhbml6YXRpb25EZXRhaWxzUmVzcG9uc2UgZXh0ZW5kcyBQcm92aWRlck9yZ2FuaXphdGlvblJlc3BvbnNlIHtcclxuICAgIG9yZ2FuaXphdGlvbk5hbWU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uTmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnT3JnYW5pemF0aW9uTmFtZScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgYnVzaW5lc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBiaWxsaW5nRW1haWw6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5idXNpbmVzc05hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0J1c2luZXNzTmFtZScpO1xyXG4gICAgICAgIHRoaXMuYmlsbGluZ0VtYWlsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCaWxsaW5nRW1haWwnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPcmdhbml6YXRpb25Vc2VyQnVsa1B1YmxpY0tleVJlc3BvbnNlIH0gZnJvbSAnLi4vb3JnYW5pemF0aW9uVXNlckJ1bGtQdWJsaWNLZXlSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJVc2VyQnVsa1B1YmxpY0tleVJlc3BvbnNlIGV4dGVuZHMgT3JnYW5pemF0aW9uVXNlckJ1bGtQdWJsaWNLZXlSZXNwb25zZSB7XHJcblxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJVc2VyQnVsa1Jlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBlcnJvcjogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLmVycm9yID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFcnJvcicpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBQZXJtaXNzaW9uc0FwaSB9IGZyb20gJy4uLy4uL2FwaS9wZXJtaXNzaW9uc0FwaSc7XHJcblxyXG5pbXBvcnQgeyBQcm92aWRlclVzZXJTdGF0dXNUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZW51bXMvcHJvdmlkZXJVc2VyU3RhdHVzVHlwZSc7XHJcbmltcG9ydCB7IFByb3ZpZGVyVXNlclR5cGUgfSBmcm9tICcuLi8uLi8uLi9lbnVtcy9wcm92aWRlclVzZXJUeXBlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm92aWRlclVzZXJSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBQcm92aWRlclVzZXJUeXBlO1xyXG4gICAgc3RhdHVzOiBQcm92aWRlclVzZXJTdGF0dXNUeXBlO1xyXG4gICAgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zQXBpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlcklkJyk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0YXR1cycpO1xyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnMgPSBuZXcgUGVybWlzc2lvbnNBcGkodGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQZXJtaXNzaW9ucycpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyVXNlclVzZXJEZXRhaWxzUmVzcG9uc2UgZXh0ZW5kcyBQcm92aWRlclVzZXJSZXNwb25zZSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5lbWFpbCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW1haWwnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBTZW5kVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3NlbmRUeXBlJztcclxuXHJcbmltcG9ydCB7IFNlbmRGaWxlQXBpIH0gZnJvbSAnLi4vYXBpL3NlbmRGaWxlQXBpJztcclxuaW1wb3J0IHsgU2VuZFRleHRBcGkgfSBmcm9tICcuLi9hcGkvc2VuZFRleHRBcGknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbmRBY2Nlc3NSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgdHlwZTogU2VuZFR5cGU7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBmaWxlOiBTZW5kRmlsZUFwaTtcclxuICAgIHRleHQ6IFNlbmRUZXh0QXBpO1xyXG4gICAgZXhwaXJhdGlvbkRhdGU6IERhdGU7XHJcbiAgICBjcmVhdG9ySWRlbnRpZmllcjogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVGV4dCcpO1xyXG4gICAgICAgIGlmICh0ZXh0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0ID0gbmV3IFNlbmRUZXh0QXBpKHRleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRmlsZScpO1xyXG4gICAgICAgIGlmIChmaWxlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5maWxlID0gbmV3IFNlbmRGaWxlQXBpKGZpbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5leHBpcmF0aW9uRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXhwaXJhdGlvbkRhdGUnKTtcclxuICAgICAgICB0aGlzLmNyZWF0b3JJZGVudGlmaWVyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDcmVhdG9ySWRlbnRpZmllcicpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZW5kRmlsZURvd25sb2FkRGF0YVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuXHJcbiAgICBpZDogc3RyaW5nID0gbnVsbDtcclxuICAgIHVybDogc3RyaW5nID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLnVybCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXJsJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuaW1wb3J0IHsgU2VuZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zZW5kVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBTZW5kRmlsZUFwaSB9IGZyb20gJy4uL2FwaS9zZW5kRmlsZUFwaSc7XHJcbmltcG9ydCB7IFNlbmRUZXh0QXBpIH0gZnJvbSAnLi4vYXBpL3NlbmRUZXh0QXBpJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZW5kUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGFjY2Vzc0lkOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBTZW5kVHlwZTtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG5vdGVzOiBzdHJpbmc7XHJcbiAgICBmaWxlOiBTZW5kRmlsZUFwaTtcclxuICAgIHRleHQ6IFNlbmRUZXh0QXBpO1xyXG4gICAga2V5OiBzdHJpbmc7XHJcbiAgICBtYXhBY2Nlc3NDb3VudD86IG51bWJlcjtcclxuICAgIGFjY2Vzc0NvdW50OiBudW1iZXI7XHJcbiAgICByZXZpc2lvbkRhdGU6IHN0cmluZztcclxuICAgIGV4cGlyYXRpb25EYXRlOiBzdHJpbmc7XHJcbiAgICBkZWxldGlvbkRhdGU6IHN0cmluZztcclxuICAgIHBhc3N3b3JkOiBzdHJpbmc7XHJcbiAgICBkaXNhYmxlOiBib29sZWFuO1xyXG4gICAgaGlkZUVtYWlsOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLmFjY2Vzc0lkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBY2Nlc3NJZCcpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xyXG4gICAgICAgIHRoaXMubm90ZXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05vdGVzJyk7XHJcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleScpO1xyXG4gICAgICAgIHRoaXMubWF4QWNjZXNzQ291bnQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01heEFjY2Vzc0NvdW50Jyk7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NDb3VudCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQWNjZXNzQ291bnQnKTtcclxuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmV2aXNpb25EYXRlJyk7XHJcbiAgICAgICAgdGhpcy5leHBpcmF0aW9uRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXhwaXJhdGlvbkRhdGUnKTtcclxuICAgICAgICB0aGlzLmRlbGV0aW9uRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGVsZXRpb25EYXRlJyk7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGFzc3dvcmQnKTtcclxuICAgICAgICB0aGlzLmRpc2FibGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Rpc2FibGVkJykgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oaWRlRW1haWwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hpZGVFbWFpbCcpIHx8IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUZXh0Jyk7XHJcbiAgICAgICAgaWYgKHRleHQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnRleHQgPSBuZXcgU2VuZFRleHRBcGkodGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGaWxlJyk7XHJcbiAgICAgICAgaWYgKGZpbGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbGUgPSBuZXcgU2VuZEZpbGVBcGkoZmlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEZpbGVVcGxvYWRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZmlsZVVwbG9hZFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBTZW5kUmVzcG9uc2UgfSBmcm9tICcuL3NlbmRSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VuZEZpbGVVcGxvYWREYXRhUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG5cclxuICAgIGZpbGVVcGxvYWRUeXBlOiBGaWxlVXBsb2FkVHlwZTtcclxuICAgIHNlbmRSZXNwb25zZTogU2VuZFJlc3BvbnNlO1xyXG4gICAgdXJsOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmZpbGVVcGxvYWRUeXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGaWxlVXBsb2FkVHlwZScpO1xyXG4gICAgICAgIGNvbnN0IHNlbmRSZXNwb25zZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VuZFJlc3BvbnNlJyk7XHJcbiAgICAgICAgdGhpcy5zZW5kUmVzcG9uc2UgPSBzZW5kUmVzcG9uc2UgPT0gbnVsbCA/IG51bGwgOiBuZXcgU2VuZFJlc3BvbnNlKHNlbmRSZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VybCcpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuaW1wb3J0IHsgQ2lwaGVyUmVzcG9uc2UgfSBmcm9tICcuL2NpcGhlclJlc3BvbnNlJztcclxuaW1wb3J0IHsgQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZSB9IGZyb20gJy4vY29sbGVjdGlvblJlc3BvbnNlJztcclxuaW1wb3J0IHsgRG9tYWluc1Jlc3BvbnNlIH0gZnJvbSAnLi9kb21haW5zUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBGb2xkZXJSZXNwb25zZSB9IGZyb20gJy4vZm9sZGVyUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBQb2xpY3lSZXNwb25zZSB9IGZyb20gJy4vcG9saWN5UmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBQcm9maWxlUmVzcG9uc2UgfSBmcm9tICcuL3Byb2ZpbGVSZXNwb25zZSc7XHJcbmltcG9ydCB7IFNlbmRSZXNwb25zZSB9IGZyb20gJy4vc2VuZFJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTeW5jUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgcHJvZmlsZT86IFByb2ZpbGVSZXNwb25zZTtcclxuICAgIGZvbGRlcnM6IEZvbGRlclJlc3BvbnNlW10gPSBbXTtcclxuICAgIGNvbGxlY3Rpb25zOiBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlW10gPSBbXTtcclxuICAgIGNpcGhlcnM6IENpcGhlclJlc3BvbnNlW10gPSBbXTtcclxuICAgIGRvbWFpbnM/OiBEb21haW5zUmVzcG9uc2U7XHJcbiAgICBwb2xpY2llcz86IFBvbGljeVJlc3BvbnNlW10gPSBbXTtcclxuICAgIHNlbmRzOiBTZW5kUmVzcG9uc2VbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2ZpbGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Byb2ZpbGUnKTtcclxuICAgICAgICBpZiAocHJvZmlsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IG5ldyBQcm9maWxlUmVzcG9uc2UocHJvZmlsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBmb2xkZXJzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGb2xkZXJzJyk7XHJcbiAgICAgICAgaWYgKGZvbGRlcnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZvbGRlcnMgPSBmb2xkZXJzLm1hcCgoZjogYW55KSA9PiBuZXcgRm9sZGVyUmVzcG9uc2UoZikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NvbGxlY3Rpb25zJyk7XHJcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zLm1hcCgoYzogYW55KSA9PiBuZXcgQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZShjKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjaXBoZXJzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDaXBoZXJzJyk7XHJcbiAgICAgICAgaWYgKGNpcGhlcnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNpcGhlcnMgPSBjaXBoZXJzLm1hcCgoYzogYW55KSA9PiBuZXcgQ2lwaGVyUmVzcG9uc2UoYykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZG9tYWlucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRG9tYWlucycpO1xyXG4gICAgICAgIGlmIChkb21haW5zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5kb21haW5zID0gbmV3IERvbWFpbnNSZXNwb25zZShkb21haW5zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBvbGljaWVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQb2xpY2llcycpO1xyXG4gICAgICAgIGlmIChwb2xpY2llcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9saWNpZXMgPSBwb2xpY2llcy5tYXAoKHA6IGFueSkgPT4gbmV3IFBvbGljeVJlc3BvbnNlKHApKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbmRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTZW5kcycpO1xyXG4gICAgICAgIGlmIChzZW5kcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZHMgPSBzZW5kcy5tYXAoKHM6IGFueSkgPT4gbmV3IFNlbmRSZXNwb25zZShzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUYXhJbmZvUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdGF4SWQ6IHN0cmluZztcclxuICAgIHRheElkVHlwZTogc3RyaW5nO1xyXG4gICAgbGluZTE6IHN0cmluZztcclxuICAgIGxpbmUyOiBzdHJpbmc7XHJcbiAgICBjaXR5OiBzdHJpbmc7XHJcbiAgICBzdGF0ZTogc3RyaW5nO1xyXG4gICAgY291bnRyeTogc3RyaW5nO1xyXG4gICAgcG9zdGFsQ29kZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy50YXhJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVGF4SWROdW1iZXInKTtcclxuICAgICAgICB0aGlzLnRheElkVHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVGF4SWRUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5saW5lMSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTGluZTEnKTtcclxuICAgICAgICB0aGlzLmxpbmUyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdMaW5lMicpO1xyXG4gICAgICAgIHRoaXMuY2l0eSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2l0eScpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0YXRlJyk7XHJcbiAgICAgICAgdGhpcy5wb3N0YWxDb2RlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQb3N0YWxDb2RlJyk7XHJcbiAgICAgICAgdGhpcy5jb3VudHJ5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb3VudHJ5Jyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRheFJhdGVSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgY291bnRyeTogc3RyaW5nO1xyXG4gICAgc3RhdGU6IHN0cmluZztcclxuICAgIHBvc3RhbENvZGU6IHN0cmluZztcclxuICAgIHJhdGU6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XHJcbiAgICAgICAgdGhpcy5jb3VudHJ5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb3VudHJ5Jyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RhdGUnKTtcclxuICAgICAgICB0aGlzLnBvc3RhbENvZGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Bvc3RhbENvZGUnKTtcclxuICAgICAgICB0aGlzLnJhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1JhdGUnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVHdvRmFjdG9yQXV0aGVudGljYXRvclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBrZXk6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW5hYmxlZCcpO1xyXG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXknKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVHdvRmFjdG9yRHVvUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgIGhvc3Q6IHN0cmluZztcclxuICAgIHNlY3JldEtleTogc3RyaW5nO1xyXG4gICAgaW50ZWdyYXRpb25LZXk6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW5hYmxlZCcpO1xyXG4gICAgICAgIHRoaXMuaG9zdCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSG9zdCcpO1xyXG4gICAgICAgIHRoaXMuc2VjcmV0S2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTZWNyZXRLZXknKTtcclxuICAgICAgICB0aGlzLmludGVncmF0aW9uS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJbnRlZ3JhdGlvbktleScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUd29GYWN0b3JFbWFpbFJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbmFibGVkJyk7XHJcbiAgICAgICAgdGhpcy5lbWFpbCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW1haWwnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy90d29GYWN0b3JQcm92aWRlclR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFR3b0ZhY3RvclByb3ZpZGVyUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgIHR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW5hYmxlZCcpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUd29GYWN0b3JSZWNvdmVyUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgY29kZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb2RlJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcclxuaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFR3b0ZhY3RvcldlYkF1dGhuUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgIGtleXM6IEtleVJlc3BvbnNlW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VuYWJsZWQnKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXlzJyk7XHJcbiAgICAgICAgdGhpcy5rZXlzID0ga2V5cyA9PSBudWxsID8gbnVsbCA6IGtleXMubWFwKChrOiBhbnkpID0+IG5ldyBLZXlSZXNwb25zZShrKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBLZXlSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgbWlncmF0ZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xyXG4gICAgICAgIHRoaXMubWlncmF0ZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01pZ3JhdGVkJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGFsbGVuZ2VSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSBpbXBsZW1lbnRzIFB1YmxpY0tleUNyZWRlbnRpYWxDcmVhdGlvbk9wdGlvbnMge1xyXG4gICAgYXR0ZXN0YXRpb24/OiBBdHRlc3RhdGlvbkNvbnZleWFuY2VQcmVmZXJlbmNlO1xyXG4gICAgYXV0aGVudGljYXRvclNlbGVjdGlvbj86IEF1dGhlbnRpY2F0b3JTZWxlY3Rpb25Dcml0ZXJpYTtcclxuICAgIGNoYWxsZW5nZTogQnVmZmVyU291cmNlO1xyXG4gICAgZXhjbHVkZUNyZWRlbnRpYWxzPzogUHVibGljS2V5Q3JlZGVudGlhbERlc2NyaXB0b3JbXTtcclxuICAgIGV4dGVuc2lvbnM/OiBBdXRoZW50aWNhdGlvbkV4dGVuc2lvbnNDbGllbnRJbnB1dHM7XHJcbiAgICBwdWJLZXlDcmVkUGFyYW1zOiBQdWJsaWNLZXlDcmVkZW50aWFsUGFyYW1ldGVyc1tdO1xyXG4gICAgcnA6IFB1YmxpY0tleUNyZWRlbnRpYWxScEVudGl0eTtcclxuICAgIHRpbWVvdXQ/OiBudW1iZXI7XHJcbiAgICB1c2VyOiBQdWJsaWNLZXlDcmVkZW50aWFsVXNlckVudGl0eTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuYXR0ZXN0YXRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ2F0dGVzdGF0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdG9yU2VsZWN0aW9uID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdhdXRoZW50aWNhdG9yU2VsZWN0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5jaGFsbGVuZ2UgPSBVdGlscy5mcm9tVXJsQjY0VG9BcnJheSh0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ2NoYWxsZW5nZScpKTtcclxuICAgICAgICB0aGlzLmV4Y2x1ZGVDcmVkZW50aWFscyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnZXhjbHVkZUNyZWRlbnRpYWxzJykubWFwKChjOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgYy5pZCA9IFV0aWxzLmZyb21VcmxCNjRUb0FycmF5KGMuaWQpLmJ1ZmZlcjtcclxuICAgICAgICAgICAgcmV0dXJuIGM7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdleHRlbnNpb25zJyk7XHJcbiAgICAgICAgdGhpcy5wdWJLZXlDcmVkUGFyYW1zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdwdWJLZXlDcmVkUGFyYW1zJyk7XHJcbiAgICAgICAgdGhpcy5ycCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgncnAnKTtcclxuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ3RpbWVvdXQnKTtcclxuXHJcbiAgICAgICAgY29uc3QgdXNlciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgndXNlcicpO1xyXG4gICAgICAgIHVzZXIuaWQgPSBVdGlscy5mcm9tVXJsQjY0VG9BcnJheSh1c2VyLmlkKTtcclxuXHJcbiAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVHdvRmFjdG9yWXViaUtleVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBrZXkxOiBzdHJpbmc7XHJcbiAgICBrZXkyOiBzdHJpbmc7XHJcbiAgICBrZXkzOiBzdHJpbmc7XHJcbiAgICBrZXk0OiBzdHJpbmc7XHJcbiAgICBrZXk1OiBzdHJpbmc7XHJcbiAgICBuZmM6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VuYWJsZWQnKTtcclxuICAgICAgICB0aGlzLmtleTEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleTEnKTtcclxuICAgICAgICB0aGlzLmtleTIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleTInKTtcclxuICAgICAgICB0aGlzLmtleTMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleTMnKTtcclxuICAgICAgICB0aGlzLmtleTQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleTQnKTtcclxuICAgICAgICB0aGlzLmtleTUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleTUnKTtcclxuICAgICAgICB0aGlzLm5mYyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmZjJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJLZXlSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxuICAgIHB1YmxpY0tleTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJJZCcpO1xyXG4gICAgICAgIHRoaXMucHVibGljS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQdWJsaWNLZXknKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgS2V5Q29ubmVjdG9yVXNlcktleVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGtleTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleScpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERldmljZVR5cGUgfSBmcm9tICcuLi9lbnVtcy9kZXZpY2VUeXBlJztcclxuaW1wb3J0IHsgUG9saWN5VHlwZSB9IGZyb20gJy4uL2VudW1zL3BvbGljeVR5cGUnO1xyXG5cclxuaW1wb3J0IHsgQXBpU2VydmljZSBhcyBBcGlTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFbnZpcm9ubWVudFNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvZW52aXJvbm1lbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IFBsYXRmb3JtVXRpbHNTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3BsYXRmb3JtVXRpbHMuc2VydmljZSc7XHJcbmltcG9ydCB7IFRva2VuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy90b2tlbi5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IEF0dGFjaG1lbnRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvYXR0YWNobWVudFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBCaXRQYXlJbnZvaWNlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2JpdFBheUludm9pY2VSZXF1ZXN0JztcclxuaW1wb3J0IHsgQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrRGVsZXRlUmVxdWVzdCc7XHJcbmltcG9ydCB7IENpcGhlckJ1bGtNb3ZlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlckJ1bGtNb3ZlUmVxdWVzdCc7XHJcbmltcG9ydCB7IENpcGhlckJ1bGtTaGFyZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrU2hhcmVSZXF1ZXN0JztcclxuaW1wb3J0IHsgQ2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0JztcclxuaW1wb3J0IHsgQ2lwaGVyQ3JlYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlckNyZWF0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBDaXBoZXJSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY2lwaGVyUmVxdWVzdCc7XHJcbmltcG9ydCB7IENpcGhlclNoYXJlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlclNoYXJlUmVxdWVzdCc7XHJcbmltcG9ydCB7IENvbGxlY3Rpb25SZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY29sbGVjdGlvblJlcXVlc3QnO1xyXG5pbXBvcnQgeyBEZWxldGVSZWNvdmVyUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2RlbGV0ZVJlY292ZXJSZXF1ZXN0JztcclxuaW1wb3J0IHsgRW1haWxSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZW1haWxSZXF1ZXN0JztcclxuaW1wb3J0IHsgRW1haWxUb2tlblJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9lbWFpbFRva2VuUmVxdWVzdCc7XHJcbmltcG9ydCB7IEVtZXJnZW5jeUFjY2Vzc0FjY2VwdFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9lbWVyZ2VuY3lBY2Nlc3NBY2NlcHRSZXF1ZXN0JztcclxuaW1wb3J0IHsgRW1lcmdlbmN5QWNjZXNzQ29uZmlybVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9lbWVyZ2VuY3lBY2Nlc3NDb25maXJtUmVxdWVzdCc7XHJcbmltcG9ydCB7IEVtZXJnZW5jeUFjY2Vzc0ludml0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9lbWVyZ2VuY3lBY2Nlc3NJbnZpdGVSZXF1ZXN0JztcclxuaW1wb3J0IHsgRW1lcmdlbmN5QWNjZXNzUGFzc3dvcmRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZW1lcmdlbmN5QWNjZXNzUGFzc3dvcmRSZXF1ZXN0JztcclxuaW1wb3J0IHsgRW1lcmdlbmN5QWNjZXNzVXBkYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2VtZXJnZW5jeUFjY2Vzc1VwZGF0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBFdmVudFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9ldmVudFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBGb2xkZXJSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZm9sZGVyUmVxdWVzdCc7XHJcbmltcG9ydCB7IEdyb3VwUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2dyb3VwUmVxdWVzdCc7XHJcbmltcG9ydCB7IElhcENoZWNrUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2lhcENoZWNrUmVxdWVzdCc7XHJcbmltcG9ydCB7IEltcG9ydENpcGhlcnNSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvaW1wb3J0Q2lwaGVyc1JlcXVlc3QnO1xyXG5pbXBvcnQgeyBJbXBvcnREaXJlY3RvcnlSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvaW1wb3J0RGlyZWN0b3J5UmVxdWVzdCc7XHJcbmltcG9ydCB7IEltcG9ydE9yZ2FuaXphdGlvbkNpcGhlcnNSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvaW1wb3J0T3JnYW5pemF0aW9uQ2lwaGVyc1JlcXVlc3QnO1xyXG5pbXBvcnQgeyBLZGZSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qva2RmUmVxdWVzdCc7XHJcbmltcG9ydCB7IEtleXNSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qva2V5c1JlcXVlc3QnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25TcG9uc29yc2hpcENyZWF0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb24vb3JnYW5pemF0aW9uU3BvbnNvcnNoaXBDcmVhdGVSZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uU3BvbnNvcnNoaXBSZWRlZW1SZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uL29yZ2FuaXphdGlvblNwb25zb3JzaGlwUmVkZWVtUmVxdWVzdCc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblNzb1JlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb24vb3JnYW5pemF0aW9uU3NvUmVxdWVzdCc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvbkNyZWF0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb25DcmVhdGVSZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uSW1wb3J0UmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvbkltcG9ydFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25LZXlzUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvbktleXNSZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uU3Vic2NyaXB0aW9uVXBkYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvblN1YnNjcmlwdGlvblVwZGF0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25UYXhJbmZvVXBkYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvblRheEluZm9VcGRhdGVSZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXBkYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvblVwZGF0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25VcGdyYWRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvblVwZ3JhZGVSZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlckFjY2VwdFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb25Vc2VyQWNjZXB0UmVxdWVzdCc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJCdWxrQ29uZmlybVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb25Vc2VyQnVsa0NvbmZpcm1SZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlckJ1bGtSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uVXNlckJ1bGtSZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlckNvbmZpcm1SZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uVXNlckNvbmZpcm1SZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlckludml0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb25Vc2VySW52aXRlUmVxdWVzdCc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJSZXNldFBhc3N3b3JkRW5yb2xsbWVudFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb25Vc2VyUmVzZXRQYXNzd29yZEVucm9sbG1lbnRSZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlclJlc2V0UGFzc3dvcmRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uVXNlclJlc2V0UGFzc3dvcmRSZXF1ZXN0JztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlclVwZGF0ZUdyb3Vwc1JlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb25Vc2VyVXBkYXRlR3JvdXBzUmVxdWVzdCc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJVcGRhdGVSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uVXNlclVwZGF0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBQYXNzd29yZEhpbnRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcGFzc3dvcmRIaW50UmVxdWVzdCc7XHJcbmltcG9ydCB7IFBhc3N3b3JkUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Bhc3N3b3JkUmVxdWVzdCc7XHJcbmltcG9ydCB7IFBheW1lbnRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcGF5bWVudFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBQb2xpY3lSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcG9saWN5UmVxdWVzdCc7XHJcbmltcG9ydCB7IFByZWxvZ2luUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3ByZWxvZ2luUmVxdWVzdCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyQWRkT3JnYW5pemF0aW9uUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Byb3ZpZGVyL3Byb3ZpZGVyQWRkT3JnYW5pemF0aW9uUmVxdWVzdCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyT3JnYW5pemF0aW9uQ3JlYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Byb3ZpZGVyL3Byb3ZpZGVyT3JnYW5pemF0aW9uQ3JlYXRlUmVxdWVzdCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyU2V0dXBSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcHJvdmlkZXIvcHJvdmlkZXJTZXR1cFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBQcm92aWRlclVwZGF0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9wcm92aWRlci9wcm92aWRlclVwZGF0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBQcm92aWRlclVzZXJBY2NlcHRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcHJvdmlkZXIvcHJvdmlkZXJVc2VyQWNjZXB0UmVxdWVzdCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyVXNlckJ1bGtDb25maXJtUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Byb3ZpZGVyL3Byb3ZpZGVyVXNlckJ1bGtDb25maXJtUmVxdWVzdCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyVXNlckJ1bGtSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcHJvdmlkZXIvcHJvdmlkZXJVc2VyQnVsa1JlcXVlc3QnO1xyXG5pbXBvcnQgeyBQcm92aWRlclVzZXJDb25maXJtUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Byb3ZpZGVyL3Byb3ZpZGVyVXNlckNvbmZpcm1SZXF1ZXN0JztcclxuaW1wb3J0IHsgUHJvdmlkZXJVc2VySW52aXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Byb3ZpZGVyL3Byb3ZpZGVyVXNlckludml0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBQcm92aWRlclVzZXJVcGRhdGVSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcHJvdmlkZXIvcHJvdmlkZXJVc2VyVXBkYXRlUmVxdWVzdCc7XHJcbmltcG9ydCB7IFJlZ2lzdGVyUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3JlZ2lzdGVyUmVxdWVzdCc7XHJcbmltcG9ydCB7IFNlYXRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvc2VhdFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvc2VjcmV0VmVyaWZpY2F0aW9uUmVxdWVzdCc7XHJcbmltcG9ydCB7IFNlbGVjdGlvblJlYWRPbmx5UmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3NlbGVjdGlvblJlYWRPbmx5UmVxdWVzdCc7XHJcbmltcG9ydCB7IFNlbmRBY2Nlc3NSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvc2VuZEFjY2Vzc1JlcXVlc3QnO1xyXG5pbXBvcnQgeyBTZW5kUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3NlbmRSZXF1ZXN0JztcclxuaW1wb3J0IHsgU2V0UGFzc3dvcmRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvc2V0UGFzc3dvcmRSZXF1ZXN0JztcclxuaW1wb3J0IHsgU3RvcmFnZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9zdG9yYWdlUmVxdWVzdCc7XHJcbmltcG9ydCB7IFRheEluZm9VcGRhdGVSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvdGF4SW5mb1VwZGF0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBUb2tlblJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC90b2tlblJlcXVlc3QnO1xyXG5pbXBvcnQgeyBUd29GYWN0b3JFbWFpbFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC90d29GYWN0b3JFbWFpbFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC90d29GYWN0b3JQcm92aWRlclJlcXVlc3QnO1xyXG5pbXBvcnQgeyBUd29GYWN0b3JSZWNvdmVyeVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC90d29GYWN0b3JSZWNvdmVyeVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBVcGRhdGVEb21haW5zUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZURvbWFpbnNSZXF1ZXN0JztcclxuaW1wb3J0IHsgVXBkYXRlS2V5UmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZUtleVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBVcGRhdGVQcm9maWxlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZVByb2ZpbGVSZXF1ZXN0JztcclxuaW1wb3J0IHsgVXBkYXRlVGVtcFBhc3N3b3JkUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZVRlbXBQYXNzd29yZFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBVcGRhdGVUd29GYWN0b3JBdXRoZW50aWNhdG9yUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZVR3b0ZhY3RvckF1dGhlbnRpY2F0b3JSZXF1ZXN0JztcclxuaW1wb3J0IHsgVXBkYXRlVHdvRmFjdG9yRHVvUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZVR3b0ZhY3RvckR1b1JlcXVlc3QnO1xyXG5pbXBvcnQgeyBVcGRhdGVUd29GYWN0b3JFbWFpbFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC91cGRhdGVUd29GYWN0b3JFbWFpbFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBVcGRhdGVUd29GYWN0b3JXZWJBdXRobkRlbGV0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC91cGRhdGVUd29GYWN0b3JXZWJBdXRobkRlbGV0ZVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBVcGRhdGVUd29GYWN0b3JXZWJBdXRoblJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC91cGRhdGVUd29GYWN0b3JXZWJBdXRoblJlcXVlc3QnO1xyXG5pbXBvcnQgeyBVcGRhdGVUd29GYWN0b3JZdWJpb090cFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC91cGRhdGVUd29GYWN0b3JZdWJpb090cFJlcXVlc3QnO1xyXG5pbXBvcnQgeyBWZXJpZnlCYW5rUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3ZlcmlmeUJhbmtSZXF1ZXN0JztcclxuaW1wb3J0IHsgVmVyaWZ5RGVsZXRlUmVjb3ZlclJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC92ZXJpZnlEZWxldGVSZWNvdmVyUmVxdWVzdCc7XHJcbmltcG9ydCB7IFZlcmlmeUVtYWlsUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3ZlcmlmeUVtYWlsUmVxdWVzdCc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgQXBpS2V5UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvYXBpS2V5UmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBBdHRhY2htZW50UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvYXR0YWNobWVudFJlc3BvbnNlJztcclxuaW1wb3J0IHsgQXR0YWNobWVudFVwbG9hZERhdGFSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9hdHRhY2htZW50VXBsb2FkRGF0YVJlc3BvbnNlJztcclxuaW1wb3J0IHsgQmlsbGluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2JpbGxpbmdSZXNwb25zZSc7XHJcbmltcG9ydCB7IEJyZWFjaEFjY291bnRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9icmVhY2hBY2NvdW50UmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBDaXBoZXJSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9jaXBoZXJSZXNwb25zZSc7XHJcbmltcG9ydCB7XHJcbiAgICBDb2xsZWN0aW9uR3JvdXBEZXRhaWxzUmVzcG9uc2UsXHJcbiAgICBDb2xsZWN0aW9uUmVzcG9uc2UsXHJcbn0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2NvbGxlY3Rpb25SZXNwb25zZSc7XHJcbmltcG9ydCB7IERvbWFpbnNSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9kb21haW5zUmVzcG9uc2UnO1xyXG5pbXBvcnQge1xyXG4gICAgRW1lcmdlbmN5QWNjZXNzR3JhbnRlZURldGFpbHNSZXNwb25zZSxcclxuICAgIEVtZXJnZW5jeUFjY2Vzc0dyYW50b3JEZXRhaWxzUmVzcG9uc2UsXHJcbiAgICBFbWVyZ2VuY3lBY2Nlc3NUYWtlb3ZlclJlc3BvbnNlLFxyXG4gICAgRW1lcmdlbmN5QWNjZXNzVmlld1Jlc3BvbnNlXHJcbn0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2VtZXJnZW5jeUFjY2Vzc1Jlc3BvbnNlJztcclxuaW1wb3J0IHsgRXJyb3JSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9lcnJvclJlc3BvbnNlJztcclxuaW1wb3J0IHsgRXZlbnRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9ldmVudFJlc3BvbnNlJztcclxuaW1wb3J0IHsgRm9sZGVyUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvZm9sZGVyUmVzcG9uc2UnO1xyXG5pbXBvcnQge1xyXG4gICAgR3JvdXBEZXRhaWxzUmVzcG9uc2UsXHJcbiAgICBHcm91cFJlc3BvbnNlLFxyXG59IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9ncm91cFJlc3BvbnNlJztcclxuaW1wb3J0IHsgSWRlbnRpdHlDYXB0Y2hhUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvaWRlbnRpdHlDYXB0Y2hhUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBJZGVudGl0eVRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvaWRlbnRpdHlUb2tlblJlc3BvbnNlJztcclxuaW1wb3J0IHsgSWRlbnRpdHlUd29GYWN0b3JSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9pZGVudGl0eVR3b0ZhY3RvclJlc3BvbnNlJztcclxuaW1wb3J0IHsgTGlzdFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2xpc3RSZXNwb25zZSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblNzb1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL29yZ2FuaXphdGlvbi9vcmdhbml6YXRpb25Tc29SZXNwb25zZSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvbkF1dG9FbnJvbGxTdGF0dXNSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9vcmdhbml6YXRpb25BdXRvRW5yb2xsU3RhdHVzUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25LZXlzUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uS2V5c1Jlc3BvbnNlJztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25TdWJzY3JpcHRpb25SZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9vcmdhbml6YXRpb25TdWJzY3JpcHRpb25SZXNwb25zZSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJCdWxrUHVibGljS2V5UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uVXNlckJ1bGtQdWJsaWNLZXlSZXNwb25zZSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJCdWxrUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uVXNlckJ1bGtSZXNwb25zZSc7XHJcbmltcG9ydCB7XHJcbiAgICBPcmdhbml6YXRpb25Vc2VyRGV0YWlsc1Jlc3BvbnNlLFxyXG4gICAgT3JnYW5pemF0aW9uVXNlclJlc2V0UGFzc3dvcmREZXRhaWxzUmVwb25zZSxcclxuICAgIE9yZ2FuaXphdGlvblVzZXJVc2VyRGV0YWlsc1Jlc3BvbnNlLFxyXG59IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9vcmdhbml6YXRpb25Vc2VyUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBQYXltZW50UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvcGF5bWVudFJlc3BvbnNlJztcclxuaW1wb3J0IHsgUGxhblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3BsYW5SZXNwb25zZSc7XHJcbmltcG9ydCB7IFBvbGljeVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3BvbGljeVJlc3BvbnNlJztcclxuaW1wb3J0IHsgUHJlbG9naW5SZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9wcmVsb2dpblJlc3BvbnNlJztcclxuaW1wb3J0IHsgUHJvZmlsZVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb2ZpbGVSZXNwb25zZSc7XHJcbmltcG9ydCB7IFByb3ZpZGVyT3JnYW5pemF0aW9uT3JnYW5pemF0aW9uRGV0YWlsc1Jlc3BvbnNlLCBQcm92aWRlck9yZ2FuaXphdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb3ZpZGVyL3Byb3ZpZGVyT3JnYW5pemF0aW9uUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBQcm92aWRlclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb3ZpZGVyL3Byb3ZpZGVyUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBQcm92aWRlclVzZXJCdWxrUHVibGljS2V5UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvcHJvdmlkZXIvcHJvdmlkZXJVc2VyQnVsa1B1YmxpY0tleVJlc3BvbnNlJztcclxuaW1wb3J0IHsgUHJvdmlkZXJVc2VyQnVsa1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb3ZpZGVyL3Byb3ZpZGVyVXNlckJ1bGtSZXNwb25zZSc7XHJcbmltcG9ydCB7XHJcbiAgICBQcm92aWRlclVzZXJSZXNwb25zZSxcclxuICAgIFByb3ZpZGVyVXNlclVzZXJEZXRhaWxzUmVzcG9uc2VcclxufSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvcHJvdmlkZXIvcHJvdmlkZXJVc2VyUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3NlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBTZW5kQWNjZXNzUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvc2VuZEFjY2Vzc1Jlc3BvbnNlJztcclxuaW1wb3J0IHsgU2VuZEZpbGVEb3dubG9hZERhdGFSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9zZW5kRmlsZURvd25sb2FkRGF0YVJlc3BvbnNlJztcclxuaW1wb3J0IHsgU2VuZEZpbGVVcGxvYWREYXRhUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvc2VuZEZpbGVVcGxvYWREYXRhUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBTZW5kUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvc2VuZFJlc3BvbnNlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvc3Vic2NyaXB0aW9uUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBTeW5jUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvc3luY1Jlc3BvbnNlJztcclxuaW1wb3J0IHsgVGF4SW5mb1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3RheEluZm9SZXNwb25zZSc7XHJcbmltcG9ydCB7IFRheFJhdGVSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS90YXhSYXRlUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBUd29GYWN0b3JBdXRoZW50aWNhdG9yUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yQXV0aGVudGljYXRvclJlc3BvbnNlJztcclxuaW1wb3J0IHsgVHdvRmFjdG9yRHVvUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yRHVvUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBUd29GYWN0b3JFbWFpbFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvckVtYWlsUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvclByb3ZpZGVyUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBUd29GYWN0b3JSZWNvdmVyUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yUmVzY292ZXJSZXNwb25zZSc7XHJcbmltcG9ydCB7IFR3b0ZhY3RvcldlYkF1dGhuUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yV2ViQXV0aG5SZXNwb25zZSc7XHJcbmltcG9ydCB7IENoYWxsZW5nZVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvcldlYkF1dGhuUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBUd29GYWN0b3JZdWJpS2V5UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yWXViaUtleVJlc3BvbnNlJztcclxuaW1wb3J0IHsgVXNlcktleVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3VzZXJLZXlSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBTZXRLZXlDb25uZWN0b3JLZXlSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvYWNjb3VudC9zZXRLZXlDb25uZWN0b3JLZXlSZXF1ZXN0JztcclxuaW1wb3J0IHsgVmVyaWZ5T1RQUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2FjY291bnQvdmVyaWZ5T1RQUmVxdWVzdCc7XHJcbmltcG9ydCB7IEtleUNvbm5lY3RvclVzZXJLZXlSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qva2V5Q29ubmVjdG9yVXNlcktleVJlcXVlc3QnO1xyXG5pbXBvcnQgeyBLZXlDb25uZWN0b3JVc2VyS2V5UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uva2V5Q29ubmVjdG9yVXNlcktleVJlc3BvbnNlJztcclxuaW1wb3J0IHsgU2VuZEFjY2Vzc1ZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9zZW5kQWNjZXNzVmlldyc7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBBcGlTZXJ2aWNlIGltcGxlbWVudHMgQXBpU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIHByb3RlY3RlZCBhcGlLZXlSZWZyZXNoOiAoY2xpZW50SWQ6IHN0cmluZywgY2xpZW50U2VjcmV0OiBzdHJpbmcpID0+IFByb21pc2U8YW55PjtcclxuICAgIHByaXZhdGUgZGV2aWNlOiBEZXZpY2VUeXBlO1xyXG4gICAgcHJpdmF0ZSBkZXZpY2VUeXBlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGlzV2ViQ2xpZW50ID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGlzRGVza3RvcENsaWVudCA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdG9rZW5TZXJ2aWNlOiBUb2tlblNlcnZpY2UsIHByaXZhdGUgcGxhdGZvcm1VdGlsc1NlcnZpY2U6IFBsYXRmb3JtVXRpbHNTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgZW52aXJvbm1lbnRTZXJ2aWNlOiBFbnZpcm9ubWVudFNlcnZpY2UsIHByaXZhdGUgbG9nb3V0Q2FsbGJhY2s6IChleHBpcmVkOiBib29sZWFuKSA9PiBQcm9taXNlPHZvaWQ+LFxyXG4gICAgICAgIHByaXZhdGUgY3VzdG9tVXNlckFnZW50OiBzdHJpbmcgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5kZXZpY2UgPSBwbGF0Zm9ybVV0aWxzU2VydmljZS5nZXREZXZpY2UoKTtcclxuICAgICAgICB0aGlzLmRldmljZVR5cGUgPSB0aGlzLmRldmljZS50b1N0cmluZygpO1xyXG4gICAgICAgIHRoaXMuaXNXZWJDbGllbnQgPSB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5JRUJyb3dzZXIgfHwgdGhpcy5kZXZpY2UgPT09IERldmljZVR5cGUuQ2hyb21lQnJvd3NlciB8fFxyXG4gICAgICAgICAgICB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5FZGdlQnJvd3NlciB8fCB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5GaXJlZm94QnJvd3NlciB8fFxyXG4gICAgICAgICAgICB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5PcGVyYUJyb3dzZXIgfHwgdGhpcy5kZXZpY2UgPT09IERldmljZVR5cGUuU2FmYXJpQnJvd3NlciB8fFxyXG4gICAgICAgICAgICB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5Vbmtub3duQnJvd3NlciB8fCB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5WaXZhbGRpQnJvd3NlcjtcclxuICAgICAgICB0aGlzLmlzRGVza3RvcENsaWVudCA9IHRoaXMuZGV2aWNlID09PSBEZXZpY2VUeXBlLldpbmRvd3NEZXNrdG9wIHx8IHRoaXMuZGV2aWNlID09PSBEZXZpY2VUeXBlLk1hY09zRGVza3RvcCB8fFxyXG4gICAgICAgICAgICB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5MaW51eERlc2t0b3A7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXV0aCBBUElzXHJcblxyXG4gICAgYXN5bmMgcG9zdElkZW50aXR5VG9rZW4ocmVxdWVzdDogVG9rZW5SZXF1ZXN0KTogUHJvbWlzZTxJZGVudGl0eVRva2VuUmVzcG9uc2UgfCBJZGVudGl0eVR3b0ZhY3RvclJlc3BvbnNlIHwgSWRlbnRpdHlDYXB0Y2hhUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICdEZXZpY2UtVHlwZSc6IHRoaXMuZGV2aWNlVHlwZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5jdXN0b21Vc2VyQWdlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsIHRoaXMuY3VzdG9tVXNlckFnZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVxdWVzdC5hbHRlcklkZW50aXR5VG9rZW5IZWFkZXJzKGhlYWRlcnMpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaChuZXcgUmVxdWVzdCh0aGlzLmVudmlyb25tZW50U2VydmljZS5nZXRJZGVudGl0eVVybCgpICsgJy9jb25uZWN0L3Rva2VuJywge1xyXG4gICAgICAgICAgICBib2R5OiB0aGlzLnFzU3RyaW5naWZ5KHJlcXVlc3QudG9JZGVudGl0eVRva2VuKHJlcXVlc3QuY2xpZW50SWQgPz8gdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5pZGVudGl0eUNsaWVudElkKSksXHJcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiB0aGlzLmdldENyZWRlbnRpYWxzKCksXHJcbiAgICAgICAgICAgIGNhY2hlOiAnbm8tc3RvcmUnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGxldCByZXNwb25zZUpzb246IGFueSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNKc29uUmVzcG9uc2UocmVzcG9uc2UpKSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlSnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZUpzb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSWRlbnRpdHlUb2tlblJlc3BvbnNlKHJlc3BvbnNlSnNvbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDAgJiYgcmVzcG9uc2VKc29uLlR3b0ZhY3RvclByb3ZpZGVyczIgJiZcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHJlc3BvbnNlSnNvbi5Ud29GYWN0b3JQcm92aWRlcnMyKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLmNsZWFyVHdvRmFjdG9yVG9rZW4ocmVxdWVzdC5lbWFpbCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IElkZW50aXR5VHdvRmFjdG9yUmVzcG9uc2UocmVzcG9uc2VKc29uKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCAmJiByZXNwb25zZUpzb24uSENhcHRjaGFfU2l0ZUtleSAmJlxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocmVzcG9uc2VKc29uLkhDYXB0Y2hhX1NpdGVLZXkpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJZGVudGl0eUNhcHRjaGFSZXNwb25zZShyZXNwb25zZUpzb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2VKc29uLCByZXNwb25zZS5zdGF0dXMsIHRydWUpKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZWZyZXNoSWRlbnRpdHlUb2tlbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZG9BdXRoUmVmcmVzaCgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBY2NvdW50IEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRQcm9maWxlKCk6IFByb21pc2U8UHJvZmlsZVJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9hY2NvdW50cy9wcm9maWxlJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9maWxlUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0VXNlckJpbGxpbmcoKTogUHJvbWlzZTxCaWxsaW5nUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL2FjY291bnRzL2JpbGxpbmcnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbGxpbmdSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRVc2VyU3Vic2NyaXB0aW9uKCk6IFByb21pc2U8U3Vic2NyaXB0aW9uUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL2FjY291bnRzL3N1YnNjcmlwdGlvbicsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0VGF4SW5mbygpOiBQcm9taXNlPFRheEluZm9SZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvYWNjb3VudHMvdGF4JywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUYXhJbmZvUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0UHJvZmlsZShyZXF1ZXN0OiBVcGRhdGVQcm9maWxlUmVxdWVzdCk6IFByb21pc2U8UHJvZmlsZVJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9hY2NvdW50cy9wcm9maWxlJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9maWxlUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0VGF4SW5mbyhyZXF1ZXN0OiBUYXhJbmZvVXBkYXRlUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUFVUJywgJy9hY2NvdW50cy90YXgnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdFByZWxvZ2luKHJlcXVlc3Q6IFByZWxvZ2luUmVxdWVzdCk6IFByb21pc2U8UHJlbG9naW5SZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL3ByZWxvZ2luJywgcmVxdWVzdCwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlbG9naW5SZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0RW1haWxUb2tlbihyZXF1ZXN0OiBFbWFpbFRva2VuUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvZW1haWwtdG9rZW4nLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEVtYWlsKHJlcXVlc3Q6IEVtYWlsUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvZW1haWwnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdFBhc3N3b3JkKHJlcXVlc3Q6IFBhc3N3b3JkUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvcGFzc3dvcmQnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UGFzc3dvcmQocmVxdWVzdDogU2V0UGFzc3dvcmRSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9zZXQtcGFzc3dvcmQnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdFNldEtleUNvbm5lY3RvcktleShyZXF1ZXN0OiBTZXRLZXlDb25uZWN0b3JLZXlSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9zZXQta2V5LWNvbm5lY3Rvci1rZXknLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdFNlY3VyaXR5U3RhbXAocmVxdWVzdDogU2VjcmV0VmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvc2VjdXJpdHktc3RhbXAnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlQWNjb3VudChyZXF1ZXN0OiBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL2FjY291bnRzJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEFjY291bnRSZXZpc2lvbkRhdGUoKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL2FjY291bnRzL3JldmlzaW9uLWRhdGUnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gciBhcyBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdFBhc3N3b3JkSGludChyZXF1ZXN0OiBQYXNzd29yZEhpbnRSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9wYXNzd29yZC1oaW50JywgcmVxdWVzdCwgZmFsc2UsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0UmVnaXN0ZXIocmVxdWVzdDogUmVnaXN0ZXJSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9yZWdpc3RlcicsIHJlcXVlc3QsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdFByZW1pdW0oZGF0YTogRm9ybURhdGEpOiBQcm9taXNlPFBheW1lbnRSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL3ByZW1pdW0nLCBkYXRhLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFBheW1lbnRSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0SWFwQ2hlY2socmVxdWVzdDogSWFwQ2hlY2tSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9pYXAtY2hlY2snLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdFJlaW5zdGF0ZVByZW1pdW0oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9yZWluc3RhdGUtcHJlbWl1bScsIG51bGwsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0Q2FuY2VsUHJlbWl1bSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2NhbmNlbC1wcmVtaXVtJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RBY2NvdW50U3RvcmFnZShyZXF1ZXN0OiBTdG9yYWdlUmVxdWVzdCk6IFByb21pc2U8UGF5bWVudFJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvc3RvcmFnZScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGF5bWVudFJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RBY2NvdW50UGF5bWVudChyZXF1ZXN0OiBQYXltZW50UmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvcGF5bWVudCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0QWNjb3VudExpY2Vuc2UoZGF0YTogRm9ybURhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2xpY2Vuc2UnLCBkYXRhLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEFjY291bnRLZXlzKHJlcXVlc3Q6IEtleXNSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9rZXlzJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RBY2NvdW50S2V5KHJlcXVlc3Q6IFVwZGF0ZUtleVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2tleScsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0QWNjb3VudFZlcmlmeUVtYWlsKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvdmVyaWZ5LWVtYWlsJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RBY2NvdW50VmVyaWZ5RW1haWxUb2tlbihyZXF1ZXN0OiBWZXJpZnlFbWFpbFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL3ZlcmlmeS1lbWFpbC10b2tlbicsIHJlcXVlc3QsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEFjY291bnRWZXJpZnlQYXNzd29yZChyZXF1ZXN0OiBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy92ZXJpZnktcGFzc3dvcmQnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEFjY291bnRSZWNvdmVyRGVsZXRlKHJlcXVlc3Q6IERlbGV0ZVJlY292ZXJSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9kZWxldGUtcmVjb3ZlcicsIHJlcXVlc3QsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEFjY291bnRSZWNvdmVyRGVsZXRlVG9rZW4ocmVxdWVzdDogVmVyaWZ5RGVsZXRlUmVjb3ZlclJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2RlbGV0ZS1yZWNvdmVyLXRva2VuJywgcmVxdWVzdCwgZmFsc2UsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0QWNjb3VudEtkZihyZXF1ZXN0OiBLZGZSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9rZGYnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlU3NvVXNlcihvcmdhbml6YXRpb25JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL2FjY291bnRzL3Nzby8nICsgb3JnYW5pemF0aW9uSWQsIG51bGwsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRTc29Vc2VySWRlbnRpZmllcigpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0dFVCcsICcvYWNjb3VudHMvc3NvL3VzZXItaWRlbnRpZmllcicsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RVc2VyQXBpS2V5KGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFNlY3JldFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPEFwaUtleVJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvYXBpLWtleScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQXBpS2V5UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdFVzZXJSb3RhdGVBcGlLZXkoaWQ6IHN0cmluZywgcmVxdWVzdDogU2VjcmV0VmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8QXBpS2V5UmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9yb3RhdGUtYXBpLWtleScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQXBpS2V5UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0VXBkYXRlVGVtcFBhc3N3b3JkKHJlcXVlc3Q6IFVwZGF0ZVRlbXBQYXNzd29yZFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvYWNjb3VudHMvdXBkYXRlLXRlbXAtcGFzc3dvcmQnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEFjY291bnRSZXF1ZXN0T1RQKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL3JlcXVlc3Qtb3RwJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RBY2NvdW50VmVyaWZ5T1RQKHJlcXVlc3Q6IFZlcmlmeU9UUFJlcXVlc3QpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy92ZXJpZnktb3RwJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RDb252ZXJ0VG9LZXlDb25uZWN0b3IoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvY29udmVydC10by1rZXktY29ubmVjdG9yJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZvbGRlciBBUElzXHJcblxyXG4gICAgYXN5bmMgZ2V0Rm9sZGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPEZvbGRlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9mb2xkZXJzLycgKyBpZCwgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGb2xkZXJSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0Rm9sZGVyKHJlcXVlc3Q6IEZvbGRlclJlcXVlc3QpOiBQcm9taXNlPEZvbGRlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvZm9sZGVycycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRm9sZGVyUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0Rm9sZGVyKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IEZvbGRlclJlcXVlc3QpOiBQcm9taXNlPEZvbGRlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9mb2xkZXJzLycgKyBpZCwgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGb2xkZXJSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVGb2xkZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9mb2xkZXJzLycgKyBpZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNlbmQgQVBJc1xyXG5cclxuICAgIGFzeW5jIGdldFNlbmQoaWQ6IHN0cmluZyk6IFByb21pc2U8U2VuZFJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9zZW5kcy8nICsgaWQsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2VuZFJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RTZW5kQWNjZXNzKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFNlbmRBY2Nlc3NSZXF1ZXN0LCBhcGlVcmw/OiBzdHJpbmcpOiBQcm9taXNlPFNlbmRBY2Nlc3NSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IGFkZFNlbmRJZEhlYWRlciA9IChoZWFkZXJzOiBIZWFkZXJzKSA9PiB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdTZW5kLUlkJywgaWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvc2VuZHMvYWNjZXNzLycgKyBpZCwgcmVxdWVzdCwgZmFsc2UsIHRydWUsIGFwaVVybCwgYWRkU2VuZElkSGVhZGVyKTtcclxuICAgICAgICByZXR1cm4gbmV3IFNlbmRBY2Nlc3NSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRTZW5kRmlsZURvd25sb2FkRGF0YShzZW5kOiBTZW5kQWNjZXNzVmlldywgcmVxdWVzdDogU2VuZEFjY2Vzc1JlcXVlc3QsIGFwaVVybD86IHN0cmluZyk6IFByb21pc2U8U2VuZEZpbGVEb3dubG9hZERhdGFSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IGFkZFNlbmRJZEhlYWRlciA9IChoZWFkZXJzOiBIZWFkZXJzKSA9PiB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdTZW5kLUlkJywgc2VuZC5pZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9zZW5kcy8nICsgc2VuZC5pZCArICcvYWNjZXNzL2ZpbGUvJyArIHNlbmQuZmlsZS5pZCwgcmVxdWVzdCwgZmFsc2UsIHRydWUsXHJcbiAgICAgICAgICAgIGFwaVVybCwgYWRkU2VuZElkSGVhZGVyKTtcclxuICAgICAgICByZXR1cm4gbmV3IFNlbmRGaWxlRG93bmxvYWREYXRhUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0U2VuZHMoKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8U2VuZFJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvc2VuZHMnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBTZW5kUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RTZW5kKHJlcXVlc3Q6IFNlbmRSZXF1ZXN0KTogUHJvbWlzZTxTZW5kUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9zZW5kcycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2VuZFJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RGaWxlVHlwZVNlbmQocmVxdWVzdDogU2VuZFJlcXVlc3QpOiBQcm9taXNlPFNlbmRGaWxlVXBsb2FkRGF0YVJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvc2VuZHMvZmlsZS92MicsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2VuZEZpbGVVcGxvYWREYXRhUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVuZXdTZW5kRmlsZVVwbG9hZFVybChzZW5kSWQ6IHN0cmluZywgZmlsZUlkOiBzdHJpbmcpOiBQcm9taXNlPFNlbmRGaWxlVXBsb2FkRGF0YVJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9zZW5kcy8nICsgc2VuZElkICsgJy9maWxlLycgKyBmaWxlSWQsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2VuZEZpbGVVcGxvYWREYXRhUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdFNlbmRGaWxlKHNlbmRJZDogc3RyaW5nLCBmaWxlSWQ6IHN0cmluZywgZGF0YTogRm9ybURhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL3NlbmRzLycgKyBzZW5kSWQgKyAnL2ZpbGUvJyArIGZpbGVJZCwgZGF0YSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgTWFyIDI1IDIwMjE6IFRoaXMgbWV0aG9kIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZGlyZWN0IHVwbG9hZHMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBzdGlsbCBleGlzdHMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGQgc2VydmVyIHZlcnNpb25zLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBwb3N0U2VuZEZpbGVMZWdhY3koZGF0YTogRm9ybURhdGEpOiBQcm9taXNlPFNlbmRSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3NlbmRzL2ZpbGUnLCBkYXRhLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFNlbmRSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRTZW5kKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFNlbmRSZXF1ZXN0KTogUHJvbWlzZTxTZW5kUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL3NlbmRzLycgKyBpZCwgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTZW5kUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0U2VuZFJlbW92ZVBhc3N3b3JkKGlkOiBzdHJpbmcpOiBQcm9taXNlPFNlbmRSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvc2VuZHMvJyArIGlkICsgJy9yZW1vdmUtcGFzc3dvcmQnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFNlbmRSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVTZW5kKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsICcvc2VuZHMvJyArIGlkLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2lwaGVyIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRDaXBoZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8Q2lwaGVyUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL2NpcGhlcnMvJyArIGlkLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldENpcGhlckFkbWluKGlkOiBzdHJpbmcpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9jaXBoZXJzLycgKyBpZCArICcvYWRtaW4nLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldENpcGhlcnNPcmdhbml6YXRpb24ob3JnYW5pemF0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8TGlzdFJlc3BvbnNlPENpcGhlclJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvY2lwaGVycy9vcmdhbml6YXRpb24tZGV0YWlscz9vcmdhbml6YXRpb25JZD0nICsgb3JnYW5pemF0aW9uSWQsXHJcbiAgICAgICAgICAgIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIENpcGhlclJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0Q2lwaGVyKHJlcXVlc3Q6IENpcGhlclJlcXVlc3QpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvY2lwaGVycycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2lwaGVyUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdENpcGhlckNyZWF0ZShyZXF1ZXN0OiBDaXBoZXJDcmVhdGVSZXF1ZXN0KTogUHJvbWlzZTxDaXBoZXJSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL2NpcGhlcnMvY3JlYXRlJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXJSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0Q2lwaGVyQWRtaW4ocmVxdWVzdDogQ2lwaGVyQ3JlYXRlUmVxdWVzdCk6IFByb21pc2U8Q2lwaGVyUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9jaXBoZXJzL2FkbWluJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXJSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRDaXBoZXIoaWQ6IHN0cmluZywgcmVxdWVzdDogQ2lwaGVyUmVxdWVzdCk6IFByb21pc2U8Q2lwaGVyUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvJyArIGlkLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHB1dENpcGhlckFkbWluKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IENpcGhlclJlcXVlc3QpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzLycgKyBpZCArICcvYWRtaW4nLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUNpcGhlcihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL2NpcGhlcnMvJyArIGlkLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlQ2lwaGVyQWRtaW4oaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9jaXBoZXJzLycgKyBpZCArICcvYWRtaW4nLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlTWFueUNpcGhlcnMocmVxdWVzdDogQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsICcvY2lwaGVycycsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVNYW55Q2lwaGVyc0FkbWluKHJlcXVlc3Q6IENpcGhlckJ1bGtEZWxldGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL2NpcGhlcnMvYWRtaW4nLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0TW92ZUNpcGhlcnMocmVxdWVzdDogQ2lwaGVyQnVsa01vdmVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvbW92ZScsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRTaGFyZUNpcGhlcihpZDogc3RyaW5nLCByZXF1ZXN0OiBDaXBoZXJTaGFyZVJlcXVlc3QpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzLycgKyBpZCArICcvc2hhcmUnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1dFNoYXJlQ2lwaGVycyhyZXF1ZXN0OiBDaXBoZXJCdWxrU2hhcmVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvc2hhcmUnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0Q2lwaGVyQ29sbGVjdGlvbnMoaWQ6IHN0cmluZywgcmVxdWVzdDogQ2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9jb2xsZWN0aW9ucycsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdXRDaXBoZXJDb2xsZWN0aW9uc0FkbWluKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IENpcGhlckNvbGxlY3Rpb25zUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzLycgKyBpZCArICcvY29sbGVjdGlvbnMtYWRtaW4nLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdFB1cmdlQ2lwaGVycyhyZXF1ZXN0OiBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0LCBvcmdhbml6YXRpb25JZDogc3RyaW5nID0gbnVsbCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgbGV0IHBhdGggPSAnL2NpcGhlcnMvcHVyZ2UnO1xyXG4gICAgICAgIGlmIChvcmdhbml6YXRpb25JZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHBhdGggKz0gJz9vcmdhbml6YXRpb25JZD0nICsgb3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCBwYXRoLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEltcG9ydENpcGhlcnMocmVxdWVzdDogSW1wb3J0Q2lwaGVyc1JlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2NpcGhlcnMvaW1wb3J0JywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RJbXBvcnRPcmdhbml6YXRpb25DaXBoZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHJlcXVlc3Q6IEltcG9ydE9yZ2FuaXphdGlvbkNpcGhlcnNSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9jaXBoZXJzL2ltcG9ydC1vcmdhbml6YXRpb24/b3JnYW5pemF0aW9uSWQ9JyArIG9yZ2FuaXphdGlvbklkLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0RGVsZXRlQ2lwaGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvY2lwaGVycy8nICsgaWQgKyAnL2RlbGV0ZScsIG51bGwsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdXREZWxldGVDaXBoZXJBZG1pbihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9kZWxldGUtYWRtaW4nLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0RGVsZXRlTWFueUNpcGhlcnMocmVxdWVzdDogQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvY2lwaGVycy9kZWxldGUnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0RGVsZXRlTWFueUNpcGhlcnNBZG1pbihyZXF1ZXN0OiBDaXBoZXJCdWxrRGVsZXRlUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzL2RlbGV0ZS1hZG1pbicsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRSZXN0b3JlQ2lwaGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzLycgKyBpZCArICcvcmVzdG9yZScsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2lwaGVyUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0UmVzdG9yZUNpcGhlckFkbWluKGlkOiBzdHJpbmcpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzLycgKyBpZCArICcvcmVzdG9yZS1hZG1pbicsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2lwaGVyUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0UmVzdG9yZU1hbnlDaXBoZXJzKHJlcXVlc3Q6IENpcGhlckJ1bGtEZWxldGVSZXF1ZXN0KTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8Q2lwaGVyUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzL3Jlc3RvcmUnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZTxDaXBoZXJSZXNwb25zZT4ociwgQ2lwaGVyUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEF0dGFjaG1lbnRzIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRBdHRhY2htZW50RGF0YShjaXBoZXJJZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZywgZW1lcmdlbmN5QWNjZXNzSWQ/OiBzdHJpbmcpOiBQcm9taXNlPEF0dGFjaG1lbnRSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHBhdGggPSAoZW1lcmdlbmN5QWNjZXNzSWQgIT0gbnVsbCA/XHJcbiAgICAgICAgICAgICcvZW1lcmdlbmN5LWFjY2Vzcy8nICsgZW1lcmdlbmN5QWNjZXNzSWQgKyAnLycgOlxyXG4gICAgICAgICAgICAnL2NpcGhlcnMvJykgKyBjaXBoZXJJZCArICcvYXR0YWNobWVudC8nICsgYXR0YWNobWVudElkO1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsIHBhdGgsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQXR0YWNobWVudFJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RDaXBoZXJBdHRhY2htZW50KGlkOiBzdHJpbmcsIHJlcXVlc3Q6IEF0dGFjaG1lbnRSZXF1ZXN0KTogUHJvbWlzZTxBdHRhY2htZW50VXBsb2FkRGF0YVJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvY2lwaGVycy8nICsgaWQgKyAnL2F0dGFjaG1lbnQvdjInLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IEF0dGFjaG1lbnRVcGxvYWREYXRhUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBNYXIgMjUgMjAyMTogVGhpcyBtZXRob2QgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBkaXJlY3QgdXBsb2Fkcy5cclxuICAgICAqIFRoaXMgbWV0aG9kIHN0aWxsIGV4aXN0cyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIG9sZCBzZXJ2ZXIgdmVyc2lvbnMuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHBvc3RDaXBoZXJBdHRhY2htZW50TGVnYWN5KGlkOiBzdHJpbmcsIGRhdGE6IEZvcm1EYXRhKTogUHJvbWlzZTxDaXBoZXJSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9hdHRhY2htZW50JywgZGF0YSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXJSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIE1hciAyNSAyMDIxOiBUaGlzIG1ldGhvZCBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGRpcmVjdCB1cGxvYWRzLlxyXG4gICAgICogVGhpcyBtZXRob2Qgc3RpbGwgZXhpc3RzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggb2xkIHNlcnZlciB2ZXJzaW9ucy5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgcG9zdENpcGhlckF0dGFjaG1lbnRBZG1pbkxlZ2FjeShpZDogc3RyaW5nLCBkYXRhOiBGb3JtRGF0YSk6IFByb21pc2U8Q2lwaGVyUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9jaXBoZXJzLycgKyBpZCArICcvYXR0YWNobWVudC1hZG1pbicsIGRhdGEsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2lwaGVyUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlQ2lwaGVyQXR0YWNobWVudChpZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9jaXBoZXJzLycgKyBpZCArICcvYXR0YWNobWVudC8nICsgYXR0YWNobWVudElkLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlQ2lwaGVyQXR0YWNobWVudEFkbWluKGlkOiBzdHJpbmcsIGF0dGFjaG1lbnRJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9hdHRhY2htZW50LycgKyBhdHRhY2htZW50SWQgKyAnL2FkbWluJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RTaGFyZUNpcGhlckF0dGFjaG1lbnQoaWQ6IHN0cmluZywgYXR0YWNobWVudElkOiBzdHJpbmcsIGRhdGE6IEZvcm1EYXRhLFxyXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9hdHRhY2htZW50LycgK1xyXG4gICAgICAgICAgICBhdHRhY2htZW50SWQgKyAnL3NoYXJlP29yZ2FuaXphdGlvbklkPScgKyBvcmdhbml6YXRpb25JZCwgZGF0YSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlbmV3QXR0YWNobWVudFVwbG9hZFVybChpZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZyk6IFByb21pc2U8QXR0YWNobWVudFVwbG9hZERhdGFSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvY2lwaGVycy8nICsgaWQgKyAnL2F0dGFjaG1lbnQvJyArIGF0dGFjaG1lbnRJZCArICcvcmVuZXcnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IEF0dGFjaG1lbnRVcGxvYWREYXRhUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEF0dGFjaG1lbnRGaWxlKGlkOiBzdHJpbmcsIGF0dGFjaG1lbnRJZDogc3RyaW5nLCBkYXRhOiBGb3JtRGF0YSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvY2lwaGVycy8nICsgaWQgKyAnL2F0dGFjaG1lbnQvJyArIGF0dGFjaG1lbnRJZCwgZGF0YSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENvbGxlY3Rpb25zIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRDb2xsZWN0aW9uRGV0YWlscyhvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nKTogUHJvbWlzZTxDb2xsZWN0aW9uR3JvdXBEZXRhaWxzUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9jb2xsZWN0aW9ucy8nICsgaWQgKyAnL2RldGFpbHMnLFxyXG4gICAgICAgICAgICBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb25Hcm91cERldGFpbHNSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRVc2VyQ29sbGVjdGlvbnMoKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8Q29sbGVjdGlvblJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvY29sbGVjdGlvbnMnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBDb2xsZWN0aW9uUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldENvbGxlY3Rpb25zKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxDb2xsZWN0aW9uUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvY29sbGVjdGlvbnMnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBDb2xsZWN0aW9uUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldENvbGxlY3Rpb25Vc2Vycyhvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nKTogUHJvbWlzZTxTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlW10+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9jb2xsZWN0aW9ucy8nICsgaWQgKyAnL3VzZXJzJyxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHIubWFwKChkcjogYW55KSA9PiBuZXcgU2VsZWN0aW9uUmVhZE9ubHlSZXNwb25zZShkcikpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RDb2xsZWN0aW9uKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHJlcXVlc3Q6IENvbGxlY3Rpb25SZXF1ZXN0KTogUHJvbWlzZTxDb2xsZWN0aW9uUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvY29sbGVjdGlvbnMnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb25SZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRDb2xsZWN0aW9uKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsIHJlcXVlc3Q6IENvbGxlY3Rpb25SZXF1ZXN0KTogUHJvbWlzZTxDb2xsZWN0aW9uUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9jb2xsZWN0aW9ucy8nICsgaWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvblJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHB1dENvbGxlY3Rpb25Vc2Vycyhvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nLCByZXF1ZXN0OiBTZWxlY3Rpb25SZWFkT25seVJlcXVlc3RbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9jb2xsZWN0aW9ucy8nICsgaWQgKyAnL3VzZXJzJyxcclxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUNvbGxlY3Rpb24ob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvY29sbGVjdGlvbnMvJyArIGlkLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlQ29sbGVjdGlvblVzZXIob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZywgb3JnYW5pemF0aW9uVXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsXHJcbiAgICAgICAgICAgICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2NvbGxlY3Rpb25zLycgKyBpZCArICcvdXNlci8nICsgb3JnYW5pemF0aW9uVXNlcklkLFxyXG4gICAgICAgICAgICBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR3JvdXBzIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRHcm91cERldGFpbHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8R3JvdXBEZXRhaWxzUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9ncm91cHMvJyArIGlkICsgJy9kZXRhaWxzJyxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBHcm91cERldGFpbHNSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRHcm91cHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8TGlzdFJlc3BvbnNlPEdyb3VwUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvZ3JvdXBzJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgR3JvdXBSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0R3JvdXBVc2Vycyhvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2dyb3Vwcy8nICsgaWQgKyAnL3VzZXJzJyxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdEdyb3VwKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHJlcXVlc3Q6IEdyb3VwUmVxdWVzdCk6IFByb21pc2U8R3JvdXBSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9ncm91cHMnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IEdyb3VwUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0R3JvdXAob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZywgcmVxdWVzdDogR3JvdXBSZXF1ZXN0KTogUHJvbWlzZTxHcm91cFJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvZ3JvdXBzLycgKyBpZCwgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBHcm91cFJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHB1dEdyb3VwVXNlcnMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZywgcmVxdWVzdDogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvZ3JvdXBzLycgKyBpZCArICcvdXNlcnMnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlR3JvdXAob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvZ3JvdXBzLycgKyBpZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUdyb3VwVXNlcihvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nLCBvcmdhbml6YXRpb25Vc2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJyxcclxuICAgICAgICAgICAgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvZ3JvdXBzLycgKyBpZCArICcvdXNlci8nICsgb3JnYW5pemF0aW9uVXNlcklkLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUG9saWN5IEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRQb2xpY3kob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgdHlwZTogUG9saWN5VHlwZSk6IFByb21pc2U8UG9saWN5UmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9wb2xpY2llcy8nICsgdHlwZSwgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb2xpY3lSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRQb2xpY2llcyhvcmdhbml6YXRpb25JZDogc3RyaW5nKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8UG9saWN5UmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvcG9saWNpZXMnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBQb2xpY3lSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0UG9saWNpZXNCeVRva2VuKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIG9yZ2FuaXphdGlvblVzZXJJZDogc3RyaW5nKTpcclxuICAgICAgICBQcm9taXNlPExpc3RSZXNwb25zZTxQb2xpY3lSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9wb2xpY2llcy90b2tlbj8nICtcclxuICAgICAgICAgICAgJ3Rva2VuPScgKyBlbmNvZGVVUklDb21wb25lbnQodG9rZW4pICsgJyZlbWFpbD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGVtYWlsKSArXHJcbiAgICAgICAgICAgICcmb3JnYW5pemF0aW9uVXNlcklkPScgKyBvcmdhbml6YXRpb25Vc2VySWQsIG51bGwsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBQb2xpY3lSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0UG9saWN5KG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHR5cGU6IFBvbGljeVR5cGUsIHJlcXVlc3Q6IFBvbGljeVJlcXVlc3QpOiBQcm9taXNlPFBvbGljeVJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvcG9saWNpZXMvJyArIHR5cGUsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUG9saWN5UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT3JnYW5pemF0aW9uIFVzZXIgQVBJc1xyXG5cclxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvblVzZXIob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8T3JnYW5pemF0aW9uVXNlckRldGFpbHNSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3VzZXJzLycgKyBpZCwgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPcmdhbml6YXRpb25Vc2VyRGV0YWlsc1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvblVzZXJHcm91cHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy8nICsgaWQgKyAnL2dyb3VwcycsXHJcbiAgICAgICAgICAgIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvblVzZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxPcmdhbml6YXRpb25Vc2VyVXNlckRldGFpbHNSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2VycycsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIE9yZ2FuaXphdGlvblVzZXJVc2VyRGV0YWlsc1Jlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRPcmdhbml6YXRpb25Vc2VyUmVzZXRQYXNzd29yZERldGFpbHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6XHJcbiAgICAgICAgUHJvbWlzZTxPcmdhbml6YXRpb25Vc2VyUmVzZXRQYXNzd29yZERldGFpbHNSZXBvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvJyArIGlkICtcclxuICAgICAgICAgICAgJy9yZXNldC1wYXNzd29yZC1kZXRhaWxzJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPcmdhbml6YXRpb25Vc2VyUmVzZXRQYXNzd29yZERldGFpbHNSZXBvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvbkF1dG9FbnJvbGxTdGF0dXMoaWRlbnRpZmllcjogc3RyaW5nKTogUHJvbWlzZTxPcmdhbml6YXRpb25BdXRvRW5yb2xsU3RhdHVzUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkZW50aWZpZXIgKyAnL2F1dG8tZW5yb2xsLXN0YXR1cycsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgT3JnYW5pemF0aW9uQXV0b0Vucm9sbFN0YXR1c1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RPcmdhbml6YXRpb25Vc2VySW52aXRlKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblVzZXJJbnZpdGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvaW52aXRlJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RPcmdhbml6YXRpb25Vc2VyUmVpbnZpdGUob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3VzZXJzLycgKyBpZCArICcvcmVpbnZpdGUnLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdE1hbnlPcmdhbml6YXRpb25Vc2VyUmVpbnZpdGUob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgcmVxdWVzdDogT3JnYW5pemF0aW9uVXNlckJ1bGtSZXF1ZXN0KTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8T3JnYW5pemF0aW9uVXNlckJ1bGtSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvcmVpbnZpdGUnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBPcmdhbml6YXRpb25Vc2VyQnVsa1Jlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0T3JnYW5pemF0aW9uVXNlckFjY2VwdChvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nLFxyXG4gICAgICAgIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblVzZXJBY2NlcHRSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvJyArIGlkICsgJy9hY2NlcHQnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdE9yZ2FuaXphdGlvblVzZXJDb25maXJtKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsXHJcbiAgICAgICAgcmVxdWVzdDogT3JnYW5pemF0aW9uVXNlckNvbmZpcm1SZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvJyArIGlkICsgJy9jb25maXJtJyxcclxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25Vc2Vyc1B1YmxpY0tleShvcmdhbml6YXRpb25JZDogc3RyaW5nLCByZXF1ZXN0OiBPcmdhbml6YXRpb25Vc2VyQnVsa1JlcXVlc3QpOiBQcm9taXNlPExpc3RSZXNwb25zZTxPcmdhbml6YXRpb25Vc2VyQnVsa1B1YmxpY0tleVJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy9wdWJsaWMta2V5cycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIE9yZ2FuaXphdGlvblVzZXJCdWxrUHVibGljS2V5UmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25Vc2VyQnVsa0NvbmZpcm0ob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgcmVxdWVzdDogT3JnYW5pemF0aW9uVXNlckJ1bGtDb25maXJtUmVxdWVzdCk6IFByb21pc2U8TGlzdFJlc3BvbnNlPE9yZ2FuaXphdGlvblVzZXJCdWxrUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3VzZXJzL2NvbmZpcm0nLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBPcmdhbml6YXRpb25Vc2VyQnVsa1Jlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdXRPcmdhbml6YXRpb25Vc2VyKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblVzZXJVcGRhdGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy8nICsgaWQsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdXRPcmdhbml6YXRpb25Vc2VyR3JvdXBzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsXHJcbiAgICAgICAgcmVxdWVzdDogT3JnYW5pemF0aW9uVXNlclVwZGF0ZUdyb3Vwc1JlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3VzZXJzLycgKyBpZCArICcvZ3JvdXBzJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1dE9yZ2FuaXphdGlvblVzZXJSZXNldFBhc3N3b3JkRW5yb2xsbWVudChvcmdhbml6YXRpb25JZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZyxcclxuICAgICAgICByZXF1ZXN0OiBPcmdhbml6YXRpb25Vc2VyUmVzZXRQYXNzd29yZEVucm9sbG1lbnRSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy8nICsgdXNlcklkICsgJy9yZXNldC1wYXNzd29yZC1lbnJvbGxtZW50JyxcclxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1dE9yZ2FuaXphdGlvblVzZXJSZXNldFBhc3N3b3JkKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsXHJcbiAgICAgICAgcmVxdWVzdDogT3JnYW5pemF0aW9uVXNlclJlc2V0UGFzc3dvcmRSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy8nICsgaWQgKyAnL3Jlc2V0LXBhc3N3b3JkJyxcclxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZU9yZ2FuaXphdGlvblVzZXIob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvJyArIGlkLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlTWFueU9yZ2FuaXphdGlvblVzZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblVzZXJCdWxrUmVxdWVzdCk6IFByb21pc2U8TGlzdFJlc3BvbnNlPE9yZ2FuaXphdGlvblVzZXJCdWxrUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnREVMRVRFJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBPcmdhbml6YXRpb25Vc2VyQnVsa1Jlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQbGFuIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRQbGFucygpOiBQcm9taXNlPExpc3RSZXNwb25zZTxQbGFuUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9wbGFucy8nLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBQbGFuUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RJbXBvcnREaXJlY3Rvcnkob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgcmVxdWVzdDogSW1wb3J0RGlyZWN0b3J5UmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2ltcG9ydCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0UHVibGljSW1wb3J0RGlyZWN0b3J5KHJlcXVlc3Q6IE9yZ2FuaXphdGlvbkltcG9ydFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL3B1YmxpYy9vcmdhbml6YXRpb24vaW1wb3J0JywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFRheFJhdGVzKCk6IFByb21pc2U8TGlzdFJlc3BvbnNlPFRheFJhdGVSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL3BsYW5zL3NhbGVzLXRheC1yYXRlcy8nLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBUYXhSYXRlUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNldHRpbmdzIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRTZXR0aW5nc0RvbWFpbnMoKTogUHJvbWlzZTxEb21haW5zUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL3NldHRpbmdzL2RvbWFpbnMnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IERvbWFpbnNSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRTZXR0aW5nc0RvbWFpbnMocmVxdWVzdDogVXBkYXRlRG9tYWluc1JlcXVlc3QpOiBQcm9taXNlPERvbWFpbnNSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvc2V0dGluZ3MvZG9tYWlucycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRG9tYWluc1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN5bmMgQVBJc1xyXG5cclxuICAgIGFzeW5jIGdldFN5bmMoKTogUHJvbWlzZTxTeW5jUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5pc0Rlc2t0b3BDbGllbnQgfHwgdGhpcy5pc1dlYkNsaWVudCA/ICcvc3luYz9leGNsdWRlRG9tYWlucz10cnVlJyA6ICcvc3luYyc7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgcGF0aCwgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHdvLWZhY3RvciBBUElzXHJcblxyXG4gICAgYXN5bmMgZ2V0VHdvRmFjdG9yUHJvdmlkZXJzKCk6IFByb21pc2U8TGlzdFJlc3BvbnNlPFR3b0ZhY3RvclByb3ZpZGVyUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy90d28tZmFjdG9yJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgVHdvRmFjdG9yUHJvdmlkZXJSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0VHdvRmFjdG9yT3JnYW5pemF0aW9uUHJvdmlkZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3R3by1mYWN0b3InLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRUd29GYWN0b3JBdXRoZW50aWNhdG9yKHJlcXVlc3Q6IFNlY3JldFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckF1dGhlbnRpY2F0b3JSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3R3by1mYWN0b3IvZ2V0LWF1dGhlbnRpY2F0b3InLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckF1dGhlbnRpY2F0b3JSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRUd29GYWN0b3JFbWFpbChyZXF1ZXN0OiBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JFbWFpbFJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvdHdvLWZhY3Rvci9nZXQtZW1haWwnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckVtYWlsUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0VHdvRmFjdG9yRHVvKHJlcXVlc3Q6IFNlY3JldFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckR1b1Jlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvdHdvLWZhY3Rvci9nZXQtZHVvJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUd29GYWN0b3JEdW9SZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRUd29GYWN0b3JPcmdhbml6YXRpb25EdW8ob3JnYW5pemF0aW9uSWQ6IHN0cmluZyxcclxuICAgICAgICByZXF1ZXN0OiBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JEdW9SZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy90d28tZmFjdG9yL2dldC1kdW8nLFxyXG4gICAgICAgICAgICByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckR1b1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFR3b0ZhY3Rvcll1YmlLZXkocmVxdWVzdDogU2VjcmV0VmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8VHdvRmFjdG9yWXViaUtleVJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvdHdvLWZhY3Rvci9nZXQteXViaWtleScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yWXViaUtleVJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFR3b0ZhY3RvcldlYkF1dGhuKHJlcXVlc3Q6IFNlY3JldFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvcldlYkF1dGhuUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy90d28tZmFjdG9yL2dldC13ZWJhdXRobicsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yV2ViQXV0aG5SZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRUd29GYWN0b3JXZWJBdXRobkNoYWxsZW5nZShyZXF1ZXN0OiBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxDaGFsbGVuZ2VSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3R3by1mYWN0b3IvZ2V0LXdlYmF1dGhuLWNoYWxsZW5nZScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2hhbGxlbmdlUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0VHdvRmFjdG9yUmVjb3ZlcihyZXF1ZXN0OiBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JSZWNvdmVyUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy90d28tZmFjdG9yL2dldC1yZWNvdmVyJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUd29GYWN0b3JSZWNvdmVyUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0VHdvRmFjdG9yQXV0aGVudGljYXRvcihcclxuICAgICAgICByZXF1ZXN0OiBVcGRhdGVUd29GYWN0b3JBdXRoZW50aWNhdG9yUmVxdWVzdCk6IFByb21pc2U8VHdvRmFjdG9yQXV0aGVudGljYXRvclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy90d28tZmFjdG9yL2F1dGhlbnRpY2F0b3InLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckF1dGhlbnRpY2F0b3JSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRUd29GYWN0b3JFbWFpbChyZXF1ZXN0OiBVcGRhdGVUd29GYWN0b3JFbWFpbFJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckVtYWlsUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL3R3by1mYWN0b3IvZW1haWwnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckVtYWlsUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0VHdvRmFjdG9yRHVvKHJlcXVlc3Q6IFVwZGF0ZVR3b0ZhY3RvckR1b1JlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckR1b1Jlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy90d28tZmFjdG9yL2R1bycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yRHVvUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0VHdvRmFjdG9yT3JnYW5pemF0aW9uRHVvKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsXHJcbiAgICAgICAgcmVxdWVzdDogVXBkYXRlVHdvRmFjdG9yRHVvUmVxdWVzdCk6IFByb21pc2U8VHdvRmFjdG9yRHVvUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy90d28tZmFjdG9yL2R1bycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yRHVvUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0VHdvRmFjdG9yWXViaUtleShyZXF1ZXN0OiBVcGRhdGVUd29GYWN0b3JZdWJpb090cFJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3Rvcll1YmlLZXlSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvdHdvLWZhY3Rvci95dWJpa2V5JywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUd29GYWN0b3JZdWJpS2V5UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0VHdvRmFjdG9yV2ViQXV0aG4ocmVxdWVzdDogVXBkYXRlVHdvRmFjdG9yV2ViQXV0aG5SZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JXZWJBdXRoblJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXF1ZXN0LmRldmljZVJlc3BvbnNlLnJlc3BvbnNlIGFzIEF1dGhlbnRpY2F0b3JBdHRlc3RhdGlvblJlc3BvbnNlO1xyXG4gICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3QpO1xyXG5cclxuICAgICAgICBkYXRhLmRldmljZVJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgICBpZDogcmVxdWVzdC5kZXZpY2VSZXNwb25zZS5pZCxcclxuICAgICAgICAgICAgcmF3SWQ6IGJ0b2EocmVxdWVzdC5kZXZpY2VSZXNwb25zZS5pZCksXHJcbiAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QuZGV2aWNlUmVzcG9uc2UudHlwZSxcclxuICAgICAgICAgICAgZXh0ZW5zaW9uczogcmVxdWVzdC5kZXZpY2VSZXNwb25zZS5nZXRDbGllbnRFeHRlbnNpb25SZXN1bHRzKCksXHJcbiAgICAgICAgICAgIHJlc3BvbnNlOiB7XHJcbiAgICAgICAgICAgICAgICBBdHRlc3RhdGlvbk9iamVjdDogVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KHJlc3BvbnNlLmF0dGVzdGF0aW9uT2JqZWN0KSxcclxuICAgICAgICAgICAgICAgIGNsaWVudERhdGFKc29uOiBVdGlscy5mcm9tQnVmZmVyVG9CNjQocmVzcG9uc2UuY2xpZW50RGF0YUpTT04pLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvdHdvLWZhY3Rvci93ZWJhdXRobicsIGRhdGEsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yV2ViQXV0aG5SZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWxldGVUd29GYWN0b3JXZWJBdXRobihyZXF1ZXN0OiBVcGRhdGVUd29GYWN0b3JXZWJBdXRobkRlbGV0ZVJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvcldlYkF1dGhuUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdERUxFVEUnLCAnL3R3by1mYWN0b3Ivd2ViYXV0aG4nLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvcldlYkF1dGhuUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0VHdvRmFjdG9yRGlzYWJsZShyZXF1ZXN0OiBUd29GYWN0b3JQcm92aWRlclJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvclByb3ZpZGVyUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL3R3by1mYWN0b3IvZGlzYWJsZScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yUHJvdmlkZXJSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRUd29GYWN0b3JPcmdhbml6YXRpb25EaXNhYmxlKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsXHJcbiAgICAgICAgcmVxdWVzdDogVHdvRmFjdG9yUHJvdmlkZXJSZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdHdvLWZhY3Rvci9kaXNhYmxlJyxcclxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RUd29GYWN0b3JSZWNvdmVyKHJlcXVlc3Q6IFR3b0ZhY3RvclJlY292ZXJ5UmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvdHdvLWZhY3Rvci9yZWNvdmVyJywgcmVxdWVzdCwgZmFsc2UsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0VHdvRmFjdG9yRW1haWxTZXR1cChyZXF1ZXN0OiBUd29GYWN0b3JFbWFpbFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL3R3by1mYWN0b3Ivc2VuZC1lbWFpbCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0VHdvRmFjdG9yRW1haWwocmVxdWVzdDogVHdvRmFjdG9yRW1haWxSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy90d28tZmFjdG9yL3NlbmQtZW1haWwtbG9naW4nLCByZXF1ZXN0LCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEVtZXJnZW5jeSBBY2Nlc3MgQVBJc1xyXG5cclxuICAgIGFzeW5jIGdldEVtZXJnZW5jeUFjY2Vzc1RydXN0ZWQoKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8RW1lcmdlbmN5QWNjZXNzR3JhbnRlZURldGFpbHNSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL2VtZXJnZW5jeS1hY2Nlc3MvdHJ1c3RlZCcsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIEVtZXJnZW5jeUFjY2Vzc0dyYW50ZWVEZXRhaWxzUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEVtZXJnZW5jeUFjY2Vzc0dyYW50ZWQoKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8RW1lcmdlbmN5QWNjZXNzR3JhbnRvckRldGFpbHNSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL2VtZXJnZW5jeS1hY2Nlc3MvZ3JhbnRlZCcsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIEVtZXJnZW5jeUFjY2Vzc0dyYW50b3JEZXRhaWxzUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEVtZXJnZW5jeUFjY2VzcyhpZDogc3RyaW5nKTogUHJvbWlzZTxFbWVyZ2VuY3lBY2Nlc3NHcmFudGVlRGV0YWlsc1Jlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9lbWVyZ2VuY3ktYWNjZXNzLycgKyBpZCwgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFbWVyZ2VuY3lBY2Nlc3NHcmFudGVlRGV0YWlsc1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEVtZXJnZW5jeUdyYW50b3JQb2xpY2llcyhpZDogc3RyaW5nKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8UG9saWN5UmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9lbWVyZ2VuY3ktYWNjZXNzLycgKyBpZCArICcvcG9saWNpZXMnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBQb2xpY3lSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0RW1lcmdlbmN5QWNjZXNzKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IEVtZXJnZW5jeUFjY2Vzc1VwZGF0ZVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvZW1lcmdlbmN5LWFjY2Vzcy8nICsgaWQsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVFbWVyZ2VuY3lBY2Nlc3MoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9lbWVyZ2VuY3ktYWNjZXNzLycgKyBpZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RFbWVyZ2VuY3lBY2Nlc3NJbnZpdGUocmVxdWVzdDogRW1lcmdlbmN5QWNjZXNzSW52aXRlUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvZW1lcmdlbmN5LWFjY2Vzcy9pbnZpdGUnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEVtZXJnZW5jeUFjY2Vzc1JlaW52aXRlKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2VtZXJnZW5jeS1hY2Nlc3MvJyArIGlkICsgJy9yZWludml0ZScsIG51bGwsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0RW1lcmdlbmN5QWNjZXNzQWNjZXB0KGlkOiBzdHJpbmcsIHJlcXVlc3Q6IEVtZXJnZW5jeUFjY2Vzc0FjY2VwdFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2VtZXJnZW5jeS1hY2Nlc3MvJyArIGlkICsgJy9hY2NlcHQnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEVtZXJnZW5jeUFjY2Vzc0NvbmZpcm0oaWQ6IHN0cmluZywgcmVxdWVzdDogRW1lcmdlbmN5QWNjZXNzQ29uZmlybVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2VtZXJnZW5jeS1hY2Nlc3MvJyArIGlkICsgJy9jb25maXJtJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RFbWVyZ2VuY3lBY2Nlc3NJbml0aWF0ZShpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9lbWVyZ2VuY3ktYWNjZXNzLycgKyBpZCArICcvaW5pdGlhdGUnLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEVtZXJnZW5jeUFjY2Vzc0FwcHJvdmUoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvZW1lcmdlbmN5LWFjY2Vzcy8nICsgaWQgKyAnL2FwcHJvdmUnLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEVtZXJnZW5jeUFjY2Vzc1JlamVjdChpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9lbWVyZ2VuY3ktYWNjZXNzLycgKyBpZCArICcvcmVqZWN0JywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RFbWVyZ2VuY3lBY2Nlc3NUYWtlb3ZlcihpZDogc3RyaW5nKTogUHJvbWlzZTxFbWVyZ2VuY3lBY2Nlc3NUYWtlb3ZlclJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvZW1lcmdlbmN5LWFjY2Vzcy8nICsgaWQgKyAnL3Rha2VvdmVyJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFbWVyZ2VuY3lBY2Nlc3NUYWtlb3ZlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RFbWVyZ2VuY3lBY2Nlc3NQYXNzd29yZChpZDogc3RyaW5nLCByZXF1ZXN0OiBFbWVyZ2VuY3lBY2Nlc3NQYXNzd29yZFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL2VtZXJnZW5jeS1hY2Nlc3MvJyArIGlkICsgJy9wYXNzd29yZCcsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RFbWVyZ2VuY3lBY2Nlc3NWaWV3KGlkOiBzdHJpbmcpOiBQcm9taXNlPEVtZXJnZW5jeUFjY2Vzc1ZpZXdSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL2VtZXJnZW5jeS1hY2Nlc3MvJyArIGlkICsgJy92aWV3JywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFbWVyZ2VuY3lBY2Nlc3NWaWV3UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT3JnYW5pemF0aW9uIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRPcmdhbml6YXRpb24oaWQ6IHN0cmluZyk6IFByb21pc2U8T3JnYW5pemF0aW9uUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IE9yZ2FuaXphdGlvblJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvbkJpbGxpbmcoaWQ6IHN0cmluZyk6IFByb21pc2U8QmlsbGluZ1Jlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvYmlsbGluZycsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmlsbGluZ1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvblN1YnNjcmlwdGlvbihpZDogc3RyaW5nKTogUHJvbWlzZTxPcmdhbml6YXRpb25TdWJzY3JpcHRpb25SZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL3N1YnNjcmlwdGlvbicsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgT3JnYW5pemF0aW9uU3Vic2NyaXB0aW9uUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0T3JnYW5pemF0aW9uTGljZW5zZShpZDogc3RyaW5nLCBpbnN0YWxsYXRpb25JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9saWNlbnNlP2luc3RhbGxhdGlvbklkPScgKyBpbnN0YWxsYXRpb25JZCxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0T3JnYW5pemF0aW9uVGF4SW5mbyhpZDogc3RyaW5nKTogUHJvbWlzZTxUYXhJbmZvUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy90YXgnLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFRheEluZm9SZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRPcmdhbml6YXRpb25Tc28oaWQ6IHN0cmluZyk6IFByb21pc2U8T3JnYW5pemF0aW9uU3NvUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9zc28nLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IE9yZ2FuaXphdGlvblNzb1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb24ocmVxdWVzdDogT3JnYW5pemF0aW9uQ3JlYXRlUmVxdWVzdCk6IFByb21pc2U8T3JnYW5pemF0aW9uUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPcmdhbml6YXRpb25SZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRPcmdhbml6YXRpb24oaWQ6IHN0cmluZywgcmVxdWVzdDogT3JnYW5pemF0aW9uVXBkYXRlUmVxdWVzdCk6IFByb21pc2U8T3JnYW5pemF0aW9uUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IE9yZ2FuaXphdGlvblJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHB1dE9yZ2FuaXphdGlvblRheEluZm8oaWQ6IHN0cmluZywgcmVxdWVzdDogT3JnYW5pemF0aW9uVGF4SW5mb1VwZGF0ZVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL3RheCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0TGVhdmVPcmdhbml6YXRpb24oaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL2xlYXZlJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25MaWNlbnNlKGRhdGE6IEZvcm1EYXRhKTogUHJvbWlzZTxPcmdhbml6YXRpb25SZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvbGljZW5zZScsIGRhdGEsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgT3JnYW5pemF0aW9uUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdE9yZ2FuaXphdGlvbkxpY2Vuc2VVcGRhdGUoaWQ6IHN0cmluZywgZGF0YTogRm9ybURhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9saWNlbnNlJywgZGF0YSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25BcGlLZXkoaWQ6IHN0cmluZywgcmVxdWVzdDogU2VjcmV0VmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8QXBpS2V5UmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvYXBpLWtleScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQXBpS2V5UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdE9yZ2FuaXphdGlvblJvdGF0ZUFwaUtleShpZDogc3RyaW5nLCByZXF1ZXN0OiBTZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxBcGlLZXlSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9yb3RhdGUtYXBpLWtleScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQXBpS2V5UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdE9yZ2FuaXphdGlvblNzbyhpZDogc3RyaW5nLCByZXF1ZXN0OiBPcmdhbml6YXRpb25Tc29SZXF1ZXN0KTogUHJvbWlzZTxPcmdhbml6YXRpb25Tc29SZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9zc28nLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IE9yZ2FuaXphdGlvblNzb1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25VcGdyYWRlKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblVwZ3JhZGVSZXF1ZXN0KTogUHJvbWlzZTxQYXltZW50UmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvdXBncmFkZScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGF5bWVudFJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25VcGRhdGVTdWJzY3JpcHRpb24oaWQ6IHN0cmluZywgcmVxdWVzdDogT3JnYW5pemF0aW9uU3Vic2NyaXB0aW9uVXBkYXRlUmVxdWVzdCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9zdWJzY3JpcHRpb24nLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdE9yZ2FuaXphdGlvblNlYXQoaWQ6IHN0cmluZywgcmVxdWVzdDogU2VhdFJlcXVlc3QpOiBQcm9taXNlPFBheW1lbnRSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9zZWF0JywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZW50UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdE9yZ2FuaXphdGlvblN0b3JhZ2UoaWQ6IHN0cmluZywgcmVxdWVzdDogU3RvcmFnZVJlcXVlc3QpOiBQcm9taXNlPFBheW1lbnRSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9zdG9yYWdlJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZW50UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdE9yZ2FuaXphdGlvblBheW1lbnQoaWQ6IHN0cmluZywgcmVxdWVzdDogUGF5bWVudFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9wYXltZW50JywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RPcmdhbml6YXRpb25WZXJpZnlCYW5rKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFZlcmlmeUJhbmtSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvdmVyaWZ5LWJhbmsnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdE9yZ2FuaXphdGlvbkNhbmNlbChpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvY2FuY2VsJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RPcmdhbml6YXRpb25SZWluc3RhdGUoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL3JlaW5zdGF0ZScsIG51bGwsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVPcmdhbml6YXRpb24oaWQ6IHN0cmluZywgcmVxdWVzdDogU2VjcmV0VmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCwgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvbktleXMoaWQ6IHN0cmluZyk6IFByb21pc2U8T3JnYW5pemF0aW9uS2V5c1Jlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcva2V5cycsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgT3JnYW5pemF0aW9uS2V5c1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25LZXlzKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvbktleXNSZXF1ZXN0KTogUHJvbWlzZTxPcmdhbml6YXRpb25LZXlzUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcva2V5cycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgT3JnYW5pemF0aW9uS2V5c1Jlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByb3ZpZGVyIEFQSXNcclxuXHJcbiAgICBhc3luYyBwb3N0UHJvdmlkZXJTZXR1cChpZDogc3RyaW5nLCByZXF1ZXN0OiBQcm92aWRlclNldHVwUmVxdWVzdCkge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3Byb3ZpZGVycy8nICsgaWQgKyAnL3NldHVwJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm92aWRlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFByb3ZpZGVyKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL3Byb3ZpZGVycy8nICsgaWQsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvdmlkZXJSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwdXRQcm92aWRlcihpZDogc3RyaW5nLCByZXF1ZXN0OiBQcm92aWRlclVwZGF0ZVJlcXVlc3QpIHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL3Byb3ZpZGVycy8nICsgaWQsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvdmlkZXJSZXNwb25zZShyKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcm92aWRlciBVc2VyIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRQcm92aWRlclVzZXJzKHByb3ZpZGVySWQ6IHN0cmluZyk6IFByb21pc2U8TGlzdFJlc3BvbnNlPFByb3ZpZGVyVXNlclVzZXJEZXRhaWxzUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9wcm92aWRlcnMvJyArIHByb3ZpZGVySWQgKyAnL3VzZXJzJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgUHJvdmlkZXJVc2VyVXNlckRldGFpbHNSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0UHJvdmlkZXJVc2VyKHByb3ZpZGVySWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8UHJvdmlkZXJVc2VyUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL3Byb3ZpZGVycy8nICsgcHJvdmlkZXJJZCArICcvdXNlcnMvJyArIGlkLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb3ZpZGVyVXNlclJlc3BvbnNlKHIpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RQcm92aWRlclVzZXJJbnZpdGUocHJvdmlkZXJJZDogc3RyaW5nLCByZXF1ZXN0OiBQcm92aWRlclVzZXJJbnZpdGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9wcm92aWRlcnMvJyArIHByb3ZpZGVySWQgKyAnL3VzZXJzL2ludml0ZScsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0UHJvdmlkZXJVc2VyUmVpbnZpdGUocHJvdmlkZXJJZDogc3RyaW5nLCBpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9wcm92aWRlcnMvJyArIHByb3ZpZGVySWQgKyAnL3VzZXJzLycgKyBpZCArICcvcmVpbnZpdGUnLCBudWxsLCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdE1hbnlQcm92aWRlclVzZXJSZWludml0ZShwcm92aWRlcklkOiBzdHJpbmcsIHJlcXVlc3Q6IFByb3ZpZGVyVXNlckJ1bGtSZXF1ZXN0KTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8UHJvdmlkZXJVc2VyQnVsa1Jlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3Byb3ZpZGVycy8nICsgcHJvdmlkZXJJZCArICcvdXNlcnMvcmVpbnZpdGUnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBQcm92aWRlclVzZXJCdWxrUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RQcm92aWRlclVzZXJCdWxrQ29uZmlybShwcm92aWRlcklkOiBzdHJpbmcsIHJlcXVlc3Q6IFByb3ZpZGVyVXNlckJ1bGtDb25maXJtUmVxdWVzdCk6IFByb21pc2U8TGlzdFJlc3BvbnNlPFByb3ZpZGVyVXNlckJ1bGtSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9wcm92aWRlcnMvJyArIHByb3ZpZGVySWQgKyAnL3VzZXJzL2NvbmZpcm0nLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBQcm92aWRlclVzZXJCdWxrUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGRlbGV0ZU1hbnlQcm92aWRlclVzZXJzKHByb3ZpZGVySWQ6IHN0cmluZywgcmVxdWVzdDogUHJvdmlkZXJVc2VyQnVsa1JlcXVlc3QpOiBQcm9taXNlPExpc3RSZXNwb25zZTxQcm92aWRlclVzZXJCdWxrUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnREVMRVRFJywgJy9wcm92aWRlcnMvJyArIHByb3ZpZGVySWQgKyAnL3VzZXJzJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgUHJvdmlkZXJVc2VyQnVsa1Jlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0UHJvdmlkZXJVc2VyQWNjZXB0KHByb3ZpZGVySWQ6IHN0cmluZywgaWQ6IHN0cmluZywgcmVxdWVzdDogUHJvdmlkZXJVc2VyQWNjZXB0UmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvcHJvdmlkZXJzLycgKyBwcm92aWRlcklkICsgJy91c2Vycy8nICsgaWQgKyAnL2FjY2VwdCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0UHJvdmlkZXJVc2VyQ29uZmlybShwcm92aWRlcklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFByb3ZpZGVyVXNlckNvbmZpcm1SZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9wcm92aWRlcnMvJyArIHByb3ZpZGVySWQgKyAnL3VzZXJzLycgKyBpZCArICcvY29uZmlybScsXHJcbiAgICAgICAgICAgIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0UHJvdmlkZXJVc2Vyc1B1YmxpY0tleShwcm92aWRlcklkOiBzdHJpbmcsIHJlcXVlc3Q6IFByb3ZpZGVyVXNlckJ1bGtSZXF1ZXN0KTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8UHJvdmlkZXJVc2VyQnVsa1B1YmxpY0tleVJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3Byb3ZpZGVycy8nICsgcHJvdmlkZXJJZCArICcvdXNlcnMvcHVibGljLWtleXMnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBQcm92aWRlclVzZXJCdWxrUHVibGljS2V5UmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdXRQcm92aWRlclVzZXIocHJvdmlkZXJJZDogc3RyaW5nLCBpZDogc3RyaW5nLCByZXF1ZXN0OiBQcm92aWRlclVzZXJVcGRhdGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL3Byb3ZpZGVycy8nICsgcHJvdmlkZXJJZCArICcvdXNlcnMvJyArIGlkLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlUHJvdmlkZXJVc2VyKHByb3ZpZGVySWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9wcm92aWRlcnMvJyArIHByb3ZpZGVySWQgKyAnL3VzZXJzLycgKyBpZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByb3ZpZGVyIE9yZ2FuaXphdGlvbiBBUElzXHJcblxyXG4gICAgYXN5bmMgZ2V0UHJvdmlkZXJDbGllbnRzKHByb3ZpZGVySWQ6IHN0cmluZyk6IFByb21pc2U8TGlzdFJlc3BvbnNlPFByb3ZpZGVyT3JnYW5pemF0aW9uT3JnYW5pemF0aW9uRGV0YWlsc1Jlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvcHJvdmlkZXJzLycgKyBwcm92aWRlcklkICsgJy9vcmdhbml6YXRpb25zJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgUHJvdmlkZXJPcmdhbml6YXRpb25Pcmdhbml6YXRpb25EZXRhaWxzUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3RQcm92aWRlckFkZE9yZ2FuaXphdGlvbihwcm92aWRlcklkOiBzdHJpbmcsIHJlcXVlc3Q6IFByb3ZpZGVyQWRkT3JnYW5pemF0aW9uUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvcHJvdmlkZXJzLycgKyBwcm92aWRlcklkICsgJy9vcmdhbml6YXRpb25zL2FkZCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0UHJvdmlkZXJDcmVhdGVPcmdhbml6YXRpb24ocHJvdmlkZXJJZDogc3RyaW5nLCByZXF1ZXN0OiBQcm92aWRlck9yZ2FuaXphdGlvbkNyZWF0ZVJlcXVlc3QpOiBQcm9taXNlPFByb3ZpZGVyT3JnYW5pemF0aW9uUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9wcm92aWRlcnMvJyArIHByb3ZpZGVySWQgKyAnL29yZ2FuaXphdGlvbnMnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb3ZpZGVyT3JnYW5pemF0aW9uUmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlUHJvdmlkZXJPcmdhbml6YXRpb24ocHJvdmlkZXJJZDogc3RyaW5nLCBpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL3Byb3ZpZGVycy8nICsgcHJvdmlkZXJJZCArICcvb3JnYW5pemF0aW9ucy8nICsgaWQsIG51bGwsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFdmVudCBBUElzXHJcblxyXG4gICAgYXN5bmMgZ2V0RXZlbnRzKHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8RXZlbnRSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCB0aGlzLmFkZEV2ZW50UGFyYW1ldGVycygnL2V2ZW50cycsIHN0YXJ0LCBlbmQsIHRva2VuKSwgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgRXZlbnRSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0RXZlbnRzQ2lwaGVyKGlkOiBzdHJpbmcsIHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLFxyXG4gICAgICAgIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxFdmVudFJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsIHRoaXMuYWRkRXZlbnRQYXJhbWV0ZXJzKCcvY2lwaGVycy8nICsgaWQgKyAnL2V2ZW50cycsIHN0YXJ0LCBlbmQsIHRva2VuKSxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgRXZlbnRSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0RXZlbnRzT3JnYW5pemF0aW9uKGlkOiBzdHJpbmcsIHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLFxyXG4gICAgICAgIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxFdmVudFJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsIHRoaXMuYWRkRXZlbnRQYXJhbWV0ZXJzKCcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL2V2ZW50cycsIHN0YXJ0LCBlbmQsIHRva2VuKSxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgRXZlbnRSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0RXZlbnRzT3JnYW5pemF0aW9uVXNlcihvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nLFxyXG4gICAgICAgIHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8RXZlbnRSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLFxyXG4gICAgICAgICAgICB0aGlzLmFkZEV2ZW50UGFyYW1ldGVycygnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy8nICsgaWQgKyAnL2V2ZW50cycsIHN0YXJ0LCBlbmQsIHRva2VuKSxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgRXZlbnRSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0RXZlbnRzUHJvdmlkZXIoaWQ6IHN0cmluZywgc3RhcnQ6IHN0cmluZywgZW5kOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxFdmVudFJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsIHRoaXMuYWRkRXZlbnRQYXJhbWV0ZXJzKCcvcHJvdmlkZXJzLycgKyBpZCArICcvZXZlbnRzJywgc3RhcnQsIGVuZCwgdG9rZW4pLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBFdmVudFJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRFdmVudHNQcm92aWRlclVzZXIocHJvdmlkZXJJZDogc3RyaW5nLCBpZDogc3RyaW5nLFxyXG4gICAgICAgIHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8RXZlbnRSZXNwb25zZT4+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLFxyXG4gICAgICAgICAgICB0aGlzLmFkZEV2ZW50UGFyYW1ldGVycygnL3Byb3ZpZGVycy8nICsgcHJvdmlkZXJJZCArICcvdXNlcnMvJyArIGlkICsgJy9ldmVudHMnLCBzdGFydCwgZW5kLCB0b2tlbiksXHJcbiAgICAgICAgICAgIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIEV2ZW50UmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBvc3RFdmVudHNDb2xsZWN0KHJlcXVlc3Q6IEV2ZW50UmVxdWVzdFtdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCBhdXRoSGVhZGVyID0gYXdhaXQgdGhpcy5nZXRBY3RpdmVCZWFyZXJUb2tlbigpO1xyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICdEZXZpY2UtVHlwZSc6IHRoaXMuZGV2aWNlVHlwZSxcclxuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyBhdXRoSGVhZGVyLFxyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLmN1c3RvbVVzZXJBZ2VudCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdVc2VyLUFnZW50JywgdGhpcy5jdXN0b21Vc2VyQWdlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2gobmV3IFJlcXVlc3QodGhpcy5lbnZpcm9ubWVudFNlcnZpY2UuZ2V0RXZlbnRzVXJsKCkgKyAnL2NvbGxlY3QnLCB7XHJcbiAgICAgICAgICAgIGNhY2hlOiAnbm8tc3RvcmUnLFxyXG4gICAgICAgICAgICBjcmVkZW50aWFsczogdGhpcy5nZXRDcmVkZW50aWFscygpLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdCksXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0V2ZW50IHBvc3QgZmFpbGVkLicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBVc2VyIEFQSXNcclxuXHJcbiAgICBhc3luYyBnZXRVc2VyUHVibGljS2V5KGlkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXJLZXlSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvdXNlcnMvJyArIGlkICsgJy9wdWJsaWMta2V5JywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVc2VyS2V5UmVzcG9uc2Uocik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSElCUCBBUElzXHJcblxyXG4gICAgYXN5bmMgZ2V0SGlicEJyZWFjaCh1c2VybmFtZTogc3RyaW5nKTogUHJvbWlzZTxCcmVhY2hBY2NvdW50UmVzcG9uc2VbXT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvaGlicC9icmVhY2g/dXNlcm5hbWU9JyArIHVzZXJuYW1lLCBudWxsLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gci5tYXAoKGE6IGFueSkgPT4gbmV3IEJyZWFjaEFjY291bnRSZXNwb25zZShhKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWlzY1xyXG5cclxuICAgIGFzeW5jIHBvc3RCaXRQYXlJbnZvaWNlKHJlcXVlc3Q6IEJpdFBheUludm9pY2VSZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9iaXRwYXktaW52b2ljZScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiByIGFzIHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0U2V0dXBQYXltZW50KCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvc2V0dXAtcGF5bWVudCcsIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiByIGFzIHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICAvLyBLZXkgQ29ubmVjdG9yXHJcblxyXG4gICAgYXN5bmMgZ2V0VXNlcktleUZyb21LZXlDb25uZWN0b3Ioa2V5Q29ubmVjdG9yVXJsOiBzdHJpbmcpOiBQcm9taXNlPEtleUNvbm5lY3RvclVzZXJLZXlSZXNwb25zZT4ge1xyXG4gICAgICAgIGNvbnN0IGF1dGhIZWFkZXIgPSBhd2FpdCB0aGlzLmdldEFjdGl2ZUJlYXJlclRva2VuKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaChuZXcgUmVxdWVzdChrZXlDb25uZWN0b3JVcmwgKyAnL3VzZXIta2V5cycsIHtcclxuICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHtcclxuICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIGF1dGhIZWFkZXIsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdGhpcy5oYW5kbGVFcnJvcihyZXNwb25zZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBLZXlDb25uZWN0b3JVc2VyS2V5UmVzcG9uc2UoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0VXNlcktleVRvS2V5Q29ubmVjdG9yKGtleUNvbm5lY3RvclVybDogc3RyaW5nLCByZXF1ZXN0OiBLZXlDb25uZWN0b3JVc2VyS2V5UmVxdWVzdCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGF1dGhIZWFkZXIgPSBhd2FpdCB0aGlzLmdldEFjdGl2ZUJlYXJlclRva2VuKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaChuZXcgUmVxdWVzdChrZXlDb25uZWN0b3JVcmwgKyAnL3VzZXIta2V5cycsIHtcclxuICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyBhdXRoSGVhZGVyLFxyXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdGhpcy5oYW5kbGVFcnJvcihyZXNwb25zZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRLZXlDb25uZWN0b3JBbGl2ZShrZXlDb25uZWN0b3JVcmw6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaChuZXcgUmVxdWVzdChrZXlDb25uZWN0b3JVcmwgKyAnL2FsaXZlJywge1xyXG4gICAgICAgICAgICBjYWNoZTogJ25vLXN0b3JlJyxcclxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdGhpcy5oYW5kbGVFcnJvcihyZXNwb25zZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBIZWxwZXJzXHJcblxyXG4gICAgYXN5bmMgZ2V0QWN0aXZlQmVhcmVyVG9rZW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBsZXQgYWNjZXNzVG9rZW4gPSBhd2FpdCB0aGlzLnRva2VuU2VydmljZS5nZXRUb2tlbigpO1xyXG4gICAgICAgIGlmICh0aGlzLnRva2VuU2VydmljZS50b2tlbk5lZWRzUmVmcmVzaCgpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZG9BdXRoUmVmcmVzaCgpO1xyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLmdldFRva2VuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY2Nlc3NUb2tlbjtcclxuICAgIH1cclxuXHJcbiAgICBmZXRjaChyZXF1ZXN0OiBSZXF1ZXN0KTogUHJvbWlzZTxSZXNwb25zZT4ge1xyXG4gICAgICAgIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ0dFVCcpIHtcclxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldCgnQ2FjaGUtQ29udHJvbCcsICduby1zdG9yZScpO1xyXG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KCdQcmFnbWEnLCAnbm8tY2FjaGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlRmV0Y2gocmVxdWVzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmF0aXZlRmV0Y2gocmVxdWVzdDogUmVxdWVzdCk6IFByb21pc2U8UmVzcG9uc2U+IHtcclxuICAgICAgICByZXR1cm4gZmV0Y2gocmVxdWVzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHJlVmFsaWRhdGVTc28oaWRlbnRpZmllcjogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgaWYgKGlkZW50aWZpZXIgPT0gbnVsbCB8fCBpZGVudGlmaWVyID09PSAnJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09yZ2FuaXphdGlvbiBJZGVudGlmaWVyIHdhcyBub3QgcHJvdmlkZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICdEZXZpY2UtVHlwZSc6IHRoaXMuZGV2aWNlVHlwZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5jdXN0b21Vc2VyQWdlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsIHRoaXMuY3VzdG9tVXNlckFnZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhdGggPSBgL2FjY291bnQvcHJldmFsaWRhdGU/ZG9tYWluSGludD0ke2VuY29kZVVSSUNvbXBvbmVudChpZGVudGlmaWVyKX1gO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaChuZXcgUmVxdWVzdCh0aGlzLmVudmlyb25tZW50U2VydmljZS5nZXRJZGVudGl0eVVybCgpICsgcGF0aCwge1xyXG4gICAgICAgICAgICBjYWNoZTogJ25vLXN0b3JlJyxcclxuICAgICAgICAgICAgY3JlZGVudGlhbHM6IHRoaXMuZ2V0Q3JlZGVudGlhbHMoKSxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IGF3YWl0IHRoaXMuaGFuZGxlRXJyb3IocmVzcG9uc2UsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdENyZWF0ZVNwb25zb3JzaGlwKHNwb25zb3JlZE9yZ0lkOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblNwb25zb3JzaGlwQ3JlYXRlUmVxdWVzdCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLFxyXG4gICAgICAgICAgICAnL29yZ2FuaXphdGlvbi9zcG9uc29yc2hpcC8nICsgc3BvbnNvcmVkT3JnSWQgKyAnL2ZhbWlsaWVzLWZvci1lbnRlcnByaXNlJyxcclxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGRlbGV0ZVJldm9rZVNwb25zb3JzaGlwKHNwb25zb3JpbmdPcmdhbml6YXRpb25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZCgnREVMRVRFJyxcclxuICAgICAgICAgICAgJy9vcmdhbml6YXRpb24vc3BvbnNvcnNoaXAvJyArIHNwb25zb3JpbmdPcmdhbml6YXRpb25JZCxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGRlbGV0ZVJlbW92ZVNwb25zb3JzaGlwKHNwb25zb3JpbmdPcmdJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZCgnREVMRVRFJyxcclxuICAgICAgICAgICAgJy9vcmdhbml6YXRpb24vc3BvbnNvcnNoaXAvc3BvbnNvcmVkLycgKyBzcG9uc29yaW5nT3JnSWQsXHJcbiAgICAgICAgICAgIG51bGwsIHRydWUsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGFzeW5jIHBvc3RSZWRlZW1TcG9uc29yc2hpcChzcG9uc29yc2hpcFRva2VuOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblNwb25zb3JzaGlwUmVkZWVtUmVxdWVzdCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbi9zcG9uc29yc2hpcC9yZWRlZW0/c3BvbnNvcnNoaXBUb2tlbj0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHNwb25zb3JzaGlwVG9rZW4pLFxyXG4gICAgICAgICAgICByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9zdFJlc2VuZFNwb25zb3JzaGlwT2ZmZXIoc3BvbnNvcmluZ09yZ0lkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJyxcclxuICAgICAgICAgICAgJy9vcmdhbml6YXRpb24vc3BvbnNvcnNoaXAvJyArIHNwb25zb3JpbmdPcmdJZCArICcvZmFtaWxpZXMtZm9yLWVudGVycHJpc2UvcmVzZW5kJyxcclxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgZG9BdXRoUmVmcmVzaCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSBhd2FpdCB0aGlzLnRva2VuU2VydmljZS5nZXRSZWZyZXNoVG9rZW4oKTtcclxuICAgICAgICBpZiAocmVmcmVzaFRva2VuICE9IG51bGwgJiYgcmVmcmVzaFRva2VuICE9PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb1JlZnJlc2hUb2tlbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY2xpZW50SWQgPSBhd2FpdCB0aGlzLnRva2VuU2VydmljZS5nZXRDbGllbnRJZCgpO1xyXG4gICAgICAgIGNvbnN0IGNsaWVudFNlY3JldCA9IGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLmdldENsaWVudFNlY3JldCgpO1xyXG4gICAgICAgIGlmICghVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKGNsaWVudElkKSAmJiAhVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKGNsaWVudFNlY3JldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9BcGlUb2tlblJlZnJlc2goKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlZnJlc2ggdG9rZW4sIG5vIHJlZnJlc2ggdG9rZW4gb3IgYXBpIGtleXMgYXJlIHN0b3JlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBkb0FwaVRva2VuUmVmcmVzaCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBjbGllbnRJZCA9IGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLmdldENsaWVudElkKCk7XHJcbiAgICAgICAgY29uc3QgY2xpZW50U2VjcmV0ID0gYXdhaXQgdGhpcy50b2tlblNlcnZpY2UuZ2V0Q2xpZW50U2VjcmV0KCk7XHJcbiAgICAgICAgaWYgKFV0aWxzLmlzTnVsbE9yV2hpdGVzcGFjZShjbGllbnRJZCkgfHwgVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKGNsaWVudFNlY3JldCkgfHwgdGhpcy5hcGlLZXlSZWZyZXNoID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmFwaUtleVJlZnJlc2goY2xpZW50SWQsIGNsaWVudFNlY3JldCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIGRvUmVmcmVzaFRva2VuKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLmdldFJlZnJlc2hUb2tlbigpO1xyXG4gICAgICAgIGlmIChyZWZyZXNoVG9rZW4gPT0gbnVsbCB8fCByZWZyZXNoVG9rZW4gPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCcsXHJcbiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICdEZXZpY2UtVHlwZSc6IHRoaXMuZGV2aWNlVHlwZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5jdXN0b21Vc2VyQWdlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsIHRoaXMuY3VzdG9tVXNlckFnZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRlY29kZWRUb2tlbiA9IHRoaXMudG9rZW5TZXJ2aWNlLmRlY29kZVRva2VuKCk7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoKG5ldyBSZXF1ZXN0KHRoaXMuZW52aXJvbm1lbnRTZXJ2aWNlLmdldElkZW50aXR5VXJsKCkgKyAnL2Nvbm5lY3QvdG9rZW4nLCB7XHJcbiAgICAgICAgICAgIGJvZHk6IHRoaXMucXNTdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nLFxyXG4gICAgICAgICAgICAgICAgY2xpZW50X2lkOiBkZWNvZGVkVG9rZW4uY2xpZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogcmVmcmVzaFRva2VuLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXHJcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiB0aGlzLmdldENyZWRlbnRpYWxzKCksXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgY29uc3QgdG9rZW5SZXNwb25zZSA9IG5ldyBJZGVudGl0eVRva2VuUmVzcG9uc2UocmVzcG9uc2VKc29uKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50b2tlblNlcnZpY2Uuc2V0VG9rZW5zKHRva2VuUmVzcG9uc2UuYWNjZXNzVG9rZW4sIHRva2VuUmVzcG9uc2UucmVmcmVzaFRva2VuLCBudWxsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IGF3YWl0IHRoaXMuaGFuZGxlRXJyb3IocmVzcG9uc2UsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHNlbmQobWV0aG9kOiAnR0VUJyB8ICdQT1NUJyB8ICdQVVQnIHwgJ0RFTEVURScsIHBhdGg6IHN0cmluZywgYm9keTogYW55LFxyXG4gICAgICAgIGF1dGhlZDogYm9vbGVhbiwgaGFzUmVzcG9uc2U6IGJvb2xlYW4sIGFwaVVybD86IHN0cmluZyxcclxuICAgICAgICBhbHRlckhlYWRlcnM/OiAoaGVhZGVyczogSGVhZGVycykgPT4gdm9pZCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXBpVXJsID0gVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKGFwaVVybCkgPyB0aGlzLmVudmlyb25tZW50U2VydmljZS5nZXRBcGlVcmwoKSA6IGFwaVVybDtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdFVybCA9IGFwaVVybCArIHBhdGg7XHJcbiAgICAgICAgLy8gUHJldmVudCBkaXJlY3RvcnkgdHJhdmVyc2FsIGZyb20gbWFsaWNpb3VzIHBhdGhzXHJcbiAgICAgICAgaWYgKG5ldyBVUkwocmVxdWVzdFVybCkuaHJlZiAhPT0gcmVxdWVzdFVybCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0ludmFsaWQgcmVxdWVzdCB1cmwgcGF0aC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICdEZXZpY2UtVHlwZSc6IHRoaXMuZGV2aWNlVHlwZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5jdXN0b21Vc2VyQWdlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsIHRoaXMuY3VzdG9tVXNlckFnZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3RJbml0OiBSZXF1ZXN0SW5pdCA9IHtcclxuICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXHJcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiB0aGlzLmdldENyZWRlbnRpYWxzKCksXHJcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChhdXRoZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IGF3YWl0IHRoaXMuZ2V0QWN0aXZlQmVhcmVyVG9rZW4oKTtcclxuICAgICAgICAgICAgaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmVhcmVyICcgKyBhdXRoSGVhZGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJvZHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SW5pdC5ib2R5ID0gYm9keTtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEluaXQuYm9keSA9IGJvZHk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJbml0LmJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgaGVhZGVycy5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhbHRlckhlYWRlcnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhbHRlckhlYWRlcnMoaGVhZGVycyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXF1ZXN0SW5pdC5oZWFkZXJzID0gaGVhZGVycztcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2gobmV3IFJlcXVlc3QocmVxdWVzdFVybCwgcmVxdWVzdEluaXQpKTtcclxuXHJcbiAgICAgICAgaWYgKGhhc1Jlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdGhpcy5oYW5kbGVFcnJvcihyZXNwb25zZSwgZmFsc2UsIGF1dGhlZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlRXJyb3IocmVzcG9uc2U6IFJlc3BvbnNlLCB0b2tlbkVycm9yOiBib29sZWFuLCBhdXRoZWQ6IGJvb2xlYW4pOiBQcm9taXNlPEVycm9yUmVzcG9uc2U+IHtcclxuICAgICAgICBpZiAoYXV0aGVkICYmICgodG9rZW5FcnJvciAmJiByZXNwb25zZS5zdGF0dXMgPT09IDQwMCkgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDMpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nb3V0Q2FsbGJhY2sodHJ1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlc3BvbnNlSnNvbjogYW55ID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5pc0pzb25SZXNwb25zZShyZXNwb25zZSkpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1RleHRSZXNwb25zZShyZXNwb25zZSkpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2VKc29uID0geyBNZXNzYWdlOiBhd2FpdCByZXNwb25zZS50ZXh0KCkgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZUpzb24sIHJlc3BvbnNlLnN0YXR1cywgdG9rZW5FcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBxc1N0cmluZ2lmeShwYXJhbXM6IGFueSk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHBhcmFtcykubWFwKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSk7XHJcbiAgICAgICAgfSkuam9pbignJicpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q3JlZGVudGlhbHMoKTogUmVxdWVzdENyZWRlbnRpYWxzIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNXZWJDbGllbnQgfHwgdGhpcy5lbnZpcm9ubWVudFNlcnZpY2UuaGFzQmFzZVVybCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaW5jbHVkZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRFdmVudFBhcmFtZXRlcnMoYmFzZTogc3RyaW5nLCBzdGFydDogc3RyaW5nLCBlbmQ6IHN0cmluZywgdG9rZW46IHN0cmluZykge1xyXG4gICAgICAgIGlmIChzdGFydCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGJhc2UgKz0gKCc/c3RhcnQ9JyArIHN0YXJ0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVuZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGJhc2UgKz0gKGJhc2UuaW5kZXhPZignPycpID4gLTEgPyAnJicgOiAnPycpO1xyXG4gICAgICAgICAgICBiYXNlICs9ICgnZW5kPScgKyBlbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG9rZW4gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBiYXNlICs9IChiYXNlLmluZGV4T2YoJz8nKSA+IC0xID8gJyYnIDogJz8nKTtcclxuICAgICAgICAgICAgYmFzZSArPSAoJ2NvbnRpbnVhdGlvblRva2VuPScgKyB0b2tlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiYXNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNKc29uUmVzcG9uc2UocmVzcG9uc2U6IFJlc3BvbnNlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgdHlwZUhlYWRlciA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcclxuICAgICAgICByZXR1cm4gdHlwZUhlYWRlciAhPSBudWxsICYmIHR5cGVIZWFkZXIuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc1RleHRSZXNwb25zZShyZXNwb25zZTogUmVzcG9uc2UpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCB0eXBlSGVhZGVyID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xyXG4gICAgICAgIHJldHVybiB0eXBlSGVhZGVyICE9IG51bGwgJiYgdHlwZUhlYWRlci5pbmRleE9mKCd0ZXh0JykgPiAtMTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgQXBwSWRTZXJ2aWNlIGFzIEFwcElkU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwcElkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFwcElkU2VydmljZSBpbXBsZW1lbnRzIEFwcElkU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXBwSWQoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYWtlQW5kR2V0QXBwSWQoJ2FwcElkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QW5vbnltb3VzQXBwSWQoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYWtlQW5kR2V0QXBwSWQoJ2Fub255bW91c0FwcElkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBtYWtlQW5kR2V0QXBwSWQoa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBleGlzdGluZ0lkID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihrZXkpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0lkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nSWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBndWlkID0gVXRpbHMubmV3R3VpZCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShrZXksIGd1aWQpO1xyXG4gICAgICAgIHJldHVybiBndWlkO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBVc2UgYXMgYSBEZWNvcmF0b3Igb24gYXN5bmMgZnVuY3Rpb25zLCBpdCB3aWxsIGxpbWl0IGhvdyBtYW55IHRpbWVzIHRoZSBmdW5jdGlvbiBjYW4gYmVcclxuICogaW4tZmxpZ2h0IGF0IGEgdGltZS5cclxuICpcclxuICogQ2FsbHMgYmV5b25kIHRoZSBsaW1pdCB3aWxsIGJlIHF1ZXVlZCwgYW5kIHJ1biB3aGVuIG9uZSBvZiB0aGUgYWN0aXZlIGNhbGxzIGZpbmlzaGVzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUobGltaXQ6IG51bWJlciwgdGhyb3R0bGVLZXk6IChhcmdzOiBhbnlbXSkgPT4gc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gPFQ+KHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nIHwgc3ltYm9sLFxyXG4gICAgICAgIGRlc2NyaXB0b3I6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPCguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxUPj4pID0+IHtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbE1ldGhvZDogKCkgPT4gUHJvbWlzZTxUPiA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICAgICAgY29uc3QgYWxsVGhyb3R0bGVzID0gbmV3IE1hcDxhbnksIE1hcDxzdHJpbmcsICgoKSA9PiB2b2lkKVtdPj4oKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ2V0VGhyb3R0bGVzID0gKG9iajogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0aHJvdHRsZXMgPSBhbGxUaHJvdHRsZXMuZ2V0KG9iaik7XHJcbiAgICAgICAgICAgIGlmICh0aHJvdHRsZXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRocm90dGxlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdHRsZXMgPSBuZXcgTWFwPHN0cmluZywgKCgpID0+IHZvaWQpW10+KCk7XHJcbiAgICAgICAgICAgIGFsbFRocm90dGxlcy5zZXQob2JqLCB0aHJvdHRsZXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhyb3R0bGVzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGhyb3R0bGVzID0gZ2V0VGhyb3R0bGVzKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJnc1Rocm90dGxlS2V5ID0gdGhyb3R0bGVLZXkoYXJncyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcXVldWUgPSB0aHJvdHRsZXMuZ2V0KGFyZ3NUaHJvdHRsZUtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocXVldWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3R0bGVzLnNldChhcmdzVGhyb3R0bGVLZXksIHF1ZXVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4ZWMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9uRmluYWxseSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnNwbGljZShxdWV1ZS5pbmRleE9mKGV4ZWMpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPj0gbGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZVtsaW1pdCAtIDFdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm90dGxlcy5kZWxldGUoYXJnc1Rocm90dGxlS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhyb3R0bGVzLnNpemUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsVGhyb3R0bGVzLmRlbGV0ZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpLnRoZW4oKHZhbDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkZpbmFsbHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25GaW5hbGx5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goZXhlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA8PSBsaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGVjKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcGkuc2VydmljZSc7XHJcbmltcG9ydCB7IEF1ZGl0U2VydmljZSBhcyBBdWRpdFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hdWRpdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0b0Z1bmN0aW9uLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICcuLi9taXNjL3Rocm90dGxlJztcclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IEJyZWFjaEFjY291bnRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9icmVhY2hBY2NvdW50UmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBFcnJvclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2Vycm9yUmVzcG9uc2UnO1xyXG5cclxuY29uc3QgUHduZWRQYXNzd29yZHNBcGkgPSAnaHR0cHM6Ly9hcGkucHduZWRwYXNzd29yZHMuY29tL3JhbmdlLyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXVkaXRTZXJ2aWNlIGltcGxlbWVudHMgQXVkaXRTZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9GdW5jdGlvblNlcnZpY2U6IENyeXB0b0Z1bmN0aW9uU2VydmljZSwgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlKSB7IH1cclxuXHJcbiAgICBAdGhyb3R0bGUoMTAwLCAoKSA9PiAncGFzc3dvcmRMZWFrZWQnKVxyXG4gICAgYXN5bmMgcGFzc3dvcmRMZWFrZWQocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAgICAgY29uc3QgaGFzaEJ5dGVzID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuaGFzaChwYXNzd29yZCwgJ3NoYTEnKTtcclxuICAgICAgICBjb25zdCBoYXNoID0gVXRpbHMuZnJvbUJ1ZmZlclRvSGV4KGhhc2hCeXRlcykudG9VcHBlckNhc2UoKTtcclxuICAgICAgICBjb25zdCBoYXNoU3RhcnQgPSBoYXNoLnN1YnN0cigwLCA1KTtcclxuICAgICAgICBjb25zdCBoYXNoRW5kaW5nID0gaGFzaC5zdWJzdHIoNSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLm5hdGl2ZUZldGNoKG5ldyBSZXF1ZXN0KFB3bmVkUGFzc3dvcmRzQXBpICsgaGFzaFN0YXJ0KSk7XHJcbiAgICAgICAgY29uc3QgbGVha2VkSGFzaGVzID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gbGVha2VkSGFzaGVzLnNwbGl0KC9cXHI/XFxuLykuZmluZCh2ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHYuc3BsaXQoJzonKVswXSA9PT0gaGFzaEVuZGluZztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1hdGNoICE9IG51bGwgPyBwYXJzZUludChtYXRjaC5zcGxpdCgnOicpWzFdLCAxMCkgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGJyZWFjaGVkQWNjb3VudHModXNlcm5hbWU6IHN0cmluZyk6IFByb21pc2U8QnJlYWNoQWNjb3VudFJlc3BvbnNlW10+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLmdldEhpYnBCcmVhY2godXNlcm5hbWUpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBlIGFzIEVycm9yUmVzcG9uc2U7XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5zdGF0dXNDb2RlID09PSA0MDQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2NvbGxlY3Rpb25SZXNwb25zZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbkRhdGEge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XHJcbiAgICByZWFkT25seTogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSByZXNwb25zZS5pZDtcclxuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gcmVzcG9uc2Uub3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gcmVzcG9uc2UubmFtZTtcclxuICAgICAgICB0aGlzLmV4dGVybmFsSWQgPSByZXNwb25zZS5leHRlcm5hbElkO1xyXG4gICAgICAgIHRoaXMucmVhZE9ubHkgPSByZXNwb25zZS5yZWFkT25seTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcclxuXHJcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuLi9kb21haW4vY29sbGVjdGlvbic7XHJcbmltcG9ydCB7IElUcmVlTm9kZU9iamVjdCB9IGZyb20gJy4uL2RvbWFpbi90cmVlTm9kZSc7XHJcblxyXG5pbXBvcnQgeyBDb2xsZWN0aW9uR3JvdXBEZXRhaWxzUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9jb2xsZWN0aW9uUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25WaWV3IGltcGxlbWVudHMgVmlldywgSVRyZWVOb2RlT2JqZWN0IHtcclxuICAgIGlkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZyA9IG51bGw7XHJcbiAgICBuYW1lOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgZXh0ZXJuYWxJZDogc3RyaW5nID0gbnVsbDtcclxuICAgIHJlYWRPbmx5OiBib29sZWFuID0gbnVsbDtcclxuICAgIGhpZGVQYXNzd29yZHM6IGJvb2xlYW4gPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGM/OiBDb2xsZWN0aW9uIHwgQ29sbGVjdGlvbkdyb3VwRGV0YWlsc1Jlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKCFjKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaWQgPSBjLmlkO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSBjLm9yZ2FuaXphdGlvbklkO1xyXG4gICAgICAgIHRoaXMuZXh0ZXJuYWxJZCA9IGMuZXh0ZXJuYWxJZDtcclxuICAgICAgICBpZiAoYyBpbnN0YW5jZW9mIENvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5yZWFkT25seSA9IGMucmVhZE9ubHk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZVBhc3N3b3JkcyA9IGMuaGlkZVBhc3N3b3JkcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29sbGVjdGlvbkRhdGEgfSBmcm9tICcuLi9kYXRhL2NvbGxlY3Rpb25EYXRhJztcclxuXHJcbmltcG9ydCB7IENvbGxlY3Rpb25WaWV3IH0gZnJvbSAnLi4vdmlldy9jb2xsZWN0aW9uVmlldyc7XHJcblxyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4vZW5jU3RyaW5nJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uIGV4dGVuZHMgRG9tYWluIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xyXG4gICAgbmFtZTogRW5jU3RyaW5nO1xyXG4gICAgZXh0ZXJuYWxJZDogc3RyaW5nO1xyXG4gICAgcmVhZE9ubHk6IGJvb2xlYW47XHJcbiAgICBoaWRlUGFzc3dvcmRzOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IENvbGxlY3Rpb25EYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICBvcmdhbml6YXRpb25JZDogbnVsbCxcclxuICAgICAgICAgICAgbmFtZTogbnVsbCxcclxuICAgICAgICAgICAgZXh0ZXJuYWxJZDogbnVsbCxcclxuICAgICAgICAgICAgcmVhZE9ubHk6IG51bGwsXHJcbiAgICAgICAgICAgIGhpZGVQYXNzd29yZHM6IG51bGwsXHJcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgWydpZCcsICdvcmdhbml6YXRpb25JZCcsICdleHRlcm5hbElkJywgJ3JlYWRPbmx5JywgJ2hpZGVQYXNzd29yZHMnXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVjcnlwdCgpOiBQcm9taXNlPENvbGxlY3Rpb25WaWV3PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgQ29sbGVjdGlvblZpZXcodGhpcyksIHtcclxuICAgICAgICAgICAgbmFtZTogbnVsbCxcclxuICAgICAgICB9LCB0aGlzLm9yZ2FuaXphdGlvbklkKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgVHJlZU5vZGU8VCBleHRlbmRzIElUcmVlTm9kZU9iamVjdD4ge1xyXG4gICAgcGFyZW50OiBUO1xyXG4gICAgbm9kZTogVDtcclxuICAgIGNoaWxkcmVuOiBUcmVlTm9kZTxUPltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3Iobm9kZTogVCwgbmFtZTogc3RyaW5nLCBwYXJlbnQ6IFQpIHtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xyXG4gICAgICAgIHRoaXMubm9kZS5uYW1lID0gbmFtZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVHJlZU5vZGVPYmplY3Qge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gICAgSVRyZWVOb2RlT2JqZWN0LFxyXG4gICAgVHJlZU5vZGUsXHJcbn0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi90cmVlTm9kZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VydmljZVV0aWxzIHtcclxuICAgIHN0YXRpYyBuZXN0ZWRUcmF2ZXJzZShub2RlVHJlZTogVHJlZU5vZGU8SVRyZWVOb2RlT2JqZWN0PltdLCBwYXJ0SW5kZXg6IG51bWJlciwgcGFydHM6IHN0cmluZ1tdLFxyXG4gICAgICAgIG9iajogSVRyZWVOb2RlT2JqZWN0LCBwYXJlbnQ6IElUcmVlTm9kZU9iamVjdCwgZGVsaW1pdGVyOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAocGFydHMubGVuZ3RoIDw9IHBhcnRJbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmQgPSBwYXJ0SW5kZXggPT09IHBhcnRzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgY29uc3QgcGFydE5hbWUgPSBwYXJ0c1twYXJ0SW5kZXhdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVUcmVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlVHJlZVtpXS5ub2RlLm5hbWUgIT09IHBhcnRzW3BhcnRJbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlbmQgJiYgbm9kZVRyZWVbaV0ubm9kZS5pZCAhPT0gb2JqLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBbm90aGVyIG5vZGUgd2l0aCB0aGUgc2FtZSBuYW1lLlxyXG4gICAgICAgICAgICAgICAgbm9kZVRyZWUucHVzaChuZXcgVHJlZU5vZGUob2JqLCBwYXJ0TmFtZSwgcGFyZW50KSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU2VydmljZVV0aWxzLm5lc3RlZFRyYXZlcnNlKG5vZGVUcmVlW2ldLmNoaWxkcmVuLCBwYXJ0SW5kZXggKyAxLCBwYXJ0cyxcclxuICAgICAgICAgICAgICAgIG9iaiwgbm9kZVRyZWVbaV0ubm9kZSwgZGVsaW1pdGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5vZGVUcmVlLmZpbHRlcihuID0+IG4ubm9kZS5uYW1lID09PSBwYXJ0TmFtZSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChlbmQpIHtcclxuICAgICAgICAgICAgICAgIG5vZGVUcmVlLnB1c2gobmV3IFRyZWVOb2RlKG9iaiwgcGFydE5hbWUsIHBhcmVudCkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1BhcnROYW1lID0gcGFydHNbcGFydEluZGV4XSArIGRlbGltaXRlciArIHBhcnRzW3BhcnRJbmRleCArIDFdO1xyXG4gICAgICAgICAgICBTZXJ2aWNlVXRpbHMubmVzdGVkVHJhdmVyc2Uobm9kZVRyZWUsIDAsIFtuZXdQYXJ0TmFtZSwgLi4ucGFydHMuc2xpY2UocGFydEluZGV4ICsgMildLFxyXG4gICAgICAgICAgICAgICAgb2JqLCBwYXJlbnQsIGRlbGltaXRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRUcmVlTm9kZU9iamVjdChub2RlVHJlZTogVHJlZU5vZGU8SVRyZWVOb2RlT2JqZWN0PltdLCBpZDogc3RyaW5nKTogVHJlZU5vZGU8SVRyZWVOb2RlT2JqZWN0PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlVHJlZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobm9kZVRyZWVbaV0ubm9kZS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlVHJlZVtpXTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlVHJlZVtpXS5jaGlsZHJlbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gU2VydmljZVV0aWxzLmdldFRyZWVOb2RlT2JqZWN0KG5vZGVUcmVlW2ldLmNoaWxkcmVuLCBpZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbGxlY3Rpb25EYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvY29sbGVjdGlvbkRhdGEnO1xyXG5cclxuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL21vZGVscy9kb21haW4vY29sbGVjdGlvbic7XHJcbmltcG9ydCB7IFRyZWVOb2RlIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi90cmVlTm9kZSc7XHJcblxyXG5pbXBvcnQgeyBDb2xsZWN0aW9uVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2NvbGxlY3Rpb25WaWV3JztcclxuXHJcbmltcG9ydCB7IENvbGxlY3Rpb25TZXJ2aWNlIGFzIENvbGxlY3Rpb25TZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY29sbGVjdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XHJcbmltcG9ydCB7IEkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2kxOG4uc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBTZXJ2aWNlVXRpbHMgfSBmcm9tICcuLi9taXNjL3NlcnZpY2VVdGlscyc7XHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XHJcblxyXG5jb25zdCBLZXlzID0ge1xyXG4gICAgY29sbGVjdGlvbnNQcmVmaXg6ICdjb2xsZWN0aW9uc18nLFxyXG59O1xyXG5jb25zdCBOZXN0aW5nRGVsaW1pdGVyID0gJy8nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25TZXJ2aWNlIGltcGxlbWVudHMgQ29sbGVjdGlvblNlcnZpY2VBYnN0cmFjdGlvbiB7XHJcbiAgICBkZWNyeXB0ZWRDb2xsZWN0aW9uQ2FjaGU6IENvbGxlY3Rpb25WaWV3W107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLCBwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhckNhY2hlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlbmNyeXB0KG1vZGVsOiBDb2xsZWN0aW9uVmlldyk6IFByb21pc2U8Q29sbGVjdGlvbj4ge1xyXG4gICAgICAgIGlmIChtb2RlbC5vcmdhbml6YXRpb25JZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29sbGVjdGlvbiBoYXMgbm8gb3JnYW5pemF0aW9uIGlkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZ2V0T3JnS2V5KG1vZGVsLm9yZ2FuaXphdGlvbklkKTtcclxuICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBrZXkgZm9yIHRoaXMgY29sbGVjdGlvblxcJ3Mgb3JnYW5pemF0aW9uLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gbmV3IENvbGxlY3Rpb24oKTtcclxuICAgICAgICBjb2xsZWN0aW9uLmlkID0gbW9kZWwuaWQ7XHJcbiAgICAgICAgY29sbGVjdGlvbi5vcmdhbml6YXRpb25JZCA9IG1vZGVsLm9yZ2FuaXphdGlvbklkO1xyXG4gICAgICAgIGNvbGxlY3Rpb24ucmVhZE9ubHkgPSBtb2RlbC5yZWFkT25seTtcclxuICAgICAgICBjb2xsZWN0aW9uLm5hbWUgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChtb2RlbC5uYW1lLCBrZXkpO1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGRlY3J5cHRNYW55KGNvbGxlY3Rpb25zOiBDb2xsZWN0aW9uW10pOiBQcm9taXNlPENvbGxlY3Rpb25WaWV3W10+IHtcclxuICAgICAgICBpZiAoY29sbGVjdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRlY0NvbGxlY3Rpb25zOiBDb2xsZWN0aW9uVmlld1tdID0gW107XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XHJcbiAgICAgICAgY29sbGVjdGlvbnMuZm9yRWFjaChjb2xsZWN0aW9uID0+IHtcclxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChjb2xsZWN0aW9uLmRlY3J5cHQoKS50aGVuKGMgPT4gZGVjQ29sbGVjdGlvbnMucHVzaChjKSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuICAgICAgICByZXR1cm4gZGVjQ29sbGVjdGlvbnMuc29ydChVdGlscy5nZXRTb3J0RnVuY3Rpb24odGhpcy5pMThuU2VydmljZSwgJ25hbWUnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPENvbGxlY3Rpb24+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IENvbGxlY3Rpb25EYXRhOyB9PihcclxuICAgICAgICAgICAgS2V5cy5jb2xsZWN0aW9uc1ByZWZpeCArIHVzZXJJZCk7XHJcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25zID09IG51bGwgfHwgIWNvbGxlY3Rpb25zLmhhc093blByb3BlcnR5KGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbihjb2xsZWN0aW9uc1tpZF0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEFsbCgpOiBQcm9taXNlPENvbGxlY3Rpb25bXT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ29sbGVjdGlvbkRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLmNvbGxlY3Rpb25zUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICBjb25zdCByZXNwb25zZTogQ29sbGVjdGlvbltdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBjb2xsZWN0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoY29sbGVjdGlvbnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKG5ldyBDb2xsZWN0aW9uKGNvbGxlY3Rpb25zW2lkXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRBbGxEZWNyeXB0ZWQoKTogUHJvbWlzZTxDb2xsZWN0aW9uVmlld1tdPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaGFzS2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmhhc0tleSgpO1xyXG4gICAgICAgIGlmICghaGFzS2V5KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8ga2V5LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLmdldEFsbCgpO1xyXG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlID0gYXdhaXQgdGhpcy5kZWNyeXB0TWFueShjb2xsZWN0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEFsbE5lc3RlZChjb2xsZWN0aW9uczogQ29sbGVjdGlvblZpZXdbXSA9IG51bGwpOiBQcm9taXNlPFRyZWVOb2RlPENvbGxlY3Rpb25WaWV3PltdPiB7XHJcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25zID09IG51bGwpIHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLmdldEFsbERlY3J5cHRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBub2RlczogVHJlZU5vZGU8Q29sbGVjdGlvblZpZXc+W10gPSBbXTtcclxuICAgICAgICBjb2xsZWN0aW9ucy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb2xsZWN0aW9uQ29weSA9IG5ldyBDb2xsZWN0aW9uVmlldygpO1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uQ29weS5pZCA9IGMuaWQ7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25Db3B5Lm9yZ2FuaXphdGlvbklkID0gYy5vcmdhbml6YXRpb25JZDtcclxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBjLm5hbWUgIT0gbnVsbCA/IGMubmFtZS5yZXBsYWNlKC9eXFwvK3xcXC8rJC9nLCAnJykuc3BsaXQoTmVzdGluZ0RlbGltaXRlcikgOiBbXTtcclxuICAgICAgICAgICAgU2VydmljZVV0aWxzLm5lc3RlZFRyYXZlcnNlKG5vZGVzLCAwLCBwYXJ0cywgY29sbGVjdGlvbkNvcHksIG51bGwsIE5lc3RpbmdEZWxpbWl0ZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBub2RlcztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXROZXN0ZWQoaWQ6IHN0cmluZyk6IFByb21pc2U8VHJlZU5vZGU8Q29sbGVjdGlvblZpZXc+PiB7XHJcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLmdldEFsbE5lc3RlZCgpO1xyXG4gICAgICAgIHJldHVybiBTZXJ2aWNlVXRpbHMuZ2V0VHJlZU5vZGVPYmplY3QoY29sbGVjdGlvbnMsIGlkKSBhcyBUcmVlTm9kZTxDb2xsZWN0aW9uVmlldz47XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdXBzZXJ0KGNvbGxlY3Rpb246IENvbGxlY3Rpb25EYXRhIHwgQ29sbGVjdGlvbkRhdGFbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBsZXQgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ29sbGVjdGlvbkRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLmNvbGxlY3Rpb25zUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICBpZiAoY29sbGVjdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9ucyA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBDb2xsZWN0aW9uRGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCBjID0gY29sbGVjdGlvbiBhcyBDb2xsZWN0aW9uRGF0YTtcclxuICAgICAgICAgICAgY29sbGVjdGlvbnNbYy5pZF0gPSBjO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIChjb2xsZWN0aW9uIGFzIENvbGxlY3Rpb25EYXRhW10pLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uc1tjLmlkXSA9IGM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY29sbGVjdGlvbnNQcmVmaXggKyB1c2VySWQsIGNvbGxlY3Rpb25zKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZENvbGxlY3Rpb25DYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVwbGFjZShjb2xsZWN0aW9uczogeyBbaWQ6IHN0cmluZ106IENvbGxlY3Rpb25EYXRhOyB9KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmNvbGxlY3Rpb25zUHJlZml4ICsgdXNlcklkLCBjb2xsZWN0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDb2xsZWN0aW9uQ2FjaGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNsZWFyKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmNvbGxlY3Rpb25zUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZENvbGxlY3Rpb25DYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBDb2xsZWN0aW9uRGF0YTsgfT4oXHJcbiAgICAgICAgICAgIEtleXMuY29sbGVjdGlvbnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChjb2xsZWN0aW9ucyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBpZCBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBjb2xsZWN0aW9uc1tpZF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgKGlkIGFzIHN0cmluZ1tdKS5mb3JFYWNoKGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbGxlY3Rpb25zW2ldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmNvbGxlY3Rpb25zUHJlZml4ICsgdXNlcklkLCBjb2xsZWN0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDb2xsZWN0aW9uQ2FjaGUgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBlbnVtIExvZ0xldmVsVHlwZSB7XHJcbiAgICBEZWJ1ZyxcclxuICAgIEluZm8sXHJcbiAgICBXYXJuaW5nLFxyXG4gICAgRXJyb3IsXHJcbn1cclxuIiwiaW1wb3J0IHsgTG9nTGV2ZWxUeXBlIH0gZnJvbSAnLi4vZW51bXMvbG9nTGV2ZWxUeXBlJztcclxuXHJcbmltcG9ydCB7IExvZ1NlcnZpY2UgYXMgTG9nU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2xvZy5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCAqIGFzIGhydGltZSBmcm9tICdicm93c2VyLWhydGltZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29uc29sZUxvZ1NlcnZpY2UgaW1wbGVtZW50cyBMb2dTZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgcHJvdGVjdGVkIHRpbWVyc01hcDogTWFwPHN0cmluZywgW251bWJlciwgbnVtYmVyXT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGlzRGV2OiBib29sZWFuLCBwcm90ZWN0ZWQgZmlsdGVyOiAobGV2ZWw6IExvZ0xldmVsVHlwZSkgPT4gYm9vbGVhbiA9IG51bGwpIHsgfVxyXG5cclxuICAgIGRlYnVnKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0Rldikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMud3JpdGUoTG9nTGV2ZWxUeXBlLkRlYnVnLCBtZXNzYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBpbmZvKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMud3JpdGUoTG9nTGV2ZWxUeXBlLkluZm8sIG1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHdhcm5pbmcobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy53cml0ZShMb2dMZXZlbFR5cGUuV2FybmluZywgbWVzc2FnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZXJyb3IobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy53cml0ZShMb2dMZXZlbFR5cGUuRXJyb3IsIG1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHdyaXRlKGxldmVsOiBMb2dMZXZlbFR5cGUsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlciAhPSBudWxsICYmIHRoaXMuZmlsdGVyKGxldmVsKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XHJcbiAgICAgICAgICAgIGNhc2UgTG9nTGV2ZWxUeXBlLkRlYnVnOlxyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsVHlwZS5JbmZvOlxyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIExvZ0xldmVsVHlwZS5XYXJuaW5nOlxyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBMb2dMZXZlbFR5cGUuRXJyb3I6XHJcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aW1lKGxhYmVsOiBzdHJpbmcgPSAnZGVmYXVsdCcpIHtcclxuICAgICAgICBpZiAoIXRoaXMudGltZXJzTWFwLmhhcyhsYWJlbCkpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lcnNNYXAuc2V0KGxhYmVsLCBocnRpbWUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRpbWVFbmQobGFiZWw6IHN0cmluZyA9ICdkZWZhdWx0Jyk6IFtudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSBocnRpbWUodGhpcy50aW1lcnNNYXAuZ2V0KGxhYmVsKSk7XHJcbiAgICAgICAgdGhpcy50aW1lcnNNYXAuZGVsZXRlKGxhYmVsKTtcclxuICAgICAgICB0aGlzLndyaXRlKExvZ0xldmVsVHlwZS5JbmZvLCBgJHtsYWJlbH06ICR7ZWxhcHNlZFswXSAqIDEwMDAgKyBlbGFwc2VkWzFdIC8gMTBlNn1tc2ApO1xyXG4gICAgICAgIHJldHVybiBlbGFwc2VkO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY3J5cHRvLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRhaW5lclNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZGVwcmVjYXRlZCwgdXNlIGF0dGFjaFRvR2xvYmFsIGluc3RlYWRcclxuICAgIGF0dGFjaFRvV2luZG93KHdpbjogYW55KSB7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hUb0dsb2JhbCh3aW4pO1xyXG4gICAgfVxyXG5cclxuICAgIGF0dGFjaFRvR2xvYmFsKGdsb2JhbDogYW55KSB7XHJcbiAgICAgICAgaWYgKCFnbG9iYWwuYml0d2FyZGVuQ29udGFpbmVyU2VydmljZSkge1xyXG4gICAgICAgICAgICBnbG9iYWwuYml0d2FyZGVuQ29udGFpbmVyU2VydmljZSA9IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldENyeXB0b1NlcnZpY2UoKTogQ3J5cHRvU2VydmljZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3J5cHRvU2VydmljZTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRW52aXJvbm1lbnRVcmxzIHtcclxuICAgIGJhc2U6IHN0cmluZztcclxuICAgIGFwaTogc3RyaW5nO1xyXG4gICAgaWRlbnRpdHk6IHN0cmluZztcclxuICAgIGV2ZW50czogc3RyaW5nO1xyXG59XHJcbiIsImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEVudmlyb25tZW50VXJscyB9IGZyb20gJy4uL21vZGVscy9kb21haW4vZW52aXJvbm1lbnRVcmxzJztcclxuXHJcbmltcG9ydCB7IENvbnN0YW50c1NlcnZpY2UgfSBmcm9tICcuL2NvbnN0YW50cy5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IEVudmlyb25tZW50U2VydmljZSBhcyBFbnZpcm9ubWVudFNlcnZpY2VBYnN0cmFjdGlvbiwgVXJscyB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9lbnZpcm9ubWVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFbnZpcm9ubWVudFNlcnZpY2UgaW1wbGVtZW50cyBFbnZpcm9ubWVudFNlcnZpY2VBYnN0cmFjdGlvbiB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSB1cmxzU3ViamVjdCA9IG5ldyBTdWJqZWN0PFVybHM+KCk7XHJcbiAgICB1cmxzOiBPYnNlcnZhYmxlPFVybHM+ID0gdGhpcy51cmxzU3ViamVjdDsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxyXG5cclxuICAgIHByaXZhdGUgYmFzZVVybDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSB3ZWJWYXVsdFVybDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBhcGlVcmw6IHN0cmluZztcclxuICAgIHByaXZhdGUgaWRlbnRpdHlVcmw6IHN0cmluZztcclxuICAgIHByaXZhdGUgaWNvbnNVcmw6IHN0cmluZztcclxuICAgIHByaXZhdGUgbm90aWZpY2F0aW9uc1VybDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBldmVudHNVcmw6IHN0cmluZztcclxuICAgIHByaXZhdGUga2V5Q29ubmVjdG9yVXJsOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHt9XHJcblxyXG4gICAgaGFzQmFzZVVybCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlVXJsICE9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Tm90aWZpY2F0aW9uc1VybCgpIHtcclxuICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25zVXJsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uc1VybDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJhc2VVcmwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlVXJsICsgJy9ub3RpZmljYXRpb25zJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAnaHR0cHM6Ly9ub3RpZmljYXRpb25zLmJpdHdhcmRlbi5jb20nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFdlYlZhdWx0VXJsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLndlYlZhdWx0VXJsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2ViVmF1bHRVcmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5iYXNlVXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2VVcmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnaHR0cHM6Ly92YXVsdC5iaXR3YXJkZW4uY29tJztcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZW5kVXJsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFdlYlZhdWx0VXJsKCkgPT09ICdodHRwczovL3ZhdWx0LmJpdHdhcmRlbi5jb20nXHJcbiAgICAgICAgICAgID8gJ2h0dHBzOi8vc2VuZC5iaXR3YXJkZW4uY29tLyMnXHJcbiAgICAgICAgICAgIDogdGhpcy5nZXRXZWJWYXVsdFVybCgpICsgJy8jL3NlbmQvJztcclxuICAgIH1cclxuXHJcbiAgICBnZXRJY29uc1VybCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pY29uc1VybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmljb25zVXJsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYmFzZVVybCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlVXJsICsgJy9pY29ucyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJ2h0dHBzOi8vaWNvbnMuYml0d2FyZGVuLm5ldCc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXBpVXJsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFwaVVybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwaVVybDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJhc2VVcmwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFzZVVybCArICcvYXBpJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAnaHR0cHM6Ly9hcGkuYml0d2FyZGVuLmNvbSc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SWRlbnRpdHlVcmwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaWRlbnRpdHlVcmwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pZGVudGl0eVVybDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJhc2VVcmwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFzZVVybCArICcvaWRlbnRpdHknO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICdodHRwczovL2lkZW50aXR5LmJpdHdhcmRlbi5jb20nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEV2ZW50c1VybCgpIHtcclxuICAgICAgICBpZiAodGhpcy5ldmVudHNVcmwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNVcmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5iYXNlVXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2VVcmwgKyAnL2V2ZW50cyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJ2h0dHBzOi8vZXZlbnRzLmJpdHdhcmRlbi5jb20nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEtleUNvbm5lY3RvclVybCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5rZXlDb25uZWN0b3JVcmw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0VXJsc0Zyb21TdG9yYWdlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IHVybHNPYmo6IGFueSA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0KENvbnN0YW50c1NlcnZpY2UuZW52aXJvbm1lbnRVcmxzS2V5KTtcclxuICAgICAgICBjb25zdCB1cmxzID0gdXJsc09iaiB8fCB7XHJcbiAgICAgICAgICAgIGJhc2U6IG51bGwsXHJcbiAgICAgICAgICAgIGFwaTogbnVsbCxcclxuICAgICAgICAgICAgaWRlbnRpdHk6IG51bGwsXHJcbiAgICAgICAgICAgIGljb25zOiBudWxsLFxyXG4gICAgICAgICAgICBub3RpZmljYXRpb25zOiBudWxsLFxyXG4gICAgICAgICAgICBldmVudHM6IG51bGwsXHJcbiAgICAgICAgICAgIHdlYlZhdWx0OiBudWxsLFxyXG4gICAgICAgICAgICBrZXlDb25uZWN0b3I6IG51bGwsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgZW52VXJscyA9IG5ldyBFbnZpcm9ubWVudFVybHMoKTtcclxuXHJcbiAgICAgICAgaWYgKHVybHMuYmFzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VVcmwgPSBlbnZVcmxzLmJhc2UgPSB1cmxzLmJhc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMud2ViVmF1bHRVcmwgPSB1cmxzLndlYlZhdWx0O1xyXG4gICAgICAgIHRoaXMuYXBpVXJsID0gZW52VXJscy5hcGkgPSB1cmxzLmFwaTtcclxuICAgICAgICB0aGlzLmlkZW50aXR5VXJsID0gZW52VXJscy5pZGVudGl0eSA9IHVybHMuaWRlbnRpdHk7XHJcbiAgICAgICAgdGhpcy5pY29uc1VybCA9IHVybHMuaWNvbnM7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zVXJsID0gdXJscy5ub3RpZmljYXRpb25zO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzVXJsID0gZW52VXJscy5ldmVudHMgPSB1cmxzLmV2ZW50cztcclxuICAgICAgICB0aGlzLmtleUNvbm5lY3RvclVybCA9IHVybHMua2V5Q29ubmVjdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNldFVybHModXJsczogVXJscywgc2F2ZVNldHRpbmdzOiBib29sZWFuID0gdHJ1ZSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgdXJscy5iYXNlID0gdGhpcy5mb3JtYXRVcmwodXJscy5iYXNlKTtcclxuICAgICAgICB1cmxzLndlYlZhdWx0ID0gdGhpcy5mb3JtYXRVcmwodXJscy53ZWJWYXVsdCk7XHJcbiAgICAgICAgdXJscy5hcGkgPSB0aGlzLmZvcm1hdFVybCh1cmxzLmFwaSk7XHJcbiAgICAgICAgdXJscy5pZGVudGl0eSA9IHRoaXMuZm9ybWF0VXJsKHVybHMuaWRlbnRpdHkpO1xyXG4gICAgICAgIHVybHMuaWNvbnMgPSB0aGlzLmZvcm1hdFVybCh1cmxzLmljb25zKTtcclxuICAgICAgICB1cmxzLm5vdGlmaWNhdGlvbnMgPSB0aGlzLmZvcm1hdFVybCh1cmxzLm5vdGlmaWNhdGlvbnMpO1xyXG4gICAgICAgIHVybHMuZXZlbnRzID0gdGhpcy5mb3JtYXRVcmwodXJscy5ldmVudHMpO1xyXG4gICAgICAgIHVybHMua2V5Q29ubmVjdG9yID0gdGhpcy5mb3JtYXRVcmwodXJscy5rZXlDb25uZWN0b3IpO1xyXG5cclxuICAgICAgICBpZiAoc2F2ZVNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShDb25zdGFudHNTZXJ2aWNlLmVudmlyb25tZW50VXJsc0tleSwge1xyXG4gICAgICAgICAgICAgICAgYmFzZTogdXJscy5iYXNlLFxyXG4gICAgICAgICAgICAgICAgYXBpOiB1cmxzLmFwaSxcclxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiB1cmxzLmlkZW50aXR5LFxyXG4gICAgICAgICAgICAgICAgd2ViVmF1bHQ6IHVybHMud2ViVmF1bHQsXHJcbiAgICAgICAgICAgICAgICBpY29uczogdXJscy5pY29ucyxcclxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbnM6IHVybHMubm90aWZpY2F0aW9ucyxcclxuICAgICAgICAgICAgICAgIGV2ZW50czogdXJscy5ldmVudHMsXHJcbiAgICAgICAgICAgICAgICBrZXlDb25uZWN0b3I6IHVybHMua2V5Q29ubmVjdG9yLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYmFzZVVybCA9IHVybHMuYmFzZTtcclxuICAgICAgICB0aGlzLndlYlZhdWx0VXJsID0gdXJscy53ZWJWYXVsdDtcclxuICAgICAgICB0aGlzLmFwaVVybCA9IHVybHMuYXBpO1xyXG4gICAgICAgIHRoaXMuaWRlbnRpdHlVcmwgPSB1cmxzLmlkZW50aXR5O1xyXG4gICAgICAgIHRoaXMuaWNvbnNVcmwgPSB1cmxzLmljb25zO1xyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1VybCA9IHVybHMubm90aWZpY2F0aW9ucztcclxuICAgICAgICB0aGlzLmV2ZW50c1VybCA9IHVybHMuZXZlbnRzO1xyXG4gICAgICAgIHRoaXMua2V5Q29ubmVjdG9yVXJsID0gdXJscy5rZXlDb25uZWN0b3I7XHJcblxyXG4gICAgICAgIHRoaXMudXJsc1N1YmplY3QubmV4dCh1cmxzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHVybHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXJscygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiYXNlOiB0aGlzLmJhc2VVcmwsXHJcbiAgICAgICAgICAgIHdlYlZhdWx0OiB0aGlzLndlYlZhdWx0VXJsLFxyXG4gICAgICAgICAgICBhcGk6IHRoaXMuYXBpVXJsLFxyXG4gICAgICAgICAgICBpZGVudGl0eTogdGhpcy5pZGVudGl0eVVybCxcclxuICAgICAgICAgICAgaWNvbnM6IHRoaXMuaWNvbnNVcmwsXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbnM6IHRoaXMubm90aWZpY2F0aW9uc1VybCxcclxuICAgICAgICAgICAgZXZlbnRzOiB0aGlzLmV2ZW50c1VybCxcclxuICAgICAgICAgICAga2V5Q29ubmVjdG9yOiB0aGlzLmtleUNvbm5lY3RvclVybCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZm9ybWF0VXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodXJsID09IG51bGwgfHwgdXJsID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXC8rJC9nLCAnJyk7XHJcbiAgICAgICAgaWYgKCF1cmwuc3RhcnRzV2l0aCgnaHR0cDovLycpICYmICF1cmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSkge1xyXG4gICAgICAgICAgICB1cmwgPSAnaHR0cHM6Ly8nICsgdXJsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHVybC50cmltKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZXZlbnRUeXBlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudERhdGEge1xyXG4gICAgdHlwZTogRXZlbnRUeXBlO1xyXG4gICAgY2lwaGVySWQ6IHN0cmluZztcclxuICAgIGRhdGU6IHN0cmluZztcclxufVxyXG4iLCJpbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9ldmVudFR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50UmVxdWVzdCB7XHJcbiAgICB0eXBlOiBFdmVudFR5cGU7XHJcbiAgICBjaXBoZXJJZDogc3RyaW5nO1xyXG4gICAgZGF0ZTogc3RyaW5nO1xyXG59XHJcbiIsImltcG9ydCB7IEV2ZW50VHlwZSB9IGZyb20gJy4uL2VudW1zL2V2ZW50VHlwZSc7XHJcblxyXG5pbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tICcuLi9tb2RlbHMvZGF0YS9ldmVudERhdGEnO1xyXG5cclxuaW1wb3J0IHsgRXZlbnRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZXZlbnRSZXF1ZXN0JztcclxuXHJcbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIGFzIEV2ZW50U2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2V2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy91c2VyLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcbmltcG9ydCB7IENvbnN0YW50c1NlcnZpY2UgfSBmcm9tICcuL2NvbnN0YW50cy5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudFNlcnZpY2UgaW1wbGVtZW50cyBFdmVudFNlcnZpY2VBYnN0cmFjdGlvbiB7XHJcbiAgICBwcml2YXRlIGluaXRlZCA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLCBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsIHByaXZhdGUgY2lwaGVyU2VydmljZTogQ2lwaGVyU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHsgfVxyXG5cclxuICAgIGluaXQoY2hlY2tPbkludGVydmFsOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5pdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdGVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoY2hlY2tPbkludGVydmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBsb2FkRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHRoaXMudXBsb2FkRXZlbnRzKCksIDYwICogMTAwMCk7IC8vIGNoZWNrIGV2ZXJ5IDYwIHNlY29uZHNcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY29sbGVjdChldmVudFR5cGU6IEV2ZW50VHlwZSwgY2lwaGVySWQ6IHN0cmluZyA9IG51bGwsIHVwbG9hZEltbWVkaWF0ZWx5ID0gZmFsc2UpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGF1dGhlZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XHJcbiAgICAgICAgaWYgKCFhdXRoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRBbGxPcmdhbml6YXRpb25zKCk7XHJcbiAgICAgICAgaWYgKG9yZ2FuaXphdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9yZ0lkcyA9IG5ldyBTZXQ8c3RyaW5nPihvcmdhbml6YXRpb25zLmZpbHRlcihvID0+IG8udXNlRXZlbnRzKS5tYXAobyA9PiBvLmlkKSk7XHJcbiAgICAgICAgaWYgKG9yZ0lkcy5zaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNpcGhlcklkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmdldChjaXBoZXJJZCk7XHJcbiAgICAgICAgICAgIGlmIChjaXBoZXIgPT0gbnVsbCB8fCBjaXBoZXIub3JnYW5pemF0aW9uSWQgPT0gbnVsbCB8fCAhb3JnSWRzLmhhcyhjaXBoZXIub3JnYW5pemF0aW9uSWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGV2ZW50Q29sbGVjdGlvbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PEV2ZW50RGF0YVtdPihDb25zdGFudHNTZXJ2aWNlLmV2ZW50Q29sbGVjdGlvbktleSk7XHJcbiAgICAgICAgaWYgKGV2ZW50Q29sbGVjdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGV2ZW50Q29sbGVjdGlvbiA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudERhdGEoKTtcclxuICAgICAgICBldmVudC50eXBlID0gZXZlbnRUeXBlO1xyXG4gICAgICAgIGV2ZW50LmNpcGhlcklkID0gY2lwaGVySWQ7XHJcbiAgICAgICAgZXZlbnQuZGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuICAgICAgICBldmVudENvbGxlY3Rpb24ucHVzaChldmVudCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKENvbnN0YW50c1NlcnZpY2UuZXZlbnRDb2xsZWN0aW9uS2V5LCBldmVudENvbGxlY3Rpb24pO1xyXG4gICAgICAgIGlmICh1cGxvYWRJbW1lZGlhdGVseSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwbG9hZEV2ZW50cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1cGxvYWRFdmVudHMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCBhdXRoZWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpO1xyXG4gICAgICAgIGlmICghYXV0aGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZXZlbnRDb2xsZWN0aW9uID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8RXZlbnREYXRhW10+KENvbnN0YW50c1NlcnZpY2UuZXZlbnRDb2xsZWN0aW9uS2V5KTtcclxuICAgICAgICBpZiAoZXZlbnRDb2xsZWN0aW9uID09IG51bGwgfHwgZXZlbnRDb2xsZWN0aW9uLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBldmVudENvbGxlY3Rpb24ubWFwKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXEgPSBuZXcgRXZlbnRSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHJlcS50eXBlID0gZS50eXBlO1xyXG4gICAgICAgICAgICByZXEuY2lwaGVySWQgPSBlLmNpcGhlcklkO1xyXG4gICAgICAgICAgICByZXEuZGF0ZSA9IGUuZGF0ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucG9zdEV2ZW50c0NvbGxlY3QocmVxdWVzdCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJFdmVudHMoKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2xlYXJFdmVudHMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShDb25zdGFudHNTZXJ2aWNlLmV2ZW50Q29sbGVjdGlvbktleSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2FyZFZpZXcgfSBmcm9tICcuLi92aWV3L2NhcmRWaWV3JztcclxuXHJcbmltcG9ydCB7IENhcmQgYXMgQ2FyZERvbWFpbiB9IGZyb20gJy4uL2RvbWFpbi9jYXJkJztcclxuaW1wb3J0IHsgRW5jU3RyaW5nIH0gZnJvbSAnLi4vZG9tYWluL2VuY1N0cmluZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FyZCB7XHJcbiAgICBzdGF0aWMgdGVtcGxhdGUoKTogQ2FyZCB7XHJcbiAgICAgICAgY29uc3QgcmVxID0gbmV3IENhcmQoKTtcclxuICAgICAgICByZXEuY2FyZGhvbGRlck5hbWUgPSAnSm9obiBEb2UnO1xyXG4gICAgICAgIHJlcS5icmFuZCA9ICd2aXNhJztcclxuICAgICAgICByZXEubnVtYmVyID0gJzQyNDI0MjQyNDI0MjQyNDInO1xyXG4gICAgICAgIHJlcS5leHBNb250aCA9ICcwNCc7XHJcbiAgICAgICAgcmVxLmV4cFllYXIgPSAnMjAyMyc7XHJcbiAgICAgICAgcmVxLmNvZGUgPSAnMTIzJztcclxuICAgICAgICByZXR1cm4gcmVxO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b1ZpZXcocmVxOiBDYXJkLCB2aWV3ID0gbmV3IENhcmRWaWV3KCkpIHtcclxuICAgICAgICB2aWV3LmNhcmRob2xkZXJOYW1lID0gcmVxLmNhcmRob2xkZXJOYW1lO1xyXG4gICAgICAgIHZpZXcuYnJhbmQgPSByZXEuYnJhbmQ7XHJcbiAgICAgICAgdmlldy5udW1iZXIgPSByZXEubnVtYmVyO1xyXG4gICAgICAgIHZpZXcuZXhwTW9udGggPSByZXEuZXhwTW9udGg7XHJcbiAgICAgICAgdmlldy5leHBZZWFyID0gcmVxLmV4cFllYXI7XHJcbiAgICAgICAgdmlldy5jb2RlID0gcmVxLmNvZGU7XHJcbiAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvRG9tYWluKHJlcTogQ2FyZCwgZG9tYWluID0gbmV3IENhcmREb21haW4oKSkge1xyXG4gICAgICAgIGRvbWFpbi5jYXJkaG9sZGVyTmFtZSA9IHJlcS5jYXJkaG9sZGVyTmFtZSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEuY2FyZGhvbGRlck5hbWUpIDogbnVsbDtcclxuICAgICAgICBkb21haW4uYnJhbmQgPSByZXEuYnJhbmQgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLmJyYW5kKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLm51bWJlciA9IHJlcS5udW1iZXIgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLm51bWJlcikgOiBudWxsO1xyXG4gICAgICAgIGRvbWFpbi5leHBNb250aCA9IHJlcS5leHBNb250aCAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEuZXhwTW9udGgpIDogbnVsbDtcclxuICAgICAgICBkb21haW4uZXhwWWVhciA9IHJlcS5leHBZZWFyICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5leHBZZWFyKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLmNvZGUgPSByZXEuY29kZSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEuY29kZSkgOiBudWxsO1xyXG4gICAgICAgIHJldHVybiBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgY2FyZGhvbGRlck5hbWU6IHN0cmluZztcclxuICAgIGJyYW5kOiBzdHJpbmc7XHJcbiAgICBudW1iZXI6IHN0cmluZztcclxuICAgIGV4cE1vbnRoOiBzdHJpbmc7XHJcbiAgICBleHBZZWFyOiBzdHJpbmc7XHJcbiAgICBjb2RlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3Iobz86IENhcmRWaWV3IHwgQ2FyZERvbWFpbikge1xyXG4gICAgICAgIGlmIChvID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG8gaW5zdGFuY2VvZiBDYXJkVmlldykge1xyXG4gICAgICAgICAgICB0aGlzLmNhcmRob2xkZXJOYW1lID0gby5jYXJkaG9sZGVyTmFtZTtcclxuICAgICAgICAgICAgdGhpcy5icmFuZCA9IG8uYnJhbmQ7XHJcbiAgICAgICAgICAgIHRoaXMubnVtYmVyID0gby5udW1iZXI7XHJcbiAgICAgICAgICAgIHRoaXMuZXhwTW9udGggPSBvLmV4cE1vbnRoO1xyXG4gICAgICAgICAgICB0aGlzLmV4cFllYXIgPSBvLmV4cFllYXI7XHJcbiAgICAgICAgICAgIHRoaXMuY29kZSA9IG8uY29kZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNhcmRob2xkZXJOYW1lID0gby5jYXJkaG9sZGVyTmFtZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmJyYW5kID0gby5icmFuZD8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLm51bWJlciA9IG8ubnVtYmVyPy5lbmNyeXB0ZWRTdHJpbmc7XHJcbiAgICAgICAgICAgIHRoaXMuZXhwTW9udGggPSBvLmV4cE1vbnRoPy5lbmNyeXB0ZWRTdHJpbmc7XHJcbiAgICAgICAgICAgIHRoaXMuZXhwWWVhciA9IG8uZXhwWWVhcj8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmNvZGUgPSBvLmNvZGU/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZmllbGRUeXBlJztcclxuaW1wb3J0IHsgTGlua2VkSWRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvbGlua2VkSWRUeXBlJztcclxuXHJcbmltcG9ydCB7IEZpZWxkVmlldyB9IGZyb20gJy4uL3ZpZXcvZmllbGRWaWV3JztcclxuXHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4uL2RvbWFpbi9lbmNTdHJpbmcnO1xyXG5pbXBvcnQgeyBGaWVsZCBhcyBGaWVsZERvbWFpbiB9IGZyb20gJy4uL2RvbWFpbi9maWVsZCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmllbGQge1xyXG4gICAgc3RhdGljIHRlbXBsYXRlKCk6IEZpZWxkIHtcclxuICAgICAgICBjb25zdCByZXEgPSBuZXcgRmllbGQoKTtcclxuICAgICAgICByZXEubmFtZSA9ICdGaWVsZCBuYW1lJztcclxuICAgICAgICByZXEudmFsdWUgPSAnU29tZSB2YWx1ZSc7XHJcbiAgICAgICAgcmVxLnR5cGUgPSBGaWVsZFR5cGUuVGV4dDtcclxuICAgICAgICByZXR1cm4gcmVxO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b1ZpZXcocmVxOiBGaWVsZCwgdmlldyA9IG5ldyBGaWVsZFZpZXcoKSkge1xyXG4gICAgICAgIHZpZXcudHlwZSA9IHJlcS50eXBlO1xyXG4gICAgICAgIHZpZXcudmFsdWUgPSByZXEudmFsdWU7XHJcbiAgICAgICAgdmlldy5uYW1lID0gcmVxLm5hbWU7XHJcbiAgICAgICAgdmlldy5saW5rZWRJZCA9IHJlcS5saW5rZWRJZDtcclxuICAgICAgICByZXR1cm4gdmlldztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdG9Eb21haW4ocmVxOiBGaWVsZCwgZG9tYWluID0gbmV3IEZpZWxkRG9tYWluKCkpIHtcclxuICAgICAgICBkb21haW4udHlwZSA9IHJlcS50eXBlO1xyXG4gICAgICAgIGRvbWFpbi52YWx1ZSA9IHJlcS52YWx1ZSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEudmFsdWUpIDogbnVsbDtcclxuICAgICAgICBkb21haW4ubmFtZSA9IHJlcS5uYW1lICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5uYW1lKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLmxpbmtlZElkID0gcmVxLmxpbmtlZElkO1xyXG4gICAgICAgIHJldHVybiBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIHR5cGU6IEZpZWxkVHlwZTtcclxuICAgIGxpbmtlZElkOiBMaW5rZWRJZFR5cGU7XHJcblxyXG4gICAgY29uc3RydWN0b3Iobz86IEZpZWxkVmlldyB8IEZpZWxkRG9tYWluKSB7XHJcbiAgICAgICAgaWYgKG8gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobyBpbnN0YW5jZW9mIEZpZWxkVmlldykge1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBvLm5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBvLnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG8ubmFtZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gby52YWx1ZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnR5cGUgPSBvLnR5cGU7XHJcbiAgICAgICAgdGhpcy5saW5rZWRJZCA9IG8ubGlua2VkSWQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSWRlbnRpdHlWaWV3IH0gZnJvbSAnLi4vdmlldy9pZGVudGl0eVZpZXcnO1xyXG5cclxuaW1wb3J0IHsgRW5jU3RyaW5nIH0gZnJvbSAnLi4vZG9tYWluL2VuY1N0cmluZyc7XHJcbmltcG9ydCB7IElkZW50aXR5IGFzIElkZW50aXR5RG9tYWluIH0gZnJvbSAnLi4vZG9tYWluL2lkZW50aXR5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBJZGVudGl0eSB7XHJcbiAgICBzdGF0aWMgdGVtcGxhdGUoKTogSWRlbnRpdHkge1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBJZGVudGl0eSgpO1xyXG4gICAgICAgIHJlcS50aXRsZSA9ICdNcic7XHJcbiAgICAgICAgcmVxLmZpcnN0TmFtZSA9ICdKb2huJztcclxuICAgICAgICByZXEubWlkZGxlTmFtZSA9ICdXaWxsaWFtJztcclxuICAgICAgICByZXEubGFzdE5hbWUgPSAnRG9lJztcclxuICAgICAgICByZXEuYWRkcmVzczEgPSAnMTIzIEFueSBTdCc7XHJcbiAgICAgICAgcmVxLmFkZHJlc3MyID0gJ0FwdCAjMTIzJztcclxuICAgICAgICByZXEuYWRkcmVzczMgPSBudWxsO1xyXG4gICAgICAgIHJlcS5jaXR5ID0gJ05ldyBZb3JrJztcclxuICAgICAgICByZXEuc3RhdGUgPSAnTlknO1xyXG4gICAgICAgIHJlcS5wb3N0YWxDb2RlID0gJzEwMDAxJztcclxuICAgICAgICByZXEuY291bnRyeSA9ICdVUyc7XHJcbiAgICAgICAgcmVxLmNvbXBhbnkgPSAnQWNtZSBJbmMuJztcclxuICAgICAgICByZXEuZW1haWwgPSAnam9obkBjb21wYW55LmNvbSc7XHJcbiAgICAgICAgcmVxLnBob25lID0gJzU1NTU1NTEyMzQnO1xyXG4gICAgICAgIHJlcS5zc24gPSAnMDAwLTEyMy00NTY3JztcclxuICAgICAgICByZXEudXNlcm5hbWUgPSAnamRvZSc7XHJcbiAgICAgICAgcmVxLnBhc3Nwb3J0TnVtYmVyID0gJ1VTLTEyMzQ1Njc4OSc7XHJcbiAgICAgICAgcmVxLmxpY2Vuc2VOdW1iZXIgPSAnRDEyMy0xMi0xMjMtMTIzMzMnO1xyXG4gICAgICAgIHJldHVybiByZXE7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvVmlldyhyZXE6IElkZW50aXR5LCB2aWV3ID0gbmV3IElkZW50aXR5VmlldygpKSB7XHJcbiAgICAgICAgdmlldy50aXRsZSA9IHJlcS50aXRsZTtcclxuICAgICAgICB2aWV3LmZpcnN0TmFtZSA9IHJlcS5maXJzdE5hbWU7XHJcbiAgICAgICAgdmlldy5taWRkbGVOYW1lID0gcmVxLm1pZGRsZU5hbWU7XHJcbiAgICAgICAgdmlldy5sYXN0TmFtZSA9IHJlcS5sYXN0TmFtZTtcclxuICAgICAgICB2aWV3LmFkZHJlc3MxID0gcmVxLmFkZHJlc3MxO1xyXG4gICAgICAgIHZpZXcuYWRkcmVzczIgPSByZXEuYWRkcmVzczI7XHJcbiAgICAgICAgdmlldy5hZGRyZXNzMyA9IHJlcS5hZGRyZXNzMztcclxuICAgICAgICB2aWV3LmNpdHkgPSByZXEuY2l0eTtcclxuICAgICAgICB2aWV3LnN0YXRlID0gcmVxLnN0YXRlO1xyXG4gICAgICAgIHZpZXcucG9zdGFsQ29kZSA9IHJlcS5wb3N0YWxDb2RlO1xyXG4gICAgICAgIHZpZXcuY291bnRyeSA9IHJlcS5jb3VudHJ5O1xyXG4gICAgICAgIHZpZXcuY29tcGFueSA9IHJlcS5jb21wYW55O1xyXG4gICAgICAgIHZpZXcuZW1haWwgPSByZXEuZW1haWw7XHJcbiAgICAgICAgdmlldy5waG9uZSA9IHJlcS5waG9uZTtcclxuICAgICAgICB2aWV3LnNzbiA9IHJlcS5zc247XHJcbiAgICAgICAgdmlldy51c2VybmFtZSA9IHJlcS51c2VybmFtZTtcclxuICAgICAgICB2aWV3LnBhc3Nwb3J0TnVtYmVyID0gcmVxLnBhc3Nwb3J0TnVtYmVyO1xyXG4gICAgICAgIHZpZXcubGljZW5zZU51bWJlciA9IHJlcS5saWNlbnNlTnVtYmVyO1xyXG4gICAgICAgIHJldHVybiB2aWV3O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b0RvbWFpbihyZXE6IElkZW50aXR5LCBkb21haW4gPSBuZXcgSWRlbnRpdHlEb21haW4oKSkge1xyXG4gICAgICAgIGRvbWFpbi50aXRsZSA9IHJlcS50aXRsZSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEudGl0bGUpIDogbnVsbDtcclxuICAgICAgICBkb21haW4uZmlyc3ROYW1lID0gcmVxLmZpcnN0TmFtZSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEuZmlyc3ROYW1lKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLm1pZGRsZU5hbWUgPSByZXEubWlkZGxlTmFtZSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEubWlkZGxlTmFtZSkgOiBudWxsO1xyXG4gICAgICAgIGRvbWFpbi5sYXN0TmFtZSA9IHJlcS5sYXN0TmFtZSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEubGFzdE5hbWUpIDogbnVsbDtcclxuICAgICAgICBkb21haW4uYWRkcmVzczEgPSByZXEuYWRkcmVzczEgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLmFkZHJlc3MxKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLmFkZHJlc3MyID0gcmVxLmFkZHJlc3MyICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5hZGRyZXNzMikgOiBudWxsO1xyXG4gICAgICAgIGRvbWFpbi5hZGRyZXNzMyA9IHJlcS5hZGRyZXNzMyAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEuYWRkcmVzczMpIDogbnVsbDtcclxuICAgICAgICBkb21haW4uY2l0eSA9IHJlcS5jaXR5ICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5jaXR5KSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLnN0YXRlID0gcmVxLnN0YXRlICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5zdGF0ZSkgOiBudWxsO1xyXG4gICAgICAgIGRvbWFpbi5wb3N0YWxDb2RlID0gcmVxLnBvc3RhbENvZGUgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLnBvc3RhbENvZGUpIDogbnVsbDtcclxuICAgICAgICBkb21haW4uY291bnRyeSA9IHJlcS5jb3VudHJ5ICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5jb3VudHJ5KSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLmNvbXBhbnkgPSByZXEuY29tcGFueSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEuY29tcGFueSkgOiBudWxsO1xyXG4gICAgICAgIGRvbWFpbi5lbWFpbCA9IHJlcS5lbWFpbCAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEuZW1haWwpIDogbnVsbDtcclxuICAgICAgICBkb21haW4ucGhvbmUgPSByZXEucGhvbmUgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLnBob25lKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLnNzbiA9IHJlcS5zc24gIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLnNzbikgOiBudWxsO1xyXG4gICAgICAgIGRvbWFpbi51c2VybmFtZSA9IHJlcS51c2VybmFtZSAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEudXNlcm5hbWUpIDogbnVsbDtcclxuICAgICAgICBkb21haW4ucGFzc3BvcnROdW1iZXIgPSByZXEucGFzc3BvcnROdW1iZXIgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLnBhc3Nwb3J0TnVtYmVyKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLmxpY2Vuc2VOdW1iZXIgPSByZXEubGljZW5zZU51bWJlciAhPSBudWxsID8gbmV3IEVuY1N0cmluZyhyZXEubGljZW5zZU51bWJlcikgOiBudWxsO1xyXG4gICAgICAgIHJldHVybiBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xyXG4gICAgbWlkZGxlTmFtZTogc3RyaW5nO1xyXG4gICAgbGFzdE5hbWU6IHN0cmluZztcclxuICAgIGFkZHJlc3MxOiBzdHJpbmc7XHJcbiAgICBhZGRyZXNzMjogc3RyaW5nO1xyXG4gICAgYWRkcmVzczM6IHN0cmluZztcclxuICAgIGNpdHk6IHN0cmluZztcclxuICAgIHN0YXRlOiBzdHJpbmc7XHJcbiAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XHJcbiAgICBjb3VudHJ5OiBzdHJpbmc7XHJcbiAgICBjb21wYW55OiBzdHJpbmc7XHJcbiAgICBlbWFpbDogc3RyaW5nO1xyXG4gICAgcGhvbmU6IHN0cmluZztcclxuICAgIHNzbjogc3RyaW5nO1xyXG4gICAgdXNlcm5hbWU6IHN0cmluZztcclxuICAgIHBhc3Nwb3J0TnVtYmVyOiBzdHJpbmc7XHJcbiAgICBsaWNlbnNlTnVtYmVyOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3Iobz86IElkZW50aXR5VmlldyB8IElkZW50aXR5RG9tYWluKSB7XHJcbiAgICAgICAgaWYgKG8gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobyBpbnN0YW5jZW9mIElkZW50aXR5Vmlldykge1xyXG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gby50aXRsZTtcclxuICAgICAgICAgICAgdGhpcy5maXJzdE5hbWUgPSBvLmZpcnN0TmFtZTtcclxuICAgICAgICAgICAgdGhpcy5taWRkbGVOYW1lID0gby5taWRkbGVOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3ROYW1lID0gby5sYXN0TmFtZTtcclxuICAgICAgICAgICAgdGhpcy5hZGRyZXNzMSA9IG8uYWRkcmVzczE7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzczIgPSBvLmFkZHJlc3MyO1xyXG4gICAgICAgICAgICB0aGlzLmFkZHJlc3MzID0gby5hZGRyZXNzMztcclxuICAgICAgICAgICAgdGhpcy5jaXR5ID0gby5jaXR5O1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gby5zdGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5wb3N0YWxDb2RlID0gby5wb3N0YWxDb2RlO1xyXG4gICAgICAgICAgICB0aGlzLmNvdW50cnkgPSBvLmNvdW50cnk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGFueSA9IG8uY29tcGFueTtcclxuICAgICAgICAgICAgdGhpcy5lbWFpbCA9IG8uZW1haWw7XHJcbiAgICAgICAgICAgIHRoaXMucGhvbmUgPSBvLnBob25lO1xyXG4gICAgICAgICAgICB0aGlzLnNzbiA9IG8uc3NuO1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJuYW1lID0gby51c2VybmFtZTtcclxuICAgICAgICAgICAgdGhpcy5wYXNzcG9ydE51bWJlciA9IG8ucGFzc3BvcnROdW1iZXI7XHJcbiAgICAgICAgICAgIHRoaXMubGljZW5zZU51bWJlciA9IG8ubGljZW5zZU51bWJlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gby50aXRsZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmZpcnN0TmFtZSA9IG8uZmlyc3ROYW1lPy5lbmNyeXB0ZWRTdHJpbmc7XHJcbiAgICAgICAgICAgIHRoaXMubWlkZGxlTmFtZSA9IG8ubWlkZGxlTmFtZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3ROYW1lID0gby5sYXN0TmFtZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmFkZHJlc3MxID0gby5hZGRyZXNzMT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmFkZHJlc3MyID0gby5hZGRyZXNzMj8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmFkZHJlc3MzID0gby5hZGRyZXNzMz8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmNpdHkgPSBvLmNpdHk/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IG8uc3RhdGU/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgdGhpcy5wb3N0YWxDb2RlID0gby5wb3N0YWxDb2RlPy5lbmNyeXB0ZWRTdHJpbmc7XHJcbiAgICAgICAgICAgIHRoaXMuY291bnRyeSA9IG8uY291bnRyeT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBhbnkgPSBvLmNvbXBhbnk/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgdGhpcy5lbWFpbCA9IG8uZW1haWw/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgdGhpcy5waG9uZSA9IG8ucGhvbmU/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgdGhpcy5zc24gPSBvLnNzbj8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJuYW1lID0gby51c2VybmFtZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLnBhc3Nwb3J0TnVtYmVyID0gby5wYXNzcG9ydE51bWJlcj8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmxpY2Vuc2VOdW1iZXIgPSBvLmxpY2Vuc2VOdW1iZXI/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVXJpTWF0Y2hUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvdXJpTWF0Y2hUeXBlJztcclxuXHJcbmltcG9ydCB7IExvZ2luVXJpVmlldyB9IGZyb20gJy4uL3ZpZXcvbG9naW5VcmlWaWV3JztcclxuXHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4uL2RvbWFpbi9lbmNTdHJpbmcnO1xyXG5pbXBvcnQgeyBMb2dpblVyaSBhcyBMb2dpblVyaURvbWFpbiB9IGZyb20gJy4uL2RvbWFpbi9sb2dpblVyaSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9naW5Vcmkge1xyXG4gICAgc3RhdGljIHRlbXBsYXRlKCk6IExvZ2luVXJpIHtcclxuICAgICAgICBjb25zdCByZXEgPSBuZXcgTG9naW5VcmkoKTtcclxuICAgICAgICByZXEudXJpID0gJ2h0dHBzOi8vZ29vZ2xlLmNvbSc7XHJcbiAgICAgICAgcmVxLm1hdGNoID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gcmVxO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b1ZpZXcocmVxOiBMb2dpblVyaSwgdmlldyA9IG5ldyBMb2dpblVyaVZpZXcoKSkge1xyXG4gICAgICAgIHZpZXcudXJpID0gcmVxLnVyaTtcclxuICAgICAgICB2aWV3Lm1hdGNoID0gcmVxLm1hdGNoO1xyXG4gICAgICAgIHJldHVybiB2aWV3O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b0RvbWFpbihyZXE6IExvZ2luVXJpLCBkb21haW4gPSBuZXcgTG9naW5VcmlEb21haW4oKSkge1xyXG4gICAgICAgIGRvbWFpbi51cmkgPSByZXEudXJpICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS51cmkpIDogbnVsbDtcclxuICAgICAgICBkb21haW4ubWF0Y2ggPSByZXEubWF0Y2g7XHJcbiAgICAgICAgcmV0dXJuIGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICB1cmk6IHN0cmluZztcclxuICAgIG1hdGNoOiBVcmlNYXRjaFR5cGUgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG8/OiBMb2dpblVyaVZpZXcgfCBMb2dpblVyaURvbWFpbikge1xyXG4gICAgICAgIGlmIChvID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG8gaW5zdGFuY2VvZiBMb2dpblVyaVZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy51cmkgPSBvLnVyaTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVyaSA9IG8udXJpPy5lbmNyeXB0ZWRTdHJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWF0Y2ggPSBvLm1hdGNoO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IExvZ2luVXJpIH0gZnJvbSAnLi9sb2dpblVyaSc7XHJcblxyXG5pbXBvcnQgeyBMb2dpblZpZXcgfSBmcm9tICcuLi92aWV3L2xvZ2luVmlldyc7XHJcblxyXG5pbXBvcnQgeyBFbmNTdHJpbmcgfSBmcm9tICcuLi9kb21haW4vZW5jU3RyaW5nJztcclxuaW1wb3J0IHsgTG9naW4gYXMgTG9naW5Eb21haW4gfSBmcm9tICcuLi9kb21haW4vbG9naW4nO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvZ2luIHtcclxuICAgIHN0YXRpYyB0ZW1wbGF0ZSgpOiBMb2dpbiB7XHJcbiAgICAgICAgY29uc3QgcmVxID0gbmV3IExvZ2luKCk7XHJcbiAgICAgICAgcmVxLnVyaXMgPSBbXTtcclxuICAgICAgICByZXEudXNlcm5hbWUgPSAnamRvZSc7XHJcbiAgICAgICAgcmVxLnBhc3N3b3JkID0gJ215cEBzc3dvcmQxMjMnO1xyXG4gICAgICAgIHJlcS50b3RwID0gJ0pCU1dZM0RQRUhQSzNQWFAnO1xyXG4gICAgICAgIHJldHVybiByZXE7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvVmlldyhyZXE6IExvZ2luLCB2aWV3ID0gbmV3IExvZ2luVmlldygpKSB7XHJcbiAgICAgICAgaWYgKHJlcS51cmlzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmlldy51cmlzID0gcmVxLnVyaXMubWFwKHUgPT4gTG9naW5VcmkudG9WaWV3KHUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmlldy51c2VybmFtZSA9IHJlcS51c2VybmFtZTtcclxuICAgICAgICB2aWV3LnBhc3N3b3JkID0gcmVxLnBhc3N3b3JkO1xyXG4gICAgICAgIHZpZXcudG90cCA9IHJlcS50b3RwO1xyXG4gICAgICAgIHJldHVybiB2aWV3O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b0RvbWFpbihyZXE6IExvZ2luLCBkb21haW4gPSBuZXcgTG9naW5Eb21haW4oKSkge1xyXG4gICAgICAgIGlmIChyZXEudXJpcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGRvbWFpbi51cmlzID0gcmVxLnVyaXMubWFwKHUgPT4gTG9naW5VcmkudG9Eb21haW4odSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb21haW4udXNlcm5hbWUgPSByZXEudXNlcm5hbWUgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLnVzZXJuYW1lKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLnBhc3N3b3JkID0gcmVxLnBhc3N3b3JkICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5wYXNzd29yZCkgOiBudWxsO1xyXG4gICAgICAgIGRvbWFpbi50b3RwID0gcmVxLnRvdHAgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLnRvdHApIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIHVyaXM6IExvZ2luVXJpW107XHJcbiAgICB1c2VybmFtZTogc3RyaW5nO1xyXG4gICAgcGFzc3dvcmQ6IHN0cmluZztcclxuICAgIHRvdHA6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvPzogTG9naW5WaWV3IHwgTG9naW5Eb21haW4pIHtcclxuICAgICAgICBpZiAobyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvLnVyaXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAobyBpbnN0YW5jZW9mIExvZ2luVmlldykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cmlzID0gby51cmlzLm1hcCh1ID0+IG5ldyBMb2dpblVyaSh1KSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVyaXMgPSBvLnVyaXMubWFwKHUgPT4gbmV3IExvZ2luVXJpKHUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG8gaW5zdGFuY2VvZiBMb2dpblZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy51c2VybmFtZSA9IG8udXNlcm5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmQgPSBvLnBhc3N3b3JkO1xyXG4gICAgICAgICAgICB0aGlzLnRvdHAgPSBvLnRvdHA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51c2VybmFtZSA9IG8udXNlcm5hbWU/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgdGhpcy5wYXNzd29yZCA9IG8ucGFzc3dvcmQ/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICAgICAgdGhpcy50b3RwID0gby50b3RwPy5lbmNyeXB0ZWRTdHJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFNlY3VyZU5vdGVUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VjdXJlTm90ZVR5cGUnO1xyXG5cclxuaW1wb3J0IHsgU2VjdXJlTm90ZVZpZXcgfSBmcm9tICcuLi92aWV3L3NlY3VyZU5vdGVWaWV3JztcclxuXHJcbmltcG9ydCB7IFNlY3VyZU5vdGUgYXMgU2VjdXJlTm90ZURvbWFpbiB9IGZyb20gJy4uL2RvbWFpbi9zZWN1cmVOb3RlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWN1cmVOb3RlIHtcclxuICAgIHN0YXRpYyB0ZW1wbGF0ZSgpOiBTZWN1cmVOb3RlIHtcclxuICAgICAgICBjb25zdCByZXEgPSBuZXcgU2VjdXJlTm90ZSgpO1xyXG4gICAgICAgIHJlcS50eXBlID0gU2VjdXJlTm90ZVR5cGUuR2VuZXJpYztcclxuICAgICAgICByZXR1cm4gcmVxO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b1ZpZXcocmVxOiBTZWN1cmVOb3RlLCB2aWV3ID0gbmV3IFNlY3VyZU5vdGVWaWV3KCkpIHtcclxuICAgICAgICB2aWV3LnR5cGUgPSByZXEudHlwZTtcclxuICAgICAgICByZXR1cm4gdmlldztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdG9Eb21haW4ocmVxOiBTZWN1cmVOb3RlLCB2aWV3ID0gbmV3IFNlY3VyZU5vdGVEb21haW4oKSkge1xyXG4gICAgICAgIHZpZXcudHlwZSA9IHJlcS50eXBlO1xyXG4gICAgICAgIHJldHVybiB2aWV3O1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGU6IFNlY3VyZU5vdGVUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG8/OiBTZWN1cmVOb3RlVmlldyB8IFNlY3VyZU5vdGVEb21haW4pIHtcclxuICAgICAgICBpZiAobyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IG8udHlwZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDaXBoZXJSZXByb21wdFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9jaXBoZXJSZXByb21wdFR5cGUnO1xyXG5pbXBvcnQgeyBDaXBoZXJUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvY2lwaGVyVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnLi4vdmlldy9jaXBoZXJWaWV3JztcclxuXHJcbmltcG9ydCB7IENpcGhlciBhcyBDaXBoZXJEb21haW4gfSBmcm9tICcuLi9kb21haW4vY2lwaGVyJztcclxuaW1wb3J0IHsgRW5jU3RyaW5nIH0gZnJvbSAnLi4vZG9tYWluL2VuY1N0cmluZyc7XHJcblxyXG5pbXBvcnQgeyBDYXJkIH0gZnJvbSAnLi9jYXJkJztcclxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuL2ZpZWxkJztcclxuaW1wb3J0IHsgSWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcclxuaW1wb3J0IHsgTG9naW4gfSBmcm9tICcuL2xvZ2luJztcclxuaW1wb3J0IHsgU2VjdXJlTm90ZSB9IGZyb20gJy4vc2VjdXJlTm90ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2lwaGVyIHtcclxuICAgIHN0YXRpYyB0ZW1wbGF0ZSgpOiBDaXBoZXIge1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBDaXBoZXIoKTtcclxuICAgICAgICByZXEub3JnYW5pemF0aW9uSWQgPSBudWxsO1xyXG4gICAgICAgIHJlcS5jb2xsZWN0aW9uSWRzID0gbnVsbDtcclxuICAgICAgICByZXEuZm9sZGVySWQgPSBudWxsO1xyXG4gICAgICAgIHJlcS50eXBlID0gQ2lwaGVyVHlwZS5Mb2dpbjtcclxuICAgICAgICByZXEubmFtZSA9ICdJdGVtIG5hbWUnO1xyXG4gICAgICAgIHJlcS5ub3RlcyA9ICdTb21lIG5vdGVzIGFib3V0IHRoaXMgaXRlbS4nO1xyXG4gICAgICAgIHJlcS5mYXZvcml0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHJlcS5maWVsZHMgPSBbXTtcclxuICAgICAgICByZXEubG9naW4gPSBudWxsO1xyXG4gICAgICAgIHJlcS5zZWN1cmVOb3RlID0gbnVsbDtcclxuICAgICAgICByZXEuY2FyZCA9IG51bGw7XHJcbiAgICAgICAgcmVxLmlkZW50aXR5ID0gbnVsbDtcclxuICAgICAgICByZXEucmVwcm9tcHQgPSBDaXBoZXJSZXByb21wdFR5cGUuTm9uZTtcclxuICAgICAgICByZXR1cm4gcmVxO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b1ZpZXcocmVxOiBDaXBoZXIsIHZpZXcgPSBuZXcgQ2lwaGVyVmlldygpKSB7XHJcbiAgICAgICAgdmlldy50eXBlID0gcmVxLnR5cGU7XHJcbiAgICAgICAgdmlldy5mb2xkZXJJZCA9IHJlcS5mb2xkZXJJZDtcclxuICAgICAgICBpZiAodmlldy5vcmdhbml6YXRpb25JZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZpZXcub3JnYW5pemF0aW9uSWQgPSByZXEub3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2aWV3LmNvbGxlY3Rpb25JZHMgfHwgcmVxLmNvbGxlY3Rpb25JZHMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2V0ID0gbmV3IFNldCgodmlldy5jb2xsZWN0aW9uSWRzID8/IFtdKS5jb25jYXQocmVxLmNvbGxlY3Rpb25JZHMgPz8gW10pKTtcclxuICAgICAgICAgICAgdmlldy5jb2xsZWN0aW9uSWRzID0gQXJyYXkuZnJvbShzZXQudmFsdWVzKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2aWV3Lm5hbWUgPSByZXEubmFtZTtcclxuICAgICAgICB2aWV3Lm5vdGVzID0gcmVxLm5vdGVzO1xyXG4gICAgICAgIHZpZXcuZmF2b3JpdGUgPSByZXEuZmF2b3JpdGU7XHJcbiAgICAgICAgdmlldy5yZXByb21wdCA9IHJlcS5yZXByb21wdCA/PyBDaXBoZXJSZXByb21wdFR5cGUuTm9uZTtcclxuXHJcbiAgICAgICAgaWYgKHJlcS5maWVsZHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2aWV3LmZpZWxkcyA9IHJlcS5maWVsZHMubWFwKGYgPT4gRmllbGQudG9WaWV3KGYpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAocmVxLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkxvZ2luOlxyXG4gICAgICAgICAgICAgICAgdmlldy5sb2dpbiA9IExvZ2luLnRvVmlldyhyZXEubG9naW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxyXG4gICAgICAgICAgICAgICAgdmlldy5zZWN1cmVOb3RlID0gU2VjdXJlTm90ZS50b1ZpZXcocmVxLnNlY3VyZU5vdGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5DYXJkOlxyXG4gICAgICAgICAgICAgICAgdmlldy5jYXJkID0gQ2FyZC50b1ZpZXcocmVxLmNhcmQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5JZGVudGl0eTpcclxuICAgICAgICAgICAgICAgIHZpZXcuaWRlbnRpdHkgPSBJZGVudGl0eS50b1ZpZXcocmVxLmlkZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvRG9tYWluKHJlcTogQ2lwaGVyLCBkb21haW4gPSBuZXcgQ2lwaGVyRG9tYWluKCkpIHtcclxuICAgICAgICBkb21haW4udHlwZSA9IHJlcS50eXBlO1xyXG4gICAgICAgIGRvbWFpbi5mb2xkZXJJZCA9IHJlcS5mb2xkZXJJZDtcclxuICAgICAgICBpZiAoZG9tYWluLm9yZ2FuaXphdGlvbklkID09IG51bGwpIHtcclxuICAgICAgICAgICAgZG9tYWluLm9yZ2FuaXphdGlvbklkID0gcmVxLm9yZ2FuaXphdGlvbklkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb21haW4ubmFtZSA9IHJlcS5uYW1lICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5uYW1lKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLm5vdGVzID0gcmVxLm5vdGVzICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5ub3RlcykgOiBudWxsO1xyXG4gICAgICAgIGRvbWFpbi5mYXZvcml0ZSA9IHJlcS5mYXZvcml0ZTtcclxuICAgICAgICBkb21haW4ucmVwcm9tcHQgPSByZXEucmVwcm9tcHQgPz8gQ2lwaGVyUmVwcm9tcHRUeXBlLk5vbmU7XHJcblxyXG4gICAgICAgIGlmIChyZXEuZmllbGRzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZG9tYWluLmZpZWxkcyA9IHJlcS5maWVsZHMubWFwKGYgPT4gRmllbGQudG9Eb21haW4oZikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoIChyZXEudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuTG9naW46XHJcbiAgICAgICAgICAgICAgICBkb21haW4ubG9naW4gPSBMb2dpbi50b0RvbWFpbihyZXEubG9naW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxyXG4gICAgICAgICAgICAgICAgZG9tYWluLnNlY3VyZU5vdGUgPSBTZWN1cmVOb3RlLnRvRG9tYWluKHJlcS5zZWN1cmVOb3RlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuQ2FyZDpcclxuICAgICAgICAgICAgICAgIGRvbWFpbi5jYXJkID0gQ2FyZC50b0RvbWFpbihyZXEuY2FyZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLklkZW50aXR5OlxyXG4gICAgICAgICAgICAgICAgZG9tYWluLmlkZW50aXR5ID0gSWRlbnRpdHkudG9Eb21haW4ocmVxLmlkZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICB0eXBlOiBDaXBoZXJUeXBlO1xyXG4gICAgZm9sZGVySWQ6IHN0cmluZztcclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXTtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG5vdGVzOiBzdHJpbmc7XHJcbiAgICBmYXZvcml0ZTogYm9vbGVhbjtcclxuICAgIGZpZWxkczogRmllbGRbXTtcclxuICAgIGxvZ2luOiBMb2dpbjtcclxuICAgIHNlY3VyZU5vdGU6IFNlY3VyZU5vdGU7XHJcbiAgICBjYXJkOiBDYXJkO1xyXG4gICAgaWRlbnRpdHk6IElkZW50aXR5O1xyXG4gICAgcmVwcm9tcHQ6IENpcGhlclJlcHJvbXB0VHlwZTtcclxuXHJcbiAgICAvLyBVc2UgYnVpbGQgbWV0aG9kIGluc3RlYWQgb2YgY3RvciBzbyB0aGF0IHdlIGNhbiBjb250cm9sIG9yZGVyIG9mIEpTT04gc3RyaW5naWZ5IGZvciBwcmV0dHkgcHJpbnRcclxuICAgIGJ1aWxkKG86IENpcGhlclZpZXcgfCBDaXBoZXJEb21haW4pIHtcclxuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gby5vcmdhbml6YXRpb25JZDtcclxuICAgICAgICB0aGlzLmZvbGRlcklkID0gby5mb2xkZXJJZDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBvLnR5cGU7XHJcbiAgICAgICAgdGhpcy5yZXByb21wdCA9IG8ucmVwcm9tcHQ7XHJcblxyXG4gICAgICAgIGlmIChvIGluc3RhbmNlb2YgQ2lwaGVyVmlldykge1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBvLm5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMubm90ZXMgPSBvLm5vdGVzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG8ubmFtZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLm5vdGVzID0gby5ub3Rlcz8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZSA9IG8uZmF2b3JpdGU7XHJcblxyXG4gICAgICAgIGlmIChvLmZpZWxkcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChvIGluc3RhbmNlb2YgQ2lwaGVyVmlldykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZHMgPSBvLmZpZWxkcy5tYXAoZiA9PiBuZXcgRmllbGQoZikpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZHMgPSBvLmZpZWxkcy5tYXAoZiA9PiBuZXcgRmllbGQoZikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKG8udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuTG9naW46XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luID0gbmV3IExvZ2luKG8ubG9naW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWN1cmVOb3RlID0gbmV3IFNlY3VyZU5vdGUoby5zZWN1cmVOb3RlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuQ2FyZDpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FyZCA9IG5ldyBDYXJkKG8uY2FyZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLklkZW50aXR5OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eSA9IG5ldyBJZGVudGl0eShvLmlkZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDaXBoZXIgfSBmcm9tICcuL2NpcGhlcic7XHJcblxyXG5pbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnLi4vdmlldy9jaXBoZXJWaWV3JztcclxuXHJcbmltcG9ydCB7IENpcGhlciBhcyBDaXBoZXJEb21haW4gfSBmcm9tICcuLi9kb21haW4vY2lwaGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDaXBoZXJXaXRoSWRzIGV4dGVuZHMgQ2lwaGVyIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXTtcclxuXHJcbiAgICAvLyBVc2UgYnVpbGQgbWV0aG9kIGluc3RlYWQgb2YgY3RvciBzbyB0aGF0IHdlIGNhbiBjb250cm9sIG9yZGVyIG9mIEpTT04gc3RyaW5naWZ5IGZvciBwcmV0dHkgcHJpbnRcclxuICAgIGJ1aWxkKG86IENpcGhlclZpZXcgfCBDaXBoZXJEb21haW4pIHtcclxuICAgICAgICB0aGlzLmlkID0gby5pZDtcclxuICAgICAgICBzdXBlci5idWlsZChvKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZHMgPSBvLmNvbGxlY3Rpb25JZHM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29sbGVjdGlvblZpZXcgfSBmcm9tICcuLi92aWV3L2NvbGxlY3Rpb25WaWV3JztcclxuXHJcbmltcG9ydCB7IENvbGxlY3Rpb24gYXMgQ29sbGVjdGlvbkRvbWFpbiB9IGZyb20gJy4uL2RvbWFpbi9jb2xsZWN0aW9uJztcclxuaW1wb3J0IHsgRW5jU3RyaW5nIH0gZnJvbSAnLi4vZG9tYWluL2VuY1N0cmluZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbiB7XHJcbiAgICBzdGF0aWMgdGVtcGxhdGUoKTogQ29sbGVjdGlvbiB7XHJcbiAgICAgICAgY29uc3QgcmVxID0gbmV3IENvbGxlY3Rpb24oKTtcclxuICAgICAgICByZXEub3JnYW5pemF0aW9uSWQgPSAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJztcclxuICAgICAgICByZXEubmFtZSA9ICdDb2xsZWN0aW9uIG5hbWUnO1xyXG4gICAgICAgIHJlcS5leHRlcm5hbElkID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gcmVxO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b1ZpZXcocmVxOiBDb2xsZWN0aW9uLCB2aWV3ID0gbmV3IENvbGxlY3Rpb25WaWV3KCkpIHtcclxuICAgICAgICB2aWV3Lm5hbWUgPSByZXEubmFtZTtcclxuICAgICAgICB2aWV3LmV4dGVybmFsSWQgPSByZXEuZXh0ZXJuYWxJZDtcclxuICAgICAgICBpZiAodmlldy5vcmdhbml6YXRpb25JZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZpZXcub3JnYW5pemF0aW9uSWQgPSByZXEub3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2aWV3O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b0RvbWFpbihyZXE6IENvbGxlY3Rpb24sIGRvbWFpbiA9IG5ldyBDb2xsZWN0aW9uRG9tYWluKCkpIHtcclxuICAgICAgICBkb21haW4ubmFtZSA9IHJlcS5uYW1lICE9IG51bGwgPyBuZXcgRW5jU3RyaW5nKHJlcS5uYW1lKSA6IG51bGw7XHJcbiAgICAgICAgZG9tYWluLmV4dGVybmFsSWQgPSByZXEuZXh0ZXJuYWxJZDtcclxuICAgICAgICBpZiAoZG9tYWluLm9yZ2FuaXphdGlvbklkID09IG51bGwpIHtcclxuICAgICAgICAgICAgZG9tYWluLm9yZ2FuaXphdGlvbklkID0gcmVxLm9yZ2FuaXphdGlvbklkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XHJcblxyXG4gICAgLy8gVXNlIGJ1aWxkIG1ldGhvZCBpbnN0ZWFkIG9mIGN0b3Igc28gdGhhdCB3ZSBjYW4gY29udHJvbCBvcmRlciBvZiBKU09OIHN0cmluZ2lmeSBmb3IgcHJldHR5IHByaW50XHJcbiAgICBidWlsZChvOiBDb2xsZWN0aW9uVmlldyB8IENvbGxlY3Rpb25Eb21haW4pIHtcclxuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gby5vcmdhbml6YXRpb25JZDtcclxuICAgICAgICBpZiAobyBpbnN0YW5jZW9mIENvbGxlY3Rpb25WaWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG8ubmFtZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBvLm5hbWU/LmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5leHRlcm5hbElkID0gby5leHRlcm5hbElkO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuL2NvbGxlY3Rpb24nO1xyXG5cclxuaW1wb3J0IHsgQ29sbGVjdGlvblZpZXcgfSBmcm9tICcuLi92aWV3L2NvbGxlY3Rpb25WaWV3JztcclxuXHJcbmltcG9ydCB7IENvbGxlY3Rpb24gYXMgQ29sbGVjdGlvbkRvbWFpbiB9IGZyb20gJy4uL2RvbWFpbi9jb2xsZWN0aW9uJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uV2l0aElkIGV4dGVuZHMgQ29sbGVjdGlvbiB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG5cclxuICAgIC8vIFVzZSBidWlsZCBtZXRob2QgaW5zdGVhZCBvZiBjdG9yIHNvIHRoYXQgd2UgY2FuIGNvbnRyb2wgb3JkZXIgb2YgSlNPTiBzdHJpbmdpZnkgZm9yIHByZXR0eSBwcmludFxyXG4gICAgYnVpbGQobzogQ29sbGVjdGlvblZpZXcgfCBDb2xsZWN0aW9uRG9tYWluKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IG8uaWQ7XHJcbiAgICAgICAgc3VwZXIuYnVpbGQobyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZXZlbnRUeXBlJztcclxuaW1wb3J0IHsgRXZlbnRWaWV3IH0gZnJvbSAnLi4vdmlldy9ldmVudFZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50IHtcclxuICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIGFwcEljb246IHN0cmluZztcclxuICAgIGFwcE5hbWU6IHN0cmluZztcclxuICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgdXNlck5hbWU6IHN0cmluZztcclxuICAgIHVzZXJFbWFpbDogc3RyaW5nO1xyXG4gICAgZGF0ZTogc3RyaW5nO1xyXG4gICAgaXA6IHN0cmluZztcclxuICAgIHR5cGU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihldmVudDogRXZlbnRWaWV3KSB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXZlbnQuaHVtYW5SZWFkYWJsZU1lc3NhZ2U7XHJcbiAgICAgICAgdGhpcy5hcHBJY29uID0gZXZlbnQuYXBwSWNvbjtcclxuICAgICAgICB0aGlzLmFwcE5hbWUgPSBldmVudC5hcHBOYW1lO1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gZXZlbnQudXNlcklkO1xyXG4gICAgICAgIHRoaXMudXNlck5hbWUgPSBldmVudC51c2VyTmFtZTtcclxuICAgICAgICB0aGlzLnVzZXJFbWFpbCA9IGV2ZW50LnVzZXJFbWFpbDtcclxuICAgICAgICB0aGlzLmRhdGUgPSBldmVudC5kYXRlO1xyXG4gICAgICAgIHRoaXMuaXAgPSBldmVudC5pcDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBFdmVudFR5cGVbZXZlbnQudHlwZV07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRm9sZGVyRGF0YSB9IGZyb20gJy4uL2RhdGEvZm9sZGVyRGF0YSc7XHJcblxyXG5pbXBvcnQgeyBGb2xkZXJWaWV3IH0gZnJvbSAnLi4vdmlldy9mb2xkZXJWaWV3JztcclxuXHJcbmltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcclxuaW1wb3J0IHsgRW5jU3RyaW5nIH0gZnJvbSAnLi9lbmNTdHJpbmcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZvbGRlciBleHRlbmRzIERvbWFpbiB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbmFtZTogRW5jU3RyaW5nO1xyXG4gICAgcmV2aXNpb25EYXRlOiBEYXRlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IEZvbGRlckRhdGEsIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYnVpbGREb21haW5Nb2RlbCh0aGlzLCBvYmosIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgWydpZCddKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSBvYmoucmV2aXNpb25EYXRlICE9IG51bGwgPyBuZXcgRGF0ZShvYmoucmV2aXNpb25EYXRlKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZGVjcnlwdCgpOiBQcm9taXNlPEZvbGRlclZpZXc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0T2JqKG5ldyBGb2xkZXJWaWV3KHRoaXMpLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgfSwgbnVsbCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRm9sZGVyVmlldyB9IGZyb20gJy4uL3ZpZXcvZm9sZGVyVmlldyc7XHJcblxyXG5pbXBvcnQgeyBFbmNTdHJpbmcgfSBmcm9tICcuLi9kb21haW4vZW5jU3RyaW5nJztcclxuaW1wb3J0IHsgRm9sZGVyIGFzIEZvbGRlckRvbWFpbiB9IGZyb20gJy4uL2RvbWFpbi9mb2xkZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZvbGRlciB7XHJcbiAgICBzdGF0aWMgdGVtcGxhdGUoKTogRm9sZGVyIHtcclxuICAgICAgICBjb25zdCByZXEgPSBuZXcgRm9sZGVyKCk7XHJcbiAgICAgICAgcmVxLm5hbWUgPSAnRm9sZGVyIG5hbWUnO1xyXG4gICAgICAgIHJldHVybiByZXE7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvVmlldyhyZXE6IEZvbGRlciwgdmlldyA9IG5ldyBGb2xkZXJWaWV3KCkpIHtcclxuICAgICAgICB2aWV3Lm5hbWUgPSByZXEubmFtZTtcclxuICAgICAgICByZXR1cm4gdmlldztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdG9Eb21haW4ocmVxOiBGb2xkZXIsIGRvbWFpbiA9IG5ldyBGb2xkZXJEb21haW4oKSkge1xyXG4gICAgICAgIGRvbWFpbi5uYW1lID0gcmVxLm5hbWUgIT0gbnVsbCA/IG5ldyBFbmNTdHJpbmcocmVxLm5hbWUpIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICAvLyBVc2UgYnVpbGQgbWV0aG9kIGluc3RlYWQgb2YgY3RvciBzbyB0aGF0IHdlIGNhbiBjb250cm9sIG9yZGVyIG9mIEpTT04gc3RyaW5naWZ5IGZvciBwcmV0dHkgcHJpbnRcclxuICAgIGJ1aWxkKG86IEZvbGRlclZpZXcgfCBGb2xkZXJEb21haW4pIHtcclxuICAgICAgICBpZiAobyBpbnN0YW5jZW9mIEZvbGRlclZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gby5uYW1lO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG8ubmFtZT8uZW5jcnlwdGVkU3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBGb2xkZXIgfSBmcm9tICcuL2ZvbGRlcic7XHJcblxyXG5pbXBvcnQgeyBGb2xkZXJWaWV3IH0gZnJvbSAnLi4vdmlldy9mb2xkZXJWaWV3JztcclxuXHJcbmltcG9ydCB7IEZvbGRlciBhcyBGb2xkZXJEb21haW4gfSBmcm9tICcuLi9kb21haW4vZm9sZGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGb2xkZXJXaXRoSWQgZXh0ZW5kcyBGb2xkZXIge1xyXG4gICAgaWQ6IHN0cmluZztcclxuXHJcbiAgICAvLyBVc2UgYnVpbGQgbWV0aG9kIGluc3RlYWQgb2YgY3RvciBzbyB0aGF0IHdlIGNhbiBjb250cm9sIG9yZGVyIG9mIEpTT04gc3RyaW5naWZ5IGZvciBwcmV0dHkgcHJpbnRcclxuICAgIGJ1aWxkKG86IEZvbGRlclZpZXcgfCBGb2xkZXJEb21haW4pIHtcclxuICAgICAgICB0aGlzLmlkID0gby5pZDtcclxuICAgICAgICBzdXBlci5idWlsZChvKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBwYXBhIGZyb20gJ3BhcGFwYXJzZSc7XHJcblxyXG5pbXBvcnQgeyBDaXBoZXJUeXBlIH0gZnJvbSAnLi4vZW51bXMvY2lwaGVyVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2lwaGVyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jaXBoZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY3J5cHRvLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFeHBvcnRTZXJ2aWNlIGFzIEV4cG9ydFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9leHBvcnQuc2VydmljZSc7XHJcbmltcG9ydCB7IEZvbGRlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvZm9sZGVyLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2NpcGhlclZpZXcnO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2NvbGxlY3Rpb25WaWV3JztcclxuaW1wb3J0IHsgRm9sZGVyVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2ZvbGRlclZpZXcnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9jaXBoZXInO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9jb2xsZWN0aW9uJztcclxuaW1wb3J0IHsgRm9sZGVyIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9mb2xkZXInO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL2NpcGhlckRhdGEnO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL2NvbGxlY3Rpb25EYXRhJztcclxuaW1wb3J0IHsgQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9jb2xsZWN0aW9uUmVzcG9uc2UnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyV2l0aElkcyBhcyBDaXBoZXJFeHBvcnQgfSBmcm9tICcuLi9tb2RlbHMvZXhwb3J0L2NpcGhlcldpdGhJZHMnO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uV2l0aElkIGFzIENvbGxlY3Rpb25FeHBvcnQgfSBmcm9tICcuLi9tb2RlbHMvZXhwb3J0L2NvbGxlY3Rpb25XaXRoSWQnO1xyXG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4uL21vZGVscy9leHBvcnQvZXZlbnQnO1xyXG5pbXBvcnQgeyBGb2xkZXJXaXRoSWQgYXMgRm9sZGVyRXhwb3J0IH0gZnJvbSAnLi4vbW9kZWxzL2V4cG9ydC9mb2xkZXJXaXRoSWQnO1xyXG5pbXBvcnQgeyBFdmVudFZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9ldmVudFZpZXcnO1xyXG5cclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFeHBvcnRTZXJ2aWNlIGltcGxlbWVudHMgRXhwb3J0U2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9sZGVyU2VydmljZTogRm9sZGVyU2VydmljZSwgcHJpdmF0ZSBjaXBoZXJTZXJ2aWNlOiBDaXBoZXJTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSwgcHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlKSB7IH1cclxuXHJcbiAgICBhc3luYyBnZXRFeHBvcnQoZm9ybWF0OiAnY3N2JyB8ICdqc29uJyB8ICdlbmNyeXB0ZWRfanNvbicgPSAnY3N2Jyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2VuY3J5cHRlZF9qc29uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRFbmNyeXB0ZWRFeHBvcnQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREZWNyeXB0ZWRFeHBvcnQoZm9ybWF0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0T3JnYW5pemF0aW9uRXhwb3J0KG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsXHJcbiAgICAgICAgZm9ybWF0OiAnY3N2JyB8ICdqc29uJyB8ICdlbmNyeXB0ZWRfanNvbicgPSAnY3N2Jyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2VuY3J5cHRlZF9qc29uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRPcmdhbml6YXRpb25FbmNyeXB0ZWRFeHBvcnQob3JnYW5pemF0aW9uSWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9yZ2FuaXphdGlvbkRlY3J5cHRlZEV4cG9ydChvcmdhbml6YXRpb25JZCwgZm9ybWF0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0RXZlbnRFeHBvcnQoZXZlbnRzOiBFdmVudFZpZXdbXSk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIHBhcGEudW5wYXJzZShldmVudHMubWFwKGUgPT4gbmV3IEV2ZW50KGUpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmlsZU5hbWUocHJlZml4OiBzdHJpbmcgPSBudWxsLCBleHRlbnNpb246IHN0cmluZyA9ICdjc3YnKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPVxyXG4gICAgICAgICAgICBub3cuZ2V0RnVsbFllYXIoKSArICcnICsgdGhpcy5wYWROdW1iZXIobm93LmdldE1vbnRoKCkgKyAxLCAyKSArICcnICsgdGhpcy5wYWROdW1iZXIobm93LmdldERhdGUoKSwgMikgK1xyXG4gICAgICAgICAgICB0aGlzLnBhZE51bWJlcihub3cuZ2V0SG91cnMoKSwgMikgKyAnJyArIHRoaXMucGFkTnVtYmVyKG5vdy5nZXRNaW51dGVzKCksIDIpICtcclxuICAgICAgICAgICAgdGhpcy5wYWROdW1iZXIobm93LmdldFNlY29uZHMoKSwgMik7XHJcblxyXG4gICAgICAgIHJldHVybiAnYml0d2FyZGVuJyArIChwcmVmaXggPyAoJ18nICsgcHJlZml4KSA6ICcnKSArICdfZXhwb3J0XycgKyBkYXRlU3RyaW5nICsgJy4nICsgZXh0ZW5zaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0RGVjcnlwdGVkRXhwb3J0KGZvcm1hdDogJ2pzb24nIHwgJ2NzdicpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGxldCBkZWNGb2xkZXJzOiBGb2xkZXJWaWV3W10gPSBbXTtcclxuICAgICAgICBsZXQgZGVjQ2lwaGVyczogQ2lwaGVyVmlld1tdID0gW107XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcclxuXHJcbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmZvbGRlclNlcnZpY2UuZ2V0QWxsRGVjcnlwdGVkKCkudGhlbihmb2xkZXJzID0+IHtcclxuICAgICAgICAgICAgZGVjRm9sZGVycyA9IGZvbGRlcnM7XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWQoKS50aGVuKGNpcGhlcnMgPT4ge1xyXG4gICAgICAgICAgICBkZWNDaXBoZXJzID0gY2lwaGVycy5maWx0ZXIoZiA9PiBmLmRlbGV0ZWREYXRlID09IG51bGwpO1xyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG5cclxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnY3N2Jykge1xyXG4gICAgICAgICAgICBjb25zdCBmb2xkZXJzTWFwID0gbmV3IE1hcDxzdHJpbmcsIEZvbGRlclZpZXc+KCk7XHJcbiAgICAgICAgICAgIGRlY0ZvbGRlcnMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChmLmlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb2xkZXJzTWFwLnNldChmLmlkLCBmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBvcnRDaXBoZXJzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgICAgICBkZWNDaXBoZXJzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGV4cG9ydCBsb2dpbnMgYW5kIHNlY3VyZSBub3Rlc1xyXG4gICAgICAgICAgICAgICAgaWYgKGMudHlwZSAhPT0gQ2lwaGVyVHlwZS5Mb2dpbiAmJiBjLnR5cGUgIT09IENpcGhlclR5cGUuU2VjdXJlTm90ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjLm9yZ2FuaXphdGlvbklkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2lwaGVyOiBhbnkgPSB7fTtcclxuICAgICAgICAgICAgICAgIGNpcGhlci5mb2xkZXIgPSBjLmZvbGRlcklkICE9IG51bGwgJiYgZm9sZGVyc01hcC5oYXMoYy5mb2xkZXJJZCkgP1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbGRlcnNNYXAuZ2V0KGMuZm9sZGVySWQpLm5hbWUgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgY2lwaGVyLmZhdm9yaXRlID0gYy5mYXZvcml0ZSA/IDEgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZENvbW1vbkNpcGhlcihjaXBoZXIsIGMpO1xyXG4gICAgICAgICAgICAgICAgZXhwb3J0Q2lwaGVycy5wdXNoKGNpcGhlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBhcGEudW5wYXJzZShleHBvcnRDaXBoZXJzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBqc29uRG9jOiBhbnkgPSB7XHJcbiAgICAgICAgICAgICAgICBlbmNyeXB0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZm9sZGVyczogW10sXHJcbiAgICAgICAgICAgICAgICBpdGVtczogW10sXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBkZWNGb2xkZXJzLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZi5pZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9sZGVyID0gbmV3IEZvbGRlckV4cG9ydCgpO1xyXG4gICAgICAgICAgICAgICAgZm9sZGVyLmJ1aWxkKGYpO1xyXG4gICAgICAgICAgICAgICAganNvbkRvYy5mb2xkZXJzLnB1c2goZm9sZGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBkZWNDaXBoZXJzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYy5vcmdhbml6YXRpb25JZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gbmV3IENpcGhlckV4cG9ydCgpO1xyXG4gICAgICAgICAgICAgICAgY2lwaGVyLmJ1aWxkKGMpO1xyXG4gICAgICAgICAgICAgICAgY2lwaGVyLmNvbGxlY3Rpb25JZHMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAganNvbkRvYy5pdGVtcy5wdXNoKGNpcGhlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb25Eb2MsIG51bGwsICcgICcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldEVuY3J5cHRlZEV4cG9ydCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGxldCBmb2xkZXJzOiBGb2xkZXJbXSA9IFtdO1xyXG4gICAgICAgIGxldCBjaXBoZXJzOiBDaXBoZXJbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XHJcblxyXG4gICAgICAgIHByb21pc2VzLnB1c2godGhpcy5mb2xkZXJTZXJ2aWNlLmdldEFsbCgpLnRoZW4oZiA9PiB7XHJcbiAgICAgICAgICAgIGZvbGRlcnMgPSBmO1xyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmNpcGhlclNlcnZpY2UuZ2V0QWxsKCkudGhlbihjID0+IHtcclxuICAgICAgICAgICAgY2lwaGVycyA9IGMuZmlsdGVyKGYgPT4gZi5kZWxldGVkRGF0ZSA9PSBudWxsKTtcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuXHJcbiAgICAgICAgY29uc3QgZW5jS2V5VmFsaWRhdGlvbiA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KFV0aWxzLm5ld0d1aWQoKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGpzb25Eb2M6IGFueSA9IHtcclxuICAgICAgICAgICAgZW5jcnlwdGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBlbmNLZXlWYWxpZGF0aW9uX0RPX05PVF9FRElUOiBlbmNLZXlWYWxpZGF0aW9uLmVuY3J5cHRlZFN0cmluZyxcclxuICAgICAgICAgICAgZm9sZGVyczogW10sXHJcbiAgICAgICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmb2xkZXJzLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmLmlkID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBmb2xkZXIgPSBuZXcgRm9sZGVyRXhwb3J0KCk7XHJcbiAgICAgICAgICAgIGZvbGRlci5idWlsZChmKTtcclxuICAgICAgICAgICAganNvbkRvYy5mb2xkZXJzLnB1c2goZm9sZGVyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2lwaGVycy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYy5vcmdhbml6YXRpb25JZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gbmV3IENpcGhlckV4cG9ydCgpO1xyXG4gICAgICAgICAgICBjaXBoZXIuYnVpbGQoYyk7XHJcbiAgICAgICAgICAgIGNpcGhlci5jb2xsZWN0aW9uSWRzID0gbnVsbDtcclxuICAgICAgICAgICAganNvbkRvYy5pdGVtcy5wdXNoKGNpcGhlcik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShqc29uRG9jLCBudWxsLCAnICAnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldE9yZ2FuaXphdGlvbkRlY3J5cHRlZEV4cG9ydChvcmdhbml6YXRpb25JZDogc3RyaW5nLCBmb3JtYXQ6ICdqc29uJyB8ICdjc3YnKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCBkZWNDb2xsZWN0aW9uczogQ29sbGVjdGlvblZpZXdbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGRlY0NpcGhlcnM6IENpcGhlclZpZXdbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XHJcblxyXG4gICAgICAgIHByb21pc2VzLnB1c2godGhpcy5hcGlTZXJ2aWNlLmdldENvbGxlY3Rpb25zKG9yZ2FuaXphdGlvbklkKS50aGVuKGNvbGxlY3Rpb25zID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvblByb21pc2VzOiBhbnkgPSBbXTtcclxuICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb25zICE9IG51bGwgJiYgY29sbGVjdGlvbnMuZGF0YSAhPSBudWxsICYmIGNvbGxlY3Rpb25zLmRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbnMuZGF0YS5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbihuZXcgQ29sbGVjdGlvbkRhdGEoYyBhcyBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvblByb21pc2VzLnB1c2goY29sbGVjdGlvbi5kZWNyeXB0KCkudGhlbihkZWNDb2wgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNDb2xsZWN0aW9ucy5wdXNoKGRlY0NvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGNvbGxlY3Rpb25Qcm9taXNlcyk7XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuYXBpU2VydmljZS5nZXRDaXBoZXJzT3JnYW5pemF0aW9uKG9yZ2FuaXphdGlvbklkKS50aGVuKGNpcGhlcnMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjaXBoZXJQcm9taXNlczogYW55ID0gW107XHJcbiAgICAgICAgICAgIGlmIChjaXBoZXJzICE9IG51bGwgJiYgY2lwaGVycy5kYXRhICE9IG51bGwgJiYgY2lwaGVycy5kYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNpcGhlcnMuZGF0YS5maWx0ZXIoYyA9PiBjLmRlbGV0ZWREYXRlID09PSBudWxsKS5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNpcGhlciA9IG5ldyBDaXBoZXIobmV3IENpcGhlckRhdGEoYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlclByb21pc2VzLnB1c2goY2lwaGVyLmRlY3J5cHQoKS50aGVuKGRlY0NpcGhlciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY0NpcGhlcnMucHVzaChkZWNDaXBoZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChjaXBoZXJQcm9taXNlcyk7XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcblxyXG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdjc3YnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb25zTWFwID0gbmV3IE1hcDxzdHJpbmcsIENvbGxlY3Rpb25WaWV3PigpO1xyXG4gICAgICAgICAgICBkZWNDb2xsZWN0aW9ucy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbnNNYXAuc2V0KGMuaWQsIGMpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cG9ydENpcGhlcnM6IGFueVtdID0gW107XHJcbiAgICAgICAgICAgIGRlY0NpcGhlcnMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgZXhwb3J0IGxvZ2lucyBhbmQgc2VjdXJlIG5vdGVzXHJcbiAgICAgICAgICAgICAgICBpZiAoYy50eXBlICE9PSBDaXBoZXJUeXBlLkxvZ2luICYmIGMudHlwZSAhPT0gQ2lwaGVyVHlwZS5TZWN1cmVOb3RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNpcGhlcjogYW55ID0ge307XHJcbiAgICAgICAgICAgICAgICBjaXBoZXIuY29sbGVjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmIChjLmNvbGxlY3Rpb25JZHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5jb2xsZWN0aW9ucyA9IGMuY29sbGVjdGlvbklkcy5maWx0ZXIoaWQgPT4gY29sbGVjdGlvbnNNYXAuaGFzKGlkKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChpZCA9PiBjb2xsZWN0aW9uc01hcC5nZXQoaWQpLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZENvbW1vbkNpcGhlcihjaXBoZXIsIGMpO1xyXG4gICAgICAgICAgICAgICAgZXhwb3J0Q2lwaGVycy5wdXNoKGNpcGhlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBhcGEudW5wYXJzZShleHBvcnRDaXBoZXJzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBqc29uRG9jOiBhbnkgPSB7XHJcbiAgICAgICAgICAgICAgICBlbmNyeXB0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbnM6IFtdLFxyXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZGVjQ29sbGVjdGlvbnMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbkV4cG9ydCgpO1xyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbi5idWlsZChjKTtcclxuICAgICAgICAgICAgICAgIGpzb25Eb2MuY29sbGVjdGlvbnMucHVzaChjb2xsZWN0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBkZWNDaXBoZXJzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBuZXcgQ2lwaGVyRXhwb3J0KCk7XHJcbiAgICAgICAgICAgICAgICBjaXBoZXIuYnVpbGQoYyk7XHJcbiAgICAgICAgICAgICAgICBqc29uRG9jLml0ZW1zLnB1c2goY2lwaGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShqc29uRG9jLCBudWxsLCAnICAnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRPcmdhbml6YXRpb25FbmNyeXB0ZWRFeHBvcnQob3JnYW5pemF0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnM6IENvbGxlY3Rpb25bXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGNpcGhlcnM6IENpcGhlcltdID0gW107XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcclxuXHJcbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmFwaVNlcnZpY2UuZ2V0Q29sbGVjdGlvbnMob3JnYW5pemF0aW9uSWQpLnRoZW4oYyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb25Qcm9taXNlczogYW55ID0gW107XHJcbiAgICAgICAgICAgIGlmIChjICE9IG51bGwgJiYgYy5kYXRhICE9IG51bGwgJiYgYy5kYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGMuZGF0YS5mb3JFYWNoKHIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbihuZXcgQ29sbGVjdGlvbkRhdGEociBhcyBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbnMucHVzaChjb2xsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChjb2xsZWN0aW9uUHJvbWlzZXMpO1xyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmFwaVNlcnZpY2UuZ2V0Q2lwaGVyc09yZ2FuaXphdGlvbihvcmdhbml6YXRpb25JZCkudGhlbihjID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2lwaGVyUHJvbWlzZXM6IGFueSA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoYyAhPSBudWxsICYmIGMuZGF0YSAhPSBudWxsICYmIGMuZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjLmRhdGEuZmlsdGVyKGl0ZW0gPT4gaXRlbS5kZWxldGVkRGF0ZSA9PT0gbnVsbCkuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBuZXcgQ2lwaGVyKG5ldyBDaXBoZXJEYXRhKGl0ZW0pKTtcclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXJzLnB1c2goY2lwaGVyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChjaXBoZXJQcm9taXNlcyk7XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcblxyXG4gICAgICAgIGNvbnN0IG9yZ0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5nZXRPcmdLZXkob3JnYW5pemF0aW9uSWQpO1xyXG4gICAgICAgIGNvbnN0IGVuY0tleVZhbGlkYXRpb24gPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChVdGlscy5uZXdHdWlkKCksIG9yZ0tleSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGpzb25Eb2M6IGFueSA9IHtcclxuICAgICAgICAgICAgZW5jcnlwdGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBlbmNLZXlWYWxpZGF0aW9uX0RPX05PVF9FRElUOiBlbmNLZXlWYWxpZGF0aW9uLmVuY3J5cHRlZFN0cmluZyxcclxuICAgICAgICAgICAgY29sbGVjdGlvbnM6IFtdLFxyXG4gICAgICAgICAgICBpdGVtczogW10sXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29sbGVjdGlvbnMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uRXhwb3J0KCk7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uYnVpbGQoYyk7XHJcbiAgICAgICAgICAgIGpzb25Eb2MuY29sbGVjdGlvbnMucHVzaChjb2xsZWN0aW9uKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2lwaGVycy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBuZXcgQ2lwaGVyRXhwb3J0KCk7XHJcbiAgICAgICAgICAgIGNpcGhlci5idWlsZChjKTtcclxuICAgICAgICAgICAganNvbkRvYy5pdGVtcy5wdXNoKGNpcGhlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb25Eb2MsIG51bGwsICcgICcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcGFkTnVtYmVyKG51bTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBwYWRDaGFyYWN0ZXI6IHN0cmluZyA9ICcwJyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgbnVtU3RyaW5nID0gbnVtLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgcmV0dXJuIG51bVN0cmluZy5sZW5ndGggPj0gd2lkdGggPyBudW1TdHJpbmcgOlxyXG4gICAgICAgICAgICBuZXcgQXJyYXkod2lkdGggLSBudW1TdHJpbmcubGVuZ3RoICsgMSkuam9pbihwYWRDaGFyYWN0ZXIpICsgbnVtU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYnVpbGRDb21tb25DaXBoZXIoY2lwaGVyOiBhbnksIGM6IENpcGhlclZpZXcpIHtcclxuICAgICAgICBjaXBoZXIudHlwZSA9IG51bGw7XHJcbiAgICAgICAgY2lwaGVyLm5hbWUgPSBjLm5hbWU7XHJcbiAgICAgICAgY2lwaGVyLm5vdGVzID0gYy5ub3RlcztcclxuICAgICAgICBjaXBoZXIuZmllbGRzID0gbnVsbDtcclxuICAgICAgICBjaXBoZXIucmVwcm9tcHQgPSBjLnJlcHJvbXB0O1xyXG4gICAgICAgIC8vIExvZ2luIHByb3BzXHJcbiAgICAgICAgY2lwaGVyLmxvZ2luX3VyaSA9IG51bGw7XHJcbiAgICAgICAgY2lwaGVyLmxvZ2luX3VzZXJuYW1lID0gbnVsbDtcclxuICAgICAgICBjaXBoZXIubG9naW5fcGFzc3dvcmQgPSBudWxsO1xyXG4gICAgICAgIGNpcGhlci5sb2dpbl90b3RwID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKGMuZmllbGRzKSB7XHJcbiAgICAgICAgICAgIGMuZmllbGRzLmZvckVhY2goKGY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjaXBoZXIuZmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmZpZWxkcyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuZmllbGRzICs9ICdcXG4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNpcGhlci5maWVsZHMgKz0gKChmLm5hbWUgfHwgJycpICsgJzogJyArIGYudmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoYy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5Mb2dpbjpcclxuICAgICAgICAgICAgICAgIGNpcGhlci50eXBlID0gJ2xvZ2luJztcclxuICAgICAgICAgICAgICAgIGNpcGhlci5sb2dpbl91c2VybmFtZSA9IGMubG9naW4udXNlcm5hbWU7XHJcbiAgICAgICAgICAgICAgICBjaXBoZXIubG9naW5fcGFzc3dvcmQgPSBjLmxvZ2luLnBhc3N3b3JkO1xyXG4gICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luX3RvdHAgPSBjLmxvZ2luLnRvdHA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGMubG9naW4udXJpcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5sb2dpbl91cmkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjLmxvZ2luLnVyaXMuZm9yRWFjaCh1ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luX3VyaS5wdXNoKHUudXJpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuU2VjdXJlTm90ZTpcclxuICAgICAgICAgICAgICAgIGNpcGhlci50eXBlID0gJ25vdGUnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2lwaGVyO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBlbnVtIEZpbGVVcGxvYWRUeXBlIHtcclxuICAgIERpcmVjdCA9IDAsXHJcbiAgICBBenVyZSA9IDEsXHJcbn1cclxuIiwiaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgRW5jQXJyYXlCdWZmZXIgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2VuY0FycmF5QnVmZmVyJztcclxuXHJcbmNvbnN0IE1BWF9TSU5HTEVfQkxPQl9VUExPQURfU0laRSA9IDI1NiAqIDEwMjQgKiAxMDI0OyAvLyAyNTYgTWlCXHJcbmNvbnN0IE1BWF9CTE9DS1NfUEVSX0JMT0IgPSA1MDAwMDtcclxuXHJcbmV4cG9ydCBjbGFzcyBBenVyZUZpbGVVcGxvYWRTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkgeyB9XHJcblxyXG4gICAgYXN5bmMgdXBsb2FkKHVybDogc3RyaW5nLCBkYXRhOiBFbmNBcnJheUJ1ZmZlciwgcmVuZXdhbENhbGxiYWNrOiAoKSA9PiBQcm9taXNlPHN0cmluZz4pIHtcclxuICAgICAgICBpZiAoZGF0YS5idWZmZXIuYnl0ZUxlbmd0aCA8PSBNQVhfU0lOR0xFX0JMT0JfVVBMT0FEX1NJWkUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYXp1cmVVcGxvYWRCbG9iKHVybCwgZGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYXp1cmVVcGxvYWRCbG9ja3ModXJsLCBkYXRhLCByZW5ld2FsQ2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgYXN5bmMgYXp1cmVVcGxvYWRCbG9iKHVybDogc3RyaW5nLCBkYXRhOiBFbmNBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIGNvbnN0IHVybE9iamVjdCA9IFV0aWxzLmdldFVybCh1cmwpO1xyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICd4LW1zLWRhdGUnOiBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKCksXHJcbiAgICAgICAgICAgICd4LW1zLXZlcnNpb24nOiB1cmxPYmplY3Quc2VhcmNoUGFyYW1zLmdldCgnc3YnKSxcclxuICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogZGF0YS5idWZmZXIuYnl0ZUxlbmd0aC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAneC1tcy1ibG9iLXR5cGUnOiAnQmxvY2tCbG9iJyxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xyXG4gICAgICAgICAgICBib2R5OiBkYXRhLmJ1ZmZlcixcclxuICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJsb2JSZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xyXG5cclxuICAgICAgICBpZiAoYmxvYlJlc3BvbnNlLnN0YXR1cyAhPT0gMjAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBBenVyZSBibG9iOiAke2Jsb2JSZXNwb25zZS5zdGF0dXN9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBhc3luYyBhenVyZVVwbG9hZEJsb2Nrcyh1cmw6IHN0cmluZywgZGF0YTogRW5jQXJyYXlCdWZmZXIsIHJlbmV3YWxDYWxsYmFjazogKCkgPT4gUHJvbWlzZTxzdHJpbmc+KSB7XHJcbiAgICAgICAgY29uc3QgYmFzZVVybCA9IFV0aWxzLmdldFVybCh1cmwpO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrU2l6ZSA9IHRoaXMuZ2V0TWF4QmxvY2tTaXplKGJhc2VVcmwuc2VhcmNoUGFyYW1zLmdldCgnc3YnKSk7XHJcbiAgICAgICAgbGV0IGJsb2NrSW5kZXggPSAwO1xyXG4gICAgICAgIGNvbnN0IG51bUJsb2NrcyA9IE1hdGguY2VpbChkYXRhLmJ1ZmZlci5ieXRlTGVuZ3RoIC8gYmxvY2tTaXplKTtcclxuICAgICAgICBjb25zdCBibG9ja3NTdGFnZWQ6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgIGlmIChudW1CbG9ja3MgPiBNQVhfQkxPQ0tTX1BFUl9CTE9CKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHVwbG9hZCBmaWxlLCBleGNlZWRzIG1heGltdW0gc2l6ZSBvZiAke2Jsb2NrU2l6ZSAqIE1BWF9CTE9DS1NfUEVSX0JMT0J9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB3aGlsZSAoYmxvY2tJbmRleCA8IG51bUJsb2Nrcykge1xyXG4gICAgICAgICAgICAgICAgdXJsID0gYXdhaXQgdGhpcy5yZW5ld1VybElmTmVjZXNzYXJ5KHVybCwgcmVuZXdhbENhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrVXJsID0gVXRpbHMuZ2V0VXJsKHVybCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBibG9ja0lkID0gdGhpcy5lbmNvZGVkQmxvY2tJZChibG9ja0luZGV4KTtcclxuICAgICAgICAgICAgICAgIGJsb2NrVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2NvbXAnLCAnYmxvY2snKTtcclxuICAgICAgICAgICAgICAgIGJsb2NrVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2Jsb2NraWQnLCBibG9ja0lkKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gYmxvY2tJbmRleCAqIGJsb2NrU2l6ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrRGF0YSA9IGRhdGEuYnVmZmVyLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJsb2NrU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBibG9ja0hlYWRlcnMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3gtbXMtZGF0ZSc6IG5ldyBEYXRlKCkudG9VVENTdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICAneC1tcy12ZXJzaW9uJzogYmxvY2tVcmwuc2VhcmNoUGFyYW1zLmdldCgnc3YnKSxcclxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBibG9ja0RhdGEuYnl0ZUxlbmd0aC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2tSZXF1ZXN0ID0gbmV3IFJlcXVlc3QoYmxvY2tVcmwudG9TdHJpbmcoKSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGJsb2NrRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBjYWNoZTogJ25vLXN0b3JlJyxcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGJsb2NrSGVhZGVycyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChibG9ja1JlcXVlc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChibG9ja1Jlc3BvbnNlLnN0YXR1cyAhPT0gMjAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBVbnN1Y2Nlc3NmdWwgYmxvY2sgUFVULiBSZWNlaXZlZCBzdGF0dXMgJHtibG9ja1Jlc3BvbnNlLnN0YXR1c31gO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihtZXNzYWdlICsgJ1xcbicgKyBhd2FpdCBibG9ja1Jlc3BvbnNlLmpzb24oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJsb2Nrc1N0YWdlZC5wdXNoKGJsb2NrSWQpO1xyXG4gICAgICAgICAgICAgICAgYmxvY2tJbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1cmwgPSBhd2FpdCB0aGlzLnJlbmV3VXJsSWZOZWNlc3NhcnkodXJsLCByZW5ld2FsQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICBjb25zdCBibG9ja0xpc3RVcmwgPSBVdGlscy5nZXRVcmwodXJsKTtcclxuICAgICAgICAgICAgY29uc3QgYmxvY2tMaXN0WG1sID0gdGhpcy5ibG9ja0xpc3RYbWwoYmxvY2tzU3RhZ2VkKTtcclxuICAgICAgICAgICAgYmxvY2tMaXN0VXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2NvbXAnLCAnYmxvY2tsaXN0Jyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICAgICAneC1tcy1kYXRlJzogbmV3IERhdGUoKS50b1VUQ1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgJ3gtbXMtdmVyc2lvbic6IGJsb2NrTGlzdFVybC5zZWFyY2hQYXJhbXMuZ2V0KCdzdicpLFxyXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYmxvY2tMaXN0WG1sLmxlbmd0aC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdChibG9ja0xpc3RVcmwudG9TdHJpbmcoKSwge1xyXG4gICAgICAgICAgICAgICAgYm9keTogYmxvY2tMaXN0WG1sLFxyXG4gICAgICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYFVuc3VjY2Vzc2Z1bCBibG9jayBsaXN0IFBVVC4gUmVjZWl2ZWQgc3RhdHVzICR7cmVzcG9uc2Uuc3RhdHVzfWA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IobWVzc2FnZSArICdcXG4nICsgYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyByZW5ld1VybElmTmVjZXNzYXJ5KHVybDogc3RyaW5nLCByZW5ld2FsQ2FsbGJhY2s6ICgpID0+IFByb21pc2U8c3RyaW5nPik6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgdXJsT2JqZWN0ID0gVXRpbHMuZ2V0VXJsKHVybCk7XHJcbiAgICAgICAgY29uc3QgZXhwaXJ5ID0gbmV3IERhdGUodXJsT2JqZWN0LnNlYXJjaFBhcmFtcy5nZXQoJ3NlJykgPz8gJycpO1xyXG5cclxuICAgICAgICBpZiAoaXNOYU4oZXhwaXJ5LmdldFRpbWUoKSkpIHtcclxuICAgICAgICAgICAgZXhwaXJ5LnNldFRpbWUoRGF0ZS5ub3coKSArIDM2MDAwMDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV4cGlyeS5nZXRUaW1lKCkgPCBEYXRlLm5vdygpICsgMTAwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcmVuZXdhbENhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBlbmNvZGVkQmxvY2tJZChibG9ja0luZGV4OiBudW1iZXIpIHtcclxuICAgICAgICAvLyBFbmNvZGVkIGJsb2NrSWQgbWF4IHNpemUgaXMgNjQsIHNvIHByZS1lbmNvZGluZyBtYXggc2l6ZSBpcyA0OFxyXG4gICAgICAgIGNvbnN0IHV0ZkJsb2NrSWQgPSAoJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcgKyBibG9ja0luZGV4LnRvU3RyaW5nKCkpLnNsaWNlKC00OCk7XHJcbiAgICAgICAgcmV0dXJuIFV0aWxzLmZyb21VdGY4VG9CNjQodXRmQmxvY2tJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBibG9ja0xpc3RYbWwoYmxvY2tJZExpc3Q6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgbGV0IHhtbCA9ICc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJ1dGYtOFwiPz48QmxvY2tMaXN0Pic7XHJcbiAgICAgICAgYmxvY2tJZExpc3QuZm9yRWFjaChibG9ja0lkID0+IHtcclxuICAgICAgICAgICAgeG1sICs9IGA8TGF0ZXN0PiR7YmxvY2tJZH08L0xhdGVzdD5gO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHhtbCArPSAnPC9CbG9ja0xpc3Q+JztcclxuICAgICAgICByZXR1cm4geG1sO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TWF4QmxvY2tTaXplKHZlcnNpb246IHN0cmluZykge1xyXG4gICAgICAgIGlmIChWZXJzaW9uLmNvbXBhcmUodmVyc2lvbiwgJzIwMTktMTItMTInKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiA0MDAwICogMTAyNCAqIDEwMjQ7IC8vIDQwMDAgTWlCXHJcbiAgICAgICAgfSBlbHNlIGlmIChWZXJzaW9uLmNvbXBhcmUodmVyc2lvbiwgJzIwMTYtMDUtMzEnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxMDAgKiAxMDI0ICogMTAyNDsgLy8gMTAwIE1pQlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiA0ICogMTAyNCAqIDEwMjQ7IC8vIDQgTWlCXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBWZXJzaW9uIHtcclxuICAgIC8qKlxyXG4gICAgICogQ29tcGFyZXMgdHdvIEF6dXJlIFZlcnNpb25zIGFnYWluc3QgZWFjaCBvdGhlclxyXG4gICAgICogQHBhcmFtIGEgVmVyc2lvbiB0byBjb21wYXJlXHJcbiAgICAgKiBAcGFyYW0gYiBWZXJzaW9uIHRvIGNvbXBhcmVcclxuICAgICAqIEByZXR1cm5zIGEgbnVtYmVyIGxlc3MgdGhhbiB6ZXJvIGlmIGIgaXMgbmV3ZXIgdGhhbiBhLCAwIGlmIGVxdWFsLFxyXG4gICAgICogYW5kIGdyZWF0ZXIgdGhhbiB6ZXJvIGlmIGEgaXMgbmV3ZXIgdGhhbiBiXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjb21wYXJlKGE6IFJlcXVpcmVkPFZlcnNpb24+IHwgc3RyaW5nLCBiOiBSZXF1aXJlZDxWZXJzaW9uPiB8IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgKGEpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBhID0gbmV3IFZlcnNpb24oYSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIChiKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYiA9IG5ldyBWZXJzaW9uKGIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGEueWVhciAhPT0gYi55ZWFyID8gYS55ZWFyIC0gYi55ZWFyIDpcclxuICAgICAgICAgICAgYS5tb250aCAhPT0gYi5tb250aCA/IGEubW9udGggLSBiLm1vbnRoIDpcclxuICAgICAgICAgICAgICAgIGEuZGF5ICE9PSBiLmRheSA/IGEuZGF5IC0gYi5kYXkgOlxyXG4gICAgICAgICAgICAgICAgICAgIDA7XHJcbiAgICB9XHJcbiAgICB5ZWFyID0gMDtcclxuICAgIG1vbnRoID0gMDtcclxuICAgIGRheSA9IDA7XHJcblxyXG4gICAgY29uc3RydWN0b3IodmVyc2lvbjogc3RyaW5nKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSB2ZXJzaW9uLnNwbGl0KCctJykubWFwKHYgPT4gTnVtYmVyLnBhcnNlSW50KHYsIDEwKSk7XHJcbiAgICAgICAgICAgIHRoaXMueWVhciA9IHBhcnRzWzBdO1xyXG4gICAgICAgICAgICB0aGlzLm1vbnRoID0gcGFydHNbMV07XHJcbiAgICAgICAgICAgIHRoaXMuZGF5ID0gcGFydHNbMl07XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgIC8vIElnbm9yZSBlcnJvclxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29tcGFyZXMgdHdvIEF6dXJlIFZlcnNpb25zIGFnYWluc3QgZWFjaCBvdGhlclxyXG4gICAgICogQHBhcmFtIGNvbXBhcmVUbyBWZXJzaW9uIHRvIGNvbXBhcmUgYWdhaW5zdFxyXG4gICAgICogQHJldHVybnMgYSBudW1iZXIgbGVzcyB0aGFuIHplcm8gaWYgY29tcGFyZVRvIGlzIG5ld2VyLCAwIGlmIGVxdWFsLFxyXG4gICAgICogYW5kIGdyZWF0ZXIgdGhhbiB6ZXJvIGlmIHRoaXMgaXMgZ3JlYXRlciB0aGFuIGNvbXBhcmVUb1xyXG4gICAgICovXHJcbiAgICBjb21wYXJlKGNvbXBhcmVUbzogUmVxdWlyZWQ8VmVyc2lvbj4gfCBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gVmVyc2lvbi5jb21wYXJlKHRoaXMsIGNvbXBhcmVUbyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcGkuc2VydmljZSc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRTZXJ2aWNlIGFzIEZpbGVVcGxvYWRTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvZmlsZVVwbG9hZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBGaWxlVXBsb2FkVHlwZSB9IGZyb20gJy4uL2VudW1zL2ZpbGVVcGxvYWRUeXBlJztcclxuXHJcbmltcG9ydCB7IEVuY0FycmF5QnVmZmVyIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9lbmNBcnJheUJ1ZmZlcic7XHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4uL21vZGVscy9kb21haW4vZW5jU3RyaW5nJztcclxuXHJcbmltcG9ydCB7IEF0dGFjaG1lbnRVcGxvYWREYXRhUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvYXR0YWNobWVudFVwbG9hZERhdGFSZXNwb25zZSc7XHJcbmltcG9ydCB7IFNlbmRGaWxlVXBsb2FkRGF0YVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3NlbmRGaWxlVXBsb2FkRGF0YVJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IEF6dXJlRmlsZVVwbG9hZFNlcnZpY2UgfSBmcm9tICcuL2F6dXJlRmlsZVVwbG9hZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQml0d2FyZGVuRmlsZVVwbG9hZFNlcnZpY2UgfSBmcm9tICcuL2JpdHdhcmRlbkZpbGVVcGxvYWQuc2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsZVVwbG9hZFNlcnZpY2UgaW1wbGVtZW50cyBGaWxlVXBsb2FkU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIHByaXZhdGUgYXp1cmVGaWxlVXBsb2FkU2VydmljZTogQXp1cmVGaWxlVXBsb2FkU2VydmljZTtcclxuICAgIHByaXZhdGUgYml0d2FyZGVuRmlsZVVwbG9hZFNlcnZpY2U6IEJpdHdhcmRlbkZpbGVVcGxvYWRTZXJ2aWNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSwgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5henVyZUZpbGVVcGxvYWRTZXJ2aWNlID0gbmV3IEF6dXJlRmlsZVVwbG9hZFNlcnZpY2UobG9nU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5iaXR3YXJkZW5GaWxlVXBsb2FkU2VydmljZSA9IG5ldyBCaXR3YXJkZW5GaWxlVXBsb2FkU2VydmljZShhcGlTZXJ2aWNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1cGxvYWRTZW5kRmlsZSh1cGxvYWREYXRhOiBTZW5kRmlsZVVwbG9hZERhdGFSZXNwb25zZSwgZmlsZU5hbWU6IEVuY1N0cmluZywgZW5jcnlwdGVkRmlsZURhdGE6IEVuY0FycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc3dpdGNoICh1cGxvYWREYXRhLmZpbGVVcGxvYWRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZpbGVVcGxvYWRUeXBlLkRpcmVjdDpcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJpdHdhcmRlbkZpbGVVcGxvYWRTZXJ2aWNlLnVwbG9hZChmaWxlTmFtZS5lbmNyeXB0ZWRTdHJpbmcsIGVuY3J5cHRlZEZpbGVEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmZCA9PiB0aGlzLmFwaVNlcnZpY2UucG9zdFNlbmRGaWxlKHVwbG9hZERhdGEuc2VuZFJlc3BvbnNlLmlkLCB1cGxvYWREYXRhLnNlbmRSZXNwb25zZS5maWxlLmlkLCBmZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBGaWxlVXBsb2FkVHlwZS5BenVyZTpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW5ld2FsQ2FsbGJhY2sgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbmV3YWxSZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5yZW5ld1NlbmRGaWxlVXBsb2FkVXJsKHVwbG9hZERhdGEuc2VuZFJlc3BvbnNlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkRGF0YS5zZW5kUmVzcG9uc2UuZmlsZS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZW5ld2FsUmVzcG9uc2UudXJsO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5henVyZUZpbGVVcGxvYWRTZXJ2aWNlLnVwbG9hZCh1cGxvYWREYXRhLnVybCwgZW5jcnlwdGVkRmlsZURhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmV3YWxDYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBmaWxlIHVwbG9hZCB0eXBlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5kZWxldGVTZW5kKHVwbG9hZERhdGEuc2VuZFJlc3BvbnNlLmlkKTtcclxuICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdXBsb2FkQ2lwaGVyQXR0YWNobWVudChhZG1pbjogYm9vbGVhbiwgdXBsb2FkRGF0YTogQXR0YWNobWVudFVwbG9hZERhdGFSZXNwb25zZSwgZW5jcnlwdGVkRmlsZU5hbWU6IEVuY1N0cmluZyxcclxuICAgICAgICBlbmNyeXB0ZWRGaWxlRGF0YTogRW5jQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGFkbWluID8gdXBsb2FkRGF0YS5jaXBoZXJNaW5pUmVzcG9uc2UgOiB1cGxvYWREYXRhLmNpcGhlclJlc3BvbnNlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodXBsb2FkRGF0YS5maWxlVXBsb2FkVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBGaWxlVXBsb2FkVHlwZS5EaXJlY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iaXR3YXJkZW5GaWxlVXBsb2FkU2VydmljZS51cGxvYWQoZW5jcnlwdGVkRmlsZU5hbWUuZW5jcnlwdGVkU3RyaW5nLCBlbmNyeXB0ZWRGaWxlRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmQgPT4gdGhpcy5hcGlTZXJ2aWNlLnBvc3RBdHRhY2htZW50RmlsZShyZXNwb25zZS5pZCwgdXBsb2FkRGF0YS5hdHRhY2htZW50SWQsIGZkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZpbGVVcGxvYWRUeXBlLkF6dXJlOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbmV3YWxDYWxsYmFjayA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVuZXdhbFJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnJlbmV3QXR0YWNobWVudFVwbG9hZFVybChyZXNwb25zZS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZERhdGEuYXR0YWNobWVudElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbmV3YWxSZXNwb25zZS51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmF6dXJlRmlsZVVwbG9hZFNlcnZpY2UudXBsb2FkKHVwbG9hZERhdGEudXJsLCBlbmNyeXB0ZWRGaWxlRGF0YSwgcmVuZXdhbENhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGZpbGUgdXBsb2FkIHR5cGUuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChhZG1pbikge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLmRlbGV0ZUNpcGhlckF0dGFjaG1lbnRBZG1pbihyZXNwb25zZS5pZCwgdXBsb2FkRGF0YS5hdHRhY2htZW50SWQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLmRlbGV0ZUNpcGhlckF0dGFjaG1lbnQocmVzcG9uc2UuaWQsIHVwbG9hZERhdGEuYXR0YWNobWVudElkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBGb2xkZXJSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2ZvbGRlclJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGb2xkZXJEYXRhIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHJldmlzaW9uRGF0ZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBGb2xkZXJSZXNwb25zZSwgdXNlcklkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZDtcclxuICAgICAgICB0aGlzLm5hbWUgPSByZXNwb25zZS5uYW1lO1xyXG4gICAgICAgIHRoaXMuaWQgPSByZXNwb25zZS5pZDtcclxuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IHJlc3BvbnNlLnJldmlzaW9uRGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBGb2xkZXIgfSBmcm9tICcuLi9kb21haW4vZm9sZGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGb2xkZXJSZXF1ZXN0IHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihmb2xkZXI6IEZvbGRlcikge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IGZvbGRlci5uYW1lID8gZm9sZGVyLm5hbWUuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBGb2xkZXJEYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvZm9sZGVyRGF0YSc7XHJcblxyXG5pbXBvcnQgeyBGb2xkZXIgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2ZvbGRlcic7XHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3RyZWVOb2RlJztcclxuXHJcbmltcG9ydCB7IEZvbGRlclJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9mb2xkZXJSZXF1ZXN0JztcclxuXHJcbmltcG9ydCB7IEZvbGRlclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2ZvbGRlclJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IEZvbGRlclZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9mb2xkZXJWaWV3JztcclxuXHJcbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XHJcbmltcG9ydCB7IEZvbGRlclNlcnZpY2UgYXMgRm9sZGVyU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2ZvbGRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvaTE4bi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdXNlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2lwaGVyRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL2NpcGhlckRhdGEnO1xyXG5cclxuaW1wb3J0IHsgU2VydmljZVV0aWxzIH0gZnJvbSAnLi4vbWlzYy9zZXJ2aWNlVXRpbHMnO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xyXG5cclxuY29uc3QgS2V5cyA9IHtcclxuICAgIGZvbGRlcnNQcmVmaXg6ICdmb2xkZXJzXycsXHJcbiAgICBjaXBoZXJzUHJlZml4OiAnY2lwaGVyc18nLFxyXG59O1xyXG5jb25zdCBOZXN0aW5nRGVsaW1pdGVyID0gJy8nO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZvbGRlclNlcnZpY2UgaW1wbGVtZW50cyBGb2xkZXJTZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgZGVjcnlwdGVkRm9sZGVyQ2FjaGU6IEZvbGRlclZpZXdbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNyeXB0b1NlcnZpY2U6IENyeXB0b1NlcnZpY2UsIHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UsIHByaXZhdGUgY2lwaGVyU2VydmljZTogQ2lwaGVyU2VydmljZSkgeyB9XHJcblxyXG4gICAgY2xlYXJDYWNoZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlbmNyeXB0KG1vZGVsOiBGb2xkZXJWaWV3LCBrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEZvbGRlcj4ge1xyXG4gICAgICAgIGNvbnN0IGZvbGRlciA9IG5ldyBGb2xkZXIoKTtcclxuICAgICAgICBmb2xkZXIuaWQgPSBtb2RlbC5pZDtcclxuICAgICAgICBmb2xkZXIubmFtZSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KG1vZGVsLm5hbWUsIGtleSk7XHJcbiAgICAgICAgcmV0dXJuIGZvbGRlcjtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXQoaWQ6IHN0cmluZyk6IFByb21pc2U8Rm9sZGVyPiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBmb2xkZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IEZvbGRlckRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLmZvbGRlcnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChmb2xkZXJzID09IG51bGwgfHwgIWZvbGRlcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBGb2xkZXIoZm9sZGVyc1tpZF0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEFsbCgpOiBQcm9taXNlPEZvbGRlcltdPiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBmb2xkZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IEZvbGRlckRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLmZvbGRlcnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBGb2xkZXJbXSA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gZm9sZGVycykge1xyXG4gICAgICAgICAgICBpZiAoZm9sZGVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1c2gobmV3IEZvbGRlcihmb2xkZXJzW2lkXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRBbGxEZWNyeXB0ZWQoKTogUHJvbWlzZTxGb2xkZXJWaWV3W10+IHtcclxuICAgICAgICBpZiAodGhpcy5kZWNyeXB0ZWRGb2xkZXJDYWNoZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaGFzS2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmhhc0tleSgpO1xyXG4gICAgICAgIGlmICghaGFzS2V5KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8ga2V5LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGVjRm9sZGVyczogRm9sZGVyVmlld1tdID0gW107XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XHJcbiAgICAgICAgY29uc3QgZm9sZGVycyA9IGF3YWl0IHRoaXMuZ2V0QWxsKCk7XHJcbiAgICAgICAgZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XHJcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goZm9sZGVyLmRlY3J5cHQoKS50aGVuKGYgPT4gZGVjRm9sZGVycy5wdXNoKGYpKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuICAgICAgICBkZWNGb2xkZXJzLnNvcnQoVXRpbHMuZ2V0U29ydEZ1bmN0aW9uKHRoaXMuaTE4blNlcnZpY2UsICduYW1lJykpO1xyXG5cclxuICAgICAgICBjb25zdCBub25lRm9sZGVyID0gbmV3IEZvbGRlclZpZXcoKTtcclxuICAgICAgICBub25lRm9sZGVyLm5hbWUgPSB0aGlzLmkxOG5TZXJ2aWNlLnQoJ25vbmVGb2xkZXInKTtcclxuICAgICAgICBkZWNGb2xkZXJzLnB1c2gobm9uZUZvbGRlcik7XHJcblxyXG4gICAgICAgIHRoaXMuZGVjcnlwdGVkRm9sZGVyQ2FjaGUgPSBkZWNGb2xkZXJzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEFsbE5lc3RlZCgpOiBQcm9taXNlPFRyZWVOb2RlPEZvbGRlclZpZXc+W10+IHtcclxuICAgICAgICBjb25zdCBmb2xkZXJzID0gYXdhaXQgdGhpcy5nZXRBbGxEZWNyeXB0ZWQoKTtcclxuICAgICAgICBjb25zdCBub2RlczogVHJlZU5vZGU8Rm9sZGVyVmlldz5bXSA9IFtdO1xyXG4gICAgICAgIGZvbGRlcnMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZm9sZGVyQ29weSA9IG5ldyBGb2xkZXJWaWV3KCk7XHJcbiAgICAgICAgICAgIGZvbGRlckNvcHkuaWQgPSBmLmlkO1xyXG4gICAgICAgICAgICBmb2xkZXJDb3B5LnJldmlzaW9uRGF0ZSA9IGYucmV2aXNpb25EYXRlO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IGYubmFtZSAhPSBudWxsID8gZi5uYW1lLnJlcGxhY2UoL15cXC8rfFxcLyskL2csICcnKS5zcGxpdChOZXN0aW5nRGVsaW1pdGVyKSA6IFtdO1xyXG4gICAgICAgICAgICBTZXJ2aWNlVXRpbHMubmVzdGVkVHJhdmVyc2Uobm9kZXMsIDAsIHBhcnRzLCBmb2xkZXJDb3B5LCBudWxsLCBOZXN0aW5nRGVsaW1pdGVyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbm9kZXM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0TmVzdGVkKGlkOiBzdHJpbmcpOiBQcm9taXNlPFRyZWVOb2RlPEZvbGRlclZpZXc+PiB7XHJcbiAgICAgICAgY29uc3QgZm9sZGVycyA9IGF3YWl0IHRoaXMuZ2V0QWxsTmVzdGVkKCk7XHJcbiAgICAgICAgcmV0dXJuIFNlcnZpY2VVdGlscy5nZXRUcmVlTm9kZU9iamVjdChmb2xkZXJzLCBpZCkgYXMgVHJlZU5vZGU8Rm9sZGVyVmlldz47XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2F2ZVdpdGhTZXJ2ZXIoZm9sZGVyOiBGb2xkZXIpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgRm9sZGVyUmVxdWVzdChmb2xkZXIpO1xyXG5cclxuICAgICAgICBsZXQgcmVzcG9uc2U6IEZvbGRlclJlc3BvbnNlO1xyXG4gICAgICAgIGlmIChmb2xkZXIuaWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0Rm9sZGVyKHJlcXVlc3QpO1xyXG4gICAgICAgICAgICBmb2xkZXIuaWQgPSByZXNwb25zZS5pZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wdXRGb2xkZXIoZm9sZGVyLmlkLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBGb2xkZXJEYXRhKHJlc3BvbnNlLCB1c2VySWQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBzZXJ0KGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHVwc2VydChmb2xkZXI6IEZvbGRlckRhdGEgfCBGb2xkZXJEYXRhW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgbGV0IGZvbGRlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogRm9sZGVyRGF0YTsgfT4oXHJcbiAgICAgICAgICAgIEtleXMuZm9sZGVyc1ByZWZpeCArIHVzZXJJZCk7XHJcbiAgICAgICAgaWYgKGZvbGRlcnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBmb2xkZXJzID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZm9sZGVyIGluc3RhbmNlb2YgRm9sZGVyRGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCBmID0gZm9sZGVyIGFzIEZvbGRlckRhdGE7XHJcbiAgICAgICAgICAgIGZvbGRlcnNbZi5pZF0gPSBmO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIChmb2xkZXIgYXMgRm9sZGVyRGF0YVtdKS5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9sZGVyc1tmLmlkXSA9IGY7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuZm9sZGVyc1ByZWZpeCArIHVzZXJJZCwgZm9sZGVycyk7XHJcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRGb2xkZXJDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVwbGFjZShmb2xkZXJzOiB7IFtpZDogc3RyaW5nXTogRm9sZGVyRGF0YTsgfSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5mb2xkZXJzUHJlZml4ICsgdXNlcklkLCBmb2xkZXJzKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhcih1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5mb2xkZXJzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWxldGUoaWQ6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGNvbnN0IGZvbGRlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogRm9sZGVyRGF0YTsgfT4oXHJcbiAgICAgICAgICAgIEtleXMuZm9sZGVyc1ByZWZpeCArIHVzZXJJZCk7XHJcbiAgICAgICAgaWYgKGZvbGRlcnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAoZm9sZGVyc1tpZF0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSBmb2xkZXJzW2lkXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAoaWQgYXMgc3RyaW5nW10pLmZvckVhY2goaSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgZm9sZGVyc1tpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5mb2xkZXJzUHJlZml4ICsgdXNlcklkLCBmb2xkZXJzKTtcclxuICAgICAgICB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gSXRlbXMgaW4gYSBkZWxldGVkIGZvbGRlciBhcmUgcmUtYXNzaWduZWQgdG8gXCJObyBGb2xkZXJcIlxyXG4gICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfT4oS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICBpZiAoY2lwaGVycyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXM6IENpcGhlckRhdGFbXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNJZCBpbiBjaXBoZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2lwaGVyc1tjSWRdLmZvbGRlcklkID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlcnNbY0lkXS5mb2xkZXJJZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGNpcGhlcnNbY0lkXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHVwZGF0ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaXBoZXJTZXJ2aWNlLnVwc2VydCh1cGRhdGVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWxldGVXaXRoU2VydmVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5kZWxldGVGb2xkZXIoaWQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlKGlkKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZW51bSBPcmdhbml6YXRpb25Vc2VyVHlwZSB7XHJcbiAgICBPd25lciA9IDAsXHJcbiAgICBBZG1pbiA9IDEsXHJcbiAgICBVc2VyID0gMixcclxuICAgIE1hbmFnZXIgPSAzLFxyXG4gICAgQ3VzdG9tID0gNCxcclxufVxyXG4iLCJpbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XHJcbmltcG9ydCB7IEtleUNvbm5lY3RvclNlcnZpY2UgYXMgS2V5Q29ubmVjdG9yU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2tleUNvbm5lY3Rvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFRva2VuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy90b2tlbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdXNlci5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJUeXBlIH0gZnJvbSAnLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclR5cGUnO1xyXG5cclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuXHJcbmltcG9ydCB7IEtleUNvbm5lY3RvclVzZXJLZXlSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qva2V5Q29ubmVjdG9yVXNlcktleVJlcXVlc3QnO1xyXG5cclxuY29uc3QgS2V5cyA9IHtcclxuICAgIHVzZXNLZXlDb25uZWN0b3I6ICd1c2VzS2V5Q29ubmVjdG9yJyxcclxuICAgIGNvbnZlcnRBY2NvdW50VG9LZXlDb25uZWN0b3I6ICdjb252ZXJ0QWNjb3VudFRvS2V5Q29ubmVjdG9yJyxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBLZXlDb25uZWN0b3JTZXJ2aWNlIGltcGxlbWVudHMgS2V5Q29ubmVjdG9yU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIHByaXZhdGUgdXNlc0tleUNvbm5lY3Rvcj86IGJvb2xlYW4gPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLCBwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNyeXB0b1NlcnZpY2U6IENyeXB0b1NlcnZpY2UsIHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHRva2VuU2VydmljZTogVG9rZW5TZXJ2aWNlLCBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHsgfVxyXG5cclxuICAgIHNldFVzZXNLZXlDb25uZWN0b3IodXNlc0tleUNvbm5lY3RvcjogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMudXNlc0tleUNvbm5lY3RvciA9IHVzZXNLZXlDb25uZWN0b3I7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnVzZXNLZXlDb25uZWN0b3IsIHVzZXNLZXlDb25uZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFVzZXNLZXlDb25uZWN0b3IoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlc0tleUNvbm5lY3RvciA/Pz0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8Ym9vbGVhbj4oS2V5cy51c2VzS2V5Q29ubmVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1c2VyTmVlZHNNaWdyYXRpb24oKSB7XHJcbiAgICAgICAgY29uc3QgbG9nZ2VkSW5Vc2luZ1NzbyA9IHRoaXMudG9rZW5TZXJ2aWNlLmdldElzRXh0ZXJuYWwoKTtcclxuICAgICAgICBjb25zdCByZXF1aXJlZEJ5T3JnYW5pemF0aW9uID0gYXdhaXQgdGhpcy5nZXRNYW5hZ2luZ09yZ2FuaXphdGlvbigpICE9IG51bGw7XHJcbiAgICAgICAgY29uc3QgdXNlcklzTm90VXNpbmdLZXlDb25uZWN0b3IgPSAhYXdhaXQgdGhpcy5nZXRVc2VzS2V5Q29ubmVjdG9yKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBsb2dnZWRJblVzaW5nU3NvICYmIHJlcXVpcmVkQnlPcmdhbml6YXRpb24gJiYgdXNlcklzTm90VXNpbmdLZXlDb25uZWN0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbWlncmF0ZVVzZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9uID0gYXdhaXQgdGhpcy5nZXRNYW5hZ2luZ09yZ2FuaXphdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5nZXRLZXkoKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3Qga2V5Q29ubmVjdG9yUmVxdWVzdCA9IG5ldyBLZXlDb25uZWN0b3JVc2VyS2V5UmVxdWVzdChrZXkuZW5jS2V5QjY0KTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RVc2VyS2V5VG9LZXlDb25uZWN0b3Iob3JnYW5pemF0aW9uLmtleUNvbm5lY3RvclVybCwga2V5Q29ubmVjdG9yUmVxdWVzdCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byByZWFjaCBrZXkgY29ubmVjdG9yJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucG9zdENvbnZlcnRUb0tleUNvbm5lY3RvcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEFuZFNldEtleSh1cmw6IHN0cmluZykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJLZXlSZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5nZXRVc2VyS2V5RnJvbUtleUNvbm5lY3Rvcih1cmwpO1xyXG4gICAgICAgICAgICBjb25zdCBrZXlBcnIgPSBVdGlscy5mcm9tQjY0VG9BcnJheSh1c2VyS2V5UmVzcG9uc2Uua2V5KTtcclxuICAgICAgICAgICAgY29uc3QgayA9IG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoa2V5QXJyKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldEtleShrKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmVhY2gga2V5IGNvbm5lY3RvcicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRNYW5hZ2luZ09yZ2FuaXphdGlvbigpIHtcclxuICAgICAgICBjb25zdCBvcmdzID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRBbGxPcmdhbml6YXRpb25zKCk7XHJcbiAgICAgICAgcmV0dXJuIG9yZ3MuZmluZChvID0+XHJcbiAgICAgICAgICAgIG8ua2V5Q29ubmVjdG9yRW5hYmxlZCAmJlxyXG4gICAgICAgICAgICBvLnR5cGUgIT09IE9yZ2FuaXphdGlvblVzZXJUeXBlLkFkbWluICYmXHJcbiAgICAgICAgICAgIG8udHlwZSAhPT0gT3JnYW5pemF0aW9uVXNlclR5cGUuT3duZXIgJiZcclxuICAgICAgICAgICAgIW8uaXNQcm92aWRlclVzZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNldENvbnZlcnRBY2NvdW50UmVxdWlyZWQoc3RhdHVzOiBib29sZWFuKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY29udmVydEFjY291bnRUb0tleUNvbm5lY3Rvciwgc3RhdHVzKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRDb252ZXJ0QWNjb3VudFJlcXVpcmVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldChLZXlzLmNvbnZlcnRBY2NvdW50VG9LZXlDb25uZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlbW92ZUNvbnZlcnRBY2NvdW50UmVxdWlyZWQoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5jb252ZXJ0QWNjb3VudFRvS2V5Q29ubmVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhcigpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbW92ZUNvbnZlcnRBY2NvdW50UmVxdWlyZWQoKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZW51bSBOb3RpZmljYXRpb25UeXBlIHtcclxuICAgIFN5bmNDaXBoZXJVcGRhdGUgPSAwLFxyXG4gICAgU3luY0NpcGhlckNyZWF0ZSA9IDEsXHJcbiAgICBTeW5jTG9naW5EZWxldGUgPSAyLFxyXG4gICAgU3luY0ZvbGRlckRlbGV0ZSA9IDMsXHJcbiAgICBTeW5jQ2lwaGVycyA9IDQsXHJcblxyXG4gICAgU3luY1ZhdWx0ID0gNSxcclxuICAgIFN5bmNPcmdLZXlzID0gNixcclxuICAgIFN5bmNGb2xkZXJDcmVhdGUgPSA3LFxyXG4gICAgU3luY0ZvbGRlclVwZGF0ZSA9IDgsXHJcbiAgICBTeW5jQ2lwaGVyRGVsZXRlID0gOSxcclxuICAgIFN5bmNTZXR0aW5ncyA9IDEwLFxyXG5cclxuICAgIExvZ091dCA9IDExLFxyXG5cclxuICAgIFN5bmNTZW5kQ3JlYXRlID0gMTIsXHJcbiAgICBTeW5jU2VuZFVwZGF0ZSA9IDEzLFxyXG4gICAgU3luY1NlbmREZWxldGUgPSAxNCxcclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvbm90aWZpY2F0aW9uVHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgY29udGV4dElkOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBOb3RpZmljYXRpb25UeXBlO1xyXG4gICAgcGF5bG9hZDogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0SWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NvbnRleHRJZCcpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xyXG5cclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQYXlsb2FkJyk7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNDaXBoZXJDcmVhdGU6XHJcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jQ2lwaGVyRGVsZXRlOlxyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0NpcGhlclVwZGF0ZTpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNMb2dpbkRlbGV0ZTpcclxuICAgICAgICAgICAgICAgIHRoaXMucGF5bG9hZCA9IG5ldyBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uKHBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jRm9sZGVyQ3JlYXRlOlxyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0ZvbGRlckRlbGV0ZTpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNGb2xkZXJVcGRhdGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBheWxvYWQgPSBuZXcgU3luY0ZvbGRlck5vdGlmaWNhdGlvbihwYXlsb2FkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY1ZhdWx0OlxyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0NpcGhlcnM6XHJcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jT3JnS2V5czpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNTZXR0aW5nczpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLkxvZ091dDpcclxuICAgICAgICAgICAgICAgIHRoaXMucGF5bG9hZCA9IG5ldyBVc2VyTm90aWZpY2F0aW9uKHBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jU2VuZENyZWF0ZTpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNTZW5kVXBkYXRlOlxyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY1NlbmREZWxldGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBheWxvYWQgPSBuZXcgU3luY1NlbmROb3RpZmljYXRpb24ocGF5bG9hZCk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XHJcbiAgICBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXTtcclxuICAgIHJldmlzaW9uRGF0ZTogRGF0ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XHJcbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJJZCcpO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ09yZ2FuaXphdGlvbklkJyk7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uSWRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb2xsZWN0aW9uSWRzJyk7XHJcbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSBuZXcgRGF0ZSh0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1JldmlzaW9uRGF0ZScpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN5bmNGb2xkZXJOb3RpZmljYXRpb24gZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgcmV2aXNpb25EYXRlOiBEYXRlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlcklkJyk7XHJcbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSBuZXcgRGF0ZSh0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1JldmlzaW9uRGF0ZScpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJOb3RpZmljYXRpb24gZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xyXG4gICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICBkYXRlOiBEYXRlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihyZXNwb25zZSk7XHJcbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJJZCcpO1xyXG4gICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGF0ZScpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN5bmNTZW5kTm90aWZpY2F0aW9uIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxuICAgIHJldmlzaW9uRGF0ZTogRGF0ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XHJcbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJJZCcpO1xyXG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gbmV3IERhdGUodGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdSZXZpc2lvbkRhdGUnKSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgc2lnbmFsUiBmcm9tICdAbWljcm9zb2Z0L3NpZ25hbHInO1xyXG5pbXBvcnQgKiBhcyBzaWduYWxSTXNnUGFjayBmcm9tICdAbWljcm9zb2Z0L3NpZ25hbHItcHJvdG9jb2wtbXNncGFjayc7XHJcblxyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bXMvbm90aWZpY2F0aW9uVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQXBwSWRTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwcElkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFbnZpcm9ubWVudFNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvZW52aXJvbm1lbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvbG9nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSBhcyBOb3RpZmljYXRpb25zU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL25vdGlmaWNhdGlvbnMuc2VydmljZSc7XHJcbmltcG9ydCB7IFN5bmNTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N5bmMuc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFZhdWx0VGltZW91dFNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIE5vdGlmaWNhdGlvblJlc3BvbnNlLFxyXG4gICAgU3luY0NpcGhlck5vdGlmaWNhdGlvbixcclxuICAgIFN5bmNGb2xkZXJOb3RpZmljYXRpb24sXHJcbiAgICBTeW5jU2VuZE5vdGlmaWNhdGlvbixcclxufSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvbm90aWZpY2F0aW9uUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvbnNTZXJ2aWNlIGltcGxlbWVudHMgTm90aWZpY2F0aW9uc1NlcnZpY2VBYnN0cmFjdGlvbiB7XHJcbiAgICBwcml2YXRlIHNpZ25hbHJDb25uZWN0aW9uOiBzaWduYWxSLkh1YkNvbm5lY3Rpb247XHJcbiAgICBwcml2YXRlIHVybDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBjb25uZWN0ZWQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgaW5pdGVkID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGluYWN0aXZlID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIHJlY29ubmVjdFRpbWVyOiBhbnkgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLCBwcml2YXRlIHN5bmNTZXJ2aWNlOiBTeW5jU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGFwcElkU2VydmljZTogQXBwSWRTZXJ2aWNlLCBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB2YXVsdFRpbWVvdXRTZXJ2aWNlOiBWYXVsdFRpbWVvdXRTZXJ2aWNlLCBwcml2YXRlIGVudmlyb25tZW50U2VydmljZTogRW52aXJvbm1lbnRTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgbG9nb3V0Q2FsbGJhY2s6ICgpID0+IFByb21pc2U8dm9pZD4sIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuZW52aXJvbm1lbnRTZXJ2aWNlLnVybHMuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmluaXRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBpbml0KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRoaXMuaW5pdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLmVudmlyb25tZW50U2VydmljZS5nZXROb3RpZmljYXRpb25zVXJsKCk7XHJcblxyXG4gICAgICAgIC8vIFNldCBub3RpZmljYXRpb25zIHNlcnZlciBVUkwgdG8gYGh0dHBzOi8vLWAgdG8gZWZmZWN0aXZlbHkgZGlzYWJsZSBjb21tdW5pY2F0aW9uXHJcbiAgICAgICAgLy8gd2l0aCB0aGUgbm90aWZpY2F0aW9ucyBzZXJ2ZXIgZnJvbSB0aGUgY2xpZW50IGFwcFxyXG4gICAgICAgIGlmICh0aGlzLnVybCA9PT0gJ2h0dHBzOi8vLScpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2lnbmFsckNvbm5lY3Rpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLm9mZignUmVjZWl2ZU1lc3NhZ2UnKTtcclxuICAgICAgICAgICAgdGhpcy5zaWduYWxyQ29ubmVjdGlvbi5vZmYoJ0hlYXJ0YmVhdCcpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zaWduYWxyQ29ubmVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNpZ25hbHJDb25uZWN0aW9uID0gbmV3IHNpZ25hbFIuSHViQ29ubmVjdGlvbkJ1aWxkZXIoKVxyXG4gICAgICAgICAgICAud2l0aFVybCh0aGlzLnVybCArICcvaHViJywge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzVG9rZW5GYWN0b3J5OiAoKSA9PiB0aGlzLmFwaVNlcnZpY2UuZ2V0QWN0aXZlQmVhcmVyVG9rZW4oKSxcclxuICAgICAgICAgICAgICAgIHNraXBOZWdvdGlhdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHRyYW5zcG9ydDogc2lnbmFsUi5IdHRwVHJhbnNwb3J0VHlwZS5XZWJTb2NrZXRzLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAud2l0aEh1YlByb3RvY29sKG5ldyBzaWduYWxSTXNnUGFjay5NZXNzYWdlUGFja0h1YlByb3RvY29sKCkgYXMgc2lnbmFsUi5JSHViUHJvdG9jb2wpXHJcbiAgICAgICAgICAgIC8vIC5jb25maWd1cmVMb2dnaW5nKHNpZ25hbFIuTG9nTGV2ZWwuVHJhY2UpXHJcbiAgICAgICAgICAgIC5idWlsZCgpO1xyXG5cclxuICAgICAgICB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLm9uKCdSZWNlaXZlTWVzc2FnZScsXHJcbiAgICAgICAgICAgIChkYXRhOiBhbnkpID0+IHRoaXMucHJvY2Vzc05vdGlmaWNhdGlvbihuZXcgTm90aWZpY2F0aW9uUmVzcG9uc2UoZGF0YSkpKTtcclxuICAgICAgICB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLm9uKCdIZWFydGJlYXQnLFxyXG4gICAgICAgICAgICAoZGF0YTogYW55KSA9PiB7IC8qY29uc29sZS5sb2coJ0hlYXJ0YmVhdCEnKTsqLyB9KTtcclxuICAgICAgICB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLm9uY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCh0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmluaXRlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNBdXRoZWRBbmRVbmxvY2tlZCgpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVjb25uZWN0KGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdXBkYXRlQ29ubmVjdGlvbihzeW5jID0gZmFsc2UpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBpZiAoIXRoaXMuaW5pdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNBdXRoZWRBbmRVbmxvY2tlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlY29ubmVjdChzeW5jKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2lnbmFsckNvbm5lY3Rpb24uc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVjb25uZWN0RnJvbUFjdGl2aXR5KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRoaXMuaW5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5pbml0ZWQgJiYgIXRoaXMuY29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVjb25uZWN0KHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkaXNjb25uZWN0RnJvbUluYWN0aXZpdHkoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy5pbmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5pdGVkICYmIHRoaXMuY29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2lnbmFsckNvbm5lY3Rpb24uc3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHByb2Nlc3NOb3RpZmljYXRpb24obm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb25SZXNwb25zZSkge1xyXG4gICAgICAgIGNvbnN0IGFwcElkID0gYXdhaXQgdGhpcy5hcHBJZFNlcnZpY2UuZ2V0QXBwSWQoKTtcclxuICAgICAgICBpZiAobm90aWZpY2F0aW9uID09IG51bGwgfHwgbm90aWZpY2F0aW9uLmNvbnRleHRJZCA9PT0gYXBwSWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaXNBdXRoZW50aWNhdGVkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKTtcclxuICAgICAgICBjb25zdCBwYXlsb2FkVXNlcklkID0gbm90aWZpY2F0aW9uLnBheWxvYWQudXNlcklkIHx8IG5vdGlmaWNhdGlvbi5wYXlsb2FkLlVzZXJJZDtcclxuICAgICAgICBjb25zdCBteVVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgaWYgKGlzQXV0aGVudGljYXRlZCAmJiBwYXlsb2FkVXNlcklkICE9IG51bGwgJiYgcGF5bG9hZFVzZXJJZCAhPT0gbXlVc2VySWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb24udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0NpcGhlckNyZWF0ZTpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNDaXBoZXJVcGRhdGU6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN5bmNTZXJ2aWNlLnN5bmNVcHNlcnRDaXBoZXIobm90aWZpY2F0aW9uLnBheWxvYWQgYXMgU3luY0NpcGhlck5vdGlmaWNhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb24udHlwZSA9PT0gTm90aWZpY2F0aW9uVHlwZS5TeW5jQ2lwaGVyVXBkYXRlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0NpcGhlckRlbGV0ZTpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNMb2dpbkRlbGV0ZTpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3luY1NlcnZpY2Uuc3luY0RlbGV0ZUNpcGhlcihub3RpZmljYXRpb24ucGF5bG9hZCBhcyBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0ZvbGRlckNyZWF0ZTpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNGb2xkZXJVcGRhdGU6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN5bmNTZXJ2aWNlLnN5bmNVcHNlcnRGb2xkZXIobm90aWZpY2F0aW9uLnBheWxvYWQgYXMgU3luY0ZvbGRlck5vdGlmaWNhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb24udHlwZSA9PT0gTm90aWZpY2F0aW9uVHlwZS5TeW5jRm9sZGVyVXBkYXRlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0ZvbGRlckRlbGV0ZTpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3luY1NlcnZpY2Uuc3luY0RlbGV0ZUZvbGRlcihub3RpZmljYXRpb24ucGF5bG9hZCBhcyBTeW5jRm9sZGVyTm90aWZpY2F0aW9uKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY1ZhdWx0OlxyXG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0NpcGhlcnM6XHJcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jU2V0dGluZ3M6XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNBdXRoZW50aWNhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5mdWxsU3luYyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNPcmdLZXlzOlxyXG4gICAgICAgICAgICAgICAgaWYgKGlzQXV0aGVudGljYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3luY1NlcnZpY2UuZnVsbFN5bmModHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBzbyBhIHJlY29ubmVjdCBjYW4gYmUgbWFkZVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2lnbmFsckNvbm5lY3Rpb24uc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5Mb2dPdXQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNBdXRoZW50aWNhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dvdXRDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jU2VuZENyZWF0ZTpcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNTZW5kVXBkYXRlOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5zeW5jVXBzZXJ0U2VuZChub3RpZmljYXRpb24ucGF5bG9hZCBhcyBTeW5jU2VuZE5vdGlmaWNhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb24udHlwZSA9PT0gTm90aWZpY2F0aW9uVHlwZS5TeW5jU2VuZFVwZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNTZW5kRGVsZXRlOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5zeW5jRGVsZXRlU2VuZChub3RpZmljYXRpb24ucGF5bG9hZCBhcyBTeW5jU2VuZE5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyByZWNvbm5lY3Qoc3luYzogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLnJlY29ubmVjdFRpbWVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVjb25uZWN0VGltZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkIHx8ICF0aGlzLmluaXRlZCB8fCB0aGlzLmluYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXV0aGVkQW5kVW5sb2NrZWQgPSBhd2FpdCB0aGlzLmlzQXV0aGVkQW5kVW5sb2NrZWQoKTtcclxuICAgICAgICBpZiAoIWF1dGhlZEFuZFVubG9ja2VkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2lnbmFsckNvbm5lY3Rpb24uc3RhcnQoKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoc3luYykge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5mdWxsU3luYyhmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWNvbm5lY3Qoc3luYyksIHRoaXMucmFuZG9tKDEyMDAwMCwgMzAwMDAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgaXNBdXRoZWRBbmRVbmxvY2tlZCgpIHtcclxuICAgICAgICBpZiAoYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBsb2NrZWQgPSBhd2FpdCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UuaXNMb2NrZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuICFsb2NrZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJhbmRvbShtaW46IG51bWJlciwgbWF4OiBudW1iZXIpIHtcclxuICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeSB7XHJcbiAgICBwYXNzd29yZDogc3RyaW5nO1xyXG4gICAgZGF0ZTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhc3N3b3JkOiBzdHJpbmcsIGRhdGU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBwYXNzd29yZDtcclxuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXNzd29yZEdlbmVyYXRvclBvbGljeU9wdGlvbnMgZXh0ZW5kcyBEb21haW4ge1xyXG4gICAgZGVmYXVsdFR5cGU6IHN0cmluZyA9ICcnO1xyXG4gICAgbWluTGVuZ3RoOiBudW1iZXIgPSAwO1xyXG4gICAgdXNlVXBwZXJjYXNlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICB1c2VMb3dlcmNhc2U6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHVzZU51bWJlcnM6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIG51bWJlckNvdW50OiBudW1iZXIgPSAwO1xyXG4gICAgdXNlU3BlY2lhbDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3BlY2lhbENvdW50OiBudW1iZXIgPSAwO1xyXG4gICAgbWluTnVtYmVyV29yZHM6IG51bWJlciA9IDA7XHJcbiAgICBjYXBpdGFsaXplOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBpbmNsdWRlTnVtYmVyOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgaW5FZmZlY3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFR5cGUgIT09ICcnIHx8XHJcbiAgICAgICAgICAgIHRoaXMubWluTGVuZ3RoID4gMCB8fFxyXG4gICAgICAgICAgICB0aGlzLm51bWJlckNvdW50ID4gMCB8fFxyXG4gICAgICAgICAgICB0aGlzLnNwZWNpYWxDb3VudCA+IDAgfHxcclxuICAgICAgICAgICAgdGhpcy51c2VVcHBlcmNhc2UgfHxcclxuICAgICAgICAgICAgdGhpcy51c2VMb3dlcmNhc2UgfHxcclxuICAgICAgICAgICAgdGhpcy51c2VOdW1iZXJzIHx8XHJcbiAgICAgICAgICAgIHRoaXMudXNlU3BlY2lhbCB8fFxyXG4gICAgICAgICAgICB0aGlzLm1pbk51bWJlcldvcmRzID4gMCB8fFxyXG4gICAgICAgICAgICB0aGlzLmNhcGl0YWxpemUgfHxcclxuICAgICAgICAgICAgdGhpcy5pbmNsdWRlTnVtYmVyO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIEVGRidzIExvbmcgV29yZGxpc3QgZnJvbSBodHRwczovL3d3dy5lZmYub3JnL2RpY2VcclxuZXhwb3J0IGNvbnN0IEVFRkxvbmdXb3JkTGlzdCA9IFtcclxuICAgICdhYmFjdXMnLFxyXG4gICAgJ2FiZG9tZW4nLFxyXG4gICAgJ2FiZG9taW5hbCcsXHJcbiAgICAnYWJpZGUnLFxyXG4gICAgJ2FiaWRpbmcnLFxyXG4gICAgJ2FiaWxpdHknLFxyXG4gICAgJ2FibGF6ZScsXHJcbiAgICAnYWJsZScsXHJcbiAgICAnYWJub3JtYWwnLFxyXG4gICAgJ2FicmFzaW9uJyxcclxuICAgICdhYnJhc2l2ZScsXHJcbiAgICAnYWJyZWFzdCcsXHJcbiAgICAnYWJyaWRnZScsXHJcbiAgICAnYWJyb2FkJyxcclxuICAgICdhYnJ1cHRseScsXHJcbiAgICAnYWJzZW5jZScsXHJcbiAgICAnYWJzZW50ZWUnLFxyXG4gICAgJ2Fic2VudGx5JyxcclxuICAgICdhYnNpbnRoZScsXHJcbiAgICAnYWJzb2x1dGUnLFxyXG4gICAgJ2Fic29sdmUnLFxyXG4gICAgJ2Fic3RhaW4nLFxyXG4gICAgJ2Fic3RyYWN0JyxcclxuICAgICdhYnN1cmQnLFxyXG4gICAgJ2FjY2VudCcsXHJcbiAgICAnYWNjbGFpbScsXHJcbiAgICAnYWNjbGltYXRlJyxcclxuICAgICdhY2NvbXBhbnknLFxyXG4gICAgJ2FjY291bnQnLFxyXG4gICAgJ2FjY3VyYWN5JyxcclxuICAgICdhY2N1cmF0ZScsXHJcbiAgICAnYWNjdXN0b20nLFxyXG4gICAgJ2FjZXRvbmUnLFxyXG4gICAgJ2FjaGluZXNzJyxcclxuICAgICdhY2hpbmcnLFxyXG4gICAgJ2FjaWQnLFxyXG4gICAgJ2Fjb3JuJyxcclxuICAgICdhY3F1YWludCcsXHJcbiAgICAnYWNxdWlyZScsXHJcbiAgICAnYWNyZScsXHJcbiAgICAnYWNyb2JhdCcsXHJcbiAgICAnYWNyb255bScsXHJcbiAgICAnYWN0aW5nJyxcclxuICAgICdhY3Rpb24nLFxyXG4gICAgJ2FjdGl2YXRlJyxcclxuICAgICdhY3RpdmF0b3InLFxyXG4gICAgJ2FjdGl2ZScsXHJcbiAgICAnYWN0aXZpc20nLFxyXG4gICAgJ2FjdGl2aXN0JyxcclxuICAgICdhY3Rpdml0eScsXHJcbiAgICAnYWN0cmVzcycsXHJcbiAgICAnYWN0cycsXHJcbiAgICAnYWN1dGVseScsXHJcbiAgICAnYWN1dGVuZXNzJyxcclxuICAgICdhZXJhdGlvbicsXHJcbiAgICAnYWVyb2JpY3MnLFxyXG4gICAgJ2Flcm9zb2wnLFxyXG4gICAgJ2Flcm9zcGFjZScsXHJcbiAgICAnYWZhcicsXHJcbiAgICAnYWZmYWlyJyxcclxuICAgICdhZmZlY3RlZCcsXHJcbiAgICAnYWZmZWN0aW5nJyxcclxuICAgICdhZmZlY3Rpb24nLFxyXG4gICAgJ2FmZmlkYXZpdCcsXHJcbiAgICAnYWZmaWxpYXRlJyxcclxuICAgICdhZmZpcm0nLFxyXG4gICAgJ2FmZml4JyxcclxuICAgICdhZmZsaWN0ZWQnLFxyXG4gICAgJ2FmZmx1ZW50JyxcclxuICAgICdhZmZvcmQnLFxyXG4gICAgJ2FmZnJvbnQnLFxyXG4gICAgJ2FmbGFtZScsXHJcbiAgICAnYWZsb2F0JyxcclxuICAgICdhZmx1dHRlcicsXHJcbiAgICAnYWZvb3QnLFxyXG4gICAgJ2FmcmFpZCcsXHJcbiAgICAnYWZ0ZXJnbG93JyxcclxuICAgICdhZnRlcmxpZmUnLFxyXG4gICAgJ2FmdGVybWF0aCcsXHJcbiAgICAnYWZ0ZXJtb3N0JyxcclxuICAgICdhZnRlcm5vb24nLFxyXG4gICAgJ2FnZWQnLFxyXG4gICAgJ2FnZWxlc3MnLFxyXG4gICAgJ2FnZW5jeScsXHJcbiAgICAnYWdlbmRhJyxcclxuICAgICdhZ2VudCcsXHJcbiAgICAnYWdncmVnYXRlJyxcclxuICAgICdhZ2hhc3QnLFxyXG4gICAgJ2FnaWxlJyxcclxuICAgICdhZ2lsaXR5JyxcclxuICAgICdhZ2luZycsXHJcbiAgICAnYWdub3N0aWMnLFxyXG4gICAgJ2Fnb25pemUnLFxyXG4gICAgJ2Fnb25pemluZycsXHJcbiAgICAnYWdvbnknLFxyXG4gICAgJ2FncmVlYWJsZScsXHJcbiAgICAnYWdyZWVhYmx5JyxcclxuICAgICdhZ3JlZWQnLFxyXG4gICAgJ2FncmVlaW5nJyxcclxuICAgICdhZ3JlZW1lbnQnLFxyXG4gICAgJ2Fncm91bmQnLFxyXG4gICAgJ2FoZWFkJyxcclxuICAgICdhaG95JyxcclxuICAgICdhaWRlJyxcclxuICAgICdhaWRzJyxcclxuICAgICdhaW0nLFxyXG4gICAgJ2FqYXInLFxyXG4gICAgJ2FsYWJhc3RlcicsXHJcbiAgICAnYWxhcm0nLFxyXG4gICAgJ2FsYmF0cm9zcycsXHJcbiAgICAnYWxidW0nLFxyXG4gICAgJ2FsZmFsZmEnLFxyXG4gICAgJ2FsZ2VicmEnLFxyXG4gICAgJ2FsZ29yaXRobScsXHJcbiAgICAnYWxpYXMnLFxyXG4gICAgJ2FsaWJpJyxcclxuICAgICdhbGllbmFibGUnLFxyXG4gICAgJ2FsaWVuYXRlJyxcclxuICAgICdhbGllbnMnLFxyXG4gICAgJ2FsaWtlJyxcclxuICAgICdhbGl2ZScsXHJcbiAgICAnYWxrYWxpbmUnLFxyXG4gICAgJ2Fsa2FsaXplJyxcclxuICAgICdhbG1hbmFjJyxcclxuICAgICdhbG1pZ2h0eScsXHJcbiAgICAnYWxtb3N0JyxcclxuICAgICdhbG9lJyxcclxuICAgICdhbG9mdCcsXHJcbiAgICAnYWxvaGEnLFxyXG4gICAgJ2Fsb25lJyxcclxuICAgICdhbG9uZ3NpZGUnLFxyXG4gICAgJ2Fsb29mJyxcclxuICAgICdhbHBoYWJldCcsXHJcbiAgICAnYWxyaWdodCcsXHJcbiAgICAnYWx0aG91Z2gnLFxyXG4gICAgJ2FsdGl0dWRlJyxcclxuICAgICdhbHRvJyxcclxuICAgICdhbHVtaW51bScsXHJcbiAgICAnYWx1bW5pJyxcclxuICAgICdhbHdheXMnLFxyXG4gICAgJ2FtYXJldHRvJyxcclxuICAgICdhbWF6ZScsXHJcbiAgICAnYW1hemluZ2x5JyxcclxuICAgICdhbWJlcicsXHJcbiAgICAnYW1iaWFuY2UnLFxyXG4gICAgJ2FtYmlndWl0eScsXHJcbiAgICAnYW1iaWd1b3VzJyxcclxuICAgICdhbWJpdGlvbicsXHJcbiAgICAnYW1iaXRpb3VzJyxcclxuICAgICdhbWJ1bGFuY2UnLFxyXG4gICAgJ2FtYnVzaCcsXHJcbiAgICAnYW1lbmRhYmxlJyxcclxuICAgICdhbWVuZG1lbnQnLFxyXG4gICAgJ2FtZW5kcycsXHJcbiAgICAnYW1lbml0eScsXHJcbiAgICAnYW1pYWJsZScsXHJcbiAgICAnYW1pY2FibHknLFxyXG4gICAgJ2FtaWQnLFxyXG4gICAgJ2FtaWdvJyxcclxuICAgICdhbWlubycsXHJcbiAgICAnYW1pc3MnLFxyXG4gICAgJ2FtbW9uaWEnLFxyXG4gICAgJ2FtbW9uaXVtJyxcclxuICAgICdhbW5lc3R5JyxcclxuICAgICdhbW5pb3RpYycsXHJcbiAgICAnYW1vbmcnLFxyXG4gICAgJ2Ftb3VudCcsXHJcbiAgICAnYW1wZXJhZ2UnLFxyXG4gICAgJ2FtcGxlJyxcclxuICAgICdhbXBsaWZpZXInLFxyXG4gICAgJ2FtcGxpZnknLFxyXG4gICAgJ2FtcGx5JyxcclxuICAgICdhbXVjaycsXHJcbiAgICAnYW11bGV0JyxcclxuICAgICdhbXVzYWJsZScsXHJcbiAgICAnYW11c2VkJyxcclxuICAgICdhbXVzZW1lbnQnLFxyXG4gICAgJ2FtdXNlcicsXHJcbiAgICAnYW11c2luZycsXHJcbiAgICAnYW5hY29uZGEnLFxyXG4gICAgJ2FuYWVyb2JpYycsXHJcbiAgICAnYW5hZ3JhbScsXHJcbiAgICAnYW5hdG9taXN0JyxcclxuICAgICdhbmF0b215JyxcclxuICAgICdhbmNob3InLFxyXG4gICAgJ2FuY2hvdnknLFxyXG4gICAgJ2FuY2llbnQnLFxyXG4gICAgJ2FuZHJvaWQnLFxyXG4gICAgJ2FuZW1pYScsXHJcbiAgICAnYW5lbWljJyxcclxuICAgICdhbmV1cmlzbScsXHJcbiAgICAnYW5ldycsXHJcbiAgICAnYW5nZWxmaXNoJyxcclxuICAgICdhbmdlbGljJyxcclxuICAgICdhbmdlcicsXHJcbiAgICAnYW5nbGVkJyxcclxuICAgICdhbmdsZXInLFxyXG4gICAgJ2FuZ2xlcycsXHJcbiAgICAnYW5nbGluZycsXHJcbiAgICAnYW5ncmlseScsXHJcbiAgICAnYW5ncmluZXNzJyxcclxuICAgICdhbmd1aXNoZWQnLFxyXG4gICAgJ2FuZ3VsYXInLFxyXG4gICAgJ2FuaW1hbCcsXHJcbiAgICAnYW5pbWF0ZScsXHJcbiAgICAnYW5pbWF0aW5nJyxcclxuICAgICdhbmltYXRpb24nLFxyXG4gICAgJ2FuaW1hdG9yJyxcclxuICAgICdhbmltZScsXHJcbiAgICAnYW5pbW9zaXR5JyxcclxuICAgICdhbmtsZScsXHJcbiAgICAnYW5uZXgnLFxyXG4gICAgJ2Fubm90YXRlJyxcclxuICAgICdhbm5vdW5jZXInLFxyXG4gICAgJ2Fubm95aW5nJyxcclxuICAgICdhbm51YWxseScsXHJcbiAgICAnYW5udWl0eScsXHJcbiAgICAnYW5vaW50ZXInLFxyXG4gICAgJ2Fub3RoZXInLFxyXG4gICAgJ2Fuc3dlcmluZycsXHJcbiAgICAnYW50YWNpZCcsXHJcbiAgICAnYW50YXJjdGljJyxcclxuICAgICdhbnRlYXRlcicsXHJcbiAgICAnYW50ZWxvcGUnLFxyXG4gICAgJ2FudGVubmFlJyxcclxuICAgICdhbnRoZW0nLFxyXG4gICAgJ2FudGhpbGwnLFxyXG4gICAgJ2FudGhvbG9neScsXHJcbiAgICAnYW50aWJvZHknLFxyXG4gICAgJ2FudGljcycsXHJcbiAgICAnYW50aWRvdGUnLFxyXG4gICAgJ2FudGloZXJvJyxcclxuICAgICdhbnRpcXVlbHknLFxyXG4gICAgJ2FudGlxdWVzJyxcclxuICAgICdhbnRpcXVpdHknLFxyXG4gICAgJ2FudGlydXN0JyxcclxuICAgICdhbnRpdG94aWMnLFxyXG4gICAgJ2FudGl0cnVzdCcsXHJcbiAgICAnYW50aXZpcmFsJyxcclxuICAgICdhbnRpdmlydXMnLFxyXG4gICAgJ2FudGxlcicsXHJcbiAgICAnYW50b255bScsXHJcbiAgICAnYW50c3knLFxyXG4gICAgJ2FudmlsJyxcclxuICAgICdhbnlib2R5JyxcclxuICAgICdhbnlob3cnLFxyXG4gICAgJ2FueW1vcmUnLFxyXG4gICAgJ2FueW9uZScsXHJcbiAgICAnYW55cGxhY2UnLFxyXG4gICAgJ2FueXRoaW5nJyxcclxuICAgICdhbnl0aW1lJyxcclxuICAgICdhbnl3YXknLFxyXG4gICAgJ2FueXdoZXJlJyxcclxuICAgICdhb3J0YScsXHJcbiAgICAnYXBhY2hlJyxcclxuICAgICdhcG9zdGxlJyxcclxuICAgICdhcHBlYWxpbmcnLFxyXG4gICAgJ2FwcGVhcicsXHJcbiAgICAnYXBwZWFzZScsXHJcbiAgICAnYXBwZWFzaW5nJyxcclxuICAgICdhcHBlbmRhZ2UnLFxyXG4gICAgJ2FwcGVuZGl4JyxcclxuICAgICdhcHBldGl0ZScsXHJcbiAgICAnYXBwZXRpemVyJyxcclxuICAgICdhcHBsYXVkJyxcclxuICAgICdhcHBsYXVzZScsXHJcbiAgICAnYXBwbGUnLFxyXG4gICAgJ2FwcGxpYW5jZScsXHJcbiAgICAnYXBwbGljYW50JyxcclxuICAgICdhcHBsaWVkJyxcclxuICAgICdhcHBseScsXHJcbiAgICAnYXBwb2ludGVlJyxcclxuICAgICdhcHByYWlzYWwnLFxyXG4gICAgJ2FwcHJhaXNlcicsXHJcbiAgICAnYXBwcmVoZW5kJyxcclxuICAgICdhcHByb2FjaCcsXHJcbiAgICAnYXBwcm92YWwnLFxyXG4gICAgJ2FwcHJvdmUnLFxyXG4gICAgJ2Fwcmljb3QnLFxyXG4gICAgJ2FwcmlsJyxcclxuICAgICdhcHJvbicsXHJcbiAgICAnYXB0aXR1ZGUnLFxyXG4gICAgJ2FwdGx5JyxcclxuICAgICdhcXVhJyxcclxuICAgICdhcXVlZHVjdCcsXHJcbiAgICAnYXJiaXRyYXJ5JyxcclxuICAgICdhcmJpdHJhdGUnLFxyXG4gICAgJ2FyZGVudGx5JyxcclxuICAgICdhcmVhJyxcclxuICAgICdhcmVuYScsXHJcbiAgICAnYXJndWFibGUnLFxyXG4gICAgJ2FyZ3VhYmx5JyxcclxuICAgICdhcmd1ZScsXHJcbiAgICAnYXJpc2UnLFxyXG4gICAgJ2FybWFkaWxsbycsXHJcbiAgICAnYXJtYmFuZCcsXHJcbiAgICAnYXJtY2hhaXInLFxyXG4gICAgJ2FybWVkJyxcclxuICAgICdhcm1mdWwnLFxyXG4gICAgJ2FybWhvbGUnLFxyXG4gICAgJ2FybWluZycsXHJcbiAgICAnYXJtbGVzcycsXHJcbiAgICAnYXJtb2lyZScsXHJcbiAgICAnYXJtb3JlZCcsXHJcbiAgICAnYXJtb3J5JyxcclxuICAgICdhcm1yZXN0JyxcclxuICAgICdhcm15JyxcclxuICAgICdhcm9tYScsXHJcbiAgICAnYXJvc2UnLFxyXG4gICAgJ2Fyb3VuZCcsXHJcbiAgICAnYXJvdXNhbCcsXHJcbiAgICAnYXJyYW5nZScsXHJcbiAgICAnYXJyYXknLFxyXG4gICAgJ2FycmVzdCcsXHJcbiAgICAnYXJyaXZhbCcsXHJcbiAgICAnYXJyaXZlJyxcclxuICAgICdhcnJvZ2FuY2UnLFxyXG4gICAgJ2Fycm9nYW50JyxcclxuICAgICdhcnNvbicsXHJcbiAgICAnYXJ0JyxcclxuICAgICdhc2NlbmQnLFxyXG4gICAgJ2FzY2Vuc2lvbicsXHJcbiAgICAnYXNjZW50JyxcclxuICAgICdhc2NlcnRhaW4nLFxyXG4gICAgJ2FzaGFtZWQnLFxyXG4gICAgJ2FzaGVuJyxcclxuICAgICdhc2hlcycsXHJcbiAgICAnYXNoeScsXHJcbiAgICAnYXNpZGUnLFxyXG4gICAgJ2Fza2V3JyxcclxuICAgICdhc2xlZXAnLFxyXG4gICAgJ2FzcGFyYWd1cycsXHJcbiAgICAnYXNwZWN0JyxcclxuICAgICdhc3BpcmF0ZScsXHJcbiAgICAnYXNwaXJlJyxcclxuICAgICdhc3BpcmluJyxcclxuICAgICdhc3RvbmlzaCcsXHJcbiAgICAnYXN0b3VuZCcsXHJcbiAgICAnYXN0cmlkZScsXHJcbiAgICAnYXN0cm9sb2d5JyxcclxuICAgICdhc3Ryb25hdXQnLFxyXG4gICAgJ2FzdHJvbm9teScsXHJcbiAgICAnYXN0dXRlJyxcclxuICAgICdhdGxhbnRpYycsXHJcbiAgICAnYXRsYXMnLFxyXG4gICAgJ2F0b20nLFxyXG4gICAgJ2F0b25hYmxlJyxcclxuICAgICdhdG9wJyxcclxuICAgICdhdHJpdW0nLFxyXG4gICAgJ2F0cm9jaW91cycsXHJcbiAgICAnYXRyb3BoeScsXHJcbiAgICAnYXR0YWNoJyxcclxuICAgICdhdHRhaW4nLFxyXG4gICAgJ2F0dGVtcHQnLFxyXG4gICAgJ2F0dGVuZGFudCcsXHJcbiAgICAnYXR0ZW5kZWUnLFxyXG4gICAgJ2F0dGVudGlvbicsXHJcbiAgICAnYXR0ZW50aXZlJyxcclxuICAgICdhdHRlc3QnLFxyXG4gICAgJ2F0dGljJyxcclxuICAgICdhdHRpcmUnLFxyXG4gICAgJ2F0dGl0dWRlJyxcclxuICAgICdhdHRyYWN0b3InLFxyXG4gICAgJ2F0dHJpYnV0ZScsXHJcbiAgICAnYXR5cGljYWwnLFxyXG4gICAgJ2F1Y3Rpb24nLFxyXG4gICAgJ2F1ZGFjaW91cycsXHJcbiAgICAnYXVkYWNpdHknLFxyXG4gICAgJ2F1ZGlibGUnLFxyXG4gICAgJ2F1ZGlibHknLFxyXG4gICAgJ2F1ZGllbmNlJyxcclxuICAgICdhdWRpbycsXHJcbiAgICAnYXVkaXRpb24nLFxyXG4gICAgJ2F1Z21lbnRlZCcsXHJcbiAgICAnYXVndXN0JyxcclxuICAgICdhdXRoZW50aWMnLFxyXG4gICAgJ2F1dGhvcicsXHJcbiAgICAnYXV0aXNtJyxcclxuICAgICdhdXRpc3RpYycsXHJcbiAgICAnYXV0b2dyYXBoJyxcclxuICAgICdhdXRvbWFrZXInLFxyXG4gICAgJ2F1dG9tYXRlZCcsXHJcbiAgICAnYXV0b21hdGljJyxcclxuICAgICdhdXRvcGlsb3QnLFxyXG4gICAgJ2F2YWlsYWJsZScsXHJcbiAgICAnYXZhbGFuY2hlJyxcclxuICAgICdhdmF0YXInLFxyXG4gICAgJ2F2ZW5nZScsXHJcbiAgICAnYXZlbmdpbmcnLFxyXG4gICAgJ2F2ZW51ZScsXHJcbiAgICAnYXZlcmFnZScsXHJcbiAgICAnYXZlcnNpb24nLFxyXG4gICAgJ2F2ZXJ0JyxcclxuICAgICdhdmlhdGlvbicsXHJcbiAgICAnYXZpYXRvcicsXHJcbiAgICAnYXZpZCcsXHJcbiAgICAnYXZvaWQnLFxyXG4gICAgJ2F3YWl0JyxcclxuICAgICdhd2FrZW4nLFxyXG4gICAgJ2F3YXJkJyxcclxuICAgICdhd2FyZScsXHJcbiAgICAnYXdoaWxlJyxcclxuICAgICdhd2t3YXJkJyxcclxuICAgICdhd25pbmcnLFxyXG4gICAgJ2F3b2tlJyxcclxuICAgICdhd3J5JyxcclxuICAgICdheGlzJyxcclxuICAgICdiYWJibGUnLFxyXG4gICAgJ2JhYmJsaW5nJyxcclxuICAgICdiYWJpZWQnLFxyXG4gICAgJ2JhYm9vbicsXHJcbiAgICAnYmFja2FjaGUnLFxyXG4gICAgJ2JhY2tib2FyZCcsXHJcbiAgICAnYmFja2JvbmVkJyxcclxuICAgICdiYWNrZHJvcCcsXHJcbiAgICAnYmFja2VkJyxcclxuICAgICdiYWNrZXInLFxyXG4gICAgJ2JhY2tmaWVsZCcsXHJcbiAgICAnYmFja2ZpcmUnLFxyXG4gICAgJ2JhY2toYW5kJyxcclxuICAgICdiYWNraW5nJyxcclxuICAgICdiYWNrbGFuZHMnLFxyXG4gICAgJ2JhY2tsYXNoJyxcclxuICAgICdiYWNrbGVzcycsXHJcbiAgICAnYmFja2xpZ2h0JyxcclxuICAgICdiYWNrbGl0JyxcclxuICAgICdiYWNrbG9nJyxcclxuICAgICdiYWNrcGFjaycsXHJcbiAgICAnYmFja3BlZGFsJyxcclxuICAgICdiYWNrcmVzdCcsXHJcbiAgICAnYmFja3Jvb20nLFxyXG4gICAgJ2JhY2tzaGlmdCcsXHJcbiAgICAnYmFja3NpZGUnLFxyXG4gICAgJ2JhY2tzbGlkJyxcclxuICAgICdiYWNrc3BhY2UnLFxyXG4gICAgJ2JhY2tzcGluJyxcclxuICAgICdiYWNrc3RhYicsXHJcbiAgICAnYmFja3N0YWdlJyxcclxuICAgICdiYWNrdGFsaycsXHJcbiAgICAnYmFja3RyYWNrJyxcclxuICAgICdiYWNrdXAnLFxyXG4gICAgJ2JhY2t3YXJkJyxcclxuICAgICdiYWNrd2FzaCcsXHJcbiAgICAnYmFja3dhdGVyJyxcclxuICAgICdiYWNreWFyZCcsXHJcbiAgICAnYmFjb24nLFxyXG4gICAgJ2JhY3RlcmlhJyxcclxuICAgICdiYWN0ZXJpdW0nLFxyXG4gICAgJ2JhZGFzcycsXHJcbiAgICAnYmFkZ2UnLFxyXG4gICAgJ2JhZGxhbmQnLFxyXG4gICAgJ2JhZGx5JyxcclxuICAgICdiYWRuZXNzJyxcclxuICAgICdiYWZmbGUnLFxyXG4gICAgJ2JhZmZsaW5nJyxcclxuICAgICdiYWdlbCcsXHJcbiAgICAnYmFnZnVsJyxcclxuICAgICdiYWdnYWdlJyxcclxuICAgICdiYWdnZWQnLFxyXG4gICAgJ2JhZ2dpZScsXHJcbiAgICAnYmFnZ2luZXNzJyxcclxuICAgICdiYWdnaW5nJyxcclxuICAgICdiYWdneScsXHJcbiAgICAnYmFncGlwZScsXHJcbiAgICAnYmFndWV0dGUnLFxyXG4gICAgJ2Jha2VkJyxcclxuICAgICdiYWtlcnknLFxyXG4gICAgJ2Jha2VzaG9wJyxcclxuICAgICdiYWtpbmcnLFxyXG4gICAgJ2JhbGFuY2UnLFxyXG4gICAgJ2JhbGFuY2luZycsXHJcbiAgICAnYmFsY29ueScsXHJcbiAgICAnYmFsbXknLFxyXG4gICAgJ2JhbHNhbWljJyxcclxuICAgICdiYW1ib28nLFxyXG4gICAgJ2JhbmFuYScsXHJcbiAgICAnYmFuaXNoJyxcclxuICAgICdiYW5pc3RlcicsXHJcbiAgICAnYmFuam8nLFxyXG4gICAgJ2JhbmthYmxlJyxcclxuICAgICdiYW5rYm9vaycsXHJcbiAgICAnYmFua2VkJyxcclxuICAgICdiYW5rZXInLFxyXG4gICAgJ2JhbmtpbmcnLFxyXG4gICAgJ2Jhbmtub3RlJyxcclxuICAgICdiYW5rcm9sbCcsXHJcbiAgICAnYmFubmVyJyxcclxuICAgICdiYW5uaXN0ZXInLFxyXG4gICAgJ2JhbnNoZWUnLFxyXG4gICAgJ2JhbnRlcicsXHJcbiAgICAnYmFyYmVjdWUnLFxyXG4gICAgJ2JhcmJlZCcsXHJcbiAgICAnYmFyYmVsbCcsXHJcbiAgICAnYmFyYmVyJyxcclxuICAgICdiYXJjb2RlJyxcclxuICAgICdiYXJnZScsXHJcbiAgICAnYmFyZ3JhcGgnLFxyXG4gICAgJ2JhcmlzdGEnLFxyXG4gICAgJ2Jhcml0b25lJyxcclxuICAgICdiYXJsZXknLFxyXG4gICAgJ2Jhcm1haWQnLFxyXG4gICAgJ2Jhcm1hbicsXHJcbiAgICAnYmFybicsXHJcbiAgICAnYmFyb21ldGVyJyxcclxuICAgICdiYXJyYWNrJyxcclxuICAgICdiYXJyYWN1ZGEnLFxyXG4gICAgJ2JhcnJlbCcsXHJcbiAgICAnYmFycmV0dGUnLFxyXG4gICAgJ2JhcnJpY2FkZScsXHJcbiAgICAnYmFycmllcicsXHJcbiAgICAnYmFyc3Rvb2wnLFxyXG4gICAgJ2JhcnRlbmRlcicsXHJcbiAgICAnYmFydGVyZXInLFxyXG4gICAgJ2Jhc2gnLFxyXG4gICAgJ2Jhc2ljYWxseScsXHJcbiAgICAnYmFzaWNzJyxcclxuICAgICdiYXNpbCcsXHJcbiAgICAnYmFzaW4nLFxyXG4gICAgJ2Jhc2lzJyxcclxuICAgICdiYXNrZXQnLFxyXG4gICAgJ2JhdGJveScsXHJcbiAgICAnYmF0Y2gnLFxyXG4gICAgJ2JhdGgnLFxyXG4gICAgJ2JhdG9uJyxcclxuICAgICdiYXRzJyxcclxuICAgICdiYXR0YWxpb24nLFxyXG4gICAgJ2JhdHRlcmVkJyxcclxuICAgICdiYXR0ZXJpbmcnLFxyXG4gICAgJ2JhdHRlcnknLFxyXG4gICAgJ2JhdHRpbmcnLFxyXG4gICAgJ2JhdHRsZScsXHJcbiAgICAnYmF1YmxlJyxcclxuICAgICdiYXpvb2thJyxcclxuICAgICdibGFiYmVyJyxcclxuICAgICdibGFkZGVyJyxcclxuICAgICdibGFkZScsXHJcbiAgICAnYmxhaCcsXHJcbiAgICAnYmxhbWUnLFxyXG4gICAgJ2JsYW1pbmcnLFxyXG4gICAgJ2JsYW5jaGluZycsXHJcbiAgICAnYmxhbmRuZXNzJyxcclxuICAgICdibGFuaycsXHJcbiAgICAnYmxhc3BoZW1lJyxcclxuICAgICdibGFzcGhlbXknLFxyXG4gICAgJ2JsYXN0JyxcclxuICAgICdibGF0YW5jeScsXHJcbiAgICAnYmxhdGFudGx5JyxcclxuICAgICdibGF6ZXInLFxyXG4gICAgJ2JsYXppbmcnLFxyXG4gICAgJ2JsZWFjaCcsXHJcbiAgICAnYmxlYWsnLFxyXG4gICAgJ2JsZWVwJyxcclxuICAgICdibGVtaXNoJyxcclxuICAgICdibGVuZCcsXHJcbiAgICAnYmxlc3MnLFxyXG4gICAgJ2JsaWdodGVkJyxcclxuICAgICdibGltcCcsXHJcbiAgICAnYmxpbmcnLFxyXG4gICAgJ2JsaW5rZWQnLFxyXG4gICAgJ2JsaW5rZXInLFxyXG4gICAgJ2JsaW5raW5nJyxcclxuICAgICdibGlua3MnLFxyXG4gICAgJ2JsaXAnLFxyXG4gICAgJ2JsaXNzZnVsJyxcclxuICAgICdibGl0eicsXHJcbiAgICAnYmxpenphcmQnLFxyXG4gICAgJ2Jsb2F0ZWQnLFxyXG4gICAgJ2Jsb2F0aW5nJyxcclxuICAgICdibG9iJyxcclxuICAgICdibG9nJyxcclxuICAgICdibG9vbWVycycsXHJcbiAgICAnYmxvb21pbmcnLFxyXG4gICAgJ2Jsb29wZXInLFxyXG4gICAgJ2Jsb3QnLFxyXG4gICAgJ2Jsb3VzZScsXHJcbiAgICAnYmx1YmJlcicsXHJcbiAgICAnYmx1ZmYnLFxyXG4gICAgJ2JsdWlzaCcsXHJcbiAgICAnYmx1bmRlcmVyJyxcclxuICAgICdibHVudCcsXHJcbiAgICAnYmx1cmInLFxyXG4gICAgJ2JsdXJyZWQnLFxyXG4gICAgJ2JsdXJyeScsXHJcbiAgICAnYmx1cnQnLFxyXG4gICAgJ2JsdXNoJyxcclxuICAgICdibHVzdGVyeScsXHJcbiAgICAnYm9hc3RlcicsXHJcbiAgICAnYm9hc3RmdWwnLFxyXG4gICAgJ2JvYXN0aW5nJyxcclxuICAgICdib2F0JyxcclxuICAgICdib2JiZWQnLFxyXG4gICAgJ2JvYmJpbmcnLFxyXG4gICAgJ2JvYmJsZScsXHJcbiAgICAnYm9iY2F0JyxcclxuICAgICdib2JzbGVkJyxcclxuICAgICdib2J0YWlsJyxcclxuICAgICdib2RhY2lvdXMnLFxyXG4gICAgJ2JvZHknLFxyXG4gICAgJ2JvZ2dlZCcsXHJcbiAgICAnYm9nZ2xlJyxcclxuICAgICdib2d1cycsXHJcbiAgICAnYm9pbCcsXHJcbiAgICAnYm9rJyxcclxuICAgICdib2xzdGVyJyxcclxuICAgICdib2x0JyxcclxuICAgICdib25hbnphJyxcclxuICAgICdib25kZWQnLFxyXG4gICAgJ2JvbmRpbmcnLFxyXG4gICAgJ2JvbmRsZXNzJyxcclxuICAgICdib25lZCcsXHJcbiAgICAnYm9uZWhlYWQnLFxyXG4gICAgJ2JvbmVsZXNzJyxcclxuICAgICdib25lbGlrZScsXHJcbiAgICAnYm9uZXknLFxyXG4gICAgJ2JvbmZpcmUnLFxyXG4gICAgJ2Jvbm5ldCcsXHJcbiAgICAnYm9uc2FpJyxcclxuICAgICdib251cycsXHJcbiAgICAnYm9ueScsXHJcbiAgICAnYm9vZ2V5bWFuJyxcclxuICAgICdib29naWVtYW4nLFxyXG4gICAgJ2Jvb2snLFxyXG4gICAgJ2Jvb25kb2NrcycsXHJcbiAgICAnYm9vdGVkJyxcclxuICAgICdib290aCcsXHJcbiAgICAnYm9vdGllJyxcclxuICAgICdib290aW5nJyxcclxuICAgICdib290bGFjZScsXHJcbiAgICAnYm9vdGxlZycsXHJcbiAgICAnYm9vdHMnLFxyXG4gICAgJ2Jvb3p5JyxcclxuICAgICdib3JheCcsXHJcbiAgICAnYm9yaW5nJyxcclxuICAgICdib3JvdWdoJyxcclxuICAgICdib3Jyb3dlcicsXHJcbiAgICAnYm9ycm93aW5nJyxcclxuICAgICdib3NzJyxcclxuICAgICdib3RhbmljYWwnLFxyXG4gICAgJ2JvdGFuaXN0JyxcclxuICAgICdib3RhbnknLFxyXG4gICAgJ2JvdGNoJyxcclxuICAgICdib3RoJyxcclxuICAgICdib3R0bGUnLFxyXG4gICAgJ2JvdHRsaW5nJyxcclxuICAgICdib3R0b20nLFxyXG4gICAgJ2JvdW5jZScsXHJcbiAgICAnYm91bmNpbmcnLFxyXG4gICAgJ2JvdW5jeScsXHJcbiAgICAnYm91bmRpbmcnLFxyXG4gICAgJ2JvdW5kbGVzcycsXHJcbiAgICAnYm91bnRpZnVsJyxcclxuICAgICdib3ZpbmUnLFxyXG4gICAgJ2JveGNhcicsXHJcbiAgICAnYm94ZXInLFxyXG4gICAgJ2JveGluZycsXHJcbiAgICAnYm94bGlrZScsXHJcbiAgICAnYm94eScsXHJcbiAgICAnYnJlYWNoJyxcclxuICAgICdicmVhdGgnLFxyXG4gICAgJ2JyZWVjaGVzJyxcclxuICAgICdicmVlY2hpbmcnLFxyXG4gICAgJ2JyZWVkZXInLFxyXG4gICAgJ2JyZWVkaW5nJyxcclxuICAgICdicmVlemUnLFxyXG4gICAgJ2JyZWV6eScsXHJcbiAgICAnYnJldGhyZW4nLFxyXG4gICAgJ2JyZXdlcnknLFxyXG4gICAgJ2JyZXdpbmcnLFxyXG4gICAgJ2JyaWFyJyxcclxuICAgICdicmliZScsXHJcbiAgICAnYnJpY2snLFxyXG4gICAgJ2JyaWRlJyxcclxuICAgICdicmlkZ2VkJyxcclxuICAgICdicmlnYWRlJyxcclxuICAgICdicmlnaHQnLFxyXG4gICAgJ2JyaWxsaWFudCcsXHJcbiAgICAnYnJpbScsXHJcbiAgICAnYnJpbmcnLFxyXG4gICAgJ2JyaW5rJyxcclxuICAgICdicmlza2V0JyxcclxuICAgICdicmlza2x5JyxcclxuICAgICdicmlza25lc3MnLFxyXG4gICAgJ2JyaXN0bGUnLFxyXG4gICAgJ2JyaXR0bGUnLFxyXG4gICAgJ2Jyb2FkYmFuZCcsXHJcbiAgICAnYnJvYWRjYXN0JyxcclxuICAgICdicm9hZGVuJyxcclxuICAgICdicm9hZGx5JyxcclxuICAgICdicm9hZG5lc3MnLFxyXG4gICAgJ2Jyb2Fkc2lkZScsXHJcbiAgICAnYnJvYWR3YXlzJyxcclxuICAgICdicm9pbGVyJyxcclxuICAgICdicm9pbGluZycsXHJcbiAgICAnYnJva2VuJyxcclxuICAgICdicm9rZXInLFxyXG4gICAgJ2Jyb25jaGlhbCcsXHJcbiAgICAnYnJvbmNvJyxcclxuICAgICdicm9uemUnLFxyXG4gICAgJ2Jyb256aW5nJyxcclxuICAgICdicm9vaycsXHJcbiAgICAnYnJvb20nLFxyXG4gICAgJ2Jyb3VnaHQnLFxyXG4gICAgJ2Jyb3diZWF0JyxcclxuICAgICdicm93bm5vc2UnLFxyXG4gICAgJ2Jyb3dzZScsXHJcbiAgICAnYnJvd3NpbmcnLFxyXG4gICAgJ2JydWlzaW5nJyxcclxuICAgICdicnVuY2gnLFxyXG4gICAgJ2JydW5ldHRlJyxcclxuICAgICdicnVudCcsXHJcbiAgICAnYnJ1c2gnLFxyXG4gICAgJ2JydXNzZWxzJyxcclxuICAgICdicnV0ZScsXHJcbiAgICAnYnJ1dGlzaGx5JyxcclxuICAgICdidWJibGUnLFxyXG4gICAgJ2J1YmJsaW5nJyxcclxuICAgICdidWJibHknLFxyXG4gICAgJ2J1Y2NhbmVlcicsXHJcbiAgICAnYnVja2VkJyxcclxuICAgICdidWNrZXQnLFxyXG4gICAgJ2J1Y2tsZScsXHJcbiAgICAnYnVja3Nob3QnLFxyXG4gICAgJ2J1Y2tza2luJyxcclxuICAgICdidWNrdG9vdGgnLFxyXG4gICAgJ2J1Y2t3aGVhdCcsXHJcbiAgICAnYnVkZGhpc20nLFxyXG4gICAgJ2J1ZGRoaXN0JyxcclxuICAgICdidWRkaW5nJyxcclxuICAgICdidWRkeScsXHJcbiAgICAnYnVkZ2V0JyxcclxuICAgICdidWZmYWxvJyxcclxuICAgICdidWZmZWQnLFxyXG4gICAgJ2J1ZmZlcicsXHJcbiAgICAnYnVmZmluZycsXHJcbiAgICAnYnVmZm9vbicsXHJcbiAgICAnYnVnZ3knLFxyXG4gICAgJ2J1bGInLFxyXG4gICAgJ2J1bGdlJyxcclxuICAgICdidWxnaW5lc3MnLFxyXG4gICAgJ2J1bGd1cicsXHJcbiAgICAnYnVsaycsXHJcbiAgICAnYnVsbGRvZycsXHJcbiAgICAnYnVsbGRvemVyJyxcclxuICAgICdidWxsZmlnaHQnLFxyXG4gICAgJ2J1bGxmcm9nJyxcclxuICAgICdidWxsaG9ybicsXHJcbiAgICAnYnVsbGlvbicsXHJcbiAgICAnYnVsbGlzaCcsXHJcbiAgICAnYnVsbHBlbicsXHJcbiAgICAnYnVsbHJpbmcnLFxyXG4gICAgJ2J1bGxzZXllJyxcclxuICAgICdidWxsd2hpcCcsXHJcbiAgICAnYnVsbHknLFxyXG4gICAgJ2J1bmNoJyxcclxuICAgICdidW5kbGUnLFxyXG4gICAgJ2J1bmdlZScsXHJcbiAgICAnYnVuaW9uJyxcclxuICAgICdidW5rYmVkJyxcclxuICAgICdidW5raG91c2UnLFxyXG4gICAgJ2J1bmttYXRlJyxcclxuICAgICdidW5ueScsXHJcbiAgICAnYnVudCcsXHJcbiAgICAnYnVzYm95JyxcclxuICAgICdidXNoJyxcclxuICAgICdidXNpbHknLFxyXG4gICAgJ2J1c2xvYWQnLFxyXG4gICAgJ2J1c3QnLFxyXG4gICAgJ2J1c3lib2R5JyxcclxuICAgICdidXp6JyxcclxuICAgICdjYWJhbmEnLFxyXG4gICAgJ2NhYmJhZ2UnLFxyXG4gICAgJ2NhYmJpZScsXHJcbiAgICAnY2FiZHJpdmVyJyxcclxuICAgICdjYWJsZScsXHJcbiAgICAnY2Fib29zZScsXHJcbiAgICAnY2FjaGUnLFxyXG4gICAgJ2NhY2tsZScsXHJcbiAgICAnY2FjdGknLFxyXG4gICAgJ2NhY3R1cycsXHJcbiAgICAnY2FkZGllJyxcclxuICAgICdjYWRkeScsXHJcbiAgICAnY2FkZXQnLFxyXG4gICAgJ2NhZGlsbGFjJyxcclxuICAgICdjYWRtaXVtJyxcclxuICAgICdjYWdlJyxcclxuICAgICdjYWhvb3RzJyxcclxuICAgICdjYWtlJyxcclxuICAgICdjYWxhbWFyaScsXHJcbiAgICAnY2FsYW1pdHknLFxyXG4gICAgJ2NhbGNpdW0nLFxyXG4gICAgJ2NhbGN1bGF0ZScsXHJcbiAgICAnY2FsY3VsdXMnLFxyXG4gICAgJ2NhbGliZXInLFxyXG4gICAgJ2NhbGlicmF0ZScsXHJcbiAgICAnY2FsbScsXHJcbiAgICAnY2Fsb3JpYycsXHJcbiAgICAnY2Fsb3JpZScsXHJcbiAgICAnY2Fsem9uZScsXHJcbiAgICAnY2FtY29yZGVyJyxcclxuICAgICdjYW1lbycsXHJcbiAgICAnY2FtZXJhJyxcclxuICAgICdjYW1pc29sZScsXHJcbiAgICAnY2FtcGVyJyxcclxuICAgICdjYW1wZmlyZScsXHJcbiAgICAnY2FtcGluZycsXHJcbiAgICAnY2FtcHNpdGUnLFxyXG4gICAgJ2NhbXB1cycsXHJcbiAgICAnY2FuYWwnLFxyXG4gICAgJ2NhbmFyeScsXHJcbiAgICAnY2FuY2VsJyxcclxuICAgICdjYW5kaWVkJyxcclxuICAgICdjYW5kbGUnLFxyXG4gICAgJ2NhbmR5JyxcclxuICAgICdjYW5lJyxcclxuICAgICdjYW5pbmUnLFxyXG4gICAgJ2NhbmlzdGVyJyxcclxuICAgICdjYW5uYWJpcycsXHJcbiAgICAnY2FubmVkJyxcclxuICAgICdjYW5uaW5nJyxcclxuICAgICdjYW5ub24nLFxyXG4gICAgJ2Nhbm5vdCcsXHJcbiAgICAnY2Fub2xhJyxcclxuICAgICdjYW5vbicsXHJcbiAgICAnY2Fub3BlbmVyJyxcclxuICAgICdjYW5vcHknLFxyXG4gICAgJ2NhbnRlZW4nLFxyXG4gICAgJ2NhbnlvbicsXHJcbiAgICAnY2FwYWJsZScsXHJcbiAgICAnY2FwYWJseScsXHJcbiAgICAnY2FwYWNpdHknLFxyXG4gICAgJ2NhcGUnLFxyXG4gICAgJ2NhcGlsbGFyeScsXHJcbiAgICAnY2FwaXRhbCcsXHJcbiAgICAnY2FwaXRvbCcsXHJcbiAgICAnY2FwcGVkJyxcclxuICAgICdjYXByaWNvcm4nLFxyXG4gICAgJ2NhcHNpemUnLFxyXG4gICAgJ2NhcHN1bGUnLFxyXG4gICAgJ2NhcHRpb24nLFxyXG4gICAgJ2NhcHRpdmF0ZScsXHJcbiAgICAnY2FwdGl2ZScsXHJcbiAgICAnY2FwdGl2aXR5JyxcclxuICAgICdjYXB0dXJlJyxcclxuICAgICdjYXJhbWVsJyxcclxuICAgICdjYXJhdCcsXHJcbiAgICAnY2FyYXZhbicsXHJcbiAgICAnY2FyYm9uJyxcclxuICAgICdjYXJkYm9hcmQnLFxyXG4gICAgJ2NhcmRlZCcsXHJcbiAgICAnY2FyZGlhYycsXHJcbiAgICAnY2FyZGlnYW4nLFxyXG4gICAgJ2NhcmRpbmFsJyxcclxuICAgICdjYXJkc3RvY2snLFxyXG4gICAgJ2NhcmVmdWxseScsXHJcbiAgICAnY2FyZWdpdmVyJyxcclxuICAgICdjYXJlbGVzcycsXHJcbiAgICAnY2FyZXNzJyxcclxuICAgICdjYXJldGFrZXInLFxyXG4gICAgJ2NhcmdvJyxcclxuICAgICdjYXJpbmcnLFxyXG4gICAgJ2Nhcmxlc3MnLFxyXG4gICAgJ2NhcmxvYWQnLFxyXG4gICAgJ2Nhcm1ha2VyJyxcclxuICAgICdjYXJuYWdlJyxcclxuICAgICdjYXJuYXRpb24nLFxyXG4gICAgJ2Nhcm5pdmFsJyxcclxuICAgICdjYXJuaXZvcmUnLFxyXG4gICAgJ2Nhcm9sJyxcclxuICAgICdjYXJwZW50ZXInLFxyXG4gICAgJ2NhcnBlbnRyeScsXHJcbiAgICAnY2FycG9vbCcsXHJcbiAgICAnY2FycG9ydCcsXHJcbiAgICAnY2FycmllZCcsXHJcbiAgICAnY2Fycm90JyxcclxuICAgICdjYXJyb3VzZWwnLFxyXG4gICAgJ2NhcnJ5JyxcclxuICAgICdjYXJ0ZWwnLFxyXG4gICAgJ2NhcnRsb2FkJyxcclxuICAgICdjYXJ0b24nLFxyXG4gICAgJ2NhcnRvb24nLFxyXG4gICAgJ2NhcnRyaWRnZScsXHJcbiAgICAnY2FydHdoZWVsJyxcclxuICAgICdjYXJ2ZScsXHJcbiAgICAnY2FydmluZycsXHJcbiAgICAnY2Fyd2FzaCcsXHJcbiAgICAnY2FzY2FkZScsXHJcbiAgICAnY2FzZScsXHJcbiAgICAnY2FzaCcsXHJcbiAgICAnY2FzaW5nJyxcclxuICAgICdjYXNpbm8nLFxyXG4gICAgJ2Nhc2tldCcsXHJcbiAgICAnY2Fzc2V0dGUnLFxyXG4gICAgJ2Nhc3VhbGx5JyxcclxuICAgICdjYXN1YWx0eScsXHJcbiAgICAnY2F0YWNvbWInLFxyXG4gICAgJ2NhdGFsb2cnLFxyXG4gICAgJ2NhdGFseXN0JyxcclxuICAgICdjYXRhbHl6ZScsXHJcbiAgICAnY2F0YXB1bHQnLFxyXG4gICAgJ2NhdGFyYWN0JyxcclxuICAgICdjYXRhdG9uaWMnLFxyXG4gICAgJ2NhdGNhbGwnLFxyXG4gICAgJ2NhdGNoYWJsZScsXHJcbiAgICAnY2F0Y2hlcicsXHJcbiAgICAnY2F0Y2hpbmcnLFxyXG4gICAgJ2NhdGNoeScsXHJcbiAgICAnY2F0ZXJlcicsXHJcbiAgICAnY2F0ZXJpbmcnLFxyXG4gICAgJ2NhdGZpZ2h0JyxcclxuICAgICdjYXRmaXNoJyxcclxuICAgICdjYXRoZWRyYWwnLFxyXG4gICAgJ2NhdGhvdXNlJyxcclxuICAgICdjYXRsaWtlJyxcclxuICAgICdjYXRuYXAnLFxyXG4gICAgJ2NhdG5pcCcsXHJcbiAgICAnY2F0c3VwJyxcclxuICAgICdjYXR0YWlsJyxcclxuICAgICdjYXR0aXNobHknLFxyXG4gICAgJ2NhdHRsZScsXHJcbiAgICAnY2F0dHknLFxyXG4gICAgJ2NhdHdhbGsnLFxyXG4gICAgJ2NhdWNhc2lhbicsXHJcbiAgICAnY2F1Y3VzJyxcclxuICAgICdjYXVzYWwnLFxyXG4gICAgJ2NhdXNhdGlvbicsXHJcbiAgICAnY2F1c2UnLFxyXG4gICAgJ2NhdXNpbmcnLFxyXG4gICAgJ2NhdXRlcml6ZScsXHJcbiAgICAnY2F1dGlvbicsXHJcbiAgICAnY2F1dGlvdXMnLFxyXG4gICAgJ2NhdmFsaWVyJyxcclxuICAgICdjYXZhbHJ5JyxcclxuICAgICdjYXZpYXInLFxyXG4gICAgJ2Nhdml0eScsXHJcbiAgICAnY2VkYXInLFxyXG4gICAgJ2NlbGVyeScsXHJcbiAgICAnY2VsZXN0aWFsJyxcclxuICAgICdjZWxpYmFjeScsXHJcbiAgICAnY2VsaWJhdGUnLFxyXG4gICAgJ2NlbHRpYycsXHJcbiAgICAnY2VtZW50JyxcclxuICAgICdjZW5zdXMnLFxyXG4gICAgJ2NlcmFtaWNzJyxcclxuICAgICdjZXJlbW9ueScsXHJcbiAgICAnY2VydGFpbmx5JyxcclxuICAgICdjZXJ0YWludHknLFxyXG4gICAgJ2NlcnRpZmllZCcsXHJcbiAgICAnY2VydGlmeScsXHJcbiAgICAnY2VzYXJlYW4nLFxyXG4gICAgJ2Nlc3Nwb29sJyxcclxuICAgICdjaGFmZScsXHJcbiAgICAnY2hhZmZpbmcnLFxyXG4gICAgJ2NoYWluJyxcclxuICAgICdjaGFpcicsXHJcbiAgICAnY2hhbGljZScsXHJcbiAgICAnY2hhbGxlbmdlJyxcclxuICAgICdjaGFtYmVyJyxcclxuICAgICdjaGFtb21pbGUnLFxyXG4gICAgJ2NoYW1waW9uJyxcclxuICAgICdjaGFuY2UnLFxyXG4gICAgJ2NoYW5nZScsXHJcbiAgICAnY2hhbm5lbCcsXHJcbiAgICAnY2hhbnQnLFxyXG4gICAgJ2NoYW9zJyxcclxuICAgICdjaGFwZXJvbmUnLFxyXG4gICAgJ2NoYXBsYWluJyxcclxuICAgICdjaGFwcGVkJyxcclxuICAgICdjaGFwcycsXHJcbiAgICAnY2hhcHRlcicsXHJcbiAgICAnY2hhcmFjdGVyJyxcclxuICAgICdjaGFyYnJvaWwnLFxyXG4gICAgJ2NoYXJjb2FsJyxcclxuICAgICdjaGFyZ2VyJyxcclxuICAgICdjaGFyZ2luZycsXHJcbiAgICAnY2hhcmlvdCcsXHJcbiAgICAnY2hhcml0eScsXHJcbiAgICAnY2hhcm0nLFxyXG4gICAgJ2NoYXJyZWQnLFxyXG4gICAgJ2NoYXJ0ZXInLFxyXG4gICAgJ2NoYXJ0aW5nJyxcclxuICAgICdjaGFzZScsXHJcbiAgICAnY2hhc2luZycsXHJcbiAgICAnY2hhc3RlJyxcclxuICAgICdjaGFzdGlzZScsXHJcbiAgICAnY2hhc3RpdHknLFxyXG4gICAgJ2NoYXRyb29tJyxcclxuICAgICdjaGF0dGVyJyxcclxuICAgICdjaGF0dGluZycsXHJcbiAgICAnY2hhdHR5JyxcclxuICAgICdjaGVhdGluZycsXHJcbiAgICAnY2hlZGRhcicsXHJcbiAgICAnY2hlZWsnLFxyXG4gICAgJ2NoZWVyJyxcclxuICAgICdjaGVlc2UnLFxyXG4gICAgJ2NoZWVzeScsXHJcbiAgICAnY2hlZicsXHJcbiAgICAnY2hlbWljYWxzJyxcclxuICAgICdjaGVtaXN0JyxcclxuICAgICdjaGVtbycsXHJcbiAgICAnY2hlcmlzaGVyJyxcclxuICAgICdjaGVydWInLFxyXG4gICAgJ2NoZXNzJyxcclxuICAgICdjaGVzdCcsXHJcbiAgICAnY2hldnJvbicsXHJcbiAgICAnY2hldnknLFxyXG4gICAgJ2NoZXdhYmxlJyxcclxuICAgICdjaGV3ZXInLFxyXG4gICAgJ2NoZXdpbmcnLFxyXG4gICAgJ2NoZXd5JyxcclxuICAgICdjaGllZicsXHJcbiAgICAnY2hpaHVhaHVhJyxcclxuICAgICdjaGlsZGNhcmUnLFxyXG4gICAgJ2NoaWxkaG9vZCcsXHJcbiAgICAnY2hpbGRpc2gnLFxyXG4gICAgJ2NoaWxkbGVzcycsXHJcbiAgICAnY2hpbGRsaWtlJyxcclxuICAgICdjaGlsaScsXHJcbiAgICAnY2hpbGwnLFxyXG4gICAgJ2NoaW1wJyxcclxuICAgICdjaGlwJyxcclxuICAgICdjaGlycGluZycsXHJcbiAgICAnY2hpcnB5JyxcclxuICAgICdjaGl0Y2hhdCcsXHJcbiAgICAnY2hpdmFscnknLFxyXG4gICAgJ2NoaXZlJyxcclxuICAgICdjaGxvcmlkZScsXHJcbiAgICAnY2hsb3JpbmUnLFxyXG4gICAgJ2Nob2ljZScsXHJcbiAgICAnY2hva2Vob2xkJyxcclxuICAgICdjaG9raW5nJyxcclxuICAgICdjaG9tcCcsXHJcbiAgICAnY2hvb3NlcicsXHJcbiAgICAnY2hvb3NpbmcnLFxyXG4gICAgJ2Nob29zeScsXHJcbiAgICAnY2hvcCcsXHJcbiAgICAnY2hvc2VuJyxcclxuICAgICdjaG93ZGVyJyxcclxuICAgICdjaG93dGltZScsXHJcbiAgICAnY2hyb21lJyxcclxuICAgICdjaHViYnknLFxyXG4gICAgJ2NodWNrJyxcclxuICAgICdjaHVnJyxcclxuICAgICdjaHVtbXknLFxyXG4gICAgJ2NodW1wJyxcclxuICAgICdjaHVuaycsXHJcbiAgICAnY2h1cm4nLFxyXG4gICAgJ2NodXRlJyxcclxuICAgICdjaWRlcicsXHJcbiAgICAnY2lsYW50cm8nLFxyXG4gICAgJ2NpbmNoJyxcclxuICAgICdjaW5lbWEnLFxyXG4gICAgJ2Npbm5hbW9uJyxcclxuICAgICdjaXJjbGUnLFxyXG4gICAgJ2NpcmNsaW5nJyxcclxuICAgICdjaXJjdWxhcicsXHJcbiAgICAnY2lyY3VsYXRlJyxcclxuICAgICdjaXJjdXMnLFxyXG4gICAgJ2NpdGFibGUnLFxyXG4gICAgJ2NpdGFkZWwnLFxyXG4gICAgJ2NpdGF0aW9uJyxcclxuICAgICdjaXRpemVuJyxcclxuICAgICdjaXRyaWMnLFxyXG4gICAgJ2NpdHJ1cycsXHJcbiAgICAnY2l0eScsXHJcbiAgICAnY2l2aWMnLFxyXG4gICAgJ2NpdmlsJyxcclxuICAgICdjbGFkJyxcclxuICAgICdjbGFpbScsXHJcbiAgICAnY2xhbWJha2UnLFxyXG4gICAgJ2NsYW1teScsXHJcbiAgICAnY2xhbW9yJyxcclxuICAgICdjbGFtcCcsXHJcbiAgICAnY2xhbXNoZWxsJyxcclxuICAgICdjbGFuZycsXHJcbiAgICAnY2xhbmtpbmcnLFxyXG4gICAgJ2NsYXBwZWQnLFxyXG4gICAgJ2NsYXBwZXInLFxyXG4gICAgJ2NsYXBwaW5nJyxcclxuICAgICdjbGFyaWZ5JyxcclxuICAgICdjbGFyaW5ldCcsXHJcbiAgICAnY2xhcml0eScsXHJcbiAgICAnY2xhc2gnLFxyXG4gICAgJ2NsYXNwJyxcclxuICAgICdjbGFzcycsXHJcbiAgICAnY2xhdHRlcicsXHJcbiAgICAnY2xhdXNlJyxcclxuICAgICdjbGF2aWNsZScsXHJcbiAgICAnY2xhdycsXHJcbiAgICAnY2xheScsXHJcbiAgICAnY2xlYW4nLFxyXG4gICAgJ2NsZWFyJyxcclxuICAgICdjbGVhdCcsXHJcbiAgICAnY2xlYXZlcicsXHJcbiAgICAnY2xlZnQnLFxyXG4gICAgJ2NsZW5jaCcsXHJcbiAgICAnY2xlcmd5bWFuJyxcclxuICAgICdjbGVyaWNhbCcsXHJcbiAgICAnY2xlcmsnLFxyXG4gICAgJ2NsZXZlcicsXHJcbiAgICAnY2xpY2tlcicsXHJcbiAgICAnY2xpZW50JyxcclxuICAgICdjbGltYXRlJyxcclxuICAgICdjbGltYXRpYycsXHJcbiAgICAnY2xpbmcnLFxyXG4gICAgJ2NsaW5pYycsXHJcbiAgICAnY2xpbmtpbmcnLFxyXG4gICAgJ2NsaXAnLFxyXG4gICAgJ2NsaXF1ZScsXHJcbiAgICAnY2xvYWsnLFxyXG4gICAgJ2Nsb2JiZXInLFxyXG4gICAgJ2Nsb2NrJyxcclxuICAgICdjbG9uZScsXHJcbiAgICAnY2xvbmluZycsXHJcbiAgICAnY2xvc2FibGUnLFxyXG4gICAgJ2Nsb3N1cmUnLFxyXG4gICAgJ2Nsb3RoZXMnLFxyXG4gICAgJ2Nsb3RoaW5nJyxcclxuICAgICdjbG91ZCcsXHJcbiAgICAnY2xvdmVyJyxcclxuICAgICdjbHViYmVkJyxcclxuICAgICdjbHViYmluZycsXHJcbiAgICAnY2x1YmhvdXNlJyxcclxuICAgICdjbHVtcCcsXHJcbiAgICAnY2x1bXNpbHknLFxyXG4gICAgJ2NsdW1zeScsXHJcbiAgICAnY2x1bmt5JyxcclxuICAgICdjbHVzdGVyZWQnLFxyXG4gICAgJ2NsdXRjaCcsXHJcbiAgICAnY2x1dHRlcicsXHJcbiAgICAnY29hY2gnLFxyXG4gICAgJ2NvYWd1bGFudCcsXHJcbiAgICAnY29hc3RhbCcsXHJcbiAgICAnY29hc3RlcicsXHJcbiAgICAnY29hc3RpbmcnLFxyXG4gICAgJ2NvYXN0bGFuZCcsXHJcbiAgICAnY29hc3RsaW5lJyxcclxuICAgICdjb2F0JyxcclxuICAgICdjb2F1dGhvcicsXHJcbiAgICAnY29iYWx0JyxcclxuICAgICdjb2JibGVyJyxcclxuICAgICdjb2J3ZWInLFxyXG4gICAgJ2NvY29hJyxcclxuICAgICdjb2NvbnV0JyxcclxuICAgICdjb2QnLFxyXG4gICAgJ2NvZWRpdG9yJyxcclxuICAgICdjb2VyY2UnLFxyXG4gICAgJ2NvZXhpc3QnLFxyXG4gICAgJ2NvZmZlZScsXHJcbiAgICAnY29mb3VuZGVyJyxcclxuICAgICdjb2duaXRpb24nLFxyXG4gICAgJ2NvZ25pdGl2ZScsXHJcbiAgICAnY29nd2hlZWwnLFxyXG4gICAgJ2NvaGVyZW5jZScsXHJcbiAgICAnY29oZXJlbnQnLFxyXG4gICAgJ2NvaGVzaXZlJyxcclxuICAgICdjb2lsJyxcclxuICAgICdjb2tlJyxcclxuICAgICdjb2xhJyxcclxuICAgICdjb2xkJyxcclxuICAgICdjb2xlc2xhdycsXHJcbiAgICAnY29saXNldW0nLFxyXG4gICAgJ2NvbGxhZ2UnLFxyXG4gICAgJ2NvbGxhcHNlJyxcclxuICAgICdjb2xsYXInLFxyXG4gICAgJ2NvbGxlY3RlZCcsXHJcbiAgICAnY29sbGVjdG9yJyxcclxuICAgICdjb2xsaWRlJyxcclxuICAgICdjb2xsaWUnLFxyXG4gICAgJ2NvbGxpc2lvbicsXHJcbiAgICAnY29sb25pYWwnLFxyXG4gICAgJ2NvbG9uaXN0JyxcclxuICAgICdjb2xvbml6ZScsXHJcbiAgICAnY29sb255JyxcclxuICAgICdjb2xvc3NhbCcsXHJcbiAgICAnY29sdCcsXHJcbiAgICAnY29tYScsXHJcbiAgICAnY29tZScsXHJcbiAgICAnY29tZm9ydCcsXHJcbiAgICAnY29tZnknLFxyXG4gICAgJ2NvbWljJyxcclxuICAgICdjb21pbmcnLFxyXG4gICAgJ2NvbW1hJyxcclxuICAgICdjb21tZW5jZScsXHJcbiAgICAnY29tbWVuZCcsXHJcbiAgICAnY29tbWVudCcsXHJcbiAgICAnY29tbWVyY2UnLFxyXG4gICAgJ2NvbW1vZGUnLFxyXG4gICAgJ2NvbW1vZGl0eScsXHJcbiAgICAnY29tbW9kb3JlJyxcclxuICAgICdjb21tb24nLFxyXG4gICAgJ2NvbW1vdGlvbicsXHJcbiAgICAnY29tbXV0ZScsXHJcbiAgICAnY29tbXV0aW5nJyxcclxuICAgICdjb21wYWN0ZWQnLFxyXG4gICAgJ2NvbXBhY3RlcicsXHJcbiAgICAnY29tcGFjdGx5JyxcclxuICAgICdjb21wYWN0b3InLFxyXG4gICAgJ2NvbXBhbmlvbicsXHJcbiAgICAnY29tcGFueScsXHJcbiAgICAnY29tcGFyZScsXHJcbiAgICAnY29tcGVsJyxcclxuICAgICdjb21waWxlJyxcclxuICAgICdjb21wbHknLFxyXG4gICAgJ2NvbXBvbmVudCcsXHJcbiAgICAnY29tcG9zZWQnLFxyXG4gICAgJ2NvbXBvc2VyJyxcclxuICAgICdjb21wb3NpdGUnLFxyXG4gICAgJ2NvbXBvc3QnLFxyXG4gICAgJ2NvbXBvc3VyZScsXHJcbiAgICAnY29tcG91bmQnLFxyXG4gICAgJ2NvbXByZXNzJyxcclxuICAgICdjb21wcmlzZWQnLFxyXG4gICAgJ2NvbXB1dGVyJyxcclxuICAgICdjb21wdXRpbmcnLFxyXG4gICAgJ2NvbXJhZGUnLFxyXG4gICAgJ2NvbmNhdmUnLFxyXG4gICAgJ2NvbmNlYWwnLFxyXG4gICAgJ2NvbmNlZGVkJyxcclxuICAgICdjb25jZXB0JyxcclxuICAgICdjb25jZXJuZWQnLFxyXG4gICAgJ2NvbmNlcnQnLFxyXG4gICAgJ2NvbmNoJyxcclxuICAgICdjb25jaWVyZ2UnLFxyXG4gICAgJ2NvbmNpc2UnLFxyXG4gICAgJ2NvbmNsdWRlJyxcclxuICAgICdjb25jcmV0ZScsXHJcbiAgICAnY29uY3VyJyxcclxuICAgICdjb25kZW5zZScsXHJcbiAgICAnY29uZGltZW50JyxcclxuICAgICdjb25kaXRpb24nLFxyXG4gICAgJ2NvbmRvbmUnLFxyXG4gICAgJ2NvbmR1Y2l2ZScsXHJcbiAgICAnY29uZHVjdG9yJyxcclxuICAgICdjb25kdWl0JyxcclxuICAgICdjb25lJyxcclxuICAgICdjb25mZXNzJyxcclxuICAgICdjb25mZXR0aScsXHJcbiAgICAnY29uZmlkYW50JyxcclxuICAgICdjb25maWRlbnQnLFxyXG4gICAgJ2NvbmZpZGVyJyxcclxuICAgICdjb25maWRpbmcnLFxyXG4gICAgJ2NvbmZpZ3VyZScsXHJcbiAgICAnY29uZmluZWQnLFxyXG4gICAgJ2NvbmZpbmluZycsXHJcbiAgICAnY29uZmlybScsXHJcbiAgICAnY29uZmxpY3QnLFxyXG4gICAgJ2NvbmZvcm0nLFxyXG4gICAgJ2NvbmZvdW5kJyxcclxuICAgICdjb25mcm9udCcsXHJcbiAgICAnY29uZnVzZWQnLFxyXG4gICAgJ2NvbmZ1c2luZycsXHJcbiAgICAnY29uZnVzaW9uJyxcclxuICAgICdjb25nZW5pYWwnLFxyXG4gICAgJ2Nvbmdlc3RlZCcsXHJcbiAgICAnY29uZ3JhdHMnLFxyXG4gICAgJ2NvbmdyZXNzJyxcclxuICAgICdjb25pY2FsJyxcclxuICAgICdjb25qb2luZWQnLFxyXG4gICAgJ2Nvbmp1cmUnLFxyXG4gICAgJ2Nvbmp1cm9yJyxcclxuICAgICdjb25uZWN0ZWQnLFxyXG4gICAgJ2Nvbm5lY3RvcicsXHJcbiAgICAnY29uc2Vuc3VzJyxcclxuICAgICdjb25zZW50JyxcclxuICAgICdjb25zb2xlJyxcclxuICAgICdjb25zb2xpbmcnLFxyXG4gICAgJ2NvbnNvbmFudCcsXHJcbiAgICAnY29uc3RhYmxlJyxcclxuICAgICdjb25zdGFudCcsXHJcbiAgICAnY29uc3RyYWluJyxcclxuICAgICdjb25zdHJpY3QnLFxyXG4gICAgJ2NvbnN0cnVjdCcsXHJcbiAgICAnY29uc3VsdCcsXHJcbiAgICAnY29uc3VtZXInLFxyXG4gICAgJ2NvbnN1bWluZycsXHJcbiAgICAnY29udGFjdCcsXHJcbiAgICAnY29udGFpbmVyJyxcclxuICAgICdjb250ZW1wdCcsXHJcbiAgICAnY29udGVuZCcsXHJcbiAgICAnY29udGVudGVkJyxcclxuICAgICdjb250ZW50bHknLFxyXG4gICAgJ2NvbnRlbnRzJyxcclxuICAgICdjb250ZXN0JyxcclxuICAgICdjb250ZXh0JyxcclxuICAgICdjb250b3J0JyxcclxuICAgICdjb250b3VyJyxcclxuICAgICdjb250cml0ZScsXHJcbiAgICAnY29udHJvbCcsXHJcbiAgICAnY29udHVzaW9uJyxcclxuICAgICdjb252ZW5lJyxcclxuICAgICdjb252ZW50JyxcclxuICAgICdjb3BhcnRuZXInLFxyXG4gICAgJ2NvcGUnLFxyXG4gICAgJ2NvcGllZCcsXHJcbiAgICAnY29waWVyJyxcclxuICAgICdjb3BpbG90JyxcclxuICAgICdjb3BpbmcnLFxyXG4gICAgJ2NvcGlvdXMnLFxyXG4gICAgJ2NvcHBlcicsXHJcbiAgICAnY29weScsXHJcbiAgICAnY29yYWwnLFxyXG4gICAgJ2NvcmsnLFxyXG4gICAgJ2Nvcm5iYWxsJyxcclxuICAgICdjb3JuYnJlYWQnLFxyXG4gICAgJ2Nvcm5jb2InLFxyXG4gICAgJ2Nvcm5lYScsXHJcbiAgICAnY29ybmVkJyxcclxuICAgICdjb3JuZXInLFxyXG4gICAgJ2Nvcm5maWVsZCcsXHJcbiAgICAnY29ybmZsYWtlJyxcclxuICAgICdjb3JuaHVzaycsXHJcbiAgICAnY29ybm1lYWwnLFxyXG4gICAgJ2Nvcm5zdGFsaycsXHJcbiAgICAnY29ybnknLFxyXG4gICAgJ2Nvcm9uYXJ5JyxcclxuICAgICdjb3JvbmVyJyxcclxuICAgICdjb3Jwb3JhbCcsXHJcbiAgICAnY29ycG9yYXRlJyxcclxuICAgICdjb3JyYWwnLFxyXG4gICAgJ2NvcnJlY3QnLFxyXG4gICAgJ2NvcnJpZG9yJyxcclxuICAgICdjb3Jyb2RlJyxcclxuICAgICdjb3Jyb2RpbmcnLFxyXG4gICAgJ2NvcnJvc2l2ZScsXHJcbiAgICAnY29yc2FnZScsXHJcbiAgICAnY29yc2V0JyxcclxuICAgICdjb3J0ZXgnLFxyXG4gICAgJ2Nvc2lnbmVyJyxcclxuICAgICdjb3NtZXRpY3MnLFxyXG4gICAgJ2Nvc21pYycsXHJcbiAgICAnY29zbW9zJyxcclxuICAgICdjb3Nwb25zb3InLFxyXG4gICAgJ2Nvc3QnLFxyXG4gICAgJ2NvdHRhZ2UnLFxyXG4gICAgJ2NvdHRvbicsXHJcbiAgICAnY291Y2gnLFxyXG4gICAgJ2NvdWdoJyxcclxuICAgICdjb3VsZCcsXHJcbiAgICAnY291bnRhYmxlJyxcclxuICAgICdjb3VudGRvd24nLFxyXG4gICAgJ2NvdW50aW5nJyxcclxuICAgICdjb3VudGxlc3MnLFxyXG4gICAgJ2NvdW50cnknLFxyXG4gICAgJ2NvdW50eScsXHJcbiAgICAnY291cmllcicsXHJcbiAgICAnY292ZW5hbnQnLFxyXG4gICAgJ2NvdmVyJyxcclxuICAgICdjb3ZldGVkJyxcclxuICAgICdjb3ZldGluZycsXHJcbiAgICAnY295bmVzcycsXHJcbiAgICAnY296aWx5JyxcclxuICAgICdjb3ppbmVzcycsXHJcbiAgICAnY296eScsXHJcbiAgICAnY3JhYmJpbmcnLFxyXG4gICAgJ2NyYWJncmFzcycsXHJcbiAgICAnY3JhYmxpa2UnLFxyXG4gICAgJ2NyYWJtZWF0JyxcclxuICAgICdjcmFkbGUnLFxyXG4gICAgJ2NyYWRsaW5nJyxcclxuICAgICdjcmFmdGVyJyxcclxuICAgICdjcmFmdGlseScsXHJcbiAgICAnY3JhZnRzbWFuJyxcclxuICAgICdjcmFmdHdvcmsnLFxyXG4gICAgJ2NyYWZ0eScsXHJcbiAgICAnY3JhbXAnLFxyXG4gICAgJ2NyYW5iZXJyeScsXHJcbiAgICAnY3JhbmUnLFxyXG4gICAgJ2NyYW5pYWwnLFxyXG4gICAgJ2NyYW5pdW0nLFxyXG4gICAgJ2NyYW5rJyxcclxuICAgICdjcmF0ZScsXHJcbiAgICAnY3JhdmUnLFxyXG4gICAgJ2NyYXZpbmcnLFxyXG4gICAgJ2NyYXdmaXNoJyxcclxuICAgICdjcmF3bGVycycsXHJcbiAgICAnY3Jhd2xpbmcnLFxyXG4gICAgJ2NyYXlmaXNoJyxcclxuICAgICdjcmF5b24nLFxyXG4gICAgJ2NyYXplZCcsXHJcbiAgICAnY3JhemlseScsXHJcbiAgICAnY3JhemluZXNzJyxcclxuICAgICdjcmF6eScsXHJcbiAgICAnY3JlYW1lZCcsXHJcbiAgICAnY3JlYW1lcicsXHJcbiAgICAnY3JlYW1saWtlJyxcclxuICAgICdjcmVhc2UnLFxyXG4gICAgJ2NyZWFzaW5nJyxcclxuICAgICdjcmVhdGFibGUnLFxyXG4gICAgJ2NyZWF0ZScsXHJcbiAgICAnY3JlYXRpb24nLFxyXG4gICAgJ2NyZWF0aXZlJyxcclxuICAgICdjcmVhdHVyZScsXHJcbiAgICAnY3JlZGlibGUnLFxyXG4gICAgJ2NyZWRpYmx5JyxcclxuICAgICdjcmVkaXQnLFxyXG4gICAgJ2NyZWVkJyxcclxuICAgICdjcmVtZScsXHJcbiAgICAnY3Jlb2xlJyxcclxuICAgICdjcmVwZScsXHJcbiAgICAnY3JlcHQnLFxyXG4gICAgJ2NyZXNjZW50JyxcclxuICAgICdjcmVzdGVkJyxcclxuICAgICdjcmVzdGluZycsXHJcbiAgICAnY3Jlc3RsZXNzJyxcclxuICAgICdjcmV2aWNlJyxcclxuICAgICdjcmV3bGVzcycsXHJcbiAgICAnY3Jld21hbicsXHJcbiAgICAnY3Jld21hdGUnLFxyXG4gICAgJ2NyaWInLFxyXG4gICAgJ2NyaWNrZXQnLFxyXG4gICAgJ2NyaWVkJyxcclxuICAgICdjcmllcicsXHJcbiAgICAnY3JpbXAnLFxyXG4gICAgJ2NyaW1zb24nLFxyXG4gICAgJ2NyaW5nZScsXHJcbiAgICAnY3JpbmdpbmcnLFxyXG4gICAgJ2NyaW5rbGUnLFxyXG4gICAgJ2NyaW5rbHknLFxyXG4gICAgJ2NyaXNwZWQnLFxyXG4gICAgJ2NyaXNwaW5nJyxcclxuICAgICdjcmlzcGx5JyxcclxuICAgICdjcmlzcG5lc3MnLFxyXG4gICAgJ2NyaXNweScsXHJcbiAgICAnY3JpdGVyaWEnLFxyXG4gICAgJ2NyaXR0ZXInLFxyXG4gICAgJ2Nyb2FrJyxcclxuICAgICdjcm9jaycsXHJcbiAgICAnY3Jvb2snLFxyXG4gICAgJ2Nyb29uJyxcclxuICAgICdjcm9wJyxcclxuICAgICdjcm9zcycsXHJcbiAgICAnY3JvdWNoJyxcclxuICAgICdjcm91dG9uJyxcclxuICAgICdjcm93YmFyJyxcclxuICAgICdjcm93ZCcsXHJcbiAgICAnY3Jvd24nLFxyXG4gICAgJ2NydWNpYWwnLFxyXG4gICAgJ2NydWRlbHknLFxyXG4gICAgJ2NydWRlbmVzcycsXHJcbiAgICAnY3J1ZWxseScsXHJcbiAgICAnY3J1ZWxuZXNzJyxcclxuICAgICdjcnVlbHR5JyxcclxuICAgICdjcnVtYicsXHJcbiAgICAnY3J1bW1pZXN0JyxcclxuICAgICdjcnVtbXknLFxyXG4gICAgJ2NydW1wZXQnLFxyXG4gICAgJ2NydW1wbGVkJyxcclxuICAgICdjcnVuY2hlcicsXHJcbiAgICAnY3J1bmNoaW5nJyxcclxuICAgICdjcnVuY2h5JyxcclxuICAgICdjcnVzYWRlcicsXHJcbiAgICAnY3J1c2hhYmxlJyxcclxuICAgICdjcnVzaGVkJyxcclxuICAgICdjcnVzaGVyJyxcclxuICAgICdjcnVzaGluZycsXHJcbiAgICAnY3J1c3QnLFxyXG4gICAgJ2NydXgnLFxyXG4gICAgJ2NyeWluZycsXHJcbiAgICAnY3J5cHRpYycsXHJcbiAgICAnY3J5c3RhbCcsXHJcbiAgICAnY3ViYnlob2xlJyxcclxuICAgICdjdWJlJyxcclxuICAgICdjdWJpY2FsJyxcclxuICAgICdjdWJpY2xlJyxcclxuICAgICdjdWN1bWJlcicsXHJcbiAgICAnY3VkZGxlJyxcclxuICAgICdjdWRkbHknLFxyXG4gICAgJ2N1ZmZsaW5rJyxcclxuICAgICdjdWxpbmFyeScsXHJcbiAgICAnY3VsbWluYXRlJyxcclxuICAgICdjdWxwYWJsZScsXHJcbiAgICAnY3VscHJpdCcsXHJcbiAgICAnY3VsdGl2YXRlJyxcclxuICAgICdjdWx0dXJhbCcsXHJcbiAgICAnY3VsdHVyZScsXHJcbiAgICAnY3VwYmVhcmVyJyxcclxuICAgICdjdXBjYWtlJyxcclxuICAgICdjdXBpZCcsXHJcbiAgICAnY3VwcGVkJyxcclxuICAgICdjdXBwaW5nJyxcclxuICAgICdjdXJhYmxlJyxcclxuICAgICdjdXJhdG9yJyxcclxuICAgICdjdXJkbGUnLFxyXG4gICAgJ2N1cmUnLFxyXG4gICAgJ2N1cmZldycsXHJcbiAgICAnY3VyaW5nJyxcclxuICAgICdjdXJsZWQnLFxyXG4gICAgJ2N1cmxlcicsXHJcbiAgICAnY3VybGluZXNzJyxcclxuICAgICdjdXJsaW5nJyxcclxuICAgICdjdXJseScsXHJcbiAgICAnY3VycnknLFxyXG4gICAgJ2N1cnNlJyxcclxuICAgICdjdXJzaXZlJyxcclxuICAgICdjdXJzb3InLFxyXG4gICAgJ2N1cnRhaW4nLFxyXG4gICAgJ2N1cnRseScsXHJcbiAgICAnY3VydHN5JyxcclxuICAgICdjdXJ2YXR1cmUnLFxyXG4gICAgJ2N1cnZlJyxcclxuICAgICdjdXJ2eScsXHJcbiAgICAnY3VzaHknLFxyXG4gICAgJ2N1c3AnLFxyXG4gICAgJ2N1c3NlZCcsXHJcbiAgICAnY3VzdGFyZCcsXHJcbiAgICAnY3VzdG9kaWFuJyxcclxuICAgICdjdXN0b2R5JyxcclxuICAgICdjdXN0b21hcnknLFxyXG4gICAgJ2N1c3RvbWVyJyxcclxuICAgICdjdXN0b21pemUnLFxyXG4gICAgJ2N1c3RvbXMnLFxyXG4gICAgJ2N1dCcsXHJcbiAgICAnY3ljbGUnLFxyXG4gICAgJ2N5Y2xpYycsXHJcbiAgICAnY3ljbGluZycsXHJcbiAgICAnY3ljbGlzdCcsXHJcbiAgICAnY3lsaW5kZXInLFxyXG4gICAgJ2N5bWJhbCcsXHJcbiAgICAnY3l0b3BsYXNtJyxcclxuICAgICdjeXRvcGxhc3QnLFxyXG4gICAgJ2RhYicsXHJcbiAgICAnZGFkJyxcclxuICAgICdkYWZmb2RpbCcsXHJcbiAgICAnZGFnZ2VyJyxcclxuICAgICdkYWlseScsXHJcbiAgICAnZGFpbnRpbHknLFxyXG4gICAgJ2RhaW50eScsXHJcbiAgICAnZGFpcnknLFxyXG4gICAgJ2RhaXN5JyxcclxuICAgICdkYWxseWluZycsXHJcbiAgICAnZGFuY2UnLFxyXG4gICAgJ2RhbmNpbmcnLFxyXG4gICAgJ2RhbmRlbGlvbicsXHJcbiAgICAnZGFuZGVyJyxcclxuICAgICdkYW5kcnVmZicsXHJcbiAgICAnZGFuZHknLFxyXG4gICAgJ2RhbmdlcicsXHJcbiAgICAnZGFuZ2xlJyxcclxuICAgICdkYW5nbGluZycsXHJcbiAgICAnZGFyZWRldmlsJyxcclxuICAgICdkYXJlcycsXHJcbiAgICAnZGFyaW5nbHknLFxyXG4gICAgJ2RhcmtlbmVkJyxcclxuICAgICdkYXJrZW5pbmcnLFxyXG4gICAgJ2Rhcmtpc2gnLFxyXG4gICAgJ2RhcmtuZXNzJyxcclxuICAgICdkYXJrcm9vbScsXHJcbiAgICAnZGFybGluZycsXHJcbiAgICAnZGFybicsXHJcbiAgICAnZGFydCcsXHJcbiAgICAnZGFyd2luaXNtJyxcclxuICAgICdkYXNoJyxcclxuICAgICdkYXN0YXJkbHknLFxyXG4gICAgJ2RhdGEnLFxyXG4gICAgJ2RhdGVib29rJyxcclxuICAgICdkYXRpbmcnLFxyXG4gICAgJ2RhdWdodGVyJyxcclxuICAgICdkYXVudGluZycsXHJcbiAgICAnZGF3ZGxlcicsXHJcbiAgICAnZGF3bicsXHJcbiAgICAnZGF5YmVkJyxcclxuICAgICdkYXlicmVhaycsXHJcbiAgICAnZGF5Y2FyZScsXHJcbiAgICAnZGF5ZHJlYW0nLFxyXG4gICAgJ2RheWxpZ2h0JyxcclxuICAgICdkYXlsb25nJyxcclxuICAgICdkYXlyb29tJyxcclxuICAgICdkYXl0aW1lJyxcclxuICAgICdkYXp6bGVyJyxcclxuICAgICdkYXp6bGluZycsXHJcbiAgICAnZGVhY29uJyxcclxuICAgICdkZWFmZW5pbmcnLFxyXG4gICAgJ2RlYWZuZXNzJyxcclxuICAgICdkZWFsZXInLFxyXG4gICAgJ2RlYWxpbmcnLFxyXG4gICAgJ2RlYWxtYWtlcicsXHJcbiAgICAnZGVhbHQnLFxyXG4gICAgJ2RlYW4nLFxyXG4gICAgJ2RlYmF0YWJsZScsXHJcbiAgICAnZGViYXRlJyxcclxuICAgICdkZWJhdGluZycsXHJcbiAgICAnZGViaXQnLFxyXG4gICAgJ2RlYnJpZWYnLFxyXG4gICAgJ2RlYnRsZXNzJyxcclxuICAgICdkZWJ0b3InLFxyXG4gICAgJ2RlYnVnJyxcclxuICAgICdkZWJ1bmsnLFxyXG4gICAgJ2RlY2FkZScsXHJcbiAgICAnZGVjYWYnLFxyXG4gICAgJ2RlY2FsJyxcclxuICAgICdkZWNhdGhsb24nLFxyXG4gICAgJ2RlY2F5JyxcclxuICAgICdkZWNlYXNlZCcsXHJcbiAgICAnZGVjZWl0JyxcclxuICAgICdkZWNlaXZlcicsXHJcbiAgICAnZGVjZWl2aW5nJyxcclxuICAgICdkZWNlbWJlcicsXHJcbiAgICAnZGVjZW5jeScsXHJcbiAgICAnZGVjZW50JyxcclxuICAgICdkZWNlcHRpb24nLFxyXG4gICAgJ2RlY2VwdGl2ZScsXHJcbiAgICAnZGVjaWJlbCcsXHJcbiAgICAnZGVjaWRhYmxlJyxcclxuICAgICdkZWNpbWFsJyxcclxuICAgICdkZWNpbWV0ZXInLFxyXG4gICAgJ2RlY2lwaGVyJyxcclxuICAgICdkZWNrJyxcclxuICAgICdkZWNsYXJlZCcsXHJcbiAgICAnZGVjbGluZScsXHJcbiAgICAnZGVjb2RlJyxcclxuICAgICdkZWNvbXBvc2UnLFxyXG4gICAgJ2RlY29yYXRlZCcsXHJcbiAgICAnZGVjb3JhdG9yJyxcclxuICAgICdkZWNveScsXHJcbiAgICAnZGVjcmVhc2UnLFxyXG4gICAgJ2RlY3JlZScsXHJcbiAgICAnZGVkaWNhdGUnLFxyXG4gICAgJ2RlZGljYXRvcicsXHJcbiAgICAnZGVkdWNlJyxcclxuICAgICdkZWR1Y3QnLFxyXG4gICAgJ2RlZWQnLFxyXG4gICAgJ2RlZW0nLFxyXG4gICAgJ2RlZXBlbicsXHJcbiAgICAnZGVlcGx5JyxcclxuICAgICdkZWVwbmVzcycsXHJcbiAgICAnZGVmYWNlJyxcclxuICAgICdkZWZhY2luZycsXHJcbiAgICAnZGVmYW1lJyxcclxuICAgICdkZWZhdWx0JyxcclxuICAgICdkZWZlYXQnLFxyXG4gICAgJ2RlZmVjdGlvbicsXHJcbiAgICAnZGVmZWN0aXZlJyxcclxuICAgICdkZWZlbmRhbnQnLFxyXG4gICAgJ2RlZmVuZGVyJyxcclxuICAgICdkZWZlbnNlJyxcclxuICAgICdkZWZlbnNpdmUnLFxyXG4gICAgJ2RlZmVycmFsJyxcclxuICAgICdkZWZlcnJlZCcsXHJcbiAgICAnZGVmaWFuY2UnLFxyXG4gICAgJ2RlZmlhbnQnLFxyXG4gICAgJ2RlZmlsZScsXHJcbiAgICAnZGVmaWxpbmcnLFxyXG4gICAgJ2RlZmluZScsXHJcbiAgICAnZGVmaW5pdGUnLFxyXG4gICAgJ2RlZmxhdGUnLFxyXG4gICAgJ2RlZmxhdGlvbicsXHJcbiAgICAnZGVmbGF0b3InLFxyXG4gICAgJ2RlZmxlY3RlZCcsXHJcbiAgICAnZGVmbGVjdG9yJyxcclxuICAgICdkZWZvZycsXHJcbiAgICAnZGVmb3Jlc3QnLFxyXG4gICAgJ2RlZnJhdWQnLFxyXG4gICAgJ2RlZnJvc3QnLFxyXG4gICAgJ2RlZnRseScsXHJcbiAgICAnZGVmdXNlJyxcclxuICAgICdkZWZ5JyxcclxuICAgICdkZWdyYWRlZCcsXHJcbiAgICAnZGVncmFkaW5nJyxcclxuICAgICdkZWdyZWFzZScsXHJcbiAgICAnZGVncmVlJyxcclxuICAgICdkZWh5ZHJhdGUnLFxyXG4gICAgJ2RlaXR5JyxcclxuICAgICdkZWplY3RlZCcsXHJcbiAgICAnZGVsYXknLFxyXG4gICAgJ2RlbGVnYXRlJyxcclxuICAgICdkZWxlZ2F0b3InLFxyXG4gICAgJ2RlbGV0ZScsXHJcbiAgICAnZGVsZXRpb24nLFxyXG4gICAgJ2RlbGljYWN5JyxcclxuICAgICdkZWxpY2F0ZScsXHJcbiAgICAnZGVsaWNpb3VzJyxcclxuICAgICdkZWxpZ2h0ZWQnLFxyXG4gICAgJ2RlbGlyaW91cycsXHJcbiAgICAnZGVsaXJpdW0nLFxyXG4gICAgJ2RlbGl2ZXJlcicsXHJcbiAgICAnZGVsaXZlcnknLFxyXG4gICAgJ2RlbG91c2UnLFxyXG4gICAgJ2RlbHRhJyxcclxuICAgICdkZWx1Z2UnLFxyXG4gICAgJ2RlbHVzaW9uJyxcclxuICAgICdkZWx1eGUnLFxyXG4gICAgJ2RlbWFuZGluZycsXHJcbiAgICAnZGVtZWFuaW5nJyxcclxuICAgICdkZW1lYW5vcicsXHJcbiAgICAnZGVtaXNlJyxcclxuICAgICdkZW1vY3JhY3knLFxyXG4gICAgJ2RlbW9jcmF0JyxcclxuICAgICdkZW1vdGUnLFxyXG4gICAgJ2RlbW90aW9uJyxcclxuICAgICdkZW15c3RpZnknLFxyXG4gICAgJ2RlbmF0dXJlZCcsXHJcbiAgICAnZGVuaWFibGUnLFxyXG4gICAgJ2RlbmlhbCcsXHJcbiAgICAnZGVuaW0nLFxyXG4gICAgJ2Rlbm90ZScsXHJcbiAgICAnZGVuc2UnLFxyXG4gICAgJ2RlbnNpdHknLFxyXG4gICAgJ2RlbnRhbCcsXHJcbiAgICAnZGVudGlzdCcsXHJcbiAgICAnZGVudHVyZScsXHJcbiAgICAnZGVueScsXHJcbiAgICAnZGVvZG9yYW50JyxcclxuICAgICdkZW9kb3JpemUnLFxyXG4gICAgJ2RlcGFydGVkJyxcclxuICAgICdkZXBhcnR1cmUnLFxyXG4gICAgJ2RlcGljdCcsXHJcbiAgICAnZGVwbGV0ZScsXHJcbiAgICAnZGVwbGV0aW9uJyxcclxuICAgICdkZXBsb3JlZCcsXHJcbiAgICAnZGVwbG95JyxcclxuICAgICdkZXBvcnQnLFxyXG4gICAgJ2RlcG9zZScsXHJcbiAgICAnZGVwcmF2ZWQnLFxyXG4gICAgJ2RlcHJhdml0eScsXHJcbiAgICAnZGVwcmVjYXRlJyxcclxuICAgICdkZXByZXNzJyxcclxuICAgICdkZXByaXZlJyxcclxuICAgICdkZXB0aCcsXHJcbiAgICAnZGVwdXRpemUnLFxyXG4gICAgJ2RlcHV0eScsXHJcbiAgICAnZGVyYWlsJyxcclxuICAgICdkZXJhbmdlZCcsXHJcbiAgICAnZGVyYnknLFxyXG4gICAgJ2Rlcml2ZWQnLFxyXG4gICAgJ2Rlc2VjcmF0ZScsXHJcbiAgICAnZGVzZXJ2ZScsXHJcbiAgICAnZGVzZXJ2aW5nJyxcclxuICAgICdkZXNpZ25hdGUnLFxyXG4gICAgJ2Rlc2lnbmVkJyxcclxuICAgICdkZXNpZ25lcicsXHJcbiAgICAnZGVzaWduaW5nJyxcclxuICAgICdkZXNrYm91bmQnLFxyXG4gICAgJ2Rlc2t0b3AnLFxyXG4gICAgJ2Rlc2t3b3JrJyxcclxuICAgICdkZXNvbGF0ZScsXHJcbiAgICAnZGVzcGFpcicsXHJcbiAgICAnZGVzcGlzZScsXHJcbiAgICAnZGVzcGl0ZScsXHJcbiAgICAnZGVzdGlueScsXHJcbiAgICAnZGVzdGl0dXRlJyxcclxuICAgICdkZXN0cnVjdCcsXHJcbiAgICAnZGV0YWNoZWQnLFxyXG4gICAgJ2RldGFpbCcsXHJcbiAgICAnZGV0ZWN0aW9uJyxcclxuICAgICdkZXRlY3RpdmUnLFxyXG4gICAgJ2RldGVjdG9yJyxcclxuICAgICdkZXRlbnRpb24nLFxyXG4gICAgJ2RldGVyZ2VudCcsXHJcbiAgICAnZGV0ZXN0JyxcclxuICAgICdkZXRvbmF0ZScsXHJcbiAgICAnZGV0b25hdG9yJyxcclxuICAgICdkZXRveGlmeScsXHJcbiAgICAnZGV0cmFjdCcsXHJcbiAgICAnZGV1Y2UnLFxyXG4gICAgJ2RldmFsdWUnLFxyXG4gICAgJ2RldmlhbmN5JyxcclxuICAgICdkZXZpYW50JyxcclxuICAgICdkZXZpYXRlJyxcclxuICAgICdkZXZpYXRpb24nLFxyXG4gICAgJ2RldmlhdG9yJyxcclxuICAgICdkZXZpY2UnLFxyXG4gICAgJ2RldmlvdXMnLFxyXG4gICAgJ2Rldm90ZWRseScsXHJcbiAgICAnZGV2b3RlZScsXHJcbiAgICAnZGV2b3Rpb24nLFxyXG4gICAgJ2Rldm91cmVyJyxcclxuICAgICdkZXZvdXJpbmcnLFxyXG4gICAgJ2Rldm91dGx5JyxcclxuICAgICdkZXh0ZXJpdHknLFxyXG4gICAgJ2RleHRlcm91cycsXHJcbiAgICAnZGlhYmV0ZXMnLFxyXG4gICAgJ2RpYWJldGljJyxcclxuICAgICdkaWFib2xpYycsXHJcbiAgICAnZGlhZ25vc2VzJyxcclxuICAgICdkaWFnbm9zaXMnLFxyXG4gICAgJ2RpYWdyYW0nLFxyXG4gICAgJ2RpYWwnLFxyXG4gICAgJ2RpYW1ldGVyJyxcclxuICAgICdkaWFwZXInLFxyXG4gICAgJ2RpYXBocmFnbScsXHJcbiAgICAnZGlhcnknLFxyXG4gICAgJ2RpY2UnLFxyXG4gICAgJ2RpY2luZycsXHJcbiAgICAnZGljdGF0ZScsXHJcbiAgICAnZGljdGF0aW9uJyxcclxuICAgICdkaWN0YXRvcicsXHJcbiAgICAnZGlmZmljdWx0JyxcclxuICAgICdkaWZmdXNlZCcsXHJcbiAgICAnZGlmZnVzZXInLFxyXG4gICAgJ2RpZmZ1c2lvbicsXHJcbiAgICAnZGlmZnVzaXZlJyxcclxuICAgICdkaWcnLFxyXG4gICAgJ2RpbGF0aW9uJyxcclxuICAgICdkaWxpZ2VuY2UnLFxyXG4gICAgJ2RpbGlnZW50JyxcclxuICAgICdkaWxsJyxcclxuICAgICdkaWx1dGUnLFxyXG4gICAgJ2RpbWUnLFxyXG4gICAgJ2RpbWluaXNoJyxcclxuICAgICdkaW1seScsXHJcbiAgICAnZGltbWVkJyxcclxuICAgICdkaW1tZXInLFxyXG4gICAgJ2RpbW5lc3MnLFxyXG4gICAgJ2RpbXBsZScsXHJcbiAgICAnZGluZXInLFxyXG4gICAgJ2RpbmdiYXQnLFxyXG4gICAgJ2RpbmdoeScsXHJcbiAgICAnZGluZ2luZXNzJyxcclxuICAgICdkaW5nbycsXHJcbiAgICAnZGluZ3knLFxyXG4gICAgJ2RpbmluZycsXHJcbiAgICAnZGlubmVyJyxcclxuICAgICdkaW9jZXNlJyxcclxuICAgICdkaW94aWRlJyxcclxuICAgICdkaXBsb21hJyxcclxuICAgICdkaXBwZWQnLFxyXG4gICAgJ2RpcHBlcicsXHJcbiAgICAnZGlwcGluZycsXHJcbiAgICAnZGlyZWN0ZWQnLFxyXG4gICAgJ2RpcmVjdGlvbicsXHJcbiAgICAnZGlyZWN0aXZlJyxcclxuICAgICdkaXJlY3RseScsXHJcbiAgICAnZGlyZWN0b3J5JyxcclxuICAgICdkaXJlbmVzcycsXHJcbiAgICAnZGlydGluZXNzJyxcclxuICAgICdkaXNhYmxlZCcsXHJcbiAgICAnZGlzYWdyZWUnLFxyXG4gICAgJ2Rpc2FsbG93JyxcclxuICAgICdkaXNhcm0nLFxyXG4gICAgJ2Rpc2FycmF5JyxcclxuICAgICdkaXNhc3RlcicsXHJcbiAgICAnZGlzYmFuZCcsXHJcbiAgICAnZGlzYmVsaWVmJyxcclxuICAgICdkaXNidXJzZScsXHJcbiAgICAnZGlzY2FyZCcsXHJcbiAgICAnZGlzY2VybicsXHJcbiAgICAnZGlzY2hhcmdlJyxcclxuICAgICdkaXNjbG9zZScsXHJcbiAgICAnZGlzY29sb3InLFxyXG4gICAgJ2Rpc2NvdW50JyxcclxuICAgICdkaXNjb3Vyc2UnLFxyXG4gICAgJ2Rpc2NvdmVyJyxcclxuICAgICdkaXNjdXNzJyxcclxuICAgICdkaXNkYWluJyxcclxuICAgICdkaXNlbmdhZ2UnLFxyXG4gICAgJ2Rpc2ZpZ3VyZScsXHJcbiAgICAnZGlzZ3JhY2UnLFxyXG4gICAgJ2Rpc2gnLFxyXG4gICAgJ2Rpc2luZmVjdCcsXHJcbiAgICAnZGlzam9pbicsXHJcbiAgICAnZGlzaycsXHJcbiAgICAnZGlzbGlrZScsXHJcbiAgICAnZGlzbGlraW5nJyxcclxuICAgICdkaXNsb2NhdGUnLFxyXG4gICAgJ2Rpc2xvZGdlJyxcclxuICAgICdkaXNsb3lhbCcsXHJcbiAgICAnZGlzbWFudGxlJyxcclxuICAgICdkaXNtYXknLFxyXG4gICAgJ2Rpc21pc3MnLFxyXG4gICAgJ2Rpc21vdW50JyxcclxuICAgICdkaXNvYmV5JyxcclxuICAgICdkaXNvcmRlcicsXHJcbiAgICAnZGlzb3duJyxcclxuICAgICdkaXNwYXJhdGUnLFxyXG4gICAgJ2Rpc3Bhcml0eScsXHJcbiAgICAnZGlzcGF0Y2gnLFxyXG4gICAgJ2Rpc3BlbnNlJyxcclxuICAgICdkaXNwZXJzYWwnLFxyXG4gICAgJ2Rpc3BlcnNlZCcsXHJcbiAgICAnZGlzcGVyc2VyJyxcclxuICAgICdkaXNwbGFjZScsXHJcbiAgICAnZGlzcGxheScsXHJcbiAgICAnZGlzcGxlYXNlJyxcclxuICAgICdkaXNwb3NhbCcsXHJcbiAgICAnZGlzcG9zZScsXHJcbiAgICAnZGlzcHJvdmUnLFxyXG4gICAgJ2Rpc3B1dGUnLFxyXG4gICAgJ2Rpc3JlZ2FyZCcsXHJcbiAgICAnZGlzcnVwdCcsXHJcbiAgICAnZGlzc3VhZGUnLFxyXG4gICAgJ2Rpc3RhbmNlJyxcclxuICAgICdkaXN0YW50JyxcclxuICAgICdkaXN0YXN0ZScsXHJcbiAgICAnZGlzdGlsbCcsXHJcbiAgICAnZGlzdGluY3QnLFxyXG4gICAgJ2Rpc3RvcnQnLFxyXG4gICAgJ2Rpc3RyYWN0JyxcclxuICAgICdkaXN0cmVzcycsXHJcbiAgICAnZGlzdHJpY3QnLFxyXG4gICAgJ2Rpc3RydXN0JyxcclxuICAgICdkaXRjaCcsXHJcbiAgICAnZGl0dG8nLFxyXG4gICAgJ2RpdHp5JyxcclxuICAgICdkaXZpZGFibGUnLFxyXG4gICAgJ2RpdmlkZWQnLFxyXG4gICAgJ2RpdmlkZW5kJyxcclxuICAgICdkaXZpZGVycycsXHJcbiAgICAnZGl2aWRpbmcnLFxyXG4gICAgJ2RpdmluZWx5JyxcclxuICAgICdkaXZpbmcnLFxyXG4gICAgJ2RpdmluaXR5JyxcclxuICAgICdkaXZpc2libGUnLFxyXG4gICAgJ2RpdmlzaWJseScsXHJcbiAgICAnZGl2aXNpb24nLFxyXG4gICAgJ2RpdmlzaXZlJyxcclxuICAgICdkaXZvcmNlZScsXHJcbiAgICAnZGl6emluZXNzJyxcclxuICAgICdkaXp6eScsXHJcbiAgICAnZG9hYmxlJyxcclxuICAgICdkb2NpbGUnLFxyXG4gICAgJ2RvY2snLFxyXG4gICAgJ2RvY3RyaW5lJyxcclxuICAgICdkb2N1bWVudCcsXHJcbiAgICAnZG9kZ2UnLFxyXG4gICAgJ2RvZGd5JyxcclxuICAgICdkb2lseScsXHJcbiAgICAnZG9pbmcnLFxyXG4gICAgJ2RvbGUnLFxyXG4gICAgJ2RvbGxhcicsXHJcbiAgICAnZG9sbGhvdXNlJyxcclxuICAgICdkb2xsb3AnLFxyXG4gICAgJ2RvbGx5JyxcclxuICAgICdkb2xwaGluJyxcclxuICAgICdkb21haW4nLFxyXG4gICAgJ2RvbWVsaWtlJyxcclxuICAgICdkb21lc3RpYycsXHJcbiAgICAnZG9taW5pb24nLFxyXG4gICAgJ2RvbWlub2VzJyxcclxuICAgICdkb25hdGVkJyxcclxuICAgICdkb25hdGlvbicsXHJcbiAgICAnZG9uYXRvcicsXHJcbiAgICAnZG9ub3InLFxyXG4gICAgJ2RvbnV0JyxcclxuICAgICdkb29kbGUnLFxyXG4gICAgJ2Rvb3JiZWxsJyxcclxuICAgICdkb29yZnJhbWUnLFxyXG4gICAgJ2Rvb3Jrbm9iJyxcclxuICAgICdkb29ybWFuJyxcclxuICAgICdkb29ybWF0JyxcclxuICAgICdkb29ybmFpbCcsXHJcbiAgICAnZG9vcnBvc3QnLFxyXG4gICAgJ2Rvb3JzdGVwJyxcclxuICAgICdkb29yc3RvcCcsXHJcbiAgICAnZG9vcndheScsXHJcbiAgICAnZG9venknLFxyXG4gICAgJ2RvcmsnLFxyXG4gICAgJ2Rvcm1pdG9yeScsXHJcbiAgICAnZG9yc2FsJyxcclxuICAgICdkb3NhZ2UnLFxyXG4gICAgJ2Rvc2UnLFxyXG4gICAgJ2RvdHRlZCcsXHJcbiAgICAnZG91YmxpbmcnLFxyXG4gICAgJ2RvdWNoZScsXHJcbiAgICAnZG92ZScsXHJcbiAgICAnZG93bicsXHJcbiAgICAnZG93cnknLFxyXG4gICAgJ2RvemUnLFxyXG4gICAgJ2RyYWInLFxyXG4gICAgJ2RyYWdnaW5nJyxcclxuICAgICdkcmFnb25mbHknLFxyXG4gICAgJ2RyYWdvbmlzaCcsXHJcbiAgICAnZHJhZ3N0ZXInLFxyXG4gICAgJ2RyYWluYWJsZScsXHJcbiAgICAnZHJhaW5hZ2UnLFxyXG4gICAgJ2RyYWluZWQnLFxyXG4gICAgJ2RyYWluZXInLFxyXG4gICAgJ2RyYWlucGlwZScsXHJcbiAgICAnZHJhbWF0aWMnLFxyXG4gICAgJ2RyYW1hdGl6ZScsXHJcbiAgICAnZHJhbmsnLFxyXG4gICAgJ2RyYXBlcnknLFxyXG4gICAgJ2RyYXN0aWMnLFxyXG4gICAgJ2RyYXcnLFxyXG4gICAgJ2RyZWFkZWQnLFxyXG4gICAgJ2RyZWFkZnVsJyxcclxuICAgICdkcmVhZGxvY2snLFxyXG4gICAgJ2RyZWFtYm9hdCcsXHJcbiAgICAnZHJlYW1pbHknLFxyXG4gICAgJ2RyZWFtbGFuZCcsXHJcbiAgICAnZHJlYW1sZXNzJyxcclxuICAgICdkcmVhbWxpa2UnLFxyXG4gICAgJ2RyZWFtdCcsXHJcbiAgICAnZHJlYW15JyxcclxuICAgICdkcmVhcmlseScsXHJcbiAgICAnZHJlYXJ5JyxcclxuICAgICdkcmVuY2gnLFxyXG4gICAgJ2RyZXNzJyxcclxuICAgICdkcmV3JyxcclxuICAgICdkcmliYmxlJyxcclxuICAgICdkcmllZCcsXHJcbiAgICAnZHJpZXInLFxyXG4gICAgJ2RyaWZ0JyxcclxuICAgICdkcmlsbGVyJyxcclxuICAgICdkcmlsbGluZycsXHJcbiAgICAnZHJpbmthYmxlJyxcclxuICAgICdkcmlua2luZycsXHJcbiAgICAnZHJpcHBpbmcnLFxyXG4gICAgJ2RyaXBweScsXHJcbiAgICAnZHJpdmFibGUnLFxyXG4gICAgJ2RyaXZlbicsXHJcbiAgICAnZHJpdmVyJyxcclxuICAgICdkcml2ZXdheScsXHJcbiAgICAnZHJpdmluZycsXHJcbiAgICAnZHJpenpsZScsXHJcbiAgICAnZHJpenpseScsXHJcbiAgICAnZHJvbmUnLFxyXG4gICAgJ2Ryb29sJyxcclxuICAgICdkcm9vcCcsXHJcbiAgICAnZHJvcC1kb3duJyxcclxuICAgICdkcm9wYm94JyxcclxuICAgICdkcm9wa2ljaycsXHJcbiAgICAnZHJvcGxldCcsXHJcbiAgICAnZHJvcG91dCcsXHJcbiAgICAnZHJvcHBlcicsXHJcbiAgICAnZHJvdmUnLFxyXG4gICAgJ2Ryb3duJyxcclxuICAgICdkcm93c2lseScsXHJcbiAgICAnZHJ1ZGdlJyxcclxuICAgICdkcnVtJyxcclxuICAgICdkcnknLFxyXG4gICAgJ2R1YmJlZCcsXHJcbiAgICAnZHViaW91c2x5JyxcclxuICAgICdkdWNoZXNzJyxcclxuICAgICdkdWNrYmlsbCcsXHJcbiAgICAnZHVja2luZycsXHJcbiAgICAnZHVja2xpbmcnLFxyXG4gICAgJ2R1Y2t0YWlsJyxcclxuICAgICdkdWNreScsXHJcbiAgICAnZHVjdCcsXHJcbiAgICAnZHVkZScsXHJcbiAgICAnZHVmZmVsJyxcclxuICAgICdkdWdvdXQnLFxyXG4gICAgJ2R1aCcsXHJcbiAgICAnZHVrZScsXHJcbiAgICAnZHVsbGVyJyxcclxuICAgICdkdWxsbmVzcycsXHJcbiAgICAnZHVseScsXHJcbiAgICAnZHVtcGluZycsXHJcbiAgICAnZHVtcGxpbmcnLFxyXG4gICAgJ2R1bXBzdGVyJyxcclxuICAgICdkdW8nLFxyXG4gICAgJ2R1cGUnLFxyXG4gICAgJ2R1cGxleCcsXHJcbiAgICAnZHVwbGljYXRlJyxcclxuICAgICdkdXBsaWNpdHknLFxyXG4gICAgJ2R1cmFibGUnLFxyXG4gICAgJ2R1cmFibHknLFxyXG4gICAgJ2R1cmF0aW9uJyxcclxuICAgICdkdXJlc3MnLFxyXG4gICAgJ2R1cmluZycsXHJcbiAgICAnZHVzaycsXHJcbiAgICAnZHVzdCcsXHJcbiAgICAnZHV0aWZ1bCcsXHJcbiAgICAnZHV0eScsXHJcbiAgICAnZHV2ZXQnLFxyXG4gICAgJ2R3YXJmJyxcclxuICAgICdkd2VlYicsXHJcbiAgICAnZHdlbGxlZCcsXHJcbiAgICAnZHdlbGxlcicsXHJcbiAgICAnZHdlbGxpbmcnLFxyXG4gICAgJ2R3aW5kbGUnLFxyXG4gICAgJ2R3aW5kbGluZycsXHJcbiAgICAnZHluYW1pYycsXHJcbiAgICAnZHluYW1pdGUnLFxyXG4gICAgJ2R5bmFzdHknLFxyXG4gICAgJ2R5c2xleGlhJyxcclxuICAgICdkeXNsZXhpYycsXHJcbiAgICAnZWFjaCcsXHJcbiAgICAnZWFnbGUnLFxyXG4gICAgJ2VhcmFjaGUnLFxyXG4gICAgJ2VhcmRydW0nLFxyXG4gICAgJ2VhcmZsYXAnLFxyXG4gICAgJ2VhcmZ1bCcsXHJcbiAgICAnZWFybG9iZScsXHJcbiAgICAnZWFybHknLFxyXG4gICAgJ2Vhcm1hcmsnLFxyXG4gICAgJ2Vhcm11ZmYnLFxyXG4gICAgJ2VhcnBob25lJyxcclxuICAgICdlYXJwaWVjZScsXHJcbiAgICAnZWFycGx1Z3MnLFxyXG4gICAgJ2VhcnJpbmcnLFxyXG4gICAgJ2VhcnNob3QnLFxyXG4gICAgJ2VhcnRoZW4nLFxyXG4gICAgJ2VhcnRobGlrZScsXHJcbiAgICAnZWFydGhsaW5nJyxcclxuICAgICdlYXJ0aGx5JyxcclxuICAgICdlYXJ0aHdvcm0nLFxyXG4gICAgJ2VhcnRoeScsXHJcbiAgICAnZWFyd2lnJyxcclxuICAgICdlYXNlZnVsJyxcclxuICAgICdlYXNlbCcsXHJcbiAgICAnZWFzaWVzdCcsXHJcbiAgICAnZWFzaWx5JyxcclxuICAgICdlYXNpbmVzcycsXHJcbiAgICAnZWFzaW5nJyxcclxuICAgICdlYXN0Ym91bmQnLFxyXG4gICAgJ2Vhc3Rjb2FzdCcsXHJcbiAgICAnZWFzdGVyJyxcclxuICAgICdlYXN0d2FyZCcsXHJcbiAgICAnZWF0YWJsZScsXHJcbiAgICAnZWF0ZW4nLFxyXG4gICAgJ2VhdGVyeScsXHJcbiAgICAnZWF0aW5nJyxcclxuICAgICdlYXRzJyxcclxuICAgICdlYmF5JyxcclxuICAgICdlYm9ueScsXHJcbiAgICAnZWJvb2snLFxyXG4gICAgJ2VjYXJkJyxcclxuICAgICdlY2NlbnRyaWMnLFxyXG4gICAgJ2VjaG8nLFxyXG4gICAgJ2VjbGFpcicsXHJcbiAgICAnZWNsaXBzZScsXHJcbiAgICAnZWNvbG9naXN0JyxcclxuICAgICdlY29sb2d5JyxcclxuICAgICdlY29ub21pYycsXHJcbiAgICAnZWNvbm9taXN0JyxcclxuICAgICdlY29ub215JyxcclxuICAgICdlY29zcGhlcmUnLFxyXG4gICAgJ2Vjb3N5c3RlbScsXHJcbiAgICAnZWRnZScsXHJcbiAgICAnZWRnaW5lc3MnLFxyXG4gICAgJ2VkZ2luZycsXHJcbiAgICAnZWRneScsXHJcbiAgICAnZWRpdGlvbicsXHJcbiAgICAnZWRpdG9yJyxcclxuICAgICdlZHVjYXRlZCcsXHJcbiAgICAnZWR1Y2F0aW9uJyxcclxuICAgICdlZHVjYXRvcicsXHJcbiAgICAnZWVsJyxcclxuICAgICdlZmZlY3RpdmUnLFxyXG4gICAgJ2VmZmVjdHMnLFxyXG4gICAgJ2VmZmljaWVudCcsXHJcbiAgICAnZWZmb3J0JyxcclxuICAgICdlZ2diZWF0ZXInLFxyXG4gICAgJ2VnZ2luZycsXHJcbiAgICAnZWdnbm9nJyxcclxuICAgICdlZ2dwbGFudCcsXHJcbiAgICAnZWdnc2hlbGwnLFxyXG4gICAgJ2Vnb21hbmlhYycsXHJcbiAgICAnZWdvdGlzbScsXHJcbiAgICAnZWdvdGlzdGljJyxcclxuICAgICdlaXRoZXInLFxyXG4gICAgJ2VqZWN0JyxcclxuICAgICdlbGFib3JhdGUnLFxyXG4gICAgJ2VsYXN0aWMnLFxyXG4gICAgJ2VsYXRlZCcsXHJcbiAgICAnZWxib3cnLFxyXG4gICAgJ2VsZGVyY2FyZScsXHJcbiAgICAnZWxkZXJseScsXHJcbiAgICAnZWxkZXN0JyxcclxuICAgICdlbGVjdGFibGUnLFxyXG4gICAgJ2VsZWN0aW9uJyxcclxuICAgICdlbGVjdGl2ZScsXHJcbiAgICAnZWxlcGhhbnQnLFxyXG4gICAgJ2VsZXZhdGUnLFxyXG4gICAgJ2VsZXZhdGluZycsXHJcbiAgICAnZWxldmF0aW9uJyxcclxuICAgICdlbGV2YXRvcicsXHJcbiAgICAnZWxldmVuJyxcclxuICAgICdlbGYnLFxyXG4gICAgJ2VsaWdpYmxlJyxcclxuICAgICdlbGlnaWJseScsXHJcbiAgICAnZWxpbWluYXRlJyxcclxuICAgICdlbGl0ZScsXHJcbiAgICAnZWxpdGlzbScsXHJcbiAgICAnZWxpeGlyJyxcclxuICAgICdlbGsnLFxyXG4gICAgJ2VsbGlwc2UnLFxyXG4gICAgJ2VsbGlwdGljJyxcclxuICAgICdlbG0nLFxyXG4gICAgJ2Vsb25nYXRlZCcsXHJcbiAgICAnZWxvcGUnLFxyXG4gICAgJ2Vsb3F1ZW5jZScsXHJcbiAgICAnZWxvcXVlbnQnLFxyXG4gICAgJ2Vsc2V3aGVyZScsXHJcbiAgICAnZWx1ZGUnLFxyXG4gICAgJ2VsdXNpdmUnLFxyXG4gICAgJ2VsdmVzJyxcclxuICAgICdlbWFpbCcsXHJcbiAgICAnZW1iYXJnbycsXHJcbiAgICAnZW1iYXJrJyxcclxuICAgICdlbWJhc3N5JyxcclxuICAgICdlbWJhdHRsZWQnLFxyXG4gICAgJ2VtYmVsbGlzaCcsXHJcbiAgICAnZW1iZXInLFxyXG4gICAgJ2VtYmV6emxlJyxcclxuICAgICdlbWJsYXplJyxcclxuICAgICdlbWJsZW0nLFxyXG4gICAgJ2VtYm9keScsXHJcbiAgICAnZW1ib2xpc20nLFxyXG4gICAgJ2VtYm9zcycsXHJcbiAgICAnZW1icm9pZGVyJyxcclxuICAgICdlbWNlZScsXHJcbiAgICAnZW1lcmFsZCcsXHJcbiAgICAnZW1lcmdlbmN5JyxcclxuICAgICdlbWlzc2lvbicsXHJcbiAgICAnZW1pdCcsXHJcbiAgICAnZW1vdGUnLFxyXG4gICAgJ2Vtb3RpY29uJyxcclxuICAgICdlbW90aW9uJyxcclxuICAgICdlbXBhdGhpYycsXHJcbiAgICAnZW1wYXRoeScsXHJcbiAgICAnZW1wZXJvcicsXHJcbiAgICAnZW1waGFzZXMnLFxyXG4gICAgJ2VtcGhhc2lzJyxcclxuICAgICdlbXBoYXNpemUnLFxyXG4gICAgJ2VtcGhhdGljJyxcclxuICAgICdlbXBpcmljYWwnLFxyXG4gICAgJ2VtcGxveWVkJyxcclxuICAgICdlbXBsb3llZScsXHJcbiAgICAnZW1wbG95ZXInLFxyXG4gICAgJ2VtcG9yaXVtJyxcclxuICAgICdlbXBvd2VyJyxcclxuICAgICdlbXB0aWVyJyxcclxuICAgICdlbXB0aW5lc3MnLFxyXG4gICAgJ2VtcHR5JyxcclxuICAgICdlbXUnLFxyXG4gICAgJ2VuYWJsZScsXHJcbiAgICAnZW5hY3RtZW50JyxcclxuICAgICdlbmFtZWwnLFxyXG4gICAgJ2VuY2hhbnRlZCcsXHJcbiAgICAnZW5jaGlsYWRhJyxcclxuICAgICdlbmNpcmNsZScsXHJcbiAgICAnZW5jbG9zZScsXHJcbiAgICAnZW5jbG9zdXJlJyxcclxuICAgICdlbmNvZGUnLFxyXG4gICAgJ2VuY29yZScsXHJcbiAgICAnZW5jb3VudGVyJyxcclxuICAgICdlbmNvdXJhZ2UnLFxyXG4gICAgJ2VuY3JvYWNoJyxcclxuICAgICdlbmNydXN0JyxcclxuICAgICdlbmNyeXB0JyxcclxuICAgICdlbmRhbmdlcicsXHJcbiAgICAnZW5kZWFyZWQnLFxyXG4gICAgJ2VuZGVhcmluZycsXHJcbiAgICAnZW5kZWQnLFxyXG4gICAgJ2VuZGluZycsXHJcbiAgICAnZW5kbGVzcycsXHJcbiAgICAnZW5kbm90ZScsXHJcbiAgICAnZW5kb2NyaW5lJyxcclxuICAgICdlbmRvcnBoaW4nLFxyXG4gICAgJ2VuZG9yc2UnLFxyXG4gICAgJ2VuZG93bWVudCcsXHJcbiAgICAnZW5kcG9pbnQnLFxyXG4gICAgJ2VuZHVyYWJsZScsXHJcbiAgICAnZW5kdXJhbmNlJyxcclxuICAgICdlbmR1cmluZycsXHJcbiAgICAnZW5lcmdldGljJyxcclxuICAgICdlbmVyZ2l6ZScsXHJcbiAgICAnZW5lcmd5JyxcclxuICAgICdlbmZvcmNlZCcsXHJcbiAgICAnZW5mb3JjZXInLFxyXG4gICAgJ2VuZ2FnZWQnLFxyXG4gICAgJ2VuZ2FnaW5nJyxcclxuICAgICdlbmdpbmUnLFxyXG4gICAgJ2VuZ29yZ2UnLFxyXG4gICAgJ2VuZ3JhdmVkJyxcclxuICAgICdlbmdyYXZlcicsXHJcbiAgICAnZW5ncmF2aW5nJyxcclxuICAgICdlbmdyb3NzJyxcclxuICAgICdlbmd1bGYnLFxyXG4gICAgJ2VuaGFuY2UnLFxyXG4gICAgJ2VuaWdtYXRpYycsXHJcbiAgICAnZW5qb3lhYmxlJyxcclxuICAgICdlbmpveWFibHknLFxyXG4gICAgJ2Vuam95ZXInLFxyXG4gICAgJ2Vuam95aW5nJyxcclxuICAgICdlbmpveW1lbnQnLFxyXG4gICAgJ2VubGFyZ2VkJyxcclxuICAgICdlbmxhcmdpbmcnLFxyXG4gICAgJ2VubGlnaHRlbicsXHJcbiAgICAnZW5saXN0ZWQnLFxyXG4gICAgJ2VucXVpcmVyJyxcclxuICAgICdlbnJhZ2UnLFxyXG4gICAgJ2VucmljaCcsXHJcbiAgICAnZW5yb2xsJyxcclxuICAgICdlbnNsYXZlJyxcclxuICAgICdlbnNuYXJlJyxcclxuICAgICdlbnN1cmUnLFxyXG4gICAgJ2VudGFpbCcsXHJcbiAgICAnZW50YW5nbGVkJyxcclxuICAgICdlbnRlcmluZycsXHJcbiAgICAnZW50ZXJ0YWluJyxcclxuICAgICdlbnRpY2luZycsXHJcbiAgICAnZW50aXJlJyxcclxuICAgICdlbnRpdGxlJyxcclxuICAgICdlbnRpdHknLFxyXG4gICAgJ2VudG9tYicsXHJcbiAgICAnZW50b3VyYWdlJyxcclxuICAgICdlbnRyYXAnLFxyXG4gICAgJ2VudHJlZScsXHJcbiAgICAnZW50cmVuY2gnLFxyXG4gICAgJ2VudHJ1c3QnLFxyXG4gICAgJ2VudHJ5d2F5JyxcclxuICAgICdlbnR3aW5lJyxcclxuICAgICdlbnVuY2lhdGUnLFxyXG4gICAgJ2VudmVsb3BlJyxcclxuICAgICdlbnZpYWJsZScsXHJcbiAgICAnZW52aWFibHknLFxyXG4gICAgJ2VudmlvdXMnLFxyXG4gICAgJ2VudmlzaW9uJyxcclxuICAgICdlbnZveScsXHJcbiAgICAnZW52eScsXHJcbiAgICAnZW56eW1lJyxcclxuICAgICdlcGljJyxcclxuICAgICdlcGlkZW1pYycsXHJcbiAgICAnZXBpZGVybWFsJyxcclxuICAgICdlcGlkZXJtaXMnLFxyXG4gICAgJ2VwaWR1cmFsJyxcclxuICAgICdlcGlsZXBzeScsXHJcbiAgICAnZXBpbGVwdGljJyxcclxuICAgICdlcGlsb2d1ZScsXHJcbiAgICAnZXBpcGhhbnknLFxyXG4gICAgJ2VwaXNvZGUnLFxyXG4gICAgJ2VxdWFsJyxcclxuICAgICdlcXVhdGUnLFxyXG4gICAgJ2VxdWF0aW9uJyxcclxuICAgICdlcXVhdG9yJyxcclxuICAgICdlcXVpbm94JyxcclxuICAgICdlcXVpcG1lbnQnLFxyXG4gICAgJ2VxdWl0eScsXHJcbiAgICAnZXF1aXZvY2FsJyxcclxuICAgICdlcmFkaWNhdGUnLFxyXG4gICAgJ2VyYXNhYmxlJyxcclxuICAgICdlcmFzZWQnLFxyXG4gICAgJ2VyYXNlcicsXHJcbiAgICAnZXJhc3VyZScsXHJcbiAgICAnZXJnb25vbWljJyxcclxuICAgICdlcnJhbmQnLFxyXG4gICAgJ2VycmFudCcsXHJcbiAgICAnZXJyYXRpYycsXHJcbiAgICAnZXJyb3InLFxyXG4gICAgJ2VydXB0JyxcclxuICAgICdlc2NhbGF0ZScsXHJcbiAgICAnZXNjYWxhdG9yJyxcclxuICAgICdlc2NhcGFibGUnLFxyXG4gICAgJ2VzY2FwYWRlJyxcclxuICAgICdlc2NhcGlzdCcsXHJcbiAgICAnZXNjYXJnb3QnLFxyXG4gICAgJ2Vza2ltbycsXHJcbiAgICAnZXNvcGhhZ3VzJyxcclxuICAgICdlc3Bpb25hZ2UnLFxyXG4gICAgJ2VzcHJlc3NvJyxcclxuICAgICdlc3F1aXJlJyxcclxuICAgICdlc3NheScsXHJcbiAgICAnZXNzZW5jZScsXHJcbiAgICAnZXNzZW50aWFsJyxcclxuICAgICdlc3RhYmxpc2gnLFxyXG4gICAgJ2VzdGF0ZScsXHJcbiAgICAnZXN0ZWVtZWQnLFxyXG4gICAgJ2VzdGltYXRlJyxcclxuICAgICdlc3RpbWF0b3InLFxyXG4gICAgJ2VzdHJhbmdlZCcsXHJcbiAgICAnZXN0cm9nZW4nLFxyXG4gICAgJ2V0Y2hpbmcnLFxyXG4gICAgJ2V0ZXJuYWwnLFxyXG4gICAgJ2V0ZXJuaXR5JyxcclxuICAgICdldGhhbm9sJyxcclxuICAgICdldGhlcicsXHJcbiAgICAnZXRoaWNhbGx5JyxcclxuICAgICdldGhpY3MnLFxyXG4gICAgJ2V1cGhlbWlzbScsXHJcbiAgICAnZXZhY3VhdGUnLFxyXG4gICAgJ2V2YWN1ZWUnLFxyXG4gICAgJ2V2YWRlJyxcclxuICAgICdldmFsdWF0ZScsXHJcbiAgICAnZXZhbHVhdG9yJyxcclxuICAgICdldmFwb3JhdGUnLFxyXG4gICAgJ2V2YXNpb24nLFxyXG4gICAgJ2V2YXNpdmUnLFxyXG4gICAgJ2V2ZW4nLFxyXG4gICAgJ2V2ZXJnbGFkZScsXHJcbiAgICAnZXZlcmdyZWVuJyxcclxuICAgICdldmVyeWJvZHknLFxyXG4gICAgJ2V2ZXJ5ZGF5JyxcclxuICAgICdldmVyeW9uZScsXHJcbiAgICAnZXZpY3QnLFxyXG4gICAgJ2V2aWRlbmNlJyxcclxuICAgICdldmlkZW50JyxcclxuICAgICdldmlsJyxcclxuICAgICdldm9rZScsXHJcbiAgICAnZXZvbHV0aW9uJyxcclxuICAgICdldm9sdmUnLFxyXG4gICAgJ2V4YWN0JyxcclxuICAgICdleGFsdGVkJyxcclxuICAgICdleGFtcGxlJyxcclxuICAgICdleGNhdmF0ZScsXHJcbiAgICAnZXhjYXZhdG9yJyxcclxuICAgICdleGNlZWRpbmcnLFxyXG4gICAgJ2V4Y2VwdGlvbicsXHJcbiAgICAnZXhjZXNzJyxcclxuICAgICdleGNoYW5nZScsXHJcbiAgICAnZXhjaXRhYmxlJyxcclxuICAgICdleGNpdGluZycsXHJcbiAgICAnZXhjbGFpbScsXHJcbiAgICAnZXhjbHVkZScsXHJcbiAgICAnZXhjbHVkaW5nJyxcclxuICAgICdleGNsdXNpb24nLFxyXG4gICAgJ2V4Y2x1c2l2ZScsXHJcbiAgICAnZXhjcmV0aW9uJyxcclxuICAgICdleGNyZXRvcnknLFxyXG4gICAgJ2V4Y3Vyc2lvbicsXHJcbiAgICAnZXhjdXNhYmxlJyxcclxuICAgICdleGN1c2FibHknLFxyXG4gICAgJ2V4Y3VzZScsXHJcbiAgICAnZXhlbXBsYXJ5JyxcclxuICAgICdleGVtcGxpZnknLFxyXG4gICAgJ2V4ZW1wdGlvbicsXHJcbiAgICAnZXhlcmNpc2VyJyxcclxuICAgICdleGVydCcsXHJcbiAgICAnZXhlcycsXHJcbiAgICAnZXhmb2xpYXRlJyxcclxuICAgICdleGhhbGUnLFxyXG4gICAgJ2V4aGF1c3QnLFxyXG4gICAgJ2V4aHVtZScsXHJcbiAgICAnZXhpbGUnLFxyXG4gICAgJ2V4aXN0aW5nJyxcclxuICAgICdleGl0JyxcclxuICAgICdleG9kdXMnLFxyXG4gICAgJ2V4b25lcmF0ZScsXHJcbiAgICAnZXhvcmNpc20nLFxyXG4gICAgJ2V4b3JjaXN0JyxcclxuICAgICdleHBhbmQnLFxyXG4gICAgJ2V4cGFuc2UnLFxyXG4gICAgJ2V4cGFuc2lvbicsXHJcbiAgICAnZXhwYW5zaXZlJyxcclxuICAgICdleHBlY3RhbnQnLFxyXG4gICAgJ2V4cGVkaXRlZCcsXHJcbiAgICAnZXhwZWRpdGVyJyxcclxuICAgICdleHBlbCcsXHJcbiAgICAnZXhwZW5kJyxcclxuICAgICdleHBlbnNlcycsXHJcbiAgICAnZXhwZW5zaXZlJyxcclxuICAgICdleHBlcnQnLFxyXG4gICAgJ2V4cGlyZScsXHJcbiAgICAnZXhwaXJpbmcnLFxyXG4gICAgJ2V4cGxhaW4nLFxyXG4gICAgJ2V4cGxldGl2ZScsXHJcbiAgICAnZXhwbGljaXQnLFxyXG4gICAgJ2V4cGxvZGUnLFxyXG4gICAgJ2V4cGxvaXQnLFxyXG4gICAgJ2V4cGxvcmUnLFxyXG4gICAgJ2V4cGxvcmluZycsXHJcbiAgICAnZXhwb25lbnQnLFxyXG4gICAgJ2V4cG9ydGVyJyxcclxuICAgICdleHBvc2FibGUnLFxyXG4gICAgJ2V4cG9zZScsXHJcbiAgICAnZXhwb3N1cmUnLFxyXG4gICAgJ2V4cHJlc3MnLFxyXG4gICAgJ2V4cHVsc2lvbicsXHJcbiAgICAnZXhxdWlzaXRlJyxcclxuICAgICdleHRlbmRlZCcsXHJcbiAgICAnZXh0ZW5kaW5nJyxcclxuICAgICdleHRlbnQnLFxyXG4gICAgJ2V4dGVudWF0ZScsXHJcbiAgICAnZXh0ZXJpb3InLFxyXG4gICAgJ2V4dGVybmFsJyxcclxuICAgICdleHRpbmN0JyxcclxuICAgICdleHRvcnRpb24nLFxyXG4gICAgJ2V4dHJhZGl0ZScsXHJcbiAgICAnZXh0cmFzJyxcclxuICAgICdleHRyb3ZlcnQnLFxyXG4gICAgJ2V4dHJ1ZGUnLFxyXG4gICAgJ2V4dHJ1ZGluZycsXHJcbiAgICAnZXh1YmVyYW50JyxcclxuICAgICdmYWJsZScsXHJcbiAgICAnZmFicmljJyxcclxuICAgICdmYWJ1bG91cycsXHJcbiAgICAnZmFjZWJvb2snLFxyXG4gICAgJ2ZhY2VjbG90aCcsXHJcbiAgICAnZmFjZWRvd24nLFxyXG4gICAgJ2ZhY2VsZXNzJyxcclxuICAgICdmYWNlbGlmdCcsXHJcbiAgICAnZmFjZXBsYXRlJyxcclxuICAgICdmYWNldGVkJyxcclxuICAgICdmYWNpYWwnLFxyXG4gICAgJ2ZhY2lsaXR5JyxcclxuICAgICdmYWNpbmcnLFxyXG4gICAgJ2ZhY3NpbWlsZScsXHJcbiAgICAnZmFjdGlvbicsXHJcbiAgICAnZmFjdG9pZCcsXHJcbiAgICAnZmFjdG9yJyxcclxuICAgICdmYWN0c2hlZXQnLFxyXG4gICAgJ2ZhY3R1YWwnLFxyXG4gICAgJ2ZhY3VsdHknLFxyXG4gICAgJ2ZhZGUnLFxyXG4gICAgJ2ZhZGluZycsXHJcbiAgICAnZmFpbGluZycsXHJcbiAgICAnZmFsY29uJyxcclxuICAgICdmYWxsJyxcclxuICAgICdmYWxzZScsXHJcbiAgICAnZmFsc2lmeScsXHJcbiAgICAnZmFtZScsXHJcbiAgICAnZmFtaWxpYXInLFxyXG4gICAgJ2ZhbWlseScsXHJcbiAgICAnZmFtaW5lJyxcclxuICAgICdmYW1pc2hlZCcsXHJcbiAgICAnZmFuYXRpYycsXHJcbiAgICAnZmFuY2llZCcsXHJcbiAgICAnZmFuY2luZXNzJyxcclxuICAgICdmYW5jeScsXHJcbiAgICAnZmFuZmFyZScsXHJcbiAgICAnZmFuZycsXHJcbiAgICAnZmFubmluZycsXHJcbiAgICAnZmFudGFzaXplJyxcclxuICAgICdmYW50YXN0aWMnLFxyXG4gICAgJ2ZhbnRhc3knLFxyXG4gICAgJ2Zhc2Npc20nLFxyXG4gICAgJ2Zhc3RiYWxsJyxcclxuICAgICdmYXN0ZXInLFxyXG4gICAgJ2Zhc3RpbmcnLFxyXG4gICAgJ2Zhc3RuZXNzJyxcclxuICAgICdmYXVjZXQnLFxyXG4gICAgJ2Zhdm9yYWJsZScsXHJcbiAgICAnZmF2b3JhYmx5JyxcclxuICAgICdmYXZvcmVkJyxcclxuICAgICdmYXZvcmluZycsXHJcbiAgICAnZmF2b3JpdGUnLFxyXG4gICAgJ2ZheCcsXHJcbiAgICAnZmVhc3QnLFxyXG4gICAgJ2ZlZGVyYWwnLFxyXG4gICAgJ2ZlZG9yYScsXHJcbiAgICAnZmVlYmxlJyxcclxuICAgICdmZWVkJyxcclxuICAgICdmZWVsJyxcclxuICAgICdmZWlzdHknLFxyXG4gICAgJ2ZlbGluZScsXHJcbiAgICAnZmVsdC10aXAnLFxyXG4gICAgJ2ZlbWluaW5lJyxcclxuICAgICdmZW1pbmlzbScsXHJcbiAgICAnZmVtaW5pc3QnLFxyXG4gICAgJ2ZlbWluaXplJyxcclxuICAgICdmZW11cicsXHJcbiAgICAnZmVuY2UnLFxyXG4gICAgJ2ZlbmNpbmcnLFxyXG4gICAgJ2ZlbmRlcicsXHJcbiAgICAnZmVybWVudCcsXHJcbiAgICAnZmVybmxpa2UnLFxyXG4gICAgJ2Zlcm9jaW91cycsXHJcbiAgICAnZmVyb2NpdHknLFxyXG4gICAgJ2ZlcnJldCcsXHJcbiAgICAnZmVycmlzJyxcclxuICAgICdmZXJyeScsXHJcbiAgICAnZmVydm9yJyxcclxuICAgICdmZXN0ZXInLFxyXG4gICAgJ2Zlc3RpdmFsJyxcclxuICAgICdmZXN0aXZlJyxcclxuICAgICdmZXN0aXZpdHknLFxyXG4gICAgJ2ZldGFsJyxcclxuICAgICdmZXRjaCcsXHJcbiAgICAnZmV2ZXInLFxyXG4gICAgJ2ZpYmVyJyxcclxuICAgICdmaWN0aW9uJyxcclxuICAgICdmaWRkbGUnLFxyXG4gICAgJ2ZpZGRsaW5nJyxcclxuICAgICdmaWRlbGl0eScsXHJcbiAgICAnZmlkZ2V0aW5nJyxcclxuICAgICdmaWRnZXR5JyxcclxuICAgICdmaWZ0ZWVuJyxcclxuICAgICdmaWZ0aCcsXHJcbiAgICAnZmlmdGlldGgnLFxyXG4gICAgJ2ZpZnR5JyxcclxuICAgICdmaWdtZW50JyxcclxuICAgICdmaWd1cmUnLFxyXG4gICAgJ2ZpZ3VyaW5lJyxcclxuICAgICdmaWxpbmcnLFxyXG4gICAgJ2ZpbGxlZCcsXHJcbiAgICAnZmlsbGVyJyxcclxuICAgICdmaWxsaW5nJyxcclxuICAgICdmaWxtJyxcclxuICAgICdmaWx0ZXInLFxyXG4gICAgJ2ZpbHRoJyxcclxuICAgICdmaWx0cmF0ZScsXHJcbiAgICAnZmluYWxlJyxcclxuICAgICdmaW5hbGlzdCcsXHJcbiAgICAnZmluYWxpemUnLFxyXG4gICAgJ2ZpbmFsbHknLFxyXG4gICAgJ2ZpbmFuY2UnLFxyXG4gICAgJ2ZpbmFuY2lhbCcsXHJcbiAgICAnZmluY2gnLFxyXG4gICAgJ2ZpbmVuZXNzJyxcclxuICAgICdmaW5lcicsXHJcbiAgICAnZmluaWNreScsXHJcbiAgICAnZmluaXNoZWQnLFxyXG4gICAgJ2ZpbmlzaGVyJyxcclxuICAgICdmaW5pc2hpbmcnLFxyXG4gICAgJ2Zpbml0ZScsXHJcbiAgICAnZmlubGVzcycsXHJcbiAgICAnZmlubGlrZScsXHJcbiAgICAnZmlzY2FsbHknLFxyXG4gICAgJ2ZpdCcsXHJcbiAgICAnZml2ZScsXHJcbiAgICAnZmxhY2NpZCcsXHJcbiAgICAnZmxhZ21hbicsXHJcbiAgICAnZmxhZ3BvbGUnLFxyXG4gICAgJ2ZsYWdzaGlwJyxcclxuICAgICdmbGFnc3RpY2snLFxyXG4gICAgJ2ZsYWdzdG9uZScsXHJcbiAgICAnZmxhaWwnLFxyXG4gICAgJ2ZsYWtpbHknLFxyXG4gICAgJ2ZsYWt5JyxcclxuICAgICdmbGFtZScsXHJcbiAgICAnZmxhbW1hYmxlJyxcclxuICAgICdmbGFua2VkJyxcclxuICAgICdmbGFua2luZycsXHJcbiAgICAnZmxhbm5lbHMnLFxyXG4gICAgJ2ZsYXAnLFxyXG4gICAgJ2ZsYXJpbmcnLFxyXG4gICAgJ2ZsYXNoYmFjaycsXHJcbiAgICAnZmxhc2hidWxiJyxcclxuICAgICdmbGFzaGNhcmQnLFxyXG4gICAgJ2ZsYXNoaWx5JyxcclxuICAgICdmbGFzaGluZycsXHJcbiAgICAnZmxhc2h5JyxcclxuICAgICdmbGFzaycsXHJcbiAgICAnZmxhdGJlZCcsXHJcbiAgICAnZmxhdGZvb3QnLFxyXG4gICAgJ2ZsYXRseScsXHJcbiAgICAnZmxhdG5lc3MnLFxyXG4gICAgJ2ZsYXR0ZW4nLFxyXG4gICAgJ2ZsYXR0ZXJlZCcsXHJcbiAgICAnZmxhdHRlcmVyJyxcclxuICAgICdmbGF0dGVyeScsXHJcbiAgICAnZmxhdHRvcCcsXHJcbiAgICAnZmxhdHdhcmUnLFxyXG4gICAgJ2ZsYXR3b3JtJyxcclxuICAgICdmbGF2b3JlZCcsXHJcbiAgICAnZmxhdm9yZnVsJyxcclxuICAgICdmbGF2b3JpbmcnLFxyXG4gICAgJ2ZsYXhzZWVkJyxcclxuICAgICdmbGVkJyxcclxuICAgICdmbGVzaGVkJyxcclxuICAgICdmbGVzaHknLFxyXG4gICAgJ2ZsaWNrJyxcclxuICAgICdmbGllcicsXHJcbiAgICAnZmxpZ2h0JyxcclxuICAgICdmbGluY2gnLFxyXG4gICAgJ2ZsaW5nJyxcclxuICAgICdmbGludCcsXHJcbiAgICAnZmxpcCcsXHJcbiAgICAnZmxpcnQnLFxyXG4gICAgJ2Zsb2F0JyxcclxuICAgICdmbG9jaycsXHJcbiAgICAnZmxvZ2dpbmcnLFxyXG4gICAgJ2Zsb3AnLFxyXG4gICAgJ2Zsb3JhbCcsXHJcbiAgICAnZmxvcmlzdCcsXHJcbiAgICAnZmxvc3MnLFxyXG4gICAgJ2Zsb3VuZGVyJyxcclxuICAgICdmbHlhYmxlJyxcclxuICAgICdmbHlhd2F5JyxcclxuICAgICdmbHllcicsXHJcbiAgICAnZmx5aW5nJyxcclxuICAgICdmbHlvdmVyJyxcclxuICAgICdmbHlwYXBlcicsXHJcbiAgICAnZm9hbScsXHJcbiAgICAnZm9lJyxcclxuICAgICdmb2cnLFxyXG4gICAgJ2ZvaWwnLFxyXG4gICAgJ2ZvbGljJyxcclxuICAgICdmb2xrJyxcclxuICAgICdmb2xsaWNsZScsXHJcbiAgICAnZm9sbG93JyxcclxuICAgICdmb25kbGluZycsXHJcbiAgICAnZm9uZGx5JyxcclxuICAgICdmb25kbmVzcycsXHJcbiAgICAnZm9uZHVlJyxcclxuICAgICdmb250JyxcclxuICAgICdmb29kJyxcclxuICAgICdmb29sJyxcclxuICAgICdmb290YWdlJyxcclxuICAgICdmb290YmFsbCcsXHJcbiAgICAnZm9vdGJhdGgnLFxyXG4gICAgJ2Zvb3Rib2FyZCcsXHJcbiAgICAnZm9vdGVyJyxcclxuICAgICdmb290Z2VhcicsXHJcbiAgICAnZm9vdGhpbGwnLFxyXG4gICAgJ2Zvb3Rob2xkJyxcclxuICAgICdmb290aW5nJyxcclxuICAgICdmb290bGVzcycsXHJcbiAgICAnZm9vdG1hbicsXHJcbiAgICAnZm9vdG5vdGUnLFxyXG4gICAgJ2Zvb3RwYWQnLFxyXG4gICAgJ2Zvb3RwYXRoJyxcclxuICAgICdmb290cHJpbnQnLFxyXG4gICAgJ2Zvb3RyZXN0JyxcclxuICAgICdmb290c2llJyxcclxuICAgICdmb290c29yZScsXHJcbiAgICAnZm9vdHdlYXInLFxyXG4gICAgJ2Zvb3R3b3JrJyxcclxuICAgICdmb3NzaWwnLFxyXG4gICAgJ2Zvc3RlcicsXHJcbiAgICAnZm91bmRlcicsXHJcbiAgICAnZm91bmRpbmcnLFxyXG4gICAgJ2ZvdW50YWluJyxcclxuICAgICdmb3gnLFxyXG4gICAgJ2ZveWVyJyxcclxuICAgICdmcmFjdGlvbicsXHJcbiAgICAnZnJhY3R1cmUnLFxyXG4gICAgJ2ZyYWdpbGUnLFxyXG4gICAgJ2ZyYWdpbGl0eScsXHJcbiAgICAnZnJhZ21lbnQnLFxyXG4gICAgJ2ZyYWdyYW5jZScsXHJcbiAgICAnZnJhZ3JhbnQnLFxyXG4gICAgJ2ZyYWlsJyxcclxuICAgICdmcmFtZScsXHJcbiAgICAnZnJhbWluZycsXHJcbiAgICAnZnJhbnRpYycsXHJcbiAgICAnZnJhdGVybmFsJyxcclxuICAgICdmcmF5ZWQnLFxyXG4gICAgJ2ZyYXlpbmcnLFxyXG4gICAgJ2ZyYXlzJyxcclxuICAgICdmcmVja2xlZCcsXHJcbiAgICAnZnJlY2tsZXMnLFxyXG4gICAgJ2ZyZWViYXNlJyxcclxuICAgICdmcmVlYmVlJyxcclxuICAgICdmcmVlYmllJyxcclxuICAgICdmcmVlZG9tJyxcclxuICAgICdmcmVlZmFsbCcsXHJcbiAgICAnZnJlZWhhbmQnLFxyXG4gICAgJ2ZyZWVpbmcnLFxyXG4gICAgJ2ZyZWVsb2FkJyxcclxuICAgICdmcmVlbHknLFxyXG4gICAgJ2ZyZWVtYXNvbicsXHJcbiAgICAnZnJlZW5lc3MnLFxyXG4gICAgJ2ZyZWVzdHlsZScsXHJcbiAgICAnZnJlZXdhcmUnLFxyXG4gICAgJ2ZyZWV3YXknLFxyXG4gICAgJ2ZyZWV3aWxsJyxcclxuICAgICdmcmVlemFibGUnLFxyXG4gICAgJ2ZyZWV6aW5nJyxcclxuICAgICdmcmVpZ2h0JyxcclxuICAgICdmcmVuY2gnLFxyXG4gICAgJ2ZyZW56aWVkJyxcclxuICAgICdmcmVuenknLFxyXG4gICAgJ2ZyZXF1ZW5jeScsXHJcbiAgICAnZnJlcXVlbnQnLFxyXG4gICAgJ2ZyZXNoJyxcclxuICAgICdmcmV0ZnVsJyxcclxuICAgICdmcmV0dGVkJyxcclxuICAgICdmcmljdGlvbicsXHJcbiAgICAnZnJpZGF5JyxcclxuICAgICdmcmlkZ2UnLFxyXG4gICAgJ2ZyaWVkJyxcclxuICAgICdmcmllbmQnLFxyXG4gICAgJ2ZyaWdodGVuJyxcclxuICAgICdmcmlnaHRmdWwnLFxyXG4gICAgJ2ZyaWdpZGl0eScsXHJcbiAgICAnZnJpZ2lkbHknLFxyXG4gICAgJ2ZyaWxsJyxcclxuICAgICdmcmluZ2UnLFxyXG4gICAgJ2ZyaXNiZWUnLFxyXG4gICAgJ2ZyaXNrJyxcclxuICAgICdmcml0dGVyJyxcclxuICAgICdmcml2b2xvdXMnLFxyXG4gICAgJ2Zyb2xpYycsXHJcbiAgICAnZnJvbScsXHJcbiAgICAnZnJvbnQnLFxyXG4gICAgJ2Zyb3N0Yml0ZScsXHJcbiAgICAnZnJvc3RlZCcsXHJcbiAgICAnZnJvc3RpbHknLFxyXG4gICAgJ2Zyb3N0aW5nJyxcclxuICAgICdmcm9zdGxpa2UnLFxyXG4gICAgJ2Zyb3N0eScsXHJcbiAgICAnZnJvdGgnLFxyXG4gICAgJ2Zyb3duJyxcclxuICAgICdmcm96ZW4nLFxyXG4gICAgJ2ZydWN0b3NlJyxcclxuICAgICdmcnVnYWxpdHknLFxyXG4gICAgJ2ZydWdhbGx5JyxcclxuICAgICdmcnVpdCcsXHJcbiAgICAnZnJ1c3RyYXRlJyxcclxuICAgICdmcnlpbmcnLFxyXG4gICAgJ2dhYicsXHJcbiAgICAnZ2FmZmUnLFxyXG4gICAgJ2dhZycsXHJcbiAgICAnZ2FpbmZ1bGx5JyxcclxuICAgICdnYWluaW5nJyxcclxuICAgICdnYWlucycsXHJcbiAgICAnZ2FsYScsXHJcbiAgICAnZ2FsbGFudGx5JyxcclxuICAgICdnYWxsZXJpYScsXHJcbiAgICAnZ2FsbGVyeScsXHJcbiAgICAnZ2FsbGV5JyxcclxuICAgICdnYWxsb24nLFxyXG4gICAgJ2dhbGxvd3MnLFxyXG4gICAgJ2dhbGxzdG9uZScsXHJcbiAgICAnZ2Fsb3JlJyxcclxuICAgICdnYWx2YW5pemUnLFxyXG4gICAgJ2dhbWJsaW5nJyxcclxuICAgICdnYW1lJyxcclxuICAgICdnYW1pbmcnLFxyXG4gICAgJ2dhbW1hJyxcclxuICAgICdnYW5kZXInLFxyXG4gICAgJ2dhbmdseScsXHJcbiAgICAnZ2FuZ3JlbmUnLFxyXG4gICAgJ2dhbmd3YXknLFxyXG4gICAgJ2dhcCcsXHJcbiAgICAnZ2FyYWdlJyxcclxuICAgICdnYXJiYWdlJyxcclxuICAgICdnYXJkZW4nLFxyXG4gICAgJ2dhcmdsZScsXHJcbiAgICAnZ2FybGFuZCcsXHJcbiAgICAnZ2FybGljJyxcclxuICAgICdnYXJtZW50JyxcclxuICAgICdnYXJuZXQnLFxyXG4gICAgJ2dhcm5pc2gnLFxyXG4gICAgJ2dhcnRlcicsXHJcbiAgICAnZ2FzJyxcclxuICAgICdnYXRoZXJlcicsXHJcbiAgICAnZ2F0aGVyaW5nJyxcclxuICAgICdnYXRpbmcnLFxyXG4gICAgJ2dhdWdpbmcnLFxyXG4gICAgJ2dhdW50bGV0JyxcclxuICAgICdnYXV6ZScsXHJcbiAgICAnZ2F2ZScsXHJcbiAgICAnZ2F3aycsXHJcbiAgICAnZ2F6aW5nJyxcclxuICAgICdnZWFyJyxcclxuICAgICdnZWNrbycsXHJcbiAgICAnZ2VlaycsXHJcbiAgICAnZ2VpZ2VyJyxcclxuICAgICdnZW0nLFxyXG4gICAgJ2dlbmRlcicsXHJcbiAgICAnZ2VuZXJpYycsXHJcbiAgICAnZ2VuZXJvdXMnLFxyXG4gICAgJ2dlbmV0aWNzJyxcclxuICAgICdnZW5yZScsXHJcbiAgICAnZ2VudGlsZScsXHJcbiAgICAnZ2VudGxlbWFuJyxcclxuICAgICdnZW50bHknLFxyXG4gICAgJ2dlbnRzJyxcclxuICAgICdnZW9ncmFwaHknLFxyXG4gICAgJ2dlb2xvZ2ljJyxcclxuICAgICdnZW9sb2dpc3QnLFxyXG4gICAgJ2dlb2xvZ3knLFxyXG4gICAgJ2dlb21ldHJpYycsXHJcbiAgICAnZ2VvbWV0cnknLFxyXG4gICAgJ2dlcmFuaXVtJyxcclxuICAgICdnZXJiaWwnLFxyXG4gICAgJ2dlcmlhdHJpYycsXHJcbiAgICAnZ2VybWljaWRlJyxcclxuICAgICdnZXJtaW5hdGUnLFxyXG4gICAgJ2dlcm1sZXNzJyxcclxuICAgICdnZXJtcHJvb2YnLFxyXG4gICAgJ2dlc3RhdGUnLFxyXG4gICAgJ2dlc3RhdGlvbicsXHJcbiAgICAnZ2VzdHVyZScsXHJcbiAgICAnZ2V0YXdheScsXHJcbiAgICAnZ2V0dGluZycsXHJcbiAgICAnZ2V0dXAnLFxyXG4gICAgJ2dpYW50JyxcclxuICAgICdnaWJiZXJpc2gnLFxyXG4gICAgJ2dpYmxldCcsXHJcbiAgICAnZ2lkZGlseScsXHJcbiAgICAnZ2lkZGluZXNzJyxcclxuICAgICdnaWRkeScsXHJcbiAgICAnZ2lmdCcsXHJcbiAgICAnZ2lnYWJ5dGUnLFxyXG4gICAgJ2dpZ2FoZXJ0eicsXHJcbiAgICAnZ2lnYW50aWMnLFxyXG4gICAgJ2dpZ2dsZScsXHJcbiAgICAnZ2lnZ2xpbmcnLFxyXG4gICAgJ2dpZ2dseScsXHJcbiAgICAnZ2lnb2xvJyxcclxuICAgICdnaWxsZWQnLFxyXG4gICAgJ2dpbGxzJyxcclxuICAgICdnaW1taWNrJyxcclxuICAgICdnaXJkbGUnLFxyXG4gICAgJ2dpdmVhd2F5JyxcclxuICAgICdnaXZlbicsXHJcbiAgICAnZ2l2ZXInLFxyXG4gICAgJ2dpdmluZycsXHJcbiAgICAnZ2l6bW8nLFxyXG4gICAgJ2dpenphcmQnLFxyXG4gICAgJ2dsYWNpYWwnLFxyXG4gICAgJ2dsYWNpZXInLFxyXG4gICAgJ2dsYWRlJyxcclxuICAgICdnbGFkaWF0b3InLFxyXG4gICAgJ2dsYWRseScsXHJcbiAgICAnZ2xhbW9yb3VzJyxcclxuICAgICdnbGFtb3VyJyxcclxuICAgICdnbGFuY2UnLFxyXG4gICAgJ2dsYW5jaW5nJyxcclxuICAgICdnbGFuZHVsYXInLFxyXG4gICAgJ2dsYXJlJyxcclxuICAgICdnbGFyaW5nJyxcclxuICAgICdnbGFzcycsXHJcbiAgICAnZ2xhdWNvbWEnLFxyXG4gICAgJ2dsYXppbmcnLFxyXG4gICAgJ2dsZWFtaW5nJyxcclxuICAgICdnbGVlZnVsJyxcclxuICAgICdnbGlkZXInLFxyXG4gICAgJ2dsaWRpbmcnLFxyXG4gICAgJ2dsaW1tZXInLFxyXG4gICAgJ2dsaW1wc2UnLFxyXG4gICAgJ2dsaXN0ZW4nLFxyXG4gICAgJ2dsaXRjaCcsXHJcbiAgICAnZ2xpdHRlcicsXHJcbiAgICAnZ2xpdHp5JyxcclxuICAgICdnbG9hdGVyJyxcclxuICAgICdnbG9hdGluZycsXHJcbiAgICAnZ2xvb21pbHknLFxyXG4gICAgJ2dsb29teScsXHJcbiAgICAnZ2xvcmlmaWVkJyxcclxuICAgICdnbG9yaWZpZXInLFxyXG4gICAgJ2dsb3JpZnknLFxyXG4gICAgJ2dsb3Jpb3VzJyxcclxuICAgICdnbG9yeScsXHJcbiAgICAnZ2xvc3MnLFxyXG4gICAgJ2dsb3ZlJyxcclxuICAgICdnbG93aW5nJyxcclxuICAgICdnbG93d29ybScsXHJcbiAgICAnZ2x1Y29zZScsXHJcbiAgICAnZ2x1ZScsXHJcbiAgICAnZ2x1dGVuJyxcclxuICAgICdnbHV0aW5vdXMnLFxyXG4gICAgJ2dsdXR0b24nLFxyXG4gICAgJ2duYXJseScsXHJcbiAgICAnZ25hdCcsXHJcbiAgICAnZ29hbCcsXHJcbiAgICAnZ29hdHNraW4nLFxyXG4gICAgJ2dvZXMnLFxyXG4gICAgJ2dvZ2dsZXMnLFxyXG4gICAgJ2dvaW5nJyxcclxuICAgICdnb2xkZmlzaCcsXHJcbiAgICAnZ29sZG1pbmUnLFxyXG4gICAgJ2dvbGRzbWl0aCcsXHJcbiAgICAnZ29sZicsXHJcbiAgICAnZ29saWF0aCcsXHJcbiAgICAnZ29uYWQnLFxyXG4gICAgJ2dvbmRvbGEnLFxyXG4gICAgJ2dvbmUnLFxyXG4gICAgJ2dvbmcnLFxyXG4gICAgJ2dvb2QnLFxyXG4gICAgJ2dvb2V5JyxcclxuICAgICdnb29mYmFsbCcsXHJcbiAgICAnZ29vZmluZXNzJyxcclxuICAgICdnb29meScsXHJcbiAgICAnZ29vZ2xlJyxcclxuICAgICdnb29uJyxcclxuICAgICdnb3BoZXInLFxyXG4gICAgJ2dvcmUnLFxyXG4gICAgJ2dvcmdlZCcsXHJcbiAgICAnZ29yZ2VvdXMnLFxyXG4gICAgJ2dvcnknLFxyXG4gICAgJ2dvc2xpbmcnLFxyXG4gICAgJ2dvc3NpcCcsXHJcbiAgICAnZ290aGljJyxcclxuICAgICdnb3R0ZW4nLFxyXG4gICAgJ2dvdXQnLFxyXG4gICAgJ2dvd24nLFxyXG4gICAgJ2dyYWInLFxyXG4gICAgJ2dyYWNlZnVsJyxcclxuICAgICdncmFjZWxlc3MnLFxyXG4gICAgJ2dyYWNpb3VzJyxcclxuICAgICdncmFkYXRpb24nLFxyXG4gICAgJ2dyYWRlZCcsXHJcbiAgICAnZ3JhZGVyJyxcclxuICAgICdncmFkaWVudCcsXHJcbiAgICAnZ3JhZGluZycsXHJcbiAgICAnZ3JhZHVhbGx5JyxcclxuICAgICdncmFkdWF0ZScsXHJcbiAgICAnZ3JhZmZpdGknLFxyXG4gICAgJ2dyYWZ0ZWQnLFxyXG4gICAgJ2dyYWZ0aW5nJyxcclxuICAgICdncmFpbicsXHJcbiAgICAnZ3JhbmRkYWQnLFxyXG4gICAgJ2dyYW5ka2lkJyxcclxuICAgICdncmFuZGx5JyxcclxuICAgICdncmFuZG1hJyxcclxuICAgICdncmFuZHBhJyxcclxuICAgICdncmFuZHNvbicsXHJcbiAgICAnZ3Jhbml0ZScsXHJcbiAgICAnZ3Jhbm55JyxcclxuICAgICdncmFub2xhJyxcclxuICAgICdncmFudCcsXHJcbiAgICAnZ3JhbnVsYXInLFxyXG4gICAgJ2dyYXBlJyxcclxuICAgICdncmFwaCcsXHJcbiAgICAnZ3JhcHBsZScsXHJcbiAgICAnZ3JhcHBsaW5nJyxcclxuICAgICdncmFzcCcsXHJcbiAgICAnZ3Jhc3MnLFxyXG4gICAgJ2dyYXRpZmllZCcsXHJcbiAgICAnZ3JhdGlmeScsXHJcbiAgICAnZ3JhdGluZycsXHJcbiAgICAnZ3JhdGl0dWRlJyxcclxuICAgICdncmF0dWl0eScsXHJcbiAgICAnZ3JhdmVsJyxcclxuICAgICdncmF2ZW5lc3MnLFxyXG4gICAgJ2dyYXZlcycsXHJcbiAgICAnZ3JhdmV5YXJkJyxcclxuICAgICdncmF2aXRhdGUnLFxyXG4gICAgJ2dyYXZpdHknLFxyXG4gICAgJ2dyYXZ5JyxcclxuICAgICdncmF5JyxcclxuICAgICdncmF6aW5nJyxcclxuICAgICdncmVhc2lseScsXHJcbiAgICAnZ3JlZWRpbHknLFxyXG4gICAgJ2dyZWVkbGVzcycsXHJcbiAgICAnZ3JlZWR5JyxcclxuICAgICdncmVlbicsXHJcbiAgICAnZ3JlZXRlcicsXHJcbiAgICAnZ3JlZXRpbmcnLFxyXG4gICAgJ2dyZXcnLFxyXG4gICAgJ2dyZXlob3VuZCcsXHJcbiAgICAnZ3JpZCcsXHJcbiAgICAnZ3JpZWYnLFxyXG4gICAgJ2dyaWV2YW5jZScsXHJcbiAgICAnZ3JpZXZpbmcnLFxyXG4gICAgJ2dyaWV2b3VzJyxcclxuICAgICdncmlsbCcsXHJcbiAgICAnZ3JpbWFjZScsXHJcbiAgICAnZ3JpbWFjaW5nJyxcclxuICAgICdncmltZScsXHJcbiAgICAnZ3JpbWluZXNzJyxcclxuICAgICdncmlteScsXHJcbiAgICAnZ3JpbmNoJyxcclxuICAgICdncmlubmluZycsXHJcbiAgICAnZ3JpcCcsXHJcbiAgICAnZ3Jpc3RsZScsXHJcbiAgICAnZ3JpdCcsXHJcbiAgICAnZ3JvZ2dpbHknLFxyXG4gICAgJ2dyb2dneScsXHJcbiAgICAnZ3JvaW4nLFxyXG4gICAgJ2dyb29tJyxcclxuICAgICdncm9vdmUnLFxyXG4gICAgJ2dyb292aW5nJyxcclxuICAgICdncm9vdnknLFxyXG4gICAgJ2dyb3BlJyxcclxuICAgICdncm91bmQnLFxyXG4gICAgJ2dyb3VwZWQnLFxyXG4gICAgJ2dyb3V0JyxcclxuICAgICdncm92ZScsXHJcbiAgICAnZ3Jvd2VyJyxcclxuICAgICdncm93aW5nJyxcclxuICAgICdncm93bCcsXHJcbiAgICAnZ3J1YicsXHJcbiAgICAnZ3J1ZGdlJyxcclxuICAgICdncnVkZ2luZycsXHJcbiAgICAnZ3J1ZWxpbmcnLFxyXG4gICAgJ2dydWZmbHknLFxyXG4gICAgJ2dydW1ibGUnLFxyXG4gICAgJ2dydW1ibGluZycsXHJcbiAgICAnZ3J1bWJseScsXHJcbiAgICAnZ3J1bXBpbHknLFxyXG4gICAgJ2dydW5nZScsXHJcbiAgICAnZ3J1bnQnLFxyXG4gICAgJ2d1YWNhbW9sZScsXHJcbiAgICAnZ3VpZGFibGUnLFxyXG4gICAgJ2d1aWRhbmNlJyxcclxuICAgICdndWlkZScsXHJcbiAgICAnZ3VpZGluZycsXHJcbiAgICAnZ3VpbGVsZXNzJyxcclxuICAgICdndWlzZScsXHJcbiAgICAnZ3VsZicsXHJcbiAgICAnZ3VsbGlibGUnLFxyXG4gICAgJ2d1bGx5JyxcclxuICAgICdndWxwJyxcclxuICAgICdndW1iYWxsJyxcclxuICAgICdndW1kcm9wJyxcclxuICAgICdndW1taW5lc3MnLFxyXG4gICAgJ2d1bW1pbmcnLFxyXG4gICAgJ2d1bW15JyxcclxuICAgICdndXJnbGUnLFxyXG4gICAgJ2d1cmdsaW5nJyxcclxuICAgICdndXJ1JyxcclxuICAgICdndXNoJyxcclxuICAgICdndXN0bycsXHJcbiAgICAnZ3VzdHknLFxyXG4gICAgJ2d1dGxlc3MnLFxyXG4gICAgJ2d1dHMnLFxyXG4gICAgJ2d1dHRlcicsXHJcbiAgICAnZ3V5JyxcclxuICAgICdndXp6bGVyJyxcclxuICAgICdneXJhdGlvbicsXHJcbiAgICAnaGFiaXRhYmxlJyxcclxuICAgICdoYWJpdGFudCcsXHJcbiAgICAnaGFiaXRhdCcsXHJcbiAgICAnaGFiaXR1YWwnLFxyXG4gICAgJ2hhY2tlZCcsXHJcbiAgICAnaGFja2VyJyxcclxuICAgICdoYWNraW5nJyxcclxuICAgICdoYWNrc2F3JyxcclxuICAgICdoYWQnLFxyXG4gICAgJ2hhZ2dsZXInLFxyXG4gICAgJ2hhaWt1JyxcclxuICAgICdoYWxmJyxcclxuICAgICdoYWxvZ2VuJyxcclxuICAgICdoYWx0JyxcclxuICAgICdoYWx2ZWQnLFxyXG4gICAgJ2hhbHZlcycsXHJcbiAgICAnaGFtYnVyZ2VyJyxcclxuICAgICdoYW1sZXQnLFxyXG4gICAgJ2hhbW1vY2snLFxyXG4gICAgJ2hhbXBlcicsXHJcbiAgICAnaGFtc3RlcicsXHJcbiAgICAnaGFtc3RyaW5nJyxcclxuICAgICdoYW5kYmFnJyxcclxuICAgICdoYW5kYmFsbCcsXHJcbiAgICAnaGFuZGJvb2snLFxyXG4gICAgJ2hhbmRicmFrZScsXHJcbiAgICAnaGFuZGNhcnQnLFxyXG4gICAgJ2hhbmRjbGFwJyxcclxuICAgICdoYW5kY2xhc3AnLFxyXG4gICAgJ2hhbmRjcmFmdCcsXHJcbiAgICAnaGFuZGN1ZmYnLFxyXG4gICAgJ2hhbmRlZCcsXHJcbiAgICAnaGFuZGZ1bCcsXHJcbiAgICAnaGFuZGdyaXAnLFxyXG4gICAgJ2hhbmRndW4nLFxyXG4gICAgJ2hhbmRoZWxkJyxcclxuICAgICdoYW5kaW5lc3MnLFxyXG4gICAgJ2hhbmRpd29yaycsXHJcbiAgICAnaGFuZGxlYmFyJyxcclxuICAgICdoYW5kbGVkJyxcclxuICAgICdoYW5kbGVyJyxcclxuICAgICdoYW5kbGluZycsXHJcbiAgICAnaGFuZG1hZGUnLFxyXG4gICAgJ2hhbmRvZmYnLFxyXG4gICAgJ2hhbmRwaWNrJyxcclxuICAgICdoYW5kcHJpbnQnLFxyXG4gICAgJ2hhbmRyYWlsJyxcclxuICAgICdoYW5kc2F3JyxcclxuICAgICdoYW5kc2V0JyxcclxuICAgICdoYW5kc2ZyZWUnLFxyXG4gICAgJ2hhbmRzaGFrZScsXHJcbiAgICAnaGFuZHN0YW5kJyxcclxuICAgICdoYW5kd2FzaCcsXHJcbiAgICAnaGFuZHdvcmsnLFxyXG4gICAgJ2hhbmR3b3ZlbicsXHJcbiAgICAnaGFuZHdyaXRlJyxcclxuICAgICdoYW5keW1hbicsXHJcbiAgICAnaGFuZ25haWwnLFxyXG4gICAgJ2hhbmdvdXQnLFxyXG4gICAgJ2hhbmdvdmVyJyxcclxuICAgICdoYW5ndXAnLFxyXG4gICAgJ2hhbmtlcmluZycsXHJcbiAgICAnaGFua2llJyxcclxuICAgICdoYW5reScsXHJcbiAgICAnaGFwaGF6YXJkJyxcclxuICAgICdoYXBwZW5pbmcnLFxyXG4gICAgJ2hhcHBpZXInLFxyXG4gICAgJ2hhcHBpZXN0JyxcclxuICAgICdoYXBwaWx5JyxcclxuICAgICdoYXBwaW5lc3MnLFxyXG4gICAgJ2hhcHB5JyxcclxuICAgICdoYXJib3InLFxyXG4gICAgJ2hhcmRjb3B5JyxcclxuICAgICdoYXJkY29yZScsXHJcbiAgICAnaGFyZGNvdmVyJyxcclxuICAgICdoYXJkZGlzaycsXHJcbiAgICAnaGFyZGVuZWQnLFxyXG4gICAgJ2hhcmRlbmVyJyxcclxuICAgICdoYXJkZW5pbmcnLFxyXG4gICAgJ2hhcmRoYXQnLFxyXG4gICAgJ2hhcmRoZWFkJyxcclxuICAgICdoYXJkaW5lc3MnLFxyXG4gICAgJ2hhcmRseScsXHJcbiAgICAnaGFyZG5lc3MnLFxyXG4gICAgJ2hhcmRzaGlwJyxcclxuICAgICdoYXJkd2FyZScsXHJcbiAgICAnaGFyZHdpcmVkJyxcclxuICAgICdoYXJkd29vZCcsXHJcbiAgICAnaGFyZHknLFxyXG4gICAgJ2hhcm1mdWwnLFxyXG4gICAgJ2hhcm1sZXNzJyxcclxuICAgICdoYXJtb25pY2EnLFxyXG4gICAgJ2hhcm1vbmljcycsXHJcbiAgICAnaGFybW9uaXplJyxcclxuICAgICdoYXJtb255JyxcclxuICAgICdoYXJuZXNzJyxcclxuICAgICdoYXJwaXN0JyxcclxuICAgICdoYXJzaCcsXHJcbiAgICAnaGFydmVzdCcsXHJcbiAgICAnaGFzaCcsXHJcbiAgICAnaGFzc2xlJyxcclxuICAgICdoYXN0ZScsXHJcbiAgICAnaGFzdGlseScsXHJcbiAgICAnaGFzdGluZXNzJyxcclxuICAgICdoYXN0eScsXHJcbiAgICAnaGF0Ym94JyxcclxuICAgICdoYXRjaGJhY2snLFxyXG4gICAgJ2hhdGNoZXJ5JyxcclxuICAgICdoYXRjaGV0JyxcclxuICAgICdoYXRjaGluZycsXHJcbiAgICAnaGF0Y2hsaW5nJyxcclxuICAgICdoYXRlJyxcclxuICAgICdoYXRsZXNzJyxcclxuICAgICdoYXRyZWQnLFxyXG4gICAgJ2hhdW50JyxcclxuICAgICdoYXZlbicsXHJcbiAgICAnaGF6YXJkJyxcclxuICAgICdoYXplbG51dCcsXHJcbiAgICAnaGF6aWx5JyxcclxuICAgICdoYXppbmVzcycsXHJcbiAgICAnaGF6aW5nJyxcclxuICAgICdoYXp5JyxcclxuICAgICdoZWFkYWNoZScsXHJcbiAgICAnaGVhZGJhbmQnLFxyXG4gICAgJ2hlYWRib2FyZCcsXHJcbiAgICAnaGVhZGNvdW50JyxcclxuICAgICdoZWFkZHJlc3MnLFxyXG4gICAgJ2hlYWRlZCcsXHJcbiAgICAnaGVhZGVyJyxcclxuICAgICdoZWFkZmlyc3QnLFxyXG4gICAgJ2hlYWRnZWFyJyxcclxuICAgICdoZWFkaW5nJyxcclxuICAgICdoZWFkbGFtcCcsXHJcbiAgICAnaGVhZGxlc3MnLFxyXG4gICAgJ2hlYWRsb2NrJyxcclxuICAgICdoZWFkcGhvbmUnLFxyXG4gICAgJ2hlYWRwaWVjZScsXHJcbiAgICAnaGVhZHJlc3QnLFxyXG4gICAgJ2hlYWRyb29tJyxcclxuICAgICdoZWFkc2NhcmYnLFxyXG4gICAgJ2hlYWRzZXQnLFxyXG4gICAgJ2hlYWRzbWFuJyxcclxuICAgICdoZWFkc3RhbmQnLFxyXG4gICAgJ2hlYWRzdG9uZScsXHJcbiAgICAnaGVhZHdheScsXHJcbiAgICAnaGVhZHdlYXInLFxyXG4gICAgJ2hlYXAnLFxyXG4gICAgJ2hlYXQnLFxyXG4gICAgJ2hlYXZlJyxcclxuICAgICdoZWF2aWx5JyxcclxuICAgICdoZWF2aW5lc3MnLFxyXG4gICAgJ2hlYXZpbmcnLFxyXG4gICAgJ2hlZGdlJyxcclxuICAgICdoZWRnaW5nJyxcclxuICAgICdoZWZ0aW5lc3MnLFxyXG4gICAgJ2hlZnR5JyxcclxuICAgICdoZWxpdW0nLFxyXG4gICAgJ2hlbG1ldCcsXHJcbiAgICAnaGVscGVyJyxcclxuICAgICdoZWxwZnVsJyxcclxuICAgICdoZWxwaW5nJyxcclxuICAgICdoZWxwbGVzcycsXHJcbiAgICAnaGVscGxpbmUnLFxyXG4gICAgJ2hlbWxvY2snLFxyXG4gICAgJ2hlbXN0aXRjaCcsXHJcbiAgICAnaGVuY2UnLFxyXG4gICAgJ2hlbmNobWFuJyxcclxuICAgICdoZW5uYScsXHJcbiAgICAnaGVyYWxkJyxcclxuICAgICdoZXJiYWwnLFxyXG4gICAgJ2hlcmJpY2lkZScsXHJcbiAgICAnaGVyYnMnLFxyXG4gICAgJ2hlcml0YWdlJyxcclxuICAgICdoZXJtaXQnLFxyXG4gICAgJ2hlcm9pY3MnLFxyXG4gICAgJ2hlcm9pc20nLFxyXG4gICAgJ2hlcnJpbmcnLFxyXG4gICAgJ2hlcnNlbGYnLFxyXG4gICAgJ2hlcnR6JyxcclxuICAgICdoZXNpdGFuY3knLFxyXG4gICAgJ2hlc2l0YW50JyxcclxuICAgICdoZXNpdGF0ZScsXHJcbiAgICAnaGV4YWdvbicsXHJcbiAgICAnaGV4YWdyYW0nLFxyXG4gICAgJ2h1YmNhcCcsXHJcbiAgICAnaHVkZGxlJyxcclxuICAgICdodWRkbGluZycsXHJcbiAgICAnaHVmZicsXHJcbiAgICAnaHVnJyxcclxuICAgICdodWxhJyxcclxuICAgICdodWxrJyxcclxuICAgICdodWxsJyxcclxuICAgICdodW1hbicsXHJcbiAgICAnaHVtYmxlJyxcclxuICAgICdodW1ibGluZycsXHJcbiAgICAnaHVtYmx5JyxcclxuICAgICdodW1pZCcsXHJcbiAgICAnaHVtaWxpYXRlJyxcclxuICAgICdodW1pbGl0eScsXHJcbiAgICAnaHVtbWluZycsXHJcbiAgICAnaHVtbXVzJyxcclxuICAgICdodW1vbmdvdXMnLFxyXG4gICAgJ2h1bW9yaXN0JyxcclxuICAgICdodW1vcmxlc3MnLFxyXG4gICAgJ2h1bW9yb3VzJyxcclxuICAgICdodW1wYmFjaycsXHJcbiAgICAnaHVtcGVkJyxcclxuICAgICdodW12ZWUnLFxyXG4gICAgJ2h1bmNoYmFjaycsXHJcbiAgICAnaHVuZHJlZHRoJyxcclxuICAgICdodW5nZXInLFxyXG4gICAgJ2h1bmdyaWx5JyxcclxuICAgICdodW5ncnknLFxyXG4gICAgJ2h1bmsnLFxyXG4gICAgJ2h1bnRlcicsXHJcbiAgICAnaHVudGluZycsXHJcbiAgICAnaHVudHJlc3MnLFxyXG4gICAgJ2h1bnRzbWFuJyxcclxuICAgICdodXJkbGUnLFxyXG4gICAgJ2h1cmxlZCcsXHJcbiAgICAnaHVybGVyJyxcclxuICAgICdodXJsaW5nJyxcclxuICAgICdodXJyYXknLFxyXG4gICAgJ2h1cnJpY2FuZScsXHJcbiAgICAnaHVycmllZCcsXHJcbiAgICAnaHVycnknLFxyXG4gICAgJ2h1cnQnLFxyXG4gICAgJ2h1c2JhbmQnLFxyXG4gICAgJ2h1c2gnLFxyXG4gICAgJ2h1c2tlZCcsXHJcbiAgICAnaHVza2luZXNzJyxcclxuICAgICdodXQnLFxyXG4gICAgJ2h5YnJpZCcsXHJcbiAgICAnaHlkcmFudCcsXHJcbiAgICAnaHlkcmF0ZWQnLFxyXG4gICAgJ2h5ZHJhdGlvbicsXHJcbiAgICAnaHlkcm9nZW4nLFxyXG4gICAgJ2h5ZHJveGlkZScsXHJcbiAgICAnaHlwZXJsaW5rJyxcclxuICAgICdoeXBlcnRleHQnLFxyXG4gICAgJ2h5cGhlbicsXHJcbiAgICAnaHlwbm9zZXMnLFxyXG4gICAgJ2h5cG5vc2lzJyxcclxuICAgICdoeXBub3RpYycsXHJcbiAgICAnaHlwbm90aXNtJyxcclxuICAgICdoeXBub3Rpc3QnLFxyXG4gICAgJ2h5cG5vdGl6ZScsXHJcbiAgICAnaHlwb2NyaXN5JyxcclxuICAgICdoeXBvY3JpdGUnLFxyXG4gICAgJ2lidXByb2ZlbicsXHJcbiAgICAnaWNlJyxcclxuICAgICdpY2luZXNzJyxcclxuICAgICdpY2luZycsXHJcbiAgICAnaWNreScsXHJcbiAgICAnaWNvbicsXHJcbiAgICAnaWN5JyxcclxuICAgICdpZGVhbGlzbScsXHJcbiAgICAnaWRlYWxpc3QnLFxyXG4gICAgJ2lkZWFsaXplJyxcclxuICAgICdpZGVhbGx5JyxcclxuICAgICdpZGVhbG5lc3MnLFxyXG4gICAgJ2lkZW50aWNhbCcsXHJcbiAgICAnaWRlbnRpZnknLFxyXG4gICAgJ2lkZW50aXR5JyxcclxuICAgICdpZGVvbG9neScsXHJcbiAgICAnaWRpb2N5JyxcclxuICAgICdpZGlvbScsXHJcbiAgICAnaWRseScsXHJcbiAgICAnaWdsb28nLFxyXG4gICAgJ2lnbml0aW9uJyxcclxuICAgICdpZ25vcmUnLFxyXG4gICAgJ2lndWFuYScsXHJcbiAgICAnaWxsaWNpdGx5JyxcclxuICAgICdpbGx1c2lvbicsXHJcbiAgICAnaWxsdXNpdmUnLFxyXG4gICAgJ2ltYWdlJyxcclxuICAgICdpbWFnaW5hcnknLFxyXG4gICAgJ2ltYWdpbmVzJyxcclxuICAgICdpbWFnaW5nJyxcclxuICAgICdpbWJlY2lsZScsXHJcbiAgICAnaW1pdGF0ZScsXHJcbiAgICAnaW1pdGF0aW9uJyxcclxuICAgICdpbW1hdHVyZScsXHJcbiAgICAnaW1tZXJzZScsXHJcbiAgICAnaW1tZXJzaW9uJyxcclxuICAgICdpbW1pbmVudCcsXHJcbiAgICAnaW1tb2JpbGUnLFxyXG4gICAgJ2ltbW9kZXN0JyxcclxuICAgICdpbW1vcmFsbHknLFxyXG4gICAgJ2ltbW9ydGFsJyxcclxuICAgICdpbW1vdmFibGUnLFxyXG4gICAgJ2ltbW92YWJseScsXHJcbiAgICAnaW1tdW5pdHknLFxyXG4gICAgJ2ltbXVuaXplJyxcclxuICAgICdpbXBhaXJlZCcsXHJcbiAgICAnaW1wYWxlJyxcclxuICAgICdpbXBhcnQnLFxyXG4gICAgJ2ltcGF0aWVudCcsXHJcbiAgICAnaW1wZWFjaCcsXHJcbiAgICAnaW1wZWRpbmcnLFxyXG4gICAgJ2ltcGVuZGluZycsXHJcbiAgICAnaW1wZXJmZWN0JyxcclxuICAgICdpbXBlcmlhbCcsXHJcbiAgICAnaW1waXNoJyxcclxuICAgICdpbXBsYW50JyxcclxuICAgICdpbXBsZW1lbnQnLFxyXG4gICAgJ2ltcGxpY2F0ZScsXHJcbiAgICAnaW1wbGljaXQnLFxyXG4gICAgJ2ltcGxvZGUnLFxyXG4gICAgJ2ltcGxvc2lvbicsXHJcbiAgICAnaW1wbG9zaXZlJyxcclxuICAgICdpbXBseScsXHJcbiAgICAnaW1wb2xpdGUnLFxyXG4gICAgJ2ltcG9ydGFudCcsXHJcbiAgICAnaW1wb3J0ZXInLFxyXG4gICAgJ2ltcG9zZScsXHJcbiAgICAnaW1wb3NpbmcnLFxyXG4gICAgJ2ltcG90ZW5jZScsXHJcbiAgICAnaW1wb3RlbmN5JyxcclxuICAgICdpbXBvdGVudCcsXHJcbiAgICAnaW1wb3VuZCcsXHJcbiAgICAnaW1wcmVjaXNlJyxcclxuICAgICdpbXByaW50JyxcclxuICAgICdpbXByaXNvbicsXHJcbiAgICAnaW1wcm9tcHR1JyxcclxuICAgICdpbXByb3BlcicsXHJcbiAgICAnaW1wcm92ZScsXHJcbiAgICAnaW1wcm92aW5nJyxcclxuICAgICdpbXByb3Zpc2UnLFxyXG4gICAgJ2ltcHJ1ZGVudCcsXHJcbiAgICAnaW1wdWxzZScsXHJcbiAgICAnaW1wdWxzaXZlJyxcclxuICAgICdpbXB1cmUnLFxyXG4gICAgJ2ltcHVyaXR5JyxcclxuICAgICdpb2RpbmUnLFxyXG4gICAgJ2lvZGl6ZScsXHJcbiAgICAnaW9uJyxcclxuICAgICdpcGFkJyxcclxuICAgICdpcGhvbmUnLFxyXG4gICAgJ2lwb2QnLFxyXG4gICAgJ2lyYXRlJyxcclxuICAgICdpcmsnLFxyXG4gICAgJ2lyb24nLFxyXG4gICAgJ2lycmVndWxhcicsXHJcbiAgICAnaXJyaWdhdGUnLFxyXG4gICAgJ2lycml0YWJsZScsXHJcbiAgICAnaXJyaXRhYmx5JyxcclxuICAgICdpcnJpdGFudCcsXHJcbiAgICAnaXJyaXRhdGUnLFxyXG4gICAgJ2lzbGFtaWMnLFxyXG4gICAgJ2lzbGFtaXN0JyxcclxuICAgICdpc29sYXRlZCcsXHJcbiAgICAnaXNvbGF0aW5nJyxcclxuICAgICdpc29sYXRpb24nLFxyXG4gICAgJ2lzb3RvcGUnLFxyXG4gICAgJ2lzc3VlJyxcclxuICAgICdpc3N1aW5nJyxcclxuICAgICdpdGFsaWNpemUnLFxyXG4gICAgJ2l0YWxpY3MnLFxyXG4gICAgJ2l0ZW0nLFxyXG4gICAgJ2l0aW5lcmFyeScsXHJcbiAgICAnaXR1bmVzJyxcclxuICAgICdpdm9yeScsXHJcbiAgICAnaXZ5JyxcclxuICAgICdqYWInLFxyXG4gICAgJ2phY2thbCcsXHJcbiAgICAnamFja2V0JyxcclxuICAgICdqYWNra25pZmUnLFxyXG4gICAgJ2phY2twb3QnLFxyXG4gICAgJ2phaWxiaXJkJyxcclxuICAgICdqYWlsYnJlYWsnLFxyXG4gICAgJ2phaWxlcicsXHJcbiAgICAnamFpbGhvdXNlJyxcclxuICAgICdqYWxhcGVubycsXHJcbiAgICAnamFtJyxcclxuICAgICdqYW5pdG9yJyxcclxuICAgICdqYW51YXJ5JyxcclxuICAgICdqYXJnb24nLFxyXG4gICAgJ2phcnJpbmcnLFxyXG4gICAgJ2phc21pbmUnLFxyXG4gICAgJ2phdW5kaWNlJyxcclxuICAgICdqYXVudCcsXHJcbiAgICAnamF2YScsXHJcbiAgICAnamF3ZWQnLFxyXG4gICAgJ2phd2xlc3MnLFxyXG4gICAgJ2phd2xpbmUnLFxyXG4gICAgJ2phd3MnLFxyXG4gICAgJ2pheWJpcmQnLFxyXG4gICAgJ2pheXdhbGtlcicsXHJcbiAgICAnamF6eicsXHJcbiAgICAnamVlcCcsXHJcbiAgICAnamVlcmluZ2x5JyxcclxuICAgICdqZWxsaWVkJyxcclxuICAgICdqZWxseScsXHJcbiAgICAnamVyc2V5JyxcclxuICAgICdqZXN0ZXInLFxyXG4gICAgJ2pldCcsXHJcbiAgICAnamlmZnknLFxyXG4gICAgJ2ppZ3NhdycsXHJcbiAgICAnamltbXknLFxyXG4gICAgJ2ppbmdsZScsXHJcbiAgICAnamluZ2xpbmcnLFxyXG4gICAgJ2ppbngnLFxyXG4gICAgJ2ppdHRlcnMnLFxyXG4gICAgJ2ppdHRlcnknLFxyXG4gICAgJ2pvYicsXHJcbiAgICAnam9ja2V5JyxcclxuICAgICdqb2Nrc3RyYXAnLFxyXG4gICAgJ2pvZ2dlcicsXHJcbiAgICAnam9nZ2luZycsXHJcbiAgICAnam9obicsXHJcbiAgICAnam9pbmluZycsXHJcbiAgICAnam9rZXN0ZXInLFxyXG4gICAgJ2pva2luZ2x5JyxcclxuICAgICdqb2xsaW5lc3MnLFxyXG4gICAgJ2pvbGx5JyxcclxuICAgICdqb2x0JyxcclxuICAgICdqb3QnLFxyXG4gICAgJ2pvdmlhbCcsXHJcbiAgICAnam95ZnVsbHknLFxyXG4gICAgJ2pveWxlc3NseScsXHJcbiAgICAnam95b3VzJyxcclxuICAgICdqb3lyaWRlJyxcclxuICAgICdqb3lzdGljaycsXHJcbiAgICAnanViaWxhbmNlJyxcclxuICAgICdqdWJpbGFudCcsXHJcbiAgICAnanVkZ2UnLFxyXG4gICAgJ2p1ZGdpbmdseScsXHJcbiAgICAnanVkaWNpYWwnLFxyXG4gICAgJ2p1ZGljaWFyeScsXHJcbiAgICAnanVkbycsXHJcbiAgICAnanVnZ2xlJyxcclxuICAgICdqdWdnbGluZycsXHJcbiAgICAnanVndWxhcicsXHJcbiAgICAnanVpY2UnLFxyXG4gICAgJ2p1aWNpbmVzcycsXHJcbiAgICAnanVpY3knLFxyXG4gICAgJ2p1aml0c3UnLFxyXG4gICAgJ2p1a2Vib3gnLFxyXG4gICAgJ2p1bHknLFxyXG4gICAgJ2p1bWJsZScsXHJcbiAgICAnanVtYm8nLFxyXG4gICAgJ2p1bXAnLFxyXG4gICAgJ2p1bmN0aW9uJyxcclxuICAgICdqdW5jdHVyZScsXHJcbiAgICAnanVuZScsXHJcbiAgICAnanVuaW9yJyxcclxuICAgICdqdW5pcGVyJyxcclxuICAgICdqdW5raWUnLFxyXG4gICAgJ2p1bmttYW4nLFxyXG4gICAgJ2p1bmt5YXJkJyxcclxuICAgICdqdXJpc3QnLFxyXG4gICAgJ2p1cm9yJyxcclxuICAgICdqdXJ5JyxcclxuICAgICdqdXN0aWNlJyxcclxuICAgICdqdXN0aWZpZXInLFxyXG4gICAgJ2p1c3RpZnknLFxyXG4gICAgJ2p1c3RseScsXHJcbiAgICAnanVzdG5lc3MnLFxyXG4gICAgJ2p1dmVuaWxlJyxcclxuICAgICdrYWJvYicsXHJcbiAgICAna2FuZ2Fyb28nLFxyXG4gICAgJ2thcmFva2UnLFxyXG4gICAgJ2thcmF0ZScsXHJcbiAgICAna2FybWEnLFxyXG4gICAgJ2tlYmFiJyxcclxuICAgICdrZWVubHknLFxyXG4gICAgJ2tlZW5uZXNzJyxcclxuICAgICdrZWVwJyxcclxuICAgICdrZWcnLFxyXG4gICAgJ2tlbHAnLFxyXG4gICAgJ2tlbm5lbCcsXHJcbiAgICAna2VwdCcsXHJcbiAgICAna2VyY2hpZWYnLFxyXG4gICAgJ2tlcm9zZW5lJyxcclxuICAgICdrZXR0bGUnLFxyXG4gICAgJ2tpY2snLFxyXG4gICAgJ2tpbG4nLFxyXG4gICAgJ2tpbG9ieXRlJyxcclxuICAgICdraWxvZ3JhbScsXHJcbiAgICAna2lsb21ldGVyJyxcclxuICAgICdraWxvd2F0dCcsXHJcbiAgICAna2lsdCcsXHJcbiAgICAna2ltb25vJyxcclxuICAgICdraW5kbGUnLFxyXG4gICAgJ2tpbmRsaW5nJyxcclxuICAgICdraW5kbHknLFxyXG4gICAgJ2tpbmRuZXNzJyxcclxuICAgICdraW5kcmVkJyxcclxuICAgICdraW5ldGljJyxcclxuICAgICdraW5mb2xrJyxcclxuICAgICdraW5nJyxcclxuICAgICdraW5zaGlwJyxcclxuICAgICdraW5zbWFuJyxcclxuICAgICdraW5zd29tYW4nLFxyXG4gICAgJ2tpc3NhYmxlJyxcclxuICAgICdraXNzZXInLFxyXG4gICAgJ2tpc3NpbmcnLFxyXG4gICAgJ2tpdGNoZW4nLFxyXG4gICAgJ2tpdGUnLFxyXG4gICAgJ2tpdHRlbicsXHJcbiAgICAna2l0dHknLFxyXG4gICAgJ2tpd2knLFxyXG4gICAgJ2tsZWVuZXgnLFxyXG4gICAgJ2tuYXBzYWNrJyxcclxuICAgICdrbmVlJyxcclxuICAgICdrbmVsdCcsXHJcbiAgICAna25pY2tlcnMnLFxyXG4gICAgJ2tub2xsJyxcclxuICAgICdrb2FsYScsXHJcbiAgICAna29va3knLFxyXG4gICAgJ2tvc2hlcicsXHJcbiAgICAna3J5cHRvbicsXHJcbiAgICAna3Vkb3MnLFxyXG4gICAgJ2t1bmcnLFxyXG4gICAgJ2xhYm9yZWQnLFxyXG4gICAgJ2xhYm9yZXInLFxyXG4gICAgJ2xhYm9yaW5nJyxcclxuICAgICdsYWJvcmlvdXMnLFxyXG4gICAgJ2xhYnJhZG9yJyxcclxuICAgICdsYWRkZXInLFxyXG4gICAgJ2xhZGllcycsXHJcbiAgICAnbGFkbGUnLFxyXG4gICAgJ2xhZHlidWcnLFxyXG4gICAgJ2xhZHlsaWtlJyxcclxuICAgICdsYWdnZWQnLFxyXG4gICAgJ2xhZ2dpbmcnLFxyXG4gICAgJ2xhZ29vbicsXHJcbiAgICAnbGFpcicsXHJcbiAgICAnbGFrZScsXHJcbiAgICAnbGFuY2UnLFxyXG4gICAgJ2xhbmRlZCcsXHJcbiAgICAnbGFuZGZhbGwnLFxyXG4gICAgJ2xhbmRmaWxsJyxcclxuICAgICdsYW5kaW5nJyxcclxuICAgICdsYW5kbGFkeScsXHJcbiAgICAnbGFuZGxlc3MnLFxyXG4gICAgJ2xhbmRsaW5lJyxcclxuICAgICdsYW5kbG9yZCcsXHJcbiAgICAnbGFuZG1hcmsnLFxyXG4gICAgJ2xhbmRtYXNzJyxcclxuICAgICdsYW5kbWluZScsXHJcbiAgICAnbGFuZG93bmVyJyxcclxuICAgICdsYW5kc2NhcGUnLFxyXG4gICAgJ2xhbmRzaWRlJyxcclxuICAgICdsYW5kc2xpZGUnLFxyXG4gICAgJ2xhbmd1YWdlJyxcclxuICAgICdsYW5raW5lc3MnLFxyXG4gICAgJ2xhbmt5JyxcclxuICAgICdsYW50ZXJuJyxcclxuICAgICdsYXBkb2cnLFxyXG4gICAgJ2xhcGVsJyxcclxuICAgICdsYXBwZWQnLFxyXG4gICAgJ2xhcHBpbmcnLFxyXG4gICAgJ2xhcHRvcCcsXHJcbiAgICAnbGFyZCcsXHJcbiAgICAnbGFyZ2UnLFxyXG4gICAgJ2xhcmsnLFxyXG4gICAgJ2xhc2gnLFxyXG4gICAgJ2xhc3NvJyxcclxuICAgICdsYXN0JyxcclxuICAgICdsYXRjaCcsXHJcbiAgICAnbGF0ZScsXHJcbiAgICAnbGF0aGVyJyxcclxuICAgICdsYXRpdHVkZScsXHJcbiAgICAnbGF0cmluZScsXHJcbiAgICAnbGF0dGVyJyxcclxuICAgICdsYXR0aWNlZCcsXHJcbiAgICAnbGF1bmNoJyxcclxuICAgICdsYXVuZGVyJyxcclxuICAgICdsYXVuZHJ5JyxcclxuICAgICdsYXVyZWwnLFxyXG4gICAgJ2xhdmVuZGVyJyxcclxuICAgICdsYXZpc2gnLFxyXG4gICAgJ2xheGF0aXZlJyxcclxuICAgICdsYXppbHknLFxyXG4gICAgJ2xhemluZXNzJyxcclxuICAgICdsYXp5JyxcclxuICAgICdsZWN0dXJlcicsXHJcbiAgICAnbGVmdCcsXHJcbiAgICAnbGVnYWN5JyxcclxuICAgICdsZWdhbCcsXHJcbiAgICAnbGVnZW5kJyxcclxuICAgICdsZWdnZWQnLFxyXG4gICAgJ2xlZ2dpbmdzJyxcclxuICAgICdsZWdpYmxlJyxcclxuICAgICdsZWdpYmx5JyxcclxuICAgICdsZWdpc2xhdGUnLFxyXG4gICAgJ2xlZ28nLFxyXG4gICAgJ2xlZ3Jvb20nLFxyXG4gICAgJ2xlZ3VtZScsXHJcbiAgICAnbGVnd2FybWVyJyxcclxuICAgICdsZWd3b3JrJyxcclxuICAgICdsZW1vbicsXHJcbiAgICAnbGVuZCcsXHJcbiAgICAnbGVuZ3RoJyxcclxuICAgICdsZW5zJyxcclxuICAgICdsZW50JyxcclxuICAgICdsZW90YXJkJyxcclxuICAgICdsZXNzZXInLFxyXG4gICAgJ2xldGRvd24nLFxyXG4gICAgJ2xldGhhcmdpYycsXHJcbiAgICAnbGV0aGFyZ3knLFxyXG4gICAgJ2xldHRlcicsXHJcbiAgICAnbGV0dHVjZScsXHJcbiAgICAnbGV2ZWwnLFxyXG4gICAgJ2xldmVyYWdlJyxcclxuICAgICdsZXZlcnMnLFxyXG4gICAgJ2xldml0YXRlJyxcclxuICAgICdsZXZpdGF0b3InLFxyXG4gICAgJ2xpYWJpbGl0eScsXHJcbiAgICAnbGlhYmxlJyxcclxuICAgICdsaWJlcnR5JyxcclxuICAgICdsaWJyYXJpYW4nLFxyXG4gICAgJ2xpYnJhcnknLFxyXG4gICAgJ2xpY2tpbmcnLFxyXG4gICAgJ2xpY29yaWNlJyxcclxuICAgICdsaWQnLFxyXG4gICAgJ2xpZmUnLFxyXG4gICAgJ2xpZnRlcicsXHJcbiAgICAnbGlmdGluZycsXHJcbiAgICAnbGlmdG9mZicsXHJcbiAgICAnbGlnYW1lbnQnLFxyXG4gICAgJ2xpa2VseScsXHJcbiAgICAnbGlrZW5lc3MnLFxyXG4gICAgJ2xpa2V3aXNlJyxcclxuICAgICdsaWtpbmcnLFxyXG4gICAgJ2xpbGFjJyxcclxuICAgICdsaWxseScsXHJcbiAgICAnbGlseScsXHJcbiAgICAnbGltYicsXHJcbiAgICAnbGltZWFkZScsXHJcbiAgICAnbGltZWxpZ2h0JyxcclxuICAgICdsaW1lcycsXHJcbiAgICAnbGltaXQnLFxyXG4gICAgJ2xpbXBpbmcnLFxyXG4gICAgJ2xpbXBuZXNzJyxcclxuICAgICdsaW5lJyxcclxuICAgICdsaW5nbycsXHJcbiAgICAnbGluZ3VpbmknLFxyXG4gICAgJ2xpbmd1aXN0JyxcclxuICAgICdsaW5pbmcnLFxyXG4gICAgJ2xpbmtlZCcsXHJcbiAgICAnbGlub2xldW0nLFxyXG4gICAgJ2xpbnNlZWQnLFxyXG4gICAgJ2xpbnQnLFxyXG4gICAgJ2xpb24nLFxyXG4gICAgJ2xpcCcsXHJcbiAgICAnbGlxdWVmeScsXHJcbiAgICAnbGlxdWV1cicsXHJcbiAgICAnbGlxdWlkJyxcclxuICAgICdsaXNwJyxcclxuICAgICdsaXN0JyxcclxuICAgICdsaXRpZ2F0ZScsXHJcbiAgICAnbGl0aWdhdG9yJyxcclxuICAgICdsaXRtdXMnLFxyXG4gICAgJ2xpdHRlcicsXHJcbiAgICAnbGl0dGxlJyxcclxuICAgICdsaXZhYmxlJyxcclxuICAgICdsaXZlZCcsXHJcbiAgICAnbGl2ZWx5JyxcclxuICAgICdsaXZlcicsXHJcbiAgICAnbGl2ZXN0b2NrJyxcclxuICAgICdsaXZpZGx5JyxcclxuICAgICdsaXZpbmcnLFxyXG4gICAgJ2xpemFyZCcsXHJcbiAgICAnbHVicmljYW50JyxcclxuICAgICdsdWJyaWNhdGUnLFxyXG4gICAgJ2x1Y2lkJyxcclxuICAgICdsdWNraWx5JyxcclxuICAgICdsdWNraW5lc3MnLFxyXG4gICAgJ2x1Y2tsZXNzJyxcclxuICAgICdsdWNyYXRpdmUnLFxyXG4gICAgJ2x1ZGljcm91cycsXHJcbiAgICAnbHVnZ2VkJyxcclxuICAgICdsdWtld2FybScsXHJcbiAgICAnbHVsbGFieScsXHJcbiAgICAnbHVtYmVyJyxcclxuICAgICdsdW1pbmFuY2UnLFxyXG4gICAgJ2x1bWlub3VzJyxcclxuICAgICdsdW1waW5lc3MnLFxyXG4gICAgJ2x1bXBpbmcnLFxyXG4gICAgJ2x1bXBpc2gnLFxyXG4gICAgJ2x1bmFjeScsXHJcbiAgICAnbHVuYXInLFxyXG4gICAgJ2x1bmNoYm94JyxcclxuICAgICdsdW5jaGVvbicsXHJcbiAgICAnbHVuY2hyb29tJyxcclxuICAgICdsdW5jaHRpbWUnLFxyXG4gICAgJ2x1bmcnLFxyXG4gICAgJ2x1cmNoJyxcclxuICAgICdsdXJlJyxcclxuICAgICdsdXJpZG5lc3MnLFxyXG4gICAgJ2x1cmsnLFxyXG4gICAgJ2x1c2hseScsXHJcbiAgICAnbHVzaG5lc3MnLFxyXG4gICAgJ2x1c3RlcicsXHJcbiAgICAnbHVzdGZ1bGx5JyxcclxuICAgICdsdXN0aWx5JyxcclxuICAgICdsdXN0aW5lc3MnLFxyXG4gICAgJ2x1c3Ryb3VzJyxcclxuICAgICdsdXN0eScsXHJcbiAgICAnbHV4dXJpb3VzJyxcclxuICAgICdsdXh1cnknLFxyXG4gICAgJ2x5aW5nJyxcclxuICAgICdseXJpY2FsbHknLFxyXG4gICAgJ2x5cmljaXNtJyxcclxuICAgICdseXJpY2lzdCcsXHJcbiAgICAnbHlyaWNzJyxcclxuICAgICdtYWNhcmVuYScsXHJcbiAgICAnbWFjYXJvbmknLFxyXG4gICAgJ21hY2F3JyxcclxuICAgICdtYWNlJyxcclxuICAgICdtYWNoaW5lJyxcclxuICAgICdtYWNoaW5pc3QnLFxyXG4gICAgJ21hZ2F6aW5lJyxcclxuICAgICdtYWdlbnRhJyxcclxuICAgICdtYWdnb3QnLFxyXG4gICAgJ21hZ2ljYWwnLFxyXG4gICAgJ21hZ2ljaWFuJyxcclxuICAgICdtYWdtYScsXHJcbiAgICAnbWFnbmVzaXVtJyxcclxuICAgICdtYWduZXRpYycsXHJcbiAgICAnbWFnbmV0aXNtJyxcclxuICAgICdtYWduZXRpemUnLFxyXG4gICAgJ21hZ25pZmllcicsXHJcbiAgICAnbWFnbmlmeScsXHJcbiAgICAnbWFnbml0dWRlJyxcclxuICAgICdtYWdub2xpYScsXHJcbiAgICAnbWFob2dhbnknLFxyXG4gICAgJ21haW1lZCcsXHJcbiAgICAnbWFqZXN0aWMnLFxyXG4gICAgJ21hamVzdHknLFxyXG4gICAgJ21ham9yZXR0ZScsXHJcbiAgICAnbWFqb3JpdHknLFxyXG4gICAgJ21ha2VvdmVyJyxcclxuICAgICdtYWtlcicsXHJcbiAgICAnbWFrZXNoaWZ0JyxcclxuICAgICdtYWtpbmcnLFxyXG4gICAgJ21hbGZvcm1lZCcsXHJcbiAgICAnbWFsdCcsXHJcbiAgICAnbWFtYScsXHJcbiAgICAnbWFtbWFsJyxcclxuICAgICdtYW1tYXJ5JyxcclxuICAgICdtYW1tb2dyYW0nLFxyXG4gICAgJ21hbmFnZXInLFxyXG4gICAgJ21hbmFnaW5nJyxcclxuICAgICdtYW5hdGVlJyxcclxuICAgICdtYW5kYXJpbicsXHJcbiAgICAnbWFuZGF0ZScsXHJcbiAgICAnbWFuZGF0b3J5JyxcclxuICAgICdtYW5kb2xpbicsXHJcbiAgICAnbWFuZ2VyJyxcclxuICAgICdtYW5nbGUnLFxyXG4gICAgJ21hbmdvJyxcclxuICAgICdtYW5neScsXHJcbiAgICAnbWFuaGFuZGxlJyxcclxuICAgICdtYW5ob2xlJyxcclxuICAgICdtYW5ob29kJyxcclxuICAgICdtYW5odW50JyxcclxuICAgICdtYW5pY290dGknLFxyXG4gICAgJ21hbmljdXJlJyxcclxuICAgICdtYW5pZmVzdG8nLFxyXG4gICAgJ21hbmlsYScsXHJcbiAgICAnbWFua2luZCcsXHJcbiAgICAnbWFubGlrZScsXHJcbiAgICAnbWFubGluZXNzJyxcclxuICAgICdtYW5seScsXHJcbiAgICAnbWFubWFkZScsXHJcbiAgICAnbWFubmVkJyxcclxuICAgICdtYW5uaXNoJyxcclxuICAgICdtYW5vcicsXHJcbiAgICAnbWFucG93ZXInLFxyXG4gICAgJ21hbnRpcycsXHJcbiAgICAnbWFudHJhJyxcclxuICAgICdtYW51YWwnLFxyXG4gICAgJ21hbnknLFxyXG4gICAgJ21hcCcsXHJcbiAgICAnbWFyYXRob24nLFxyXG4gICAgJ21hcmF1ZGluZycsXHJcbiAgICAnbWFyYmxlZCcsXHJcbiAgICAnbWFyYmxlcycsXHJcbiAgICAnbWFyYmxpbmcnLFxyXG4gICAgJ21hcmNoJyxcclxuICAgICdtYXJkaScsXHJcbiAgICAnbWFyZ2FyaW5lJyxcclxuICAgICdtYXJnYXJpdGEnLFxyXG4gICAgJ21hcmdpbicsXHJcbiAgICAnbWFyaWdvbGQnLFxyXG4gICAgJ21hcmluYScsXHJcbiAgICAnbWFyaW5lJyxcclxuICAgICdtYXJpdGFsJyxcclxuICAgICdtYXJpdGltZScsXHJcbiAgICAnbWFybGluJyxcclxuICAgICdtYXJtYWxhZGUnLFxyXG4gICAgJ21hcm9vbicsXHJcbiAgICAnbWFycmllZCcsXHJcbiAgICAnbWFycm93JyxcclxuICAgICdtYXJyeScsXHJcbiAgICAnbWFyc2hsYW5kJyxcclxuICAgICdtYXJzaHknLFxyXG4gICAgJ21hcnN1cGlhbCcsXHJcbiAgICAnbWFydmVsb3VzJyxcclxuICAgICdtYXJ4aXNtJyxcclxuICAgICdtYXNjb3QnLFxyXG4gICAgJ21hc2N1bGluZScsXHJcbiAgICAnbWFzaGVkJyxcclxuICAgICdtYXNoaW5nJyxcclxuICAgICdtYXNzYWdlcicsXHJcbiAgICAnbWFzc2VzJyxcclxuICAgICdtYXNzaXZlJyxcclxuICAgICdtYXN0aWZmJyxcclxuICAgICdtYXRhZG9yJyxcclxuICAgICdtYXRjaGJvb2snLFxyXG4gICAgJ21hdGNoYm94JyxcclxuICAgICdtYXRjaGVyJyxcclxuICAgICdtYXRjaGluZycsXHJcbiAgICAnbWF0Y2hsZXNzJyxcclxuICAgICdtYXRlcmlhbCcsXHJcbiAgICAnbWF0ZXJuYWwnLFxyXG4gICAgJ21hdGVybml0eScsXHJcbiAgICAnbWF0aCcsXHJcbiAgICAnbWF0aW5nJyxcclxuICAgICdtYXRyaWFyY2gnLFxyXG4gICAgJ21hdHJpbW9ueScsXHJcbiAgICAnbWF0cml4JyxcclxuICAgICdtYXRyb24nLFxyXG4gICAgJ21hdHRlZCcsXHJcbiAgICAnbWF0dGVyJyxcclxuICAgICdtYXR1cmVseScsXHJcbiAgICAnbWF0dXJpbmcnLFxyXG4gICAgJ21hdHVyaXR5JyxcclxuICAgICdtYXV2ZScsXHJcbiAgICAnbWF2ZXJpY2snLFxyXG4gICAgJ21heGltaXplJyxcclxuICAgICdtYXhpbXVtJyxcclxuICAgICdtYXliZScsXHJcbiAgICAnbWF5ZGF5JyxcclxuICAgICdtYXlmbG93ZXInLFxyXG4gICAgJ21vYW5lcicsXHJcbiAgICAnbW9hbmluZycsXHJcbiAgICAnbW9iaWxlJyxcclxuICAgICdtb2JpbGl0eScsXHJcbiAgICAnbW9iaWxpemUnLFxyXG4gICAgJ21vYnN0ZXInLFxyXG4gICAgJ21vY2hhJyxcclxuICAgICdtb2NrZXInLFxyXG4gICAgJ21vY2t1cCcsXHJcbiAgICAnbW9kaWZpZWQnLFxyXG4gICAgJ21vZGlmeScsXHJcbiAgICAnbW9kdWxhcicsXHJcbiAgICAnbW9kdWxhdG9yJyxcclxuICAgICdtb2R1bGUnLFxyXG4gICAgJ21vaXN0ZW4nLFxyXG4gICAgJ21vaXN0bmVzcycsXHJcbiAgICAnbW9pc3R1cmUnLFxyXG4gICAgJ21vbGFyJyxcclxuICAgICdtb2xhc3NlcycsXHJcbiAgICAnbW9sZCcsXHJcbiAgICAnbW9sZWN1bGFyJyxcclxuICAgICdtb2xlY3VsZScsXHJcbiAgICAnbW9sZWhpbGwnLFxyXG4gICAgJ21vbGx1c2snLFxyXG4gICAgJ21vbScsXHJcbiAgICAnbW9uYXN0ZXJ5JyxcclxuICAgICdtb25kYXknLFxyXG4gICAgJ21vbmV0YXJ5JyxcclxuICAgICdtb25ldGl6ZScsXHJcbiAgICAnbW9uZXliYWdzJyxcclxuICAgICdtb25leWxlc3MnLFxyXG4gICAgJ21vbmV5d2lzZScsXHJcbiAgICAnbW9uZ29vc2UnLFxyXG4gICAgJ21vbmdyZWwnLFxyXG4gICAgJ21vbml0b3InLFxyXG4gICAgJ21vbmtob29kJyxcclxuICAgICdtb25vZ2FteScsXHJcbiAgICAnbW9ub2dyYW0nLFxyXG4gICAgJ21vbm9sb2d1ZScsXHJcbiAgICAnbW9ub3BvbHknLFxyXG4gICAgJ21vbm9yYWlsJyxcclxuICAgICdtb25vdG9uZScsXHJcbiAgICAnbW9ub3R5cGUnLFxyXG4gICAgJ21vbm94aWRlJyxcclxuICAgICdtb25zaWV1cicsXHJcbiAgICAnbW9uc29vbicsXHJcbiAgICAnbW9uc3Ryb3VzJyxcclxuICAgICdtb250aGx5JyxcclxuICAgICdtb251bWVudCcsXHJcbiAgICAnbW9vY2hlcicsXHJcbiAgICAnbW9vZGluZXNzJyxcclxuICAgICdtb29keScsXHJcbiAgICAnbW9vaW5nJyxcclxuICAgICdtb29uYmVhbScsXHJcbiAgICAnbW9vbmVkJyxcclxuICAgICdtb29ubGlnaHQnLFxyXG4gICAgJ21vb25saWtlJyxcclxuICAgICdtb29ubGl0JyxcclxuICAgICdtb29ucmlzZScsXHJcbiAgICAnbW9vbnNjYXBlJyxcclxuICAgICdtb29uc2hpbmUnLFxyXG4gICAgJ21vb25zdG9uZScsXHJcbiAgICAnbW9vbndhbGsnLFxyXG4gICAgJ21vcCcsXHJcbiAgICAnbW9yYWxlJyxcclxuICAgICdtb3JhbGl0eScsXHJcbiAgICAnbW9yYWxseScsXHJcbiAgICAnbW9yYmlkaXR5JyxcclxuICAgICdtb3JiaWRseScsXHJcbiAgICAnbW9ycGhpbmUnLFxyXG4gICAgJ21vcnBoaW5nJyxcclxuICAgICdtb3JzZScsXHJcbiAgICAnbW9ydGFsaXR5JyxcclxuICAgICdtb3J0YWxseScsXHJcbiAgICAnbW9ydGljaWFuJyxcclxuICAgICdtb3J0aWZpZWQnLFxyXG4gICAgJ21vcnRpZnknLFxyXG4gICAgJ21vcnR1YXJ5JyxcclxuICAgICdtb3NhaWMnLFxyXG4gICAgJ21vc3N5JyxcclxuICAgICdtb3N0JyxcclxuICAgICdtb3RoYmFsbCcsXHJcbiAgICAnbW90aHByb29mJyxcclxuICAgICdtb3Rpb24nLFxyXG4gICAgJ21vdGl2YXRlJyxcclxuICAgICdtb3RpdmF0b3InLFxyXG4gICAgJ21vdGl2ZScsXHJcbiAgICAnbW90b2Nyb3NzJyxcclxuICAgICdtb3RvcicsXHJcbiAgICAnbW90dG8nLFxyXG4gICAgJ21vdW50YWJsZScsXHJcbiAgICAnbW91bnRhaW4nLFxyXG4gICAgJ21vdW50ZWQnLFxyXG4gICAgJ21vdW50aW5nJyxcclxuICAgICdtb3VybmVyJyxcclxuICAgICdtb3VybmZ1bCcsXHJcbiAgICAnbW91c2UnLFxyXG4gICAgJ21vdXNpbmVzcycsXHJcbiAgICAnbW91c3RhY2hlJyxcclxuICAgICdtb3VzeScsXHJcbiAgICAnbW91dGgnLFxyXG4gICAgJ21vdmFibGUnLFxyXG4gICAgJ21vdmUnLFxyXG4gICAgJ21vdmllJyxcclxuICAgICdtb3ZpbmcnLFxyXG4gICAgJ21vd2VyJyxcclxuICAgICdtb3dpbmcnLFxyXG4gICAgJ211Y2gnLFxyXG4gICAgJ211Y2snLFxyXG4gICAgJ211ZCcsXHJcbiAgICAnbXVnJyxcclxuICAgICdtdWxiZXJyeScsXHJcbiAgICAnbXVsY2gnLFxyXG4gICAgJ211bGUnLFxyXG4gICAgJ211bGxlZCcsXHJcbiAgICAnbXVsbGV0cycsXHJcbiAgICAnbXVsdGlwbGUnLFxyXG4gICAgJ211bHRpcGx5JyxcclxuICAgICdtdWx0aXRhc2snLFxyXG4gICAgJ211bHRpdHVkZScsXHJcbiAgICAnbXVtYmxlJyxcclxuICAgICdtdW1ibGluZycsXHJcbiAgICAnbXVtYm8nLFxyXG4gICAgJ211bW1pZmllZCcsXHJcbiAgICAnbXVtbWlmeScsXHJcbiAgICAnbXVtbXknLFxyXG4gICAgJ211bXBzJyxcclxuICAgICdtdW5jaGtpbicsXHJcbiAgICAnbXVuZGFuZScsXHJcbiAgICAnbXVuaWNpcGFsJyxcclxuICAgICdtdXBwZXQnLFxyXG4gICAgJ211cmFsJyxcclxuICAgICdtdXJraW5lc3MnLFxyXG4gICAgJ211cmt5JyxcclxuICAgICdtdXJtdXJpbmcnLFxyXG4gICAgJ211c2N1bGFyJyxcclxuICAgICdtdXNldW0nLFxyXG4gICAgJ211c2hpbHknLFxyXG4gICAgJ211c2hpbmVzcycsXHJcbiAgICAnbXVzaHJvb20nLFxyXG4gICAgJ211c2h5JyxcclxuICAgICdtdXNpYycsXHJcbiAgICAnbXVza2V0JyxcclxuICAgICdtdXNraW5lc3MnLFxyXG4gICAgJ211c2t5JyxcclxuICAgICdtdXN0YW5nJyxcclxuICAgICdtdXN0YXJkJyxcclxuICAgICdtdXN0ZXInLFxyXG4gICAgJ211c3RpbmVzcycsXHJcbiAgICAnbXVzdHknLFxyXG4gICAgJ211dGFibGUnLFxyXG4gICAgJ211dGF0ZScsXHJcbiAgICAnbXV0YXRpb24nLFxyXG4gICAgJ211dGUnLFxyXG4gICAgJ211dGlsYXRlZCcsXHJcbiAgICAnbXV0aWxhdG9yJyxcclxuICAgICdtdXRpbnknLFxyXG4gICAgJ211dHQnLFxyXG4gICAgJ211dHVhbCcsXHJcbiAgICAnbXV6emxlJyxcclxuICAgICdteXNlbGYnLFxyXG4gICAgJ215c3BhY2UnLFxyXG4gICAgJ215c3RpZmllZCcsXHJcbiAgICAnbXlzdGlmeScsXHJcbiAgICAnbXl0aCcsXHJcbiAgICAnbmFjaG8nLFxyXG4gICAgJ25hZycsXHJcbiAgICAnbmFpbCcsXHJcbiAgICAnbmFtZScsXHJcbiAgICAnbmFtaW5nJyxcclxuICAgICduYW5ueScsXHJcbiAgICAnbmFub21ldGVyJyxcclxuICAgICduYXBlJyxcclxuICAgICduYXBraW4nLFxyXG4gICAgJ25hcHBlZCcsXHJcbiAgICAnbmFwcGluZycsXHJcbiAgICAnbmFwcHknLFxyXG4gICAgJ25hcnJvdycsXHJcbiAgICAnbmFzdGlseScsXHJcbiAgICAnbmFzdGluZXNzJyxcclxuICAgICduYXRpb25hbCcsXHJcbiAgICAnbmF0aXZlJyxcclxuICAgICduYXRpdml0eScsXHJcbiAgICAnbmF0dXJhbCcsXHJcbiAgICAnbmF0dXJlJyxcclxuICAgICduYXR1cmlzdCcsXHJcbiAgICAnbmF1dGljYWwnLFxyXG4gICAgJ25hdmlnYXRlJyxcclxuICAgICduYXZpZ2F0b3InLFxyXG4gICAgJ25hdnknLFxyXG4gICAgJ25lYXJieScsXHJcbiAgICAnbmVhcmVzdCcsXHJcbiAgICAnbmVhcmx5JyxcclxuICAgICduZWFybmVzcycsXHJcbiAgICAnbmVhdGx5JyxcclxuICAgICduZWF0bmVzcycsXHJcbiAgICAnbmVidWxhJyxcclxuICAgICduZWJ1bGl6ZXInLFxyXG4gICAgJ25lY3RhcicsXHJcbiAgICAnbmVnYXRlJyxcclxuICAgICduZWdhdGlvbicsXHJcbiAgICAnbmVnYXRpdmUnLFxyXG4gICAgJ25lZ2xlY3RvcicsXHJcbiAgICAnbmVnbGlnZWUnLFxyXG4gICAgJ25lZ2xpZ2VudCcsXHJcbiAgICAnbmVnb3RpYXRlJyxcclxuICAgICduZW1lc2VzJyxcclxuICAgICduZW1lc2lzJyxcclxuICAgICduZW9uJyxcclxuICAgICduZXBoZXcnLFxyXG4gICAgJ25lcmQnLFxyXG4gICAgJ25lcnZvdXMnLFxyXG4gICAgJ25lcnZ5JyxcclxuICAgICduZXN0JyxcclxuICAgICduZXQnLFxyXG4gICAgJ25ldXJvbG9neScsXHJcbiAgICAnbmV1cm9uJyxcclxuICAgICduZXVyb3NpcycsXHJcbiAgICAnbmV1cm90aWMnLFxyXG4gICAgJ25ldXRlcicsXHJcbiAgICAnbmV1dHJvbicsXHJcbiAgICAnbmV2ZXInLFxyXG4gICAgJ25leHQnLFxyXG4gICAgJ25pYmJsZScsXHJcbiAgICAnbmlja25hbWUnLFxyXG4gICAgJ25pY290aW5lJyxcclxuICAgICduaWVjZScsXHJcbiAgICAnbmlmdHknLFxyXG4gICAgJ25pbWJsZScsXHJcbiAgICAnbmltYmx5JyxcclxuICAgICduaW5ldGVlbicsXHJcbiAgICAnbmluZXRpZXRoJyxcclxuICAgICduaW5qYScsXHJcbiAgICAnbmludGVuZG8nLFxyXG4gICAgJ25pbnRoJyxcclxuICAgICdudWNsZWFyJyxcclxuICAgICdudWNsZWknLFxyXG4gICAgJ251Y2xldXMnLFxyXG4gICAgJ251Z2dldCcsXHJcbiAgICAnbnVsbGlmeScsXHJcbiAgICAnbnVtYmVyJyxcclxuICAgICdudW1iaW5nJyxcclxuICAgICdudW1ibHknLFxyXG4gICAgJ251bWJuZXNzJyxcclxuICAgICdudW1lcmFsJyxcclxuICAgICdudW1lcmF0ZScsXHJcbiAgICAnbnVtZXJhdG9yJyxcclxuICAgICdudW1lcmljJyxcclxuICAgICdudW1lcm91cycsXHJcbiAgICAnbnVwdGlhbHMnLFxyXG4gICAgJ251cnNlcnknLFxyXG4gICAgJ251cnNpbmcnLFxyXG4gICAgJ251cnR1cmUnLFxyXG4gICAgJ251dGNhc2UnLFxyXG4gICAgJ251dGxpa2UnLFxyXG4gICAgJ251dG1lZycsXHJcbiAgICAnbnV0cmllbnQnLFxyXG4gICAgJ251dHNoZWxsJyxcclxuICAgICdudXR0aW5lc3MnLFxyXG4gICAgJ251dHR5JyxcclxuICAgICdudXp6bGUnLFxyXG4gICAgJ255bG9uJyxcclxuICAgICdvYWYnLFxyXG4gICAgJ29haycsXHJcbiAgICAnb2FzaXMnLFxyXG4gICAgJ29hdCcsXHJcbiAgICAnb2JlZGllbmNlJyxcclxuICAgICdvYmVkaWVudCcsXHJcbiAgICAnb2JpdHVhcnknLFxyXG4gICAgJ29iamVjdCcsXHJcbiAgICAnb2JsaWdhdGUnLFxyXG4gICAgJ29ibGlnZWQnLFxyXG4gICAgJ29ibGl2aW9uJyxcclxuICAgICdvYmxpdmlvdXMnLFxyXG4gICAgJ29ibG9uZycsXHJcbiAgICAnb2Jub3hpb3VzJyxcclxuICAgICdvYm9lJyxcclxuICAgICdvYnNjdXJlJyxcclxuICAgICdvYnNjdXJpdHknLFxyXG4gICAgJ29ic2VydmFudCcsXHJcbiAgICAnb2JzZXJ2ZXInLFxyXG4gICAgJ29ic2VydmluZycsXHJcbiAgICAnb2JzZXNzZWQnLFxyXG4gICAgJ29ic2Vzc2lvbicsXHJcbiAgICAnb2JzZXNzaXZlJyxcclxuICAgICdvYnNvbGV0ZScsXHJcbiAgICAnb2JzdGFjbGUnLFxyXG4gICAgJ29ic3RpbmF0ZScsXHJcbiAgICAnb2JzdHJ1Y3QnLFxyXG4gICAgJ29idGFpbicsXHJcbiAgICAnb2J0cnVzaXZlJyxcclxuICAgICdvYnR1c2UnLFxyXG4gICAgJ29idmlvdXMnLFxyXG4gICAgJ29jY3VsdGlzdCcsXHJcbiAgICAnb2NjdXBhbmN5JyxcclxuICAgICdvY2N1cGFudCcsXHJcbiAgICAnb2NjdXBpZXInLFxyXG4gICAgJ29jY3VweScsXHJcbiAgICAnb2NlYW4nLFxyXG4gICAgJ29jZWxvdCcsXHJcbiAgICAnb2N0YWdvbicsXHJcbiAgICAnb2N0YW5lJyxcclxuICAgICdvY3RvYmVyJyxcclxuICAgICdvY3RvcHVzJyxcclxuICAgICdvZ2xlJyxcclxuICAgICdvaWwnLFxyXG4gICAgJ29pbmsnLFxyXG4gICAgJ29pbnRtZW50JyxcclxuICAgICdva2F5JyxcclxuICAgICdvbGQnLFxyXG4gICAgJ29saXZlJyxcclxuICAgICdvbHltcGljcycsXHJcbiAgICAnb21lZ2EnLFxyXG4gICAgJ29tZW4nLFxyXG4gICAgJ29taW5vdXMnLFxyXG4gICAgJ29taXNzaW9uJyxcclxuICAgICdvbWl0JyxcclxuICAgICdvbW5pdm9yZScsXHJcbiAgICAnb25ib2FyZCcsXHJcbiAgICAnb25jb21pbmcnLFxyXG4gICAgJ29uZ29pbmcnLFxyXG4gICAgJ29uaW9uJyxcclxuICAgICdvbmxpbmUnLFxyXG4gICAgJ29ubG9va2VyJyxcclxuICAgICdvbmx5JyxcclxuICAgICdvbnNjcmVlbicsXHJcbiAgICAnb25zZXQnLFxyXG4gICAgJ29uc2hvcmUnLFxyXG4gICAgJ29uc2xhdWdodCcsXHJcbiAgICAnb25zdGFnZScsXHJcbiAgICAnb250bycsXHJcbiAgICAnb253YXJkJyxcclxuICAgICdvbnl4JyxcclxuICAgICdvb3BzJyxcclxuICAgICdvb3plJyxcclxuICAgICdvb3p5JyxcclxuICAgICdvcGFjaXR5JyxcclxuICAgICdvcGFsJyxcclxuICAgICdvcGVuJyxcclxuICAgICdvcGVyYWJsZScsXHJcbiAgICAnb3BlcmF0ZScsXHJcbiAgICAnb3BlcmF0aW5nJyxcclxuICAgICdvcGVyYXRpb24nLFxyXG4gICAgJ29wZXJhdGl2ZScsXHJcbiAgICAnb3BlcmF0b3InLFxyXG4gICAgJ29waXVtJyxcclxuICAgICdvcG9zc3VtJyxcclxuICAgICdvcHBvbmVudCcsXHJcbiAgICAnb3Bwb3NlJyxcclxuICAgICdvcHBvc2luZycsXHJcbiAgICAnb3Bwb3NpdGUnLFxyXG4gICAgJ29wcHJlc3NlZCcsXHJcbiAgICAnb3BwcmVzc29yJyxcclxuICAgICdvcHQnLFxyXG4gICAgJ29wdWxlbnRseScsXHJcbiAgICAnb3Ntb3NpcycsXHJcbiAgICAnb3RoZXInLFxyXG4gICAgJ290dGVyJyxcclxuICAgICdvdWNoJyxcclxuICAgICdvdWdodCcsXHJcbiAgICAnb3VuY2UnLFxyXG4gICAgJ291dGFnZScsXHJcbiAgICAnb3V0YmFjaycsXHJcbiAgICAnb3V0YmlkJyxcclxuICAgICdvdXRib2FyZCcsXHJcbiAgICAnb3V0Ym91bmQnLFxyXG4gICAgJ291dGJyZWFrJyxcclxuICAgICdvdXRidXJzdCcsXHJcbiAgICAnb3V0Y2FzdCcsXHJcbiAgICAnb3V0Y2xhc3MnLFxyXG4gICAgJ291dGNvbWUnLFxyXG4gICAgJ291dGRhdGVkJyxcclxuICAgICdvdXRkb29ycycsXHJcbiAgICAnb3V0ZXInLFxyXG4gICAgJ291dGZpZWxkJyxcclxuICAgICdvdXRmaXQnLFxyXG4gICAgJ291dGZsYW5rJyxcclxuICAgICdvdXRnb2luZycsXHJcbiAgICAnb3V0Z3JvdycsXHJcbiAgICAnb3V0aG91c2UnLFxyXG4gICAgJ291dGluZycsXHJcbiAgICAnb3V0bGFzdCcsXHJcbiAgICAnb3V0bGV0JyxcclxuICAgICdvdXRsaW5lJyxcclxuICAgICdvdXRsb29rJyxcclxuICAgICdvdXRseWluZycsXHJcbiAgICAnb3V0bWF0Y2gnLFxyXG4gICAgJ291dG1vc3QnLFxyXG4gICAgJ291dG51bWJlcicsXHJcbiAgICAnb3V0cGxheWVkJyxcclxuICAgICdvdXRwb3N0JyxcclxuICAgICdvdXRwb3VyJyxcclxuICAgICdvdXRwdXQnLFxyXG4gICAgJ291dHJhZ2UnLFxyXG4gICAgJ291dHJhbmsnLFxyXG4gICAgJ291dHJlYWNoJyxcclxuICAgICdvdXRyaWdodCcsXHJcbiAgICAnb3V0c2NvcmUnLFxyXG4gICAgJ291dHNlbGwnLFxyXG4gICAgJ291dHNoaW5lJyxcclxuICAgICdvdXRzaG9vdCcsXHJcbiAgICAnb3V0c2lkZXInLFxyXG4gICAgJ291dHNraXJ0cycsXHJcbiAgICAnb3V0c21hcnQnLFxyXG4gICAgJ291dHNvdXJjZScsXHJcbiAgICAnb3V0c3Bva2VuJyxcclxuICAgICdvdXR0YWtlcycsXHJcbiAgICAnb3V0dGhpbmsnLFxyXG4gICAgJ291dHdhcmQnLFxyXG4gICAgJ291dHdlaWdoJyxcclxuICAgICdvdXR3aXQnLFxyXG4gICAgJ292YWwnLFxyXG4gICAgJ292YXJ5JyxcclxuICAgICdvdmVuJyxcclxuICAgICdvdmVyYWN0JyxcclxuICAgICdvdmVyYWxsJyxcclxuICAgICdvdmVyYXJjaCcsXHJcbiAgICAnb3ZlcmJpZCcsXHJcbiAgICAnb3ZlcmJpbGwnLFxyXG4gICAgJ292ZXJiaXRlJyxcclxuICAgICdvdmVyYmxvd24nLFxyXG4gICAgJ292ZXJib2FyZCcsXHJcbiAgICAnb3ZlcmJvb2snLFxyXG4gICAgJ292ZXJidWlsdCcsXHJcbiAgICAnb3ZlcmNhc3QnLFxyXG4gICAgJ292ZXJjb2F0JyxcclxuICAgICdvdmVyY29tZScsXHJcbiAgICAnb3ZlcmNvb2snLFxyXG4gICAgJ292ZXJjcm93ZCcsXHJcbiAgICAnb3ZlcmRyYWZ0JyxcclxuICAgICdvdmVyZHJhd24nLFxyXG4gICAgJ292ZXJkcmVzcycsXHJcbiAgICAnb3ZlcmRyaXZlJyxcclxuICAgICdvdmVyZHVlJyxcclxuICAgICdvdmVyZWFnZXInLFxyXG4gICAgJ292ZXJlYXRlcicsXHJcbiAgICAnb3ZlcmV4ZXJ0JyxcclxuICAgICdvdmVyZmVkJyxcclxuICAgICdvdmVyZmVlZCcsXHJcbiAgICAnb3ZlcmZpbGwnLFxyXG4gICAgJ292ZXJmbG93JyxcclxuICAgICdvdmVyZnVsbCcsXHJcbiAgICAnb3Zlcmdyb3duJyxcclxuICAgICdvdmVyaGFuZCcsXHJcbiAgICAnb3ZlcmhhbmcnLFxyXG4gICAgJ292ZXJoYXVsJyxcclxuICAgICdvdmVyaGVhZCcsXHJcbiAgICAnb3ZlcmhlYXInLFxyXG4gICAgJ292ZXJoZWF0JyxcclxuICAgICdvdmVyaHVuZycsXHJcbiAgICAnb3ZlcmpveWVkJyxcclxuICAgICdvdmVya2lsbCcsXHJcbiAgICAnb3ZlcmxhYm9yJyxcclxuICAgICdvdmVybGFpZCcsXHJcbiAgICAnb3ZlcmxhcCcsXHJcbiAgICAnb3ZlcmxheScsXHJcbiAgICAnb3ZlcmxvYWQnLFxyXG4gICAgJ292ZXJsb29rJyxcclxuICAgICdvdmVybG9yZCcsXHJcbiAgICAnb3Zlcmx5aW5nJyxcclxuICAgICdvdmVybmlnaHQnLFxyXG4gICAgJ292ZXJwYXNzJyxcclxuICAgICdvdmVycGF5JyxcclxuICAgICdvdmVycGxhbnQnLFxyXG4gICAgJ292ZXJwbGF5JyxcclxuICAgICdvdmVycG93ZXInLFxyXG4gICAgJ292ZXJwcmljZScsXHJcbiAgICAnb3ZlcnJhdGUnLFxyXG4gICAgJ292ZXJyZWFjaCcsXHJcbiAgICAnb3ZlcnJlYWN0JyxcclxuICAgICdvdmVycmlkZScsXHJcbiAgICAnb3ZlcnJpcGUnLFxyXG4gICAgJ292ZXJydWxlJyxcclxuICAgICdvdmVycnVuJyxcclxuICAgICdvdmVyc2hvb3QnLFxyXG4gICAgJ292ZXJzaG90JyxcclxuICAgICdvdmVyc2lnaHQnLFxyXG4gICAgJ292ZXJzaXplZCcsXHJcbiAgICAnb3ZlcnNsZWVwJyxcclxuICAgICdvdmVyc29sZCcsXHJcbiAgICAnb3ZlcnNwZW5kJyxcclxuICAgICdvdmVyc3RhdGUnLFxyXG4gICAgJ292ZXJzdGF5JyxcclxuICAgICdvdmVyc3RlcCcsXHJcbiAgICAnb3ZlcnN0b2NrJyxcclxuICAgICdvdmVyc3R1ZmYnLFxyXG4gICAgJ292ZXJzd2VldCcsXHJcbiAgICAnb3ZlcnRha2UnLFxyXG4gICAgJ292ZXJ0aHJvdycsXHJcbiAgICAnb3ZlcnRpbWUnLFxyXG4gICAgJ292ZXJ0bHknLFxyXG4gICAgJ292ZXJ0b25lJyxcclxuICAgICdvdmVydHVyZScsXHJcbiAgICAnb3ZlcnR1cm4nLFxyXG4gICAgJ292ZXJ1c2UnLFxyXG4gICAgJ292ZXJ2YWx1ZScsXHJcbiAgICAnb3ZlcnZpZXcnLFxyXG4gICAgJ292ZXJ3cml0ZScsXHJcbiAgICAnb3dsJyxcclxuICAgICdveGZvcmQnLFxyXG4gICAgJ294aWRhbnQnLFxyXG4gICAgJ294aWRhdGlvbicsXHJcbiAgICAnb3hpZGl6ZScsXHJcbiAgICAnb3hpZGl6aW5nJyxcclxuICAgICdveHlnZW4nLFxyXG4gICAgJ294eW1vcm9uJyxcclxuICAgICdveXN0ZXInLFxyXG4gICAgJ296b25lJyxcclxuICAgICdwYWNlZCcsXHJcbiAgICAncGFjZW1ha2VyJyxcclxuICAgICdwYWNpZmljJyxcclxuICAgICdwYWNpZmllcicsXHJcbiAgICAncGFjaWZpc20nLFxyXG4gICAgJ3BhY2lmaXN0JyxcclxuICAgICdwYWNpZnknLFxyXG4gICAgJ3BhZGRlZCcsXHJcbiAgICAncGFkZGluZycsXHJcbiAgICAncGFkZGxlJyxcclxuICAgICdwYWRkbGluZycsXHJcbiAgICAncGFkbG9jaycsXHJcbiAgICAncGFnYW4nLFxyXG4gICAgJ3BhZ2VyJyxcclxuICAgICdwYWdpbmcnLFxyXG4gICAgJ3BhamFtYXMnLFxyXG4gICAgJ3BhbGFjZScsXHJcbiAgICAncGFsYXRhYmxlJyxcclxuICAgICdwYWxtJyxcclxuICAgICdwYWxwYWJsZScsXHJcbiAgICAncGFscGl0YXRlJyxcclxuICAgICdwYWx0cnknLFxyXG4gICAgJ3BhbXBlcmVkJyxcclxuICAgICdwYW1wZXJlcicsXHJcbiAgICAncGFtcGVycycsXHJcbiAgICAncGFtcGhsZXQnLFxyXG4gICAgJ3BhbmFtYScsXHJcbiAgICAncGFuY2FrZScsXHJcbiAgICAncGFuY3JlYXMnLFxyXG4gICAgJ3BhbmRhJyxcclxuICAgICdwYW5kZW1pYycsXHJcbiAgICAncGFuZycsXHJcbiAgICAncGFuaGFuZGxlJyxcclxuICAgICdwYW5pYycsXHJcbiAgICAncGFubmluZycsXHJcbiAgICAncGFub3JhbWEnLFxyXG4gICAgJ3Bhbm9yYW1pYycsXHJcbiAgICAncGFudGhlcicsXHJcbiAgICAncGFudG9taW1lJyxcclxuICAgICdwYW50cnknLFxyXG4gICAgJ3BhbnRzJyxcclxuICAgICdwYW50eWhvc2UnLFxyXG4gICAgJ3BhcGFyYXp6aScsXHJcbiAgICAncGFwYXlhJyxcclxuICAgICdwYXBlcicsXHJcbiAgICAncGFwcmlrYScsXHJcbiAgICAncGFweXJ1cycsXHJcbiAgICAncGFyYWJvbGEnLFxyXG4gICAgJ3BhcmFjaHV0ZScsXHJcbiAgICAncGFyYWRlJyxcclxuICAgICdwYXJhZG94JyxcclxuICAgICdwYXJhZ3JhcGgnLFxyXG4gICAgJ3BhcmFrZWV0JyxcclxuICAgICdwYXJhbGVnYWwnLFxyXG4gICAgJ3BhcmFseXNlcycsXHJcbiAgICAncGFyYWx5c2lzJyxcclxuICAgICdwYXJhbHl6ZScsXHJcbiAgICAncGFyYW1lZGljJyxcclxuICAgICdwYXJhbWV0ZXInLFxyXG4gICAgJ3BhcmFtb3VudCcsXHJcbiAgICAncGFyYXNhaWwnLFxyXG4gICAgJ3BhcmFzaXRlJyxcclxuICAgICdwYXJhc2l0aWMnLFxyXG4gICAgJ3BhcmNlbCcsXHJcbiAgICAncGFyY2hlZCcsXHJcbiAgICAncGFyY2htZW50JyxcclxuICAgICdwYXJkb24nLFxyXG4gICAgJ3BhcmlzaCcsXHJcbiAgICAncGFya2EnLFxyXG4gICAgJ3BhcmtpbmcnLFxyXG4gICAgJ3Bhcmt3YXknLFxyXG4gICAgJ3BhcmxvcicsXHJcbiAgICAncGFybWVzYW4nLFxyXG4gICAgJ3Bhcm9sZScsXHJcbiAgICAncGFycm90JyxcclxuICAgICdwYXJzbGV5JyxcclxuICAgICdwYXJzbmlwJyxcclxuICAgICdwYXJ0YWtlJyxcclxuICAgICdwYXJ0ZWQnLFxyXG4gICAgJ3BhcnRpbmcnLFxyXG4gICAgJ3BhcnRpdGlvbicsXHJcbiAgICAncGFydGx5JyxcclxuICAgICdwYXJ0bmVyJyxcclxuICAgICdwYXJ0cmlkZ2UnLFxyXG4gICAgJ3BhcnR5JyxcclxuICAgICdwYXNzYWJsZScsXHJcbiAgICAncGFzc2FibHknLFxyXG4gICAgJ3Bhc3NhZ2UnLFxyXG4gICAgJ3Bhc3Njb2RlJyxcclxuICAgICdwYXNzZW5nZXInLFxyXG4gICAgJ3Bhc3NlcmJ5JyxcclxuICAgICdwYXNzaW5nJyxcclxuICAgICdwYXNzaW9uJyxcclxuICAgICdwYXNzaXZlJyxcclxuICAgICdwYXNzaXZpc20nLFxyXG4gICAgJ3Bhc3NvdmVyJyxcclxuICAgICdwYXNzcG9ydCcsXHJcbiAgICAncGFzc3dvcmQnLFxyXG4gICAgJ3Bhc3RhJyxcclxuICAgICdwYXN0ZWQnLFxyXG4gICAgJ3Bhc3RlbCcsXHJcbiAgICAncGFzdGltZScsXHJcbiAgICAncGFzdG9yJyxcclxuICAgICdwYXN0cmFtaScsXHJcbiAgICAncGFzdHVyZScsXHJcbiAgICAncGFzdHknLFxyXG4gICAgJ3BhdGNod29yaycsXHJcbiAgICAncGF0Y2h5JyxcclxuICAgICdwYXRlcm5hbCcsXHJcbiAgICAncGF0ZXJuaXR5JyxcclxuICAgICdwYXRoJyxcclxuICAgICdwYXRpZW5jZScsXHJcbiAgICAncGF0aWVudCcsXHJcbiAgICAncGF0aW8nLFxyXG4gICAgJ3BhdHJpYXJjaCcsXHJcbiAgICAncGF0cmlvdCcsXHJcbiAgICAncGF0cm9sJyxcclxuICAgICdwYXRyb25hZ2UnLFxyXG4gICAgJ3BhdHJvbml6ZScsXHJcbiAgICAncGF1cGVyJyxcclxuICAgICdwYXZlbWVudCcsXHJcbiAgICAncGF2ZXInLFxyXG4gICAgJ3BhdmVzdG9uZScsXHJcbiAgICAncGF2aWxpb24nLFxyXG4gICAgJ3BhdmluZycsXHJcbiAgICAncGF3aW5nJyxcclxuICAgICdwYXlhYmxlJyxcclxuICAgICdwYXliYWNrJyxcclxuICAgICdwYXljaGVjaycsXHJcbiAgICAncGF5ZGF5JyxcclxuICAgICdwYXllZScsXHJcbiAgICAncGF5ZXInLFxyXG4gICAgJ3BheWluZycsXHJcbiAgICAncGF5bWVudCcsXHJcbiAgICAncGF5cGhvbmUnLFxyXG4gICAgJ3BheXJvbGwnLFxyXG4gICAgJ3BlYmJsZScsXHJcbiAgICAncGViYmx5JyxcclxuICAgICdwZWNhbicsXHJcbiAgICAncGVjdGluJyxcclxuICAgICdwZWN1bGlhcicsXHJcbiAgICAncGVkZGxpbmcnLFxyXG4gICAgJ3BlZGlhdHJpYycsXHJcbiAgICAncGVkaWN1cmUnLFxyXG4gICAgJ3BlZGlncmVlJyxcclxuICAgICdwZWRvbWV0ZXInLFxyXG4gICAgJ3BlZ2JvYXJkJyxcclxuICAgICdwZWxpY2FuJyxcclxuICAgICdwZWxsZXQnLFxyXG4gICAgJ3BlbHQnLFxyXG4gICAgJ3BlbHZpcycsXHJcbiAgICAncGVuYWxpemUnLFxyXG4gICAgJ3BlbmFsdHknLFxyXG4gICAgJ3BlbmNpbCcsXHJcbiAgICAncGVuZGFudCcsXHJcbiAgICAncGVuZGluZycsXHJcbiAgICAncGVuaG9sZGVyJyxcclxuICAgICdwZW5rbmlmZScsXHJcbiAgICAncGVubmFudCcsXHJcbiAgICAncGVubmlsZXNzJyxcclxuICAgICdwZW5ueScsXHJcbiAgICAncGVucGFsJyxcclxuICAgICdwZW5zaW9uJyxcclxuICAgICdwZW50YWdvbicsXHJcbiAgICAncGVudGFncmFtJyxcclxuICAgICdwZXAnLFxyXG4gICAgJ3BlcmNlaXZlJyxcclxuICAgICdwZXJjZW50JyxcclxuICAgICdwZXJjaCcsXHJcbiAgICAncGVyY29sYXRlJyxcclxuICAgICdwZXJlbm5pYWwnLFxyXG4gICAgJ3BlcmZlY3RlZCcsXHJcbiAgICAncGVyZmVjdGx5JyxcclxuICAgICdwZXJmdW1lJyxcclxuICAgICdwZXJpc2NvcGUnLFxyXG4gICAgJ3BlcmlzaCcsXHJcbiAgICAncGVyanVyZXInLFxyXG4gICAgJ3Blcmp1cnknLFxyXG4gICAgJ3BlcmtpbmVzcycsXHJcbiAgICAncGVya3knLFxyXG4gICAgJ3Blcm0nLFxyXG4gICAgJ3Blcm94aWRlJyxcclxuICAgICdwZXJwZXR1YWwnLFxyXG4gICAgJ3BlcnBsZXhlZCcsXHJcbiAgICAncGVyc2VjdXRlJyxcclxuICAgICdwZXJzZXZlcmUnLFxyXG4gICAgJ3BlcnN1YWRlZCcsXHJcbiAgICAncGVyc3VhZGVyJyxcclxuICAgICdwZXNreScsXHJcbiAgICAncGVzbycsXHJcbiAgICAncGVzc2ltaXNtJyxcclxuICAgICdwZXNzaW1pc3QnLFxyXG4gICAgJ3Blc3RlcicsXHJcbiAgICAncGVzdGljaWRlJyxcclxuICAgICdwZXRhbCcsXHJcbiAgICAncGV0aXRlJyxcclxuICAgICdwZXRpdGlvbicsXHJcbiAgICAncGV0cmknLFxyXG4gICAgJ3BldHJvbGV1bScsXHJcbiAgICAncGV0dGVkJyxcclxuICAgICdwZXR0aWNvYXQnLFxyXG4gICAgJ3BldHRpbmVzcycsXHJcbiAgICAncGV0dHknLFxyXG4gICAgJ3BldHVuaWEnLFxyXG4gICAgJ3BoYW50b20nLFxyXG4gICAgJ3Bob2JpYScsXHJcbiAgICAncGhvZW5peCcsXHJcbiAgICAncGhvbmVib29rJyxcclxuICAgICdwaG9uZXknLFxyXG4gICAgJ3Bob25pY3MnLFxyXG4gICAgJ3Bob25pbmVzcycsXHJcbiAgICAncGhvbnknLFxyXG4gICAgJ3Bob3NwaGF0ZScsXHJcbiAgICAncGhvdG8nLFxyXG4gICAgJ3BocmFzZScsXHJcbiAgICAncGhyYXNpbmcnLFxyXG4gICAgJ3BsYWNhcmQnLFxyXG4gICAgJ3BsYWNhdGUnLFxyXG4gICAgJ3BsYWNpZGx5JyxcclxuICAgICdwbGFuaycsXHJcbiAgICAncGxhbm5lcicsXHJcbiAgICAncGxhbnQnLFxyXG4gICAgJ3BsYXNtYScsXHJcbiAgICAncGxhc3RlcicsXHJcbiAgICAncGxhc3RpYycsXHJcbiAgICAncGxhdGVkJyxcclxuICAgICdwbGF0Zm9ybScsXHJcbiAgICAncGxhdGluZycsXHJcbiAgICAncGxhdGludW0nLFxyXG4gICAgJ3BsYXRvbmljJyxcclxuICAgICdwbGF0dGVyJyxcclxuICAgICdwbGF0eXB1cycsXHJcbiAgICAncGxhdXNpYmxlJyxcclxuICAgICdwbGF1c2libHknLFxyXG4gICAgJ3BsYXlhYmxlJyxcclxuICAgICdwbGF5YmFjaycsXHJcbiAgICAncGxheWVyJyxcclxuICAgICdwbGF5ZnVsJyxcclxuICAgICdwbGF5Z3JvdXAnLFxyXG4gICAgJ3BsYXlob3VzZScsXHJcbiAgICAncGxheWluZycsXHJcbiAgICAncGxheWxpc3QnLFxyXG4gICAgJ3BsYXltYWtlcicsXHJcbiAgICAncGxheW1hdGUnLFxyXG4gICAgJ3BsYXlvZmYnLFxyXG4gICAgJ3BsYXlwZW4nLFxyXG4gICAgJ3BsYXlyb29tJyxcclxuICAgICdwbGF5c2V0JyxcclxuICAgICdwbGF5dGhpbmcnLFxyXG4gICAgJ3BsYXl0aW1lJyxcclxuICAgICdwbGF6YScsXHJcbiAgICAncGxlYWRpbmcnLFxyXG4gICAgJ3BsZWF0JyxcclxuICAgICdwbGVkZ2UnLFxyXG4gICAgJ3BsZW50aWZ1bCcsXHJcbiAgICAncGxlbnR5JyxcclxuICAgICdwbGV0aG9yYScsXHJcbiAgICAncGxleGlnbGFzJyxcclxuICAgICdwbGlhYmxlJyxcclxuICAgICdwbG9kJyxcclxuICAgICdwbG9wJyxcclxuICAgICdwbG90JyxcclxuICAgICdwbG93JyxcclxuICAgICdwbG95JyxcclxuICAgICdwbHVjaycsXHJcbiAgICAncGx1ZycsXHJcbiAgICAncGx1bmRlcicsXHJcbiAgICAncGx1bmdpbmcnLFxyXG4gICAgJ3BsdXJhbCcsXHJcbiAgICAncGx1cycsXHJcbiAgICAncGx1dG9uaXVtJyxcclxuICAgICdwbHl3b29kJyxcclxuICAgICdwb2FjaCcsXHJcbiAgICAncG9kJyxcclxuICAgICdwb2VtJyxcclxuICAgICdwb2V0JyxcclxuICAgICdwb2dvJyxcclxuICAgICdwb2ludGVkJyxcclxuICAgICdwb2ludGVyJyxcclxuICAgICdwb2ludGluZycsXHJcbiAgICAncG9pbnRsZXNzJyxcclxuICAgICdwb2ludHknLFxyXG4gICAgJ3BvaXNlJyxcclxuICAgICdwb2lzb24nLFxyXG4gICAgJ3Bva2VyJyxcclxuICAgICdwb2tpbmcnLFxyXG4gICAgJ3BvbGFyJyxcclxuICAgICdwb2xpY2UnLFxyXG4gICAgJ3BvbGljeScsXHJcbiAgICAncG9saW8nLFxyXG4gICAgJ3BvbGlzaCcsXHJcbiAgICAncG9saXRlbHknLFxyXG4gICAgJ3BvbGthJyxcclxuICAgICdwb2xvJyxcclxuICAgICdwb2x5ZXN0ZXInLFxyXG4gICAgJ3BvbHlnb24nLFxyXG4gICAgJ3BvbHlncmFwaCcsXHJcbiAgICAncG9seW1lcicsXHJcbiAgICAncG9uY2hvJyxcclxuICAgICdwb25kJyxcclxuICAgICdwb255JyxcclxuICAgICdwb3Bjb3JuJyxcclxuICAgICdwb3BlJyxcclxuICAgICdwb3BsYXInLFxyXG4gICAgJ3BvcHBlcicsXHJcbiAgICAncG9wcHknLFxyXG4gICAgJ3BvcHNpY2xlJyxcclxuICAgICdwb3B1bGFjZScsXHJcbiAgICAncG9wdWxhcicsXHJcbiAgICAncG9wdWxhdGUnLFxyXG4gICAgJ3BvcmN1cGluZScsXHJcbiAgICAncG9yaycsXHJcbiAgICAncG9yb3VzJyxcclxuICAgICdwb3JyaWRnZScsXHJcbiAgICAncG9ydGFibGUnLFxyXG4gICAgJ3BvcnRhbCcsXHJcbiAgICAncG9ydGZvbGlvJyxcclxuICAgICdwb3J0aG9sZScsXHJcbiAgICAncG9ydGlvbicsXHJcbiAgICAncG9ydGx5JyxcclxuICAgICdwb3J0c2lkZScsXHJcbiAgICAncG9zZXInLFxyXG4gICAgJ3Bvc2gnLFxyXG4gICAgJ3Bvc2luZycsXHJcbiAgICAncG9zc2libGUnLFxyXG4gICAgJ3Bvc3NpYmx5JyxcclxuICAgICdwb3NzdW0nLFxyXG4gICAgJ3Bvc3RhZ2UnLFxyXG4gICAgJ3Bvc3RhbCcsXHJcbiAgICAncG9zdGJveCcsXHJcbiAgICAncG9zdGNhcmQnLFxyXG4gICAgJ3Bvc3RlZCcsXHJcbiAgICAncG9zdGVyJyxcclxuICAgICdwb3N0aW5nJyxcclxuICAgICdwb3N0bmFzYWwnLFxyXG4gICAgJ3Bvc3R1cmUnLFxyXG4gICAgJ3Bvc3R3YXInLFxyXG4gICAgJ3BvdWNoJyxcclxuICAgICdwb3VuY2UnLFxyXG4gICAgJ3BvdW5jaW5nJyxcclxuICAgICdwb3VuZCcsXHJcbiAgICAncG91cmluZycsXHJcbiAgICAncG91dCcsXHJcbiAgICAncG93ZGVyZWQnLFxyXG4gICAgJ3Bvd2RlcmluZycsXHJcbiAgICAncG93ZGVyeScsXHJcbiAgICAncG93ZXInLFxyXG4gICAgJ3Bvd3dvdycsXHJcbiAgICAncG94JyxcclxuICAgICdwcmFpc2luZycsXHJcbiAgICAncHJhbmNlJyxcclxuICAgICdwcmFuY2luZycsXHJcbiAgICAncHJhbmtlcicsXHJcbiAgICAncHJhbmtpc2gnLFxyXG4gICAgJ3ByYW5rc3RlcicsXHJcbiAgICAncHJheWVyJyxcclxuICAgICdwcmF5aW5nJyxcclxuICAgICdwcmVhY2hlcicsXHJcbiAgICAncHJlYWNoaW5nJyxcclxuICAgICdwcmVhY2h5JyxcclxuICAgICdwcmVhbWJsZScsXHJcbiAgICAncHJlY2luY3QnLFxyXG4gICAgJ3ByZWNpc2UnLFxyXG4gICAgJ3ByZWNpc2lvbicsXHJcbiAgICAncHJlY29vaycsXHJcbiAgICAncHJlY3V0JyxcclxuICAgICdwcmVkYXRvcicsXHJcbiAgICAncHJlZGVmaW5lJyxcclxuICAgICdwcmVkaWN0JyxcclxuICAgICdwcmVmYWNlJyxcclxuICAgICdwcmVmaXgnLFxyXG4gICAgJ3ByZWZsaWdodCcsXHJcbiAgICAncHJlZm9ybWVkJyxcclxuICAgICdwcmVnYW1lJyxcclxuICAgICdwcmVnbmFuY3knLFxyXG4gICAgJ3ByZWduYW50JyxcclxuICAgICdwcmVoZWF0ZWQnLFxyXG4gICAgJ3ByZWxhdW5jaCcsXHJcbiAgICAncHJlbGF3JyxcclxuICAgICdwcmVsdWRlJyxcclxuICAgICdwcmVtaWVyZScsXHJcbiAgICAncHJlbWlzZXMnLFxyXG4gICAgJ3ByZW1pdW0nLFxyXG4gICAgJ3ByZW5hdGFsJyxcclxuICAgICdwcmVvY2N1cHknLFxyXG4gICAgJ3ByZW9yZGVyJyxcclxuICAgICdwcmVwYWlkJyxcclxuICAgICdwcmVwYXknLFxyXG4gICAgJ3ByZXBsYW4nLFxyXG4gICAgJ3ByZXBweScsXHJcbiAgICAncHJlc2Nob29sJyxcclxuICAgICdwcmVzY3JpYmUnLFxyXG4gICAgJ3ByZXNlYXNvbicsXHJcbiAgICAncHJlc2V0JyxcclxuICAgICdwcmVzaG93JyxcclxuICAgICdwcmVzaWRlbnQnLFxyXG4gICAgJ3ByZXNvYWsnLFxyXG4gICAgJ3ByZXNzJyxcclxuICAgICdwcmVzdW1lJyxcclxuICAgICdwcmVzdW1pbmcnLFxyXG4gICAgJ3ByZXRlZW4nLFxyXG4gICAgJ3ByZXRlbmRlZCcsXHJcbiAgICAncHJldGVuZGVyJyxcclxuICAgICdwcmV0ZW5zZScsXHJcbiAgICAncHJldGV4dCcsXHJcbiAgICAncHJldHR5JyxcclxuICAgICdwcmV0emVsJyxcclxuICAgICdwcmV2YWlsJyxcclxuICAgICdwcmV2YWxlbnQnLFxyXG4gICAgJ3ByZXZlbnQnLFxyXG4gICAgJ3ByZXZpZXcnLFxyXG4gICAgJ3ByZXZpb3VzJyxcclxuICAgICdwcmV3YXInLFxyXG4gICAgJ3ByZXdhc2hlZCcsXHJcbiAgICAncHJpZGVmdWwnLFxyXG4gICAgJ3ByaWVkJyxcclxuICAgICdwcmltYWwnLFxyXG4gICAgJ3ByaW1hcmlseScsXHJcbiAgICAncHJpbWFyeScsXHJcbiAgICAncHJpbWF0ZScsXHJcbiAgICAncHJpbWVyJyxcclxuICAgICdwcmltcCcsXHJcbiAgICAncHJpbmNlc3MnLFxyXG4gICAgJ3ByaW50JyxcclxuICAgICdwcmlvcicsXHJcbiAgICAncHJpc20nLFxyXG4gICAgJ3ByaXNvbicsXHJcbiAgICAncHJpc3N5JyxcclxuICAgICdwcmlzdGluZScsXHJcbiAgICAncHJpdmFjeScsXHJcbiAgICAncHJpdmF0ZScsXHJcbiAgICAncHJpdmF0aXplJyxcclxuICAgICdwcml6ZScsXHJcbiAgICAncHJvYWN0aXZlJyxcclxuICAgICdwcm9iYWJsZScsXHJcbiAgICAncHJvYmFibHknLFxyXG4gICAgJ3Byb2JhdGlvbicsXHJcbiAgICAncHJvYmUnLFxyXG4gICAgJ3Byb2JpbmcnLFxyXG4gICAgJ3Byb2Jpb3RpYycsXHJcbiAgICAncHJvYmxlbScsXHJcbiAgICAncHJvY2VkdXJlJyxcclxuICAgICdwcm9jZXNzJyxcclxuICAgICdwcm9jbGFpbScsXHJcbiAgICAncHJvY3JlYXRlJyxcclxuICAgICdwcm9jdXJlcicsXHJcbiAgICAncHJvZGlnYWwnLFxyXG4gICAgJ3Byb2RpZ3knLFxyXG4gICAgJ3Byb2R1Y2UnLFxyXG4gICAgJ3Byb2R1Y3QnLFxyXG4gICAgJ3Byb2ZhbmUnLFxyXG4gICAgJ3Byb2Zhbml0eScsXHJcbiAgICAncHJvZmVzc2VkJyxcclxuICAgICdwcm9mZXNzb3InLFxyXG4gICAgJ3Byb2ZpbGUnLFxyXG4gICAgJ3Byb2ZvdW5kJyxcclxuICAgICdwcm9mdXNlbHknLFxyXG4gICAgJ3Byb2dlbnknLFxyXG4gICAgJ3Byb2dub3NpcycsXHJcbiAgICAncHJvZ3JhbScsXHJcbiAgICAncHJvZ3Jlc3MnLFxyXG4gICAgJ3Byb2plY3RvcicsXHJcbiAgICAncHJvbG9ndWUnLFxyXG4gICAgJ3Byb2xvbmdlZCcsXHJcbiAgICAncHJvbWVuYWRlJyxcclxuICAgICdwcm9taW5lbnQnLFxyXG4gICAgJ3Byb21vdGVyJyxcclxuICAgICdwcm9tb3Rpb24nLFxyXG4gICAgJ3Byb21wdGVyJyxcclxuICAgICdwcm9tcHRseScsXHJcbiAgICAncHJvbmUnLFxyXG4gICAgJ3Byb25nJyxcclxuICAgICdwcm9ub3VuY2UnLFxyXG4gICAgJ3Byb250bycsXHJcbiAgICAncHJvb2ZpbmcnLFxyXG4gICAgJ3Byb29mcmVhZCcsXHJcbiAgICAncHJvb2ZzJyxcclxuICAgICdwcm9wZWxsZXInLFxyXG4gICAgJ3Byb3Blcmx5JyxcclxuICAgICdwcm9wZXJ0eScsXHJcbiAgICAncHJvcG9uZW50JyxcclxuICAgICdwcm9wb3NhbCcsXHJcbiAgICAncHJvcG9zZScsXHJcbiAgICAncHJvcHMnLFxyXG4gICAgJ3Byb3JhdGUnLFxyXG4gICAgJ3Byb3RlY3RvcicsXHJcbiAgICAncHJvdGVnZWUnLFxyXG4gICAgJ3Byb3RvbicsXHJcbiAgICAncHJvdG90eXBlJyxcclxuICAgICdwcm90b3pvYW4nLFxyXG4gICAgJ3Byb3RyYWN0JyxcclxuICAgICdwcm90cnVkZScsXHJcbiAgICAncHJvdWQnLFxyXG4gICAgJ3Byb3ZhYmxlJyxcclxuICAgICdwcm92ZWQnLFxyXG4gICAgJ3Byb3ZlbicsXHJcbiAgICAncHJvdmlkZWQnLFxyXG4gICAgJ3Byb3ZpZGVyJyxcclxuICAgICdwcm92aWRpbmcnLFxyXG4gICAgJ3Byb3ZpbmNlJyxcclxuICAgICdwcm92aW5nJyxcclxuICAgICdwcm92b2tlJyxcclxuICAgICdwcm92b2tpbmcnLFxyXG4gICAgJ3Byb3ZvbG9uZScsXHJcbiAgICAncHJvd2VzcycsXHJcbiAgICAncHJvd2xlcicsXHJcbiAgICAncHJvd2xpbmcnLFxyXG4gICAgJ3Byb3hpbWl0eScsXHJcbiAgICAncHJveHknLFxyXG4gICAgJ3Byb3phYycsXHJcbiAgICAncHJ1ZGUnLFxyXG4gICAgJ3BydWRpc2hseScsXHJcbiAgICAncHJ1bmUnLFxyXG4gICAgJ3BydW5pbmcnLFxyXG4gICAgJ3ByeScsXHJcbiAgICAncHN5Y2hpYycsXHJcbiAgICAncHVibGljJyxcclxuICAgICdwdWJsaXNoZXInLFxyXG4gICAgJ3B1Y2tlcicsXHJcbiAgICAncHVlYmxvJyxcclxuICAgICdwdWcnLFxyXG4gICAgJ3B1bGwnLFxyXG4gICAgJ3B1bG1vbmFyeScsXHJcbiAgICAncHVscCcsXHJcbiAgICAncHVsc2F0ZScsXHJcbiAgICAncHVsc2UnLFxyXG4gICAgJ3B1bHZlcml6ZScsXHJcbiAgICAncHVtYScsXHJcbiAgICAncHVtaWNlJyxcclxuICAgICdwdW1tZWwnLFxyXG4gICAgJ3B1bmNoJyxcclxuICAgICdwdW5jdHVhbCcsXHJcbiAgICAncHVuY3R1YXRlJyxcclxuICAgICdwdW5jdHVyZWQnLFxyXG4gICAgJ3B1bmdlbnQnLFxyXG4gICAgJ3B1bmlzaGVyJyxcclxuICAgICdwdW5rJyxcclxuICAgICdwdXBpbCcsXHJcbiAgICAncHVwcGV0JyxcclxuICAgICdwdXBweScsXHJcbiAgICAncHVyY2hhc2UnLFxyXG4gICAgJ3B1cmVibG9vZCcsXHJcbiAgICAncHVyZWJyZWQnLFxyXG4gICAgJ3B1cmVseScsXHJcbiAgICAncHVyZW5lc3MnLFxyXG4gICAgJ3B1cmdhdG9yeScsXHJcbiAgICAncHVyZ2UnLFxyXG4gICAgJ3B1cmdpbmcnLFxyXG4gICAgJ3B1cmlmaWVyJyxcclxuICAgICdwdXJpZnknLFxyXG4gICAgJ3B1cmlzdCcsXHJcbiAgICAncHVyaXRhbicsXHJcbiAgICAncHVyaXR5JyxcclxuICAgICdwdXJwbGUnLFxyXG4gICAgJ3B1cnBsaXNoJyxcclxuICAgICdwdXJwb3NlbHknLFxyXG4gICAgJ3B1cnInLFxyXG4gICAgJ3B1cnNlJyxcclxuICAgICdwdXJzdWFibGUnLFxyXG4gICAgJ3B1cnN1YW50JyxcclxuICAgICdwdXJzdWl0JyxcclxuICAgICdwdXJ2ZXlvcicsXHJcbiAgICAncHVzaGNhcnQnLFxyXG4gICAgJ3B1c2hjaGFpcicsXHJcbiAgICAncHVzaGVyJyxcclxuICAgICdwdXNoaW5lc3MnLFxyXG4gICAgJ3B1c2hpbmcnLFxyXG4gICAgJ3B1c2hvdmVyJyxcclxuICAgICdwdXNocGluJyxcclxuICAgICdwdXNodXAnLFxyXG4gICAgJ3B1c2h5JyxcclxuICAgICdwdXRkb3duJyxcclxuICAgICdwdXR0JyxcclxuICAgICdwdXp6bGUnLFxyXG4gICAgJ3B1enpsaW5nJyxcclxuICAgICdweXJhbWlkJyxcclxuICAgICdweXJvbWFuaWEnLFxyXG4gICAgJ3B5dGhvbicsXHJcbiAgICAncXVhY2snLFxyXG4gICAgJ3F1YWRyYW50JyxcclxuICAgICdxdWFpbCcsXHJcbiAgICAncXVhaW50bHknLFxyXG4gICAgJ3F1YWtlJyxcclxuICAgICdxdWFraW5nJyxcclxuICAgICdxdWFsaWZpZWQnLFxyXG4gICAgJ3F1YWxpZmllcicsXHJcbiAgICAncXVhbGlmeScsXHJcbiAgICAncXVhbGl0eScsXHJcbiAgICAncXVhbG0nLFxyXG4gICAgJ3F1YW50dW0nLFxyXG4gICAgJ3F1YXJyZWwnLFxyXG4gICAgJ3F1YXJyeScsXHJcbiAgICAncXVhcnRlcmVkJyxcclxuICAgICdxdWFydGVybHknLFxyXG4gICAgJ3F1YXJ0ZXJzJyxcclxuICAgICdxdWFydGV0JyxcclxuICAgICdxdWVuY2gnLFxyXG4gICAgJ3F1ZXJ5JyxcclxuICAgICdxdWlja2VuJyxcclxuICAgICdxdWlja2x5JyxcclxuICAgICdxdWlja25lc3MnLFxyXG4gICAgJ3F1aWNrc2FuZCcsXHJcbiAgICAncXVpY2tzdGVwJyxcclxuICAgICdxdWlldCcsXHJcbiAgICAncXVpbGwnLFxyXG4gICAgJ3F1aWx0JyxcclxuICAgICdxdWludGV0JyxcclxuICAgICdxdWludHVwbGUnLFxyXG4gICAgJ3F1aXJrJyxcclxuICAgICdxdWl0JyxcclxuICAgICdxdWl2ZXInLFxyXG4gICAgJ3F1aXp6aWNhbCcsXHJcbiAgICAncXVvdGFibGUnLFxyXG4gICAgJ3F1b3RhdGlvbicsXHJcbiAgICAncXVvdGUnLFxyXG4gICAgJ3JhYmlkJyxcclxuICAgICdyYWNlJyxcclxuICAgICdyYWNpbmcnLFxyXG4gICAgJ3JhY2lzbScsXHJcbiAgICAncmFjaycsXHJcbiAgICAncmFjb29uJyxcclxuICAgICdyYWRhcicsXHJcbiAgICAncmFkaWFsJyxcclxuICAgICdyYWRpYW5jZScsXHJcbiAgICAncmFkaWFudGx5JyxcclxuICAgICdyYWRpYXRlZCcsXHJcbiAgICAncmFkaWF0aW9uJyxcclxuICAgICdyYWRpYXRvcicsXHJcbiAgICAncmFkaW8nLFxyXG4gICAgJ3JhZGlzaCcsXHJcbiAgICAncmFmZmxlJyxcclxuICAgICdyYWZ0JyxcclxuICAgICdyYWdlJyxcclxuICAgICdyYWdnZWQnLFxyXG4gICAgJ3JhZ2luZycsXHJcbiAgICAncmFnd2VlZCcsXHJcbiAgICAncmFpZGVyJyxcclxuICAgICdyYWlsY2FyJyxcclxuICAgICdyYWlsaW5nJyxcclxuICAgICdyYWlscm9hZCcsXHJcbiAgICAncmFpbHdheScsXHJcbiAgICAncmFpc2luJyxcclxuICAgICdyYWtlJyxcclxuICAgICdyYWtpbmcnLFxyXG4gICAgJ3JhbGx5JyxcclxuICAgICdyYW1ibGUnLFxyXG4gICAgJ3JhbWJsaW5nJyxcclxuICAgICdyYW1wJyxcclxuICAgICdyYW1yb2QnLFxyXG4gICAgJ3JhbmNoJyxcclxuICAgICdyYW5jaWRpdHknLFxyXG4gICAgJ3JhbmRvbScsXHJcbiAgICAncmFuZ2VkJyxcclxuICAgICdyYW5nZXInLFxyXG4gICAgJ3JhbmdpbmcnLFxyXG4gICAgJ3JhbmtlZCcsXHJcbiAgICAncmFua2luZycsXHJcbiAgICAncmFuc2FjaycsXHJcbiAgICAncmFudGluZycsXHJcbiAgICAncmFudHMnLFxyXG4gICAgJ3JhcmUnLFxyXG4gICAgJ3Jhcml0eScsXHJcbiAgICAncmFzY2FsJyxcclxuICAgICdyYXNoJyxcclxuICAgICdyYXNwaW5nJyxcclxuICAgICdyYXZhZ2UnLFxyXG4gICAgJ3JhdmVuJyxcclxuICAgICdyYXZpbmUnLFxyXG4gICAgJ3JhdmluZycsXHJcbiAgICAncmF2aW9saScsXHJcbiAgICAncmF2aXNoaW5nJyxcclxuICAgICdyZWFic29yYicsXHJcbiAgICAncmVhY2gnLFxyXG4gICAgJ3JlYWNxdWlyZScsXHJcbiAgICAncmVhY3Rpb24nLFxyXG4gICAgJ3JlYWN0aXZlJyxcclxuICAgICdyZWFjdG9yJyxcclxuICAgICdyZWFmZmlybScsXHJcbiAgICAncmVhbScsXHJcbiAgICAncmVhbmFseXplJyxcclxuICAgICdyZWFwcGVhcicsXHJcbiAgICAncmVhcHBseScsXHJcbiAgICAncmVhcHBvaW50JyxcclxuICAgICdyZWFwcHJvdmUnLFxyXG4gICAgJ3JlYXJyYW5nZScsXHJcbiAgICAncmVhcnZpZXcnLFxyXG4gICAgJ3JlYXNvbicsXHJcbiAgICAncmVhc3NpZ24nLFxyXG4gICAgJ3JlYXNzdXJlJyxcclxuICAgICdyZWF0dGFjaCcsXHJcbiAgICAncmVhd2FrZScsXHJcbiAgICAncmViYWxhbmNlJyxcclxuICAgICdyZWJhdGUnLFxyXG4gICAgJ3JlYmVsJyxcclxuICAgICdyZWJpcnRoJyxcclxuICAgICdyZWJvb3QnLFxyXG4gICAgJ3JlYm9ybicsXHJcbiAgICAncmVib3VuZCcsXHJcbiAgICAncmVidWZmJyxcclxuICAgICdyZWJ1aWxkJyxcclxuICAgICdyZWJ1aWx0JyxcclxuICAgICdyZWJ1cmlhbCcsXHJcbiAgICAncmVidXR0YWwnLFxyXG4gICAgJ3JlY2FsbCcsXHJcbiAgICAncmVjYW50JyxcclxuICAgICdyZWNhcHR1cmUnLFxyXG4gICAgJ3JlY2FzdCcsXHJcbiAgICAncmVjZWRlJyxcclxuICAgICdyZWNlbnQnLFxyXG4gICAgJ3JlY2VzcycsXHJcbiAgICAncmVjaGFyZ2VyJyxcclxuICAgICdyZWNpcGllbnQnLFxyXG4gICAgJ3JlY2l0YWwnLFxyXG4gICAgJ3JlY2l0ZScsXHJcbiAgICAncmVja2xlc3MnLFxyXG4gICAgJ3JlY2xhaW0nLFxyXG4gICAgJ3JlY2xpbmVyJyxcclxuICAgICdyZWNsaW5pbmcnLFxyXG4gICAgJ3JlY2x1c2UnLFxyXG4gICAgJ3JlY2x1c2l2ZScsXHJcbiAgICAncmVjb2duaXplJyxcclxuICAgICdyZWNvaWwnLFxyXG4gICAgJ3JlY29sbGVjdCcsXHJcbiAgICAncmVjb2xvcicsXHJcbiAgICAncmVjb25jaWxlJyxcclxuICAgICdyZWNvbmZpcm0nLFxyXG4gICAgJ3JlY29udmVuZScsXHJcbiAgICAncmVjb3B5JyxcclxuICAgICdyZWNvcmQnLFxyXG4gICAgJ3JlY291bnQnLFxyXG4gICAgJ3JlY291cCcsXHJcbiAgICAncmVjb3ZlcnknLFxyXG4gICAgJ3JlY3JlYXRlJyxcclxuICAgICdyZWN0YWwnLFxyXG4gICAgJ3JlY3RhbmdsZScsXHJcbiAgICAncmVjdGlmaWVkJyxcclxuICAgICdyZWN0aWZ5JyxcclxuICAgICdyZWN5Y2xlZCcsXHJcbiAgICAncmVjeWNsZXInLFxyXG4gICAgJ3JlY3ljbGluZycsXHJcbiAgICAncmVlbWVyZ2UnLFxyXG4gICAgJ3JlZW5hY3QnLFxyXG4gICAgJ3JlZW50ZXInLFxyXG4gICAgJ3JlZW50cnknLFxyXG4gICAgJ3JlZXhhbWluZScsXHJcbiAgICAncmVmZXJhYmxlJyxcclxuICAgICdyZWZlcmVlJyxcclxuICAgICdyZWZlcmVuY2UnLFxyXG4gICAgJ3JlZmlsbCcsXHJcbiAgICAncmVmaW5hbmNlJyxcclxuICAgICdyZWZpbmVkJyxcclxuICAgICdyZWZpbmVyeScsXHJcbiAgICAncmVmaW5pbmcnLFxyXG4gICAgJ3JlZmluaXNoJyxcclxuICAgICdyZWZsZWN0ZWQnLFxyXG4gICAgJ3JlZmxlY3RvcicsXHJcbiAgICAncmVmbGV4JyxcclxuICAgICdyZWZsdXgnLFxyXG4gICAgJ3JlZm9jdXMnLFxyXG4gICAgJ3JlZm9sZCcsXHJcbiAgICAncmVmb3Jlc3QnLFxyXG4gICAgJ3JlZm9ybWF0JyxcclxuICAgICdyZWZvcm1lZCcsXHJcbiAgICAncmVmb3JtZXInLFxyXG4gICAgJ3JlZm9ybWlzdCcsXHJcbiAgICAncmVmcmFjdCcsXHJcbiAgICAncmVmcmFpbicsXHJcbiAgICAncmVmcmVlemUnLFxyXG4gICAgJ3JlZnJlc2gnLFxyXG4gICAgJ3JlZnJpZWQnLFxyXG4gICAgJ3JlZnVlbGluZycsXHJcbiAgICAncmVmdW5kJyxcclxuICAgICdyZWZ1cmJpc2gnLFxyXG4gICAgJ3JlZnVybmlzaCcsXHJcbiAgICAncmVmdXNhbCcsXHJcbiAgICAncmVmdXNlJyxcclxuICAgICdyZWZ1c2luZycsXHJcbiAgICAncmVmdXRhYmxlJyxcclxuICAgICdyZWZ1dGUnLFxyXG4gICAgJ3JlZ2FpbicsXHJcbiAgICAncmVnYWxpYScsXHJcbiAgICAncmVnYWxseScsXHJcbiAgICAncmVnZ2FlJyxcclxuICAgICdyZWdpbWUnLFxyXG4gICAgJ3JlZ2lvbicsXHJcbiAgICAncmVnaXN0ZXInLFxyXG4gICAgJ3JlZ2lzdHJhcicsXHJcbiAgICAncmVnaXN0cnknLFxyXG4gICAgJ3JlZ3Jlc3MnLFxyXG4gICAgJ3JlZ3JldGZ1bCcsXHJcbiAgICAncmVncm91cCcsXHJcbiAgICAncmVndWxhcicsXHJcbiAgICAncmVndWxhdGUnLFxyXG4gICAgJ3JlZ3VsYXRvcicsXHJcbiAgICAncmVoYWInLFxyXG4gICAgJ3JlaGVhdCcsXHJcbiAgICAncmVoaXJlJyxcclxuICAgICdyZWh5ZHJhdGUnLFxyXG4gICAgJ3JlaW1idXJzZScsXHJcbiAgICAncmVpc3N1ZScsXHJcbiAgICAncmVpdGVyYXRlJyxcclxuICAgICdyZWpvaWNlJyxcclxuICAgICdyZWpvaWNpbmcnLFxyXG4gICAgJ3Jlam9pbicsXHJcbiAgICAncmVraW5kbGUnLFxyXG4gICAgJ3JlbGFwc2UnLFxyXG4gICAgJ3JlbGFwc2luZycsXHJcbiAgICAncmVsYXRhYmxlJyxcclxuICAgICdyZWxhdGVkJyxcclxuICAgICdyZWxhdGlvbicsXHJcbiAgICAncmVsYXRpdmUnLFxyXG4gICAgJ3JlbGF4JyxcclxuICAgICdyZWxheScsXHJcbiAgICAncmVsZWFybicsXHJcbiAgICAncmVsZWFzZScsXHJcbiAgICAncmVsZW50aW5nJyxcclxuICAgICdyZWxpYWJsZScsXHJcbiAgICAncmVsaWFibHknLFxyXG4gICAgJ3JlbGlhbmNlJyxcclxuICAgICdyZWxpYW50JyxcclxuICAgICdyZWxpYycsXHJcbiAgICAncmVsaWV2ZScsXHJcbiAgICAncmVsaWV2aW5nJyxcclxuICAgICdyZWxpZ2h0JyxcclxuICAgICdyZWxpc2gnLFxyXG4gICAgJ3JlbGl2ZScsXHJcbiAgICAncmVsb2FkJyxcclxuICAgICdyZWxvY2F0ZScsXHJcbiAgICAncmVsb2NrJyxcclxuICAgICdyZWx1Y3RhbnQnLFxyXG4gICAgJ3JlbHknLFxyXG4gICAgJ3JlbWFrZScsXHJcbiAgICAncmVtYXJrJyxcclxuICAgICdyZW1hcnJ5JyxcclxuICAgICdyZW1hdGNoJyxcclxuICAgICdyZW1lZGlhbCcsXHJcbiAgICAncmVtZWR5JyxcclxuICAgICdyZW1lbWJlcicsXHJcbiAgICAncmVtaW5kZXInLFxyXG4gICAgJ3JlbWluZGZ1bCcsXHJcbiAgICAncmVtaXNzaW9uJyxcclxuICAgICdyZW1peCcsXHJcbiAgICAncmVtbmFudCcsXHJcbiAgICAncmVtb2RlbGVyJyxcclxuICAgICdyZW1vbGQnLFxyXG4gICAgJ3JlbW9yc2UnLFxyXG4gICAgJ3JlbW90ZScsXHJcbiAgICAncmVtb3ZhYmxlJyxcclxuICAgICdyZW1vdmFsJyxcclxuICAgICdyZW1vdmVkJyxcclxuICAgICdyZW1vdmVyJyxcclxuICAgICdyZW1vdmluZycsXHJcbiAgICAncmVuYW1lJyxcclxuICAgICdyZW5kZXJlcicsXHJcbiAgICAncmVuZGVyaW5nJyxcclxuICAgICdyZW5kaXRpb24nLFxyXG4gICAgJ3JlbmVnYWRlJyxcclxuICAgICdyZW5ld2FibGUnLFxyXG4gICAgJ3JlbmV3YWJseScsXHJcbiAgICAncmVuZXdhbCcsXHJcbiAgICAncmVuZXdlZCcsXHJcbiAgICAncmVub3VuY2UnLFxyXG4gICAgJ3Jlbm92YXRlJyxcclxuICAgICdyZW5vdmF0b3InLFxyXG4gICAgJ3JlbnRhYmxlJyxcclxuICAgICdyZW50YWwnLFxyXG4gICAgJ3JlbnRlZCcsXHJcbiAgICAncmVudGVyJyxcclxuICAgICdyZW9jY3VweScsXHJcbiAgICAncmVvY2N1cicsXHJcbiAgICAncmVvcGVuJyxcclxuICAgICdyZW9yZGVyJyxcclxuICAgICdyZXBhY2thZ2UnLFxyXG4gICAgJ3JlcGFja2luZycsXHJcbiAgICAncmVwYWludCcsXHJcbiAgICAncmVwYWlyJyxcclxuICAgICdyZXBhdmUnLFxyXG4gICAgJ3JlcGF5aW5nJyxcclxuICAgICdyZXBheW1lbnQnLFxyXG4gICAgJ3JlcGVhbCcsXHJcbiAgICAncmVwZWF0ZWQnLFxyXG4gICAgJ3JlcGVhdGVyJyxcclxuICAgICdyZXBlbnQnLFxyXG4gICAgJ3JlcGhyYXNlJyxcclxuICAgICdyZXBsYWNlJyxcclxuICAgICdyZXBsYXknLFxyXG4gICAgJ3JlcGxpY2EnLFxyXG4gICAgJ3JlcGx5JyxcclxuICAgICdyZXBvcnRlcicsXHJcbiAgICAncmVwb3NlJyxcclxuICAgICdyZXBvc3Nlc3MnLFxyXG4gICAgJ3JlcG9zdCcsXHJcbiAgICAncmVwcmVzc2VkJyxcclxuICAgICdyZXByaW1hbmQnLFxyXG4gICAgJ3JlcHJpbnQnLFxyXG4gICAgJ3JlcHJpc2UnLFxyXG4gICAgJ3JlcHJvYWNoJyxcclxuICAgICdyZXByb2Nlc3MnLFxyXG4gICAgJ3JlcHJvZHVjZScsXHJcbiAgICAncmVwcm9ncmFtJyxcclxuICAgICdyZXBzJyxcclxuICAgICdyZXB0aWxlJyxcclxuICAgICdyZXB0aWxpYW4nLFxyXG4gICAgJ3JlcHVnbmFudCcsXHJcbiAgICAncmVwdWxzaW9uJyxcclxuICAgICdyZXB1bHNpdmUnLFxyXG4gICAgJ3JlcHVycG9zZScsXHJcbiAgICAncmVwdXRhYmxlJyxcclxuICAgICdyZXB1dGFibHknLFxyXG4gICAgJ3JlcXVlc3QnLFxyXG4gICAgJ3JlcXVpcmUnLFxyXG4gICAgJ3JlcXVpc2l0ZScsXHJcbiAgICAncmVyb3V0ZScsXHJcbiAgICAncmVydW4nLFxyXG4gICAgJ3Jlc2FsZScsXHJcbiAgICAncmVzYW1wbGUnLFxyXG4gICAgJ3Jlc2N1ZXInLFxyXG4gICAgJ3Jlc2VhbCcsXHJcbiAgICAncmVzZWFyY2gnLFxyXG4gICAgJ3Jlc2VsZWN0JyxcclxuICAgICdyZXNlbGxlcicsXHJcbiAgICAncmVzZW1ibGUnLFxyXG4gICAgJ3Jlc2VuZCcsXHJcbiAgICAncmVzZW50JyxcclxuICAgICdyZXNldCcsXHJcbiAgICAncmVzaGFwZScsXHJcbiAgICAncmVzaG9vdCcsXHJcbiAgICAncmVzaHVmZmxlJyxcclxuICAgICdyZXNpZGVuY2UnLFxyXG4gICAgJ3Jlc2lkZW5jeScsXHJcbiAgICAncmVzaWRlbnQnLFxyXG4gICAgJ3Jlc2lkdWFsJyxcclxuICAgICdyZXNpZHVlJyxcclxuICAgICdyZXNpZ25lZCcsXHJcbiAgICAncmVzaWxpZW50JyxcclxuICAgICdyZXNpc3RhbnQnLFxyXG4gICAgJ3Jlc2lzdGluZycsXHJcbiAgICAncmVzaXplJyxcclxuICAgICdyZXNvbHV0ZScsXHJcbiAgICAncmVzb2x2ZWQnLFxyXG4gICAgJ3Jlc29uYW50JyxcclxuICAgICdyZXNvbmF0ZScsXHJcbiAgICAncmVzb3J0JyxcclxuICAgICdyZXNvdXJjZScsXHJcbiAgICAncmVzcGVjdCcsXHJcbiAgICAncmVzdWJtaXQnLFxyXG4gICAgJ3Jlc3VsdCcsXHJcbiAgICAncmVzdW1lJyxcclxuICAgICdyZXN1cHBseScsXHJcbiAgICAncmVzdXJmYWNlJyxcclxuICAgICdyZXN1cnJlY3QnLFxyXG4gICAgJ3JldGFpbCcsXHJcbiAgICAncmV0YWluZXInLFxyXG4gICAgJ3JldGFpbmluZycsXHJcbiAgICAncmV0YWtlJyxcclxuICAgICdyZXRhbGlhdGUnLFxyXG4gICAgJ3JldGVudGlvbicsXHJcbiAgICAncmV0aGluaycsXHJcbiAgICAncmV0aW5hbCcsXHJcbiAgICAncmV0aXJlZCcsXHJcbiAgICAncmV0aXJlZScsXHJcbiAgICAncmV0aXJpbmcnLFxyXG4gICAgJ3JldG9sZCcsXHJcbiAgICAncmV0b29sJyxcclxuICAgICdyZXRvcnRlZCcsXHJcbiAgICAncmV0b3VjaCcsXHJcbiAgICAncmV0cmFjZScsXHJcbiAgICAncmV0cmFjdCcsXHJcbiAgICAncmV0cmFpbicsXHJcbiAgICAncmV0cmVhZCcsXHJcbiAgICAncmV0cmVhdCcsXHJcbiAgICAncmV0cmlhbCcsXHJcbiAgICAncmV0cmlldmFsJyxcclxuICAgICdyZXRyaWV2ZXInLFxyXG4gICAgJ3JldHJ5JyxcclxuICAgICdyZXR1cm4nLFxyXG4gICAgJ3JldHlpbmcnLFxyXG4gICAgJ3JldHlwZScsXHJcbiAgICAncmV1bmlvbicsXHJcbiAgICAncmV1bml0ZScsXHJcbiAgICAncmV1c2FibGUnLFxyXG4gICAgJ3JldXNlJyxcclxuICAgICdyZXZlYWwnLFxyXG4gICAgJ3JldmVsZXInLFxyXG4gICAgJ3JldmVuZ2UnLFxyXG4gICAgJ3JldmVudWUnLFxyXG4gICAgJ3JldmVyYicsXHJcbiAgICAncmV2ZXJlZCcsXHJcbiAgICAncmV2ZXJlbmNlJyxcclxuICAgICdyZXZlcmVuZCcsXHJcbiAgICAncmV2ZXJzYWwnLFxyXG4gICAgJ3JldmVyc2UnLFxyXG4gICAgJ3JldmVyc2luZycsXHJcbiAgICAncmV2ZXJzaW9uJyxcclxuICAgICdyZXZlcnQnLFxyXG4gICAgJ3JldmlzYWJsZScsXHJcbiAgICAncmV2aXNlJyxcclxuICAgICdyZXZpc2lvbicsXHJcbiAgICAncmV2aXNpdCcsXHJcbiAgICAncmV2aXZhYmxlJyxcclxuICAgICdyZXZpdmFsJyxcclxuICAgICdyZXZpdmVyJyxcclxuICAgICdyZXZpdmluZycsXHJcbiAgICAncmV2b2NhYmxlJyxcclxuICAgICdyZXZva2UnLFxyXG4gICAgJ3Jldm9sdCcsXHJcbiAgICAncmV2b2x2ZXInLFxyXG4gICAgJ3Jldm9sdmluZycsXHJcbiAgICAncmV3YXJkJyxcclxuICAgICdyZXdhc2gnLFxyXG4gICAgJ3Jld2luZCcsXHJcbiAgICAncmV3aXJlJyxcclxuICAgICdyZXdvcmQnLFxyXG4gICAgJ3Jld29yaycsXHJcbiAgICAncmV3cmFwJyxcclxuICAgICdyZXdyaXRlJyxcclxuICAgICdyaHltZScsXHJcbiAgICAncmliYm9uJyxcclxuICAgICdyaWJjYWdlJyxcclxuICAgICdyaWNlJyxcclxuICAgICdyaWNoZXMnLFxyXG4gICAgJ3JpY2hseScsXHJcbiAgICAncmljaG5lc3MnLFxyXG4gICAgJ3JpY2tldHknLFxyXG4gICAgJ3JpY290dGEnLFxyXG4gICAgJ3JpZGRhbmNlJyxcclxuICAgICdyaWRkZW4nLFxyXG4gICAgJ3JpZGUnLFxyXG4gICAgJ3JpZGluZycsXHJcbiAgICAncmlmbGluZycsXHJcbiAgICAncmlmdCcsXHJcbiAgICAncmlnZ2luZycsXHJcbiAgICAncmlnaWQnLFxyXG4gICAgJ3JpZ29yJyxcclxuICAgICdyaW1sZXNzJyxcclxuICAgICdyaW1tZWQnLFxyXG4gICAgJ3JpbmQnLFxyXG4gICAgJ3JpbmsnLFxyXG4gICAgJ3JpbnNlJyxcclxuICAgICdyaW5zaW5nJyxcclxuICAgICdyaW90JyxcclxuICAgICdyaXBjb3JkJyxcclxuICAgICdyaXBlbmVzcycsXHJcbiAgICAncmlwZW5pbmcnLFxyXG4gICAgJ3JpcHBpbmcnLFxyXG4gICAgJ3JpcHBsZScsXHJcbiAgICAncmlwcGxpbmcnLFxyXG4gICAgJ3JpcHRpZGUnLFxyXG4gICAgJ3Jpc2UnLFxyXG4gICAgJ3Jpc2luZycsXHJcbiAgICAncmlzaycsXHJcbiAgICAncmlzb3R0bycsXHJcbiAgICAncml0YWxpbicsXHJcbiAgICAncml0enknLFxyXG4gICAgJ3JpdmFsJyxcclxuICAgICdyaXZlcmJhbmsnLFxyXG4gICAgJ3JpdmVyYmVkJyxcclxuICAgICdyaXZlcmJvYXQnLFxyXG4gICAgJ3JpdmVyc2lkZScsXHJcbiAgICAncml2ZXRlcicsXHJcbiAgICAncml2ZXRpbmcnLFxyXG4gICAgJ3JvYW1lcicsXHJcbiAgICAncm9hbWluZycsXHJcbiAgICAncm9hc3QnLFxyXG4gICAgJ3JvYmJpbmcnLFxyXG4gICAgJ3JvYmUnLFxyXG4gICAgJ3JvYmluJyxcclxuICAgICdyb2JvdGljcycsXHJcbiAgICAncm9idXN0JyxcclxuICAgICdyb2NrYmFuZCcsXHJcbiAgICAncm9ja2VyJyxcclxuICAgICdyb2NrZXQnLFxyXG4gICAgJ3JvY2tmaXNoJyxcclxuICAgICdyb2NraW5lc3MnLFxyXG4gICAgJ3JvY2tpbmcnLFxyXG4gICAgJ3JvY2tsaWtlJyxcclxuICAgICdyb2Nrc2xpZGUnLFxyXG4gICAgJ3JvY2tzdGFyJyxcclxuICAgICdyb2NreScsXHJcbiAgICAncm9ndWUnLFxyXG4gICAgJ3JvbWFuJyxcclxuICAgICdyb21wJyxcclxuICAgICdyb3BlJyxcclxuICAgICdyb3BpbmcnLFxyXG4gICAgJ3Jvc3RlcicsXHJcbiAgICAncm9zeScsXHJcbiAgICAncm90dGVuJyxcclxuICAgICdyb3R0aW5nJyxcclxuICAgICdyb3R1bmRhJyxcclxuICAgICdyb3VsZXR0ZScsXHJcbiAgICAncm91bmRpbmcnLFxyXG4gICAgJ3JvdW5kaXNoJyxcclxuICAgICdyb3VuZG5lc3MnLFxyXG4gICAgJ3JvdW5kdXAnLFxyXG4gICAgJ3JvdW5kd29ybScsXHJcbiAgICAncm91dGluZScsXHJcbiAgICAncm91dGluZycsXHJcbiAgICAncm92ZXInLFxyXG4gICAgJ3JvdmluZycsXHJcbiAgICAncm95YWwnLFxyXG4gICAgJ3J1YmJlZCcsXHJcbiAgICAncnViYmVyJyxcclxuICAgICdydWJiaW5nJyxcclxuICAgICdydWJibGUnLFxyXG4gICAgJ3J1YmRvd24nLFxyXG4gICAgJ3J1YnknLFxyXG4gICAgJ3J1Y2t1cycsXHJcbiAgICAncnVkZGVyJyxcclxuICAgICdydWcnLFxyXG4gICAgJ3J1aW5lZCcsXHJcbiAgICAncnVsZScsXHJcbiAgICAncnVtYmxlJyxcclxuICAgICdydW1ibGluZycsXHJcbiAgICAncnVtbWFnZScsXHJcbiAgICAncnVtb3InLFxyXG4gICAgJ3J1bmFyb3VuZCcsXHJcbiAgICAncnVuZG93bicsXHJcbiAgICAncnVubmVyJyxcclxuICAgICdydW5uaW5nJyxcclxuICAgICdydW5ueScsXHJcbiAgICAncnVudCcsXHJcbiAgICAncnVud2F5JyxcclxuICAgICdydXB0dXJlJyxcclxuICAgICdydXJhbCcsXHJcbiAgICAncnVzZScsXHJcbiAgICAncnVzaCcsXHJcbiAgICAncnVzdCcsXHJcbiAgICAncnV0JyxcclxuICAgICdzYWJiYXRoJyxcclxuICAgICdzYWJvdGFnZScsXHJcbiAgICAnc2FjcmFtZW50JyxcclxuICAgICdzYWNyZWQnLFxyXG4gICAgJ3NhY3JpZmljZScsXHJcbiAgICAnc2FkZGVuJyxcclxuICAgICdzYWRkbGViYWcnLFxyXG4gICAgJ3NhZGRsZWQnLFxyXG4gICAgJ3NhZGRsaW5nJyxcclxuICAgICdzYWRseScsXHJcbiAgICAnc2FkbmVzcycsXHJcbiAgICAnc2FmYXJpJyxcclxuICAgICdzYWZlZ3VhcmQnLFxyXG4gICAgJ3NhZmVob3VzZScsXHJcbiAgICAnc2FmZWx5JyxcclxuICAgICdzYWZlbmVzcycsXHJcbiAgICAnc2FmZnJvbicsXHJcbiAgICAnc2FnYScsXHJcbiAgICAnc2FnZScsXHJcbiAgICAnc2FnZ2luZycsXHJcbiAgICAnc2FnZ3knLFxyXG4gICAgJ3NhaWQnLFxyXG4gICAgJ3NhaW50JyxcclxuICAgICdzYWtlJyxcclxuICAgICdzYWxhZCcsXHJcbiAgICAnc2FsYW1pJyxcclxuICAgICdzYWxhcmllZCcsXHJcbiAgICAnc2FsYXJ5JyxcclxuICAgICdzYWxpbmUnLFxyXG4gICAgJ3NhbG9uJyxcclxuICAgICdzYWxvb24nLFxyXG4gICAgJ3NhbHNhJyxcclxuICAgICdzYWx0JyxcclxuICAgICdzYWx1dGFyeScsXHJcbiAgICAnc2FsdXRlJyxcclxuICAgICdzYWx2YWdlJyxcclxuICAgICdzYWx2YWdpbmcnLFxyXG4gICAgJ3NhbHZhdGlvbicsXHJcbiAgICAnc2FtZScsXHJcbiAgICAnc2FtcGxlJyxcclxuICAgICdzYW1wbGluZycsXHJcbiAgICAnc2FuY3Rpb24nLFxyXG4gICAgJ3NhbmN0aXR5JyxcclxuICAgICdzYW5jdHVhcnknLFxyXG4gICAgJ3NhbmRhbCcsXHJcbiAgICAnc2FuZGJhZycsXHJcbiAgICAnc2FuZGJhbmsnLFxyXG4gICAgJ3NhbmRiYXInLFxyXG4gICAgJ3NhbmRibGFzdCcsXHJcbiAgICAnc2FuZGJveCcsXHJcbiAgICAnc2FuZGVkJyxcclxuICAgICdzYW5kZmlzaCcsXHJcbiAgICAnc2FuZGluZycsXHJcbiAgICAnc2FuZGxvdCcsXHJcbiAgICAnc2FuZHBhcGVyJyxcclxuICAgICdzYW5kcGl0JyxcclxuICAgICdzYW5kc3RvbmUnLFxyXG4gICAgJ3NhbmRzdG9ybScsXHJcbiAgICAnc2FuZHdvcm0nLFxyXG4gICAgJ3NhbmR5JyxcclxuICAgICdzYW5pdGFyeScsXHJcbiAgICAnc2FuaXRpemVyJyxcclxuICAgICdzYW5rJyxcclxuICAgICdzYW50YScsXHJcbiAgICAnc2FwbGluZycsXHJcbiAgICAnc2FwcGluZXNzJyxcclxuICAgICdzYXBweScsXHJcbiAgICAnc2FyY2FzbScsXHJcbiAgICAnc2FyY2FzdGljJyxcclxuICAgICdzYXJkaW5lJyxcclxuICAgICdzYXNoJyxcclxuICAgICdzYXNxdWF0Y2gnLFxyXG4gICAgJ3Nhc3N5JyxcclxuICAgICdzYXRjaGVsJyxcclxuICAgICdzYXRpYWJsZScsXHJcbiAgICAnc2F0aW4nLFxyXG4gICAgJ3NhdGlyaWNhbCcsXHJcbiAgICAnc2F0aXNmaWVkJyxcclxuICAgICdzYXRpc2Z5JyxcclxuICAgICdzYXR1cmF0ZScsXHJcbiAgICAnc2F0dXJkYXknLFxyXG4gICAgJ3NhdWNpbmVzcycsXHJcbiAgICAnc2F1Y3knLFxyXG4gICAgJ3NhdW5hJyxcclxuICAgICdzYXZhZ2UnLFxyXG4gICAgJ3NhdmFubmEnLFxyXG4gICAgJ3NhdmVkJyxcclxuICAgICdzYXZpbmdzJyxcclxuICAgICdzYXZpb3InLFxyXG4gICAgJ3Nhdm9yJyxcclxuICAgICdzYXhvcGhvbmUnLFxyXG4gICAgJ3NheScsXHJcbiAgICAnc2NhYmJlZCcsXHJcbiAgICAnc2NhYmJ5JyxcclxuICAgICdzY2FsZGVkJyxcclxuICAgICdzY2FsZGluZycsXHJcbiAgICAnc2NhbGUnLFxyXG4gICAgJ3NjYWxpbmcnLFxyXG4gICAgJ3NjYWxsaW9uJyxcclxuICAgICdzY2FsbG9wJyxcclxuICAgICdzY2FscGluZycsXHJcbiAgICAnc2NhbScsXHJcbiAgICAnc2NhbmRhbCcsXHJcbiAgICAnc2Nhbm5lcicsXHJcbiAgICAnc2Nhbm5pbmcnLFxyXG4gICAgJ3NjYW50JyxcclxuICAgICdzY2FwZWdvYXQnLFxyXG4gICAgJ3NjYXJjZScsXHJcbiAgICAnc2NhcmNpdHknLFxyXG4gICAgJ3NjYXJlY3JvdycsXHJcbiAgICAnc2NhcmVkJyxcclxuICAgICdzY2FyZicsXHJcbiAgICAnc2NhcmlseScsXHJcbiAgICAnc2NhcmluZXNzJyxcclxuICAgICdzY2FycmluZycsXHJcbiAgICAnc2NhcnknLFxyXG4gICAgJ3NjYXZlbmdlcicsXHJcbiAgICAnc2NlbmljJyxcclxuICAgICdzY2hlZHVsZScsXHJcbiAgICAnc2NoZW1hdGljJyxcclxuICAgICdzY2hlbWUnLFxyXG4gICAgJ3NjaGVtaW5nJyxcclxuICAgICdzY2hpbGxpbmcnLFxyXG4gICAgJ3NjaG5hcHBzJyxcclxuICAgICdzY2hvbGFyJyxcclxuICAgICdzY2llbmNlJyxcclxuICAgICdzY2llbnRpc3QnLFxyXG4gICAgJ3NjaW9uJyxcclxuICAgICdzY29mZicsXHJcbiAgICAnc2NvbGRpbmcnLFxyXG4gICAgJ3Njb25lJyxcclxuICAgICdzY29vcCcsXHJcbiAgICAnc2Nvb3RlcicsXHJcbiAgICAnc2NvcGUnLFxyXG4gICAgJ3Njb3JjaCcsXHJcbiAgICAnc2NvcmVib29rJyxcclxuICAgICdzY29yZWNhcmQnLFxyXG4gICAgJ3Njb3JlZCcsXHJcbiAgICAnc2NvcmVsZXNzJyxcclxuICAgICdzY29yZXInLFxyXG4gICAgJ3Njb3JpbmcnLFxyXG4gICAgJ3Njb3JuJyxcclxuICAgICdzY29ycGlvbicsXHJcbiAgICAnc2NvdGNoJyxcclxuICAgICdzY291bmRyZWwnLFxyXG4gICAgJ3Njb3VyZWQnLFxyXG4gICAgJ3Njb3VyaW5nJyxcclxuICAgICdzY291dGluZycsXHJcbiAgICAnc2NvdXRzJyxcclxuICAgICdzY293bGluZycsXHJcbiAgICAnc2NyYWJibGUnLFxyXG4gICAgJ3NjcmFnZ2x5JyxcclxuICAgICdzY3JhbWJsZWQnLFxyXG4gICAgJ3NjcmFtYmxlcicsXHJcbiAgICAnc2NyYXAnLFxyXG4gICAgJ3NjcmF0Y2gnLFxyXG4gICAgJ3NjcmF3bnknLFxyXG4gICAgJ3NjcmVlbicsXHJcbiAgICAnc2NyaWJibGUnLFxyXG4gICAgJ3NjcmliZScsXHJcbiAgICAnc2NyaWJpbmcnLFxyXG4gICAgJ3NjcmltbWFnZScsXHJcbiAgICAnc2NyaXB0JyxcclxuICAgICdzY3JvbGwnLFxyXG4gICAgJ3Njcm9vZ2UnLFxyXG4gICAgJ3Njcm91bmdlcicsXHJcbiAgICAnc2NydWJiZWQnLFxyXG4gICAgJ3NjcnViYmVyJyxcclxuICAgICdzY3J1ZmZ5JyxcclxuICAgICdzY3J1bmNoJyxcclxuICAgICdzY3J1dGlueScsXHJcbiAgICAnc2N1YmEnLFxyXG4gICAgJ3NjdWZmJyxcclxuICAgICdzY3VscHRvcicsXHJcbiAgICAnc2N1bHB0dXJlJyxcclxuICAgICdzY3VydnknLFxyXG4gICAgJ3NjdXR0bGUnLFxyXG4gICAgJ3NlY2x1ZGVkJyxcclxuICAgICdzZWNsdWRpbmcnLFxyXG4gICAgJ3NlY2x1c2lvbicsXHJcbiAgICAnc2Vjb25kJyxcclxuICAgICdzZWNyZWN5JyxcclxuICAgICdzZWNyZXQnLFxyXG4gICAgJ3NlY3Rpb25hbCcsXHJcbiAgICAnc2VjdG9yJyxcclxuICAgICdzZWN1bGFyJyxcclxuICAgICdzZWN1cmVseScsXHJcbiAgICAnc2VjdXJpdHknLFxyXG4gICAgJ3NlZGFuJyxcclxuICAgICdzZWRhdGUnLFxyXG4gICAgJ3NlZGF0aW9uJyxcclxuICAgICdzZWRhdGl2ZScsXHJcbiAgICAnc2VkaW1lbnQnLFxyXG4gICAgJ3NlZHVjZScsXHJcbiAgICAnc2VkdWNpbmcnLFxyXG4gICAgJ3NlZ21lbnQnLFxyXG4gICAgJ3NlaXNtaWMnLFxyXG4gICAgJ3NlaXppbmcnLFxyXG4gICAgJ3NlbGRvbScsXHJcbiAgICAnc2VsZWN0ZWQnLFxyXG4gICAgJ3NlbGVjdGlvbicsXHJcbiAgICAnc2VsZWN0aXZlJyxcclxuICAgICdzZWxlY3RvcicsXHJcbiAgICAnc2VsZicsXHJcbiAgICAnc2VsdHplcicsXHJcbiAgICAnc2VtYW50aWMnLFxyXG4gICAgJ3NlbWVzdGVyJyxcclxuICAgICdzZW1pY29sb24nLFxyXG4gICAgJ3NlbWlmaW5hbCcsXHJcbiAgICAnc2VtaW5hcicsXHJcbiAgICAnc2VtaXNvZnQnLFxyXG4gICAgJ3NlbWlzd2VldCcsXHJcbiAgICAnc2VuYXRlJyxcclxuICAgICdzZW5hdG9yJyxcclxuICAgICdzZW5kJyxcclxuICAgICdzZW5pb3InLFxyXG4gICAgJ3Nlbm9yaXRhJyxcclxuICAgICdzZW5zYXRpb24nLFxyXG4gICAgJ3NlbnNpdGl2ZScsXHJcbiAgICAnc2Vuc2l0aXplJyxcclxuICAgICdzZW5zdWFsbHknLFxyXG4gICAgJ3NlbnN1b3VzJyxcclxuICAgICdzZXBpYScsXHJcbiAgICAnc2VwdGVtYmVyJyxcclxuICAgICdzZXB0aWMnLFxyXG4gICAgJ3NlcHR1bScsXHJcbiAgICAnc2VxdWVsJyxcclxuICAgICdzZXF1ZW5jZScsXHJcbiAgICAnc2VxdWVzdGVyJyxcclxuICAgICdzZXJpZXMnLFxyXG4gICAgJ3Nlcm1vbicsXHJcbiAgICAnc2Vyb3RvbmluJyxcclxuICAgICdzZXJwZW50JyxcclxuICAgICdzZXJyYXRlZCcsXHJcbiAgICAnc2VydmUnLFxyXG4gICAgJ3NlcnZpY2UnLFxyXG4gICAgJ3NlcnZpbmcnLFxyXG4gICAgJ3Nlc2FtZScsXHJcbiAgICAnc2Vzc2lvbnMnLFxyXG4gICAgJ3NldGJhY2snLFxyXG4gICAgJ3NldHRpbmcnLFxyXG4gICAgJ3NldHRsZScsXHJcbiAgICAnc2V0dGxpbmcnLFxyXG4gICAgJ3NldHVwJyxcclxuICAgICdzZXZlbmZvbGQnLFxyXG4gICAgJ3NldmVudGVlbicsXHJcbiAgICAnc2V2ZW50aCcsXHJcbiAgICAnc2V2ZW50eScsXHJcbiAgICAnc2V2ZXJpdHknLFxyXG4gICAgJ3NoYWJieScsXHJcbiAgICAnc2hhY2snLFxyXG4gICAgJ3NoYWRlZCcsXHJcbiAgICAnc2hhZGlseScsXHJcbiAgICAnc2hhZGluZXNzJyxcclxuICAgICdzaGFkaW5nJyxcclxuICAgICdzaGFkb3cnLFxyXG4gICAgJ3NoYWR5JyxcclxuICAgICdzaGFmdCcsXHJcbiAgICAnc2hha2FibGUnLFxyXG4gICAgJ3NoYWtpbHknLFxyXG4gICAgJ3NoYWtpbmVzcycsXHJcbiAgICAnc2hha2luZycsXHJcbiAgICAnc2hha3knLFxyXG4gICAgJ3NoYWxlJyxcclxuICAgICdzaGFsbG90JyxcclxuICAgICdzaGFsbG93JyxcclxuICAgICdzaGFtZScsXHJcbiAgICAnc2hhbXBvbycsXHJcbiAgICAnc2hhbXJvY2snLFxyXG4gICAgJ3NoYW5rJyxcclxuICAgICdzaGFudHknLFxyXG4gICAgJ3NoYXBlJyxcclxuICAgICdzaGFwaW5nJyxcclxuICAgICdzaGFyZScsXHJcbiAgICAnc2hhcnBlbmVyJyxcclxuICAgICdzaGFycGVyJyxcclxuICAgICdzaGFycGllJyxcclxuICAgICdzaGFycGx5JyxcclxuICAgICdzaGFycG5lc3MnLFxyXG4gICAgJ3NoYXdsJyxcclxuICAgICdzaGVhdGgnLFxyXG4gICAgJ3NoZWQnLFxyXG4gICAgJ3NoZWVwJyxcclxuICAgICdzaGVldCcsXHJcbiAgICAnc2hlbGYnLFxyXG4gICAgJ3NoZWxsJyxcclxuICAgICdzaGVsdGVyJyxcclxuICAgICdzaGVsdmUnLFxyXG4gICAgJ3NoZWx2aW5nJyxcclxuICAgICdzaGVycnknLFxyXG4gICAgJ3NoaWVsZCcsXHJcbiAgICAnc2hpZnRlcicsXHJcbiAgICAnc2hpZnRpbmcnLFxyXG4gICAgJ3NoaWZ0bGVzcycsXHJcbiAgICAnc2hpZnR5JyxcclxuICAgICdzaGltbWVyJyxcclxuICAgICdzaGltbXknLFxyXG4gICAgJ3NoaW5kaWcnLFxyXG4gICAgJ3NoaW5lJyxcclxuICAgICdzaGluZ2xlJyxcclxuICAgICdzaGluaW5lc3MnLFxyXG4gICAgJ3NoaW5pbmcnLFxyXG4gICAgJ3NoaW55JyxcclxuICAgICdzaGlwJyxcclxuICAgICdzaGlydCcsXHJcbiAgICAnc2hpdmVyaW5nJyxcclxuICAgICdzaG9jaycsXHJcbiAgICAnc2hvbmUnLFxyXG4gICAgJ3Nob3BsaWZ0JyxcclxuICAgICdzaG9wcGVyJyxcclxuICAgICdzaG9wcGluZycsXHJcbiAgICAnc2hvcHRhbGsnLFxyXG4gICAgJ3Nob3JlJyxcclxuICAgICdzaG9ydGFnZScsXHJcbiAgICAnc2hvcnRjYWtlJyxcclxuICAgICdzaG9ydGN1dCcsXHJcbiAgICAnc2hvcnRlbicsXHJcbiAgICAnc2hvcnRlcicsXHJcbiAgICAnc2hvcnRoYW5kJyxcclxuICAgICdzaG9ydGxpc3QnLFxyXG4gICAgJ3Nob3J0bHknLFxyXG4gICAgJ3Nob3J0bmVzcycsXHJcbiAgICAnc2hvcnRzJyxcclxuICAgICdzaG9ydHdhdmUnLFxyXG4gICAgJ3Nob3J0eScsXHJcbiAgICAnc2hvdXQnLFxyXG4gICAgJ3Nob3ZlJyxcclxuICAgICdzaG93Yml6JyxcclxuICAgICdzaG93Y2FzZScsXHJcbiAgICAnc2hvd2Rvd24nLFxyXG4gICAgJ3Nob3dlcicsXHJcbiAgICAnc2hvd2dpcmwnLFxyXG4gICAgJ3Nob3dpbmcnLFxyXG4gICAgJ3Nob3dtYW4nLFxyXG4gICAgJ3Nob3duJyxcclxuICAgICdzaG93b2ZmJyxcclxuICAgICdzaG93cGllY2UnLFxyXG4gICAgJ3Nob3dwbGFjZScsXHJcbiAgICAnc2hvd3Jvb20nLFxyXG4gICAgJ3Nob3d5JyxcclxuICAgICdzaHJhbmsnLFxyXG4gICAgJ3NocmFwbmVsJyxcclxuICAgICdzaHJlZGRlcicsXHJcbiAgICAnc2hyZWRkaW5nJyxcclxuICAgICdzaHJld2RseScsXHJcbiAgICAnc2hyaWVrJyxcclxuICAgICdzaHJpbGwnLFxyXG4gICAgJ3NocmltcCcsXHJcbiAgICAnc2hyaW5lJyxcclxuICAgICdzaHJpbmsnLFxyXG4gICAgJ3Nocml2ZWwnLFxyXG4gICAgJ3Nocm91ZGVkJyxcclxuICAgICdzaHJ1YmJlcnknLFxyXG4gICAgJ3NocnVicycsXHJcbiAgICAnc2hydWcnLFxyXG4gICAgJ3NocnVuaycsXHJcbiAgICAnc2h1Y2tpbmcnLFxyXG4gICAgJ3NodWRkZXInLFxyXG4gICAgJ3NodWZmbGUnLFxyXG4gICAgJ3NodWZmbGluZycsXHJcbiAgICAnc2h1bicsXHJcbiAgICAnc2h1c2gnLFxyXG4gICAgJ3NodXQnLFxyXG4gICAgJ3NoeScsXHJcbiAgICAnc2lhbWVzZScsXHJcbiAgICAnc2liZXJpYW4nLFxyXG4gICAgJ3NpYmxpbmcnLFxyXG4gICAgJ3NpZGluZycsXHJcbiAgICAnc2llcnJhJyxcclxuICAgICdzaWVzdGEnLFxyXG4gICAgJ3NpZnQnLFxyXG4gICAgJ3NpZ2hpbmcnLFxyXG4gICAgJ3NpbGVuY2VkJyxcclxuICAgICdzaWxlbmNlcicsXHJcbiAgICAnc2lsZW50JyxcclxuICAgICdzaWxpY2EnLFxyXG4gICAgJ3NpbGljb24nLFxyXG4gICAgJ3NpbGsnLFxyXG4gICAgJ3NpbGxpbmVzcycsXHJcbiAgICAnc2lsbHknLFxyXG4gICAgJ3NpbG8nLFxyXG4gICAgJ3NpbHQnLFxyXG4gICAgJ3NpbHZlcicsXHJcbiAgICAnc2ltaWxhcmx5JyxcclxuICAgICdzaW1pbGUnLFxyXG4gICAgJ3NpbW1lcmluZycsXHJcbiAgICAnc2ltcGxlJyxcclxuICAgICdzaW1wbGlmeScsXHJcbiAgICAnc2ltcGx5JyxcclxuICAgICdzaW5jZXJlJyxcclxuICAgICdzaW5jZXJpdHknLFxyXG4gICAgJ3NpbmdlcicsXHJcbiAgICAnc2luZ2luZycsXHJcbiAgICAnc2luZ2xlJyxcclxuICAgICdzaW5ndWxhcicsXHJcbiAgICAnc2luaXN0ZXInLFxyXG4gICAgJ3Npbmxlc3MnLFxyXG4gICAgJ3Npbm5lcicsXHJcbiAgICAnc2ludW91cycsXHJcbiAgICAnc2lwJyxcclxuICAgICdzaXJlbicsXHJcbiAgICAnc2lzdGVyJyxcclxuICAgICdzaXRjb20nLFxyXG4gICAgJ3NpdHRlcicsXHJcbiAgICAnc2l0dGluZycsXHJcbiAgICAnc2l0dWF0ZWQnLFxyXG4gICAgJ3NpdHVhdGlvbicsXHJcbiAgICAnc2l4Zm9sZCcsXHJcbiAgICAnc2l4dGVlbicsXHJcbiAgICAnc2l4dGgnLFxyXG4gICAgJ3NpeHRpZXMnLFxyXG4gICAgJ3NpeHRpZXRoJyxcclxuICAgICdzaXh0eWZvbGQnLFxyXG4gICAgJ3NpemFibGUnLFxyXG4gICAgJ3NpemFibHknLFxyXG4gICAgJ3NpemUnLFxyXG4gICAgJ3NpemluZycsXHJcbiAgICAnc2l6emxlJyxcclxuICAgICdzaXp6bGluZycsXHJcbiAgICAnc2thdGVyJyxcclxuICAgICdza2F0aW5nJyxcclxuICAgICdza2VkYWRkbGUnLFxyXG4gICAgJ3NrZWxldGFsJyxcclxuICAgICdza2VsZXRvbicsXHJcbiAgICAnc2tlcHRpYycsXHJcbiAgICAnc2tldGNoJyxcclxuICAgICdza2V3ZWQnLFxyXG4gICAgJ3NrZXdlcicsXHJcbiAgICAnc2tpZCcsXHJcbiAgICAnc2tpZWQnLFxyXG4gICAgJ3NraWVyJyxcclxuICAgICdza2llcycsXHJcbiAgICAnc2tpaW5nJyxcclxuICAgICdza2lsbGVkJyxcclxuICAgICdza2lsbGV0JyxcclxuICAgICdza2lsbGZ1bCcsXHJcbiAgICAnc2tpbW1lZCcsXHJcbiAgICAnc2tpbW1lcicsXHJcbiAgICAnc2tpbW1pbmcnLFxyXG4gICAgJ3NraW1waWx5JyxcclxuICAgICdza2luY2FyZScsXHJcbiAgICAnc2tpbmhlYWQnLFxyXG4gICAgJ3NraW5sZXNzJyxcclxuICAgICdza2lubmluZycsXHJcbiAgICAnc2tpbm55JyxcclxuICAgICdza2ludGlnaHQnLFxyXG4gICAgJ3NraXBwZXInLFxyXG4gICAgJ3NraXBwaW5nJyxcclxuICAgICdza2lybWlzaCcsXHJcbiAgICAnc2tpcnQnLFxyXG4gICAgJ3NraXR0bGUnLFxyXG4gICAgJ3NreWRpdmVyJyxcclxuICAgICdza3lsaWdodCcsXHJcbiAgICAnc2t5bGluZScsXHJcbiAgICAnc2t5cGUnLFxyXG4gICAgJ3NreXJvY2tldCcsXHJcbiAgICAnc2t5d2FyZCcsXHJcbiAgICAnc2xhYicsXHJcbiAgICAnc2xhY2tlZCcsXHJcbiAgICAnc2xhY2tlcicsXHJcbiAgICAnc2xhY2tpbmcnLFxyXG4gICAgJ3NsYWNrbmVzcycsXHJcbiAgICAnc2xhY2tzJyxcclxuICAgICdzbGFpbicsXHJcbiAgICAnc2xhbScsXHJcbiAgICAnc2xhbmRlcicsXHJcbiAgICAnc2xhbmcnLFxyXG4gICAgJ3NsYXBwaW5nJyxcclxuICAgICdzbGFwc3RpY2snLFxyXG4gICAgJ3NsYXNoZWQnLFxyXG4gICAgJ3NsYXNoaW5nJyxcclxuICAgICdzbGF0ZScsXHJcbiAgICAnc2xhdGhlcicsXHJcbiAgICAnc2xhdycsXHJcbiAgICAnc2xlZCcsXHJcbiAgICAnc2xlZWsnLFxyXG4gICAgJ3NsZWVwJyxcclxuICAgICdzbGVldCcsXHJcbiAgICAnc2xlZXZlJyxcclxuICAgICdzbGVwdCcsXHJcbiAgICAnc2xpY2VhYmxlJyxcclxuICAgICdzbGljZWQnLFxyXG4gICAgJ3NsaWNlcicsXHJcbiAgICAnc2xpY2luZycsXHJcbiAgICAnc2xpY2snLFxyXG4gICAgJ3NsaWRlcicsXHJcbiAgICAnc2xpZGVzaG93JyxcclxuICAgICdzbGlkaW5nJyxcclxuICAgICdzbGlnaHRlZCcsXHJcbiAgICAnc2xpZ2h0aW5nJyxcclxuICAgICdzbGlnaHRseScsXHJcbiAgICAnc2xpbW5lc3MnLFxyXG4gICAgJ3NsaW15JyxcclxuICAgICdzbGluZ2luZycsXHJcbiAgICAnc2xpbmdzaG90JyxcclxuICAgICdzbGlua3knLFxyXG4gICAgJ3NsaXAnLFxyXG4gICAgJ3NsaXQnLFxyXG4gICAgJ3NsaXZlcicsXHJcbiAgICAnc2xvYmJlcnknLFxyXG4gICAgJ3Nsb2dhbicsXHJcbiAgICAnc2xvcGVkJyxcclxuICAgICdzbG9waW5nJyxcclxuICAgICdzbG9wcGlseScsXHJcbiAgICAnc2xvcHB5JyxcclxuICAgICdzbG90JyxcclxuICAgICdzbG91Y2hpbmcnLFxyXG4gICAgJ3Nsb3VjaHknLFxyXG4gICAgJ3NsdWRnZScsXHJcbiAgICAnc2x1ZycsXHJcbiAgICAnc2x1bScsXHJcbiAgICAnc2x1cnAnLFxyXG4gICAgJ3NsdXNoJyxcclxuICAgICdzbHknLFxyXG4gICAgJ3NtYWxsJyxcclxuICAgICdzbWFydGx5JyxcclxuICAgICdzbWFydG5lc3MnLFxyXG4gICAgJ3NtYXNoZXInLFxyXG4gICAgJ3NtYXNoaW5nJyxcclxuICAgICdzbWFzaHVwJyxcclxuICAgICdzbWVsbCcsXHJcbiAgICAnc21lbHRpbmcnLFxyXG4gICAgJ3NtaWxlJyxcclxuICAgICdzbWlsaW5nbHknLFxyXG4gICAgJ3NtaXJrJyxcclxuICAgICdzbWl0ZScsXHJcbiAgICAnc21pdGgnLFxyXG4gICAgJ3NtaXR0ZW4nLFxyXG4gICAgJ3Ntb2NrJyxcclxuICAgICdzbW9nJyxcclxuICAgICdzbW9rZWQnLFxyXG4gICAgJ3Ntb2tlbGVzcycsXHJcbiAgICAnc21va2luZXNzJyxcclxuICAgICdzbW9raW5nJyxcclxuICAgICdzbW9reScsXHJcbiAgICAnc21vbGRlcicsXHJcbiAgICAnc21vb3RoJyxcclxuICAgICdzbW90aGVyJyxcclxuICAgICdzbXVkZ2UnLFxyXG4gICAgJ3NtdWRneScsXHJcbiAgICAnc211Z2dsZXInLFxyXG4gICAgJ3NtdWdnbGluZycsXHJcbiAgICAnc211Z2x5JyxcclxuICAgICdzbXVnbmVzcycsXHJcbiAgICAnc25hY2snLFxyXG4gICAgJ3NuYWdnZWQnLFxyXG4gICAgJ3NuYWtpbmcnLFxyXG4gICAgJ3NuYXAnLFxyXG4gICAgJ3NuYXJlJyxcclxuICAgICdzbmFybCcsXHJcbiAgICAnc25henp5JyxcclxuICAgICdzbmVhaycsXHJcbiAgICAnc25lZXInLFxyXG4gICAgJ3NuZWV6ZScsXHJcbiAgICAnc25lZXppbmcnLFxyXG4gICAgJ3NuaWRlJyxcclxuICAgICdzbmlmZicsXHJcbiAgICAnc25pcHBldCcsXHJcbiAgICAnc25pcHBpbmcnLFxyXG4gICAgJ3NuaXRjaCcsXHJcbiAgICAnc25vb3BlcicsXHJcbiAgICAnc25vb3plJyxcclxuICAgICdzbm9yZScsXHJcbiAgICAnc25vcmluZycsXHJcbiAgICAnc25vcmtlbCcsXHJcbiAgICAnc25vcnQnLFxyXG4gICAgJ3Nub3V0JyxcclxuICAgICdzbm93YmlyZCcsXHJcbiAgICAnc25vd2JvYXJkJyxcclxuICAgICdzbm93Ym91bmQnLFxyXG4gICAgJ3Nub3djYXAnLFxyXG4gICAgJ3Nub3dkcmlmdCcsXHJcbiAgICAnc25vd2Ryb3AnLFxyXG4gICAgJ3Nub3dmYWxsJyxcclxuICAgICdzbm93ZmllbGQnLFxyXG4gICAgJ3Nub3dmbGFrZScsXHJcbiAgICAnc25vd2luZXNzJyxcclxuICAgICdzbm93bGVzcycsXHJcbiAgICAnc25vd21hbicsXHJcbiAgICAnc25vd3Bsb3cnLFxyXG4gICAgJ3Nub3dzaG9lJyxcclxuICAgICdzbm93c3Rvcm0nLFxyXG4gICAgJ3Nub3dzdWl0JyxcclxuICAgICdzbm93eScsXHJcbiAgICAnc251YicsXHJcbiAgICAnc251ZmYnLFxyXG4gICAgJ3NudWdnbGUnLFxyXG4gICAgJ3NudWdseScsXHJcbiAgICAnc251Z25lc3MnLFxyXG4gICAgJ3NwZWFrJyxcclxuICAgICdzcGVhcmZpc2gnLFxyXG4gICAgJ3NwZWFyaGVhZCcsXHJcbiAgICAnc3BlYXJtYW4nLFxyXG4gICAgJ3NwZWFybWludCcsXHJcbiAgICAnc3BlY2llcycsXHJcbiAgICAnc3BlY2ltZW4nLFxyXG4gICAgJ3NwZWNrZWQnLFxyXG4gICAgJ3NwZWNrbGVkJyxcclxuICAgICdzcGVja3MnLFxyXG4gICAgJ3NwZWN0YWNsZScsXHJcbiAgICAnc3BlY3RhdG9yJyxcclxuICAgICdzcGVjdHJ1bScsXHJcbiAgICAnc3BlY3VsYXRlJyxcclxuICAgICdzcGVlY2gnLFxyXG4gICAgJ3NwZWVkJyxcclxuICAgICdzcGVsbGJpbmQnLFxyXG4gICAgJ3NwZWxsZXInLFxyXG4gICAgJ3NwZWxsaW5nJyxcclxuICAgICdzcGVuZGFibGUnLFxyXG4gICAgJ3NwZW5kZXInLFxyXG4gICAgJ3NwZW5kaW5nJyxcclxuICAgICdzcGVudCcsXHJcbiAgICAnc3BldycsXHJcbiAgICAnc3BoZXJlJyxcclxuICAgICdzcGhlcmljYWwnLFxyXG4gICAgJ3NwaGlueCcsXHJcbiAgICAnc3BpZGVyJyxcclxuICAgICdzcGllZCcsXHJcbiAgICAnc3BpZmZ5JyxcclxuICAgICdzcGlsbCcsXHJcbiAgICAnc3BpbHQnLFxyXG4gICAgJ3NwaW5hY2gnLFxyXG4gICAgJ3NwaW5hbCcsXHJcbiAgICAnc3BpbmRsZScsXHJcbiAgICAnc3Bpbm5lcicsXHJcbiAgICAnc3Bpbm5pbmcnLFxyXG4gICAgJ3NwaW5vdXQnLFxyXG4gICAgJ3NwaW5zdGVyJyxcclxuICAgICdzcGlueScsXHJcbiAgICAnc3BpcmFsJyxcclxuICAgICdzcGlyaXRlZCcsXHJcbiAgICAnc3Bpcml0aXNtJyxcclxuICAgICdzcGlyaXRzJyxcclxuICAgICdzcGlyaXR1YWwnLFxyXG4gICAgJ3NwbGFzaGVkJyxcclxuICAgICdzcGxhc2hpbmcnLFxyXG4gICAgJ3NwbGFzaHknLFxyXG4gICAgJ3NwbGF0dGVyJyxcclxuICAgICdzcGxlZW4nLFxyXG4gICAgJ3NwbGVuZGlkJyxcclxuICAgICdzcGxlbmRvcicsXHJcbiAgICAnc3BsaWNlJyxcclxuICAgICdzcGxpY2luZycsXHJcbiAgICAnc3BsaW50ZXInLFxyXG4gICAgJ3NwbG90Y2h5JyxcclxuICAgICdzcGx1cmdlJyxcclxuICAgICdzcG9pbGFnZScsXHJcbiAgICAnc3BvaWxlZCcsXHJcbiAgICAnc3BvaWxlcicsXHJcbiAgICAnc3BvaWxpbmcnLFxyXG4gICAgJ3Nwb2lscycsXHJcbiAgICAnc3Bva2VuJyxcclxuICAgICdzcG9rZXNtYW4nLFxyXG4gICAgJ3Nwb25nZScsXHJcbiAgICAnc3Bvbmd5JyxcclxuICAgICdzcG9uc29yJyxcclxuICAgICdzcG9vZicsXHJcbiAgICAnc3Bvb2tpbHknLFxyXG4gICAgJ3Nwb29reScsXHJcbiAgICAnc3Bvb2wnLFxyXG4gICAgJ3Nwb29uJyxcclxuICAgICdzcG9yZScsXHJcbiAgICAnc3BvcnRpbmcnLFxyXG4gICAgJ3Nwb3J0cycsXHJcbiAgICAnc3BvcnR5JyxcclxuICAgICdzcG90bGVzcycsXHJcbiAgICAnc3BvdGxpZ2h0JyxcclxuICAgICdzcG90dGVkJyxcclxuICAgICdzcG90dGVyJyxcclxuICAgICdzcG90dGluZycsXHJcbiAgICAnc3BvdHR5JyxcclxuICAgICdzcG91c2FsJyxcclxuICAgICdzcG91c2UnLFxyXG4gICAgJ3Nwb3V0JyxcclxuICAgICdzcHJhaW4nLFxyXG4gICAgJ3NwcmFuZycsXHJcbiAgICAnc3ByYXdsJyxcclxuICAgICdzcHJheScsXHJcbiAgICAnc3ByZWUnLFxyXG4gICAgJ3NwcmlnJyxcclxuICAgICdzcHJpbmcnLFxyXG4gICAgJ3Nwcmlua2xlZCcsXHJcbiAgICAnc3ByaW5rbGVyJyxcclxuICAgICdzcHJpbnQnLFxyXG4gICAgJ3Nwcml0ZScsXHJcbiAgICAnc3Byb3V0JyxcclxuICAgICdzcHJ1Y2UnLFxyXG4gICAgJ3NwcnVuZycsXHJcbiAgICAnc3ByeScsXHJcbiAgICAnc3B1ZCcsXHJcbiAgICAnc3B1cicsXHJcbiAgICAnc3B1dHRlcicsXHJcbiAgICAnc3B5Z2xhc3MnLFxyXG4gICAgJ3NxdWFiYmxlJyxcclxuICAgICdzcXVhZCcsXHJcbiAgICAnc3F1YWxsJyxcclxuICAgICdzcXVhbmRlcicsXHJcbiAgICAnc3F1YXNoJyxcclxuICAgICdzcXVhdHRlZCcsXHJcbiAgICAnc3F1YXR0ZXInLFxyXG4gICAgJ3NxdWF0dGluZycsXHJcbiAgICAnc3F1ZWFrJyxcclxuICAgICdzcXVlYWxlcicsXHJcbiAgICAnc3F1ZWFsaW5nJyxcclxuICAgICdzcXVlYW1pc2gnLFxyXG4gICAgJ3NxdWVlZ2VlJyxcclxuICAgICdzcXVlZXplJyxcclxuICAgICdzcXVlZXppbmcnLFxyXG4gICAgJ3NxdWlkJyxcclxuICAgICdzcXVpZ2dsZScsXHJcbiAgICAnc3F1aWdnbHknLFxyXG4gICAgJ3NxdWludCcsXHJcbiAgICAnc3F1aXJlJyxcclxuICAgICdzcXVpcnQnLFxyXG4gICAgJ3NxdWlzaGllcicsXHJcbiAgICAnc3F1aXNoeScsXHJcbiAgICAnc3RhYmlsaXR5JyxcclxuICAgICdzdGFiaWxpemUnLFxyXG4gICAgJ3N0YWJsZScsXHJcbiAgICAnc3RhY2snLFxyXG4gICAgJ3N0YWRpdW0nLFxyXG4gICAgJ3N0YWZmJyxcclxuICAgICdzdGFnZScsXHJcbiAgICAnc3RhZ2luZycsXHJcbiAgICAnc3RhZ25hbnQnLFxyXG4gICAgJ3N0YWduYXRlJyxcclxuICAgICdzdGFpbmFibGUnLFxyXG4gICAgJ3N0YWluZWQnLFxyXG4gICAgJ3N0YWluaW5nJyxcclxuICAgICdzdGFpbmxlc3MnLFxyXG4gICAgJ3N0YWxlbWF0ZScsXHJcbiAgICAnc3RhbGVuZXNzJyxcclxuICAgICdzdGFsbGluZycsXHJcbiAgICAnc3RhbGxpb24nLFxyXG4gICAgJ3N0YW1pbmEnLFxyXG4gICAgJ3N0YW1tZXInLFxyXG4gICAgJ3N0YW1wJyxcclxuICAgICdzdGFuZCcsXHJcbiAgICAnc3RhbmsnLFxyXG4gICAgJ3N0YXBsZScsXHJcbiAgICAnc3RhcGxpbmcnLFxyXG4gICAgJ3N0YXJib2FyZCcsXHJcbiAgICAnc3RhcmNoJyxcclxuICAgICdzdGFyZG9tJyxcclxuICAgICdzdGFyZHVzdCcsXHJcbiAgICAnc3RhcmZpc2gnLFxyXG4gICAgJ3N0YXJnYXplcicsXHJcbiAgICAnc3RhcmluZycsXHJcbiAgICAnc3RhcmsnLFxyXG4gICAgJ3N0YXJsZXNzJyxcclxuICAgICdzdGFybGV0JyxcclxuICAgICdzdGFybGlnaHQnLFxyXG4gICAgJ3N0YXJsaXQnLFxyXG4gICAgJ3N0YXJyaW5nJyxcclxuICAgICdzdGFycnknLFxyXG4gICAgJ3N0YXJzaGlwJyxcclxuICAgICdzdGFydGVyJyxcclxuICAgICdzdGFydGluZycsXHJcbiAgICAnc3RhcnRsZScsXHJcbiAgICAnc3RhcnRsaW5nJyxcclxuICAgICdzdGFydHVwJyxcclxuICAgICdzdGFydmVkJyxcclxuICAgICdzdGFydmluZycsXHJcbiAgICAnc3Rhc2gnLFxyXG4gICAgJ3N0YXRlJyxcclxuICAgICdzdGF0aWMnLFxyXG4gICAgJ3N0YXRpc3RpYycsXHJcbiAgICAnc3RhdHVlJyxcclxuICAgICdzdGF0dXJlJyxcclxuICAgICdzdGF0dXMnLFxyXG4gICAgJ3N0YXR1dGUnLFxyXG4gICAgJ3N0YXR1dG9yeScsXHJcbiAgICAnc3RhdW5jaCcsXHJcbiAgICAnc3RheXMnLFxyXG4gICAgJ3N0ZWFkZmFzdCcsXHJcbiAgICAnc3RlYWRpZXInLFxyXG4gICAgJ3N0ZWFkaWx5JyxcclxuICAgICdzdGVhZHlpbmcnLFxyXG4gICAgJ3N0ZWFtJyxcclxuICAgICdzdGVlZCcsXHJcbiAgICAnc3RlZXAnLFxyXG4gICAgJ3N0ZWVyYWJsZScsXHJcbiAgICAnc3RlZXJpbmcnLFxyXG4gICAgJ3N0ZWVyc21hbicsXHJcbiAgICAnc3RlZ29zYXVyJyxcclxuICAgICdzdGVsbGFyJyxcclxuICAgICdzdGVtJyxcclxuICAgICdzdGVuY2gnLFxyXG4gICAgJ3N0ZW5jaWwnLFxyXG4gICAgJ3N0ZXAnLFxyXG4gICAgJ3N0ZXJlbycsXHJcbiAgICAnc3RlcmlsZScsXHJcbiAgICAnc3RlcmlsaXR5JyxcclxuICAgICdzdGVyaWxpemUnLFxyXG4gICAgJ3N0ZXJsaW5nJyxcclxuICAgICdzdGVybm5lc3MnLFxyXG4gICAgJ3N0ZXJudW0nLFxyXG4gICAgJ3N0ZXcnLFxyXG4gICAgJ3N0aWNrJyxcclxuICAgICdzdGlmZmVuJyxcclxuICAgICdzdGlmZmx5JyxcclxuICAgICdzdGlmZm5lc3MnLFxyXG4gICAgJ3N0aWZsZScsXHJcbiAgICAnc3RpZmxpbmcnLFxyXG4gICAgJ3N0aWxsbmVzcycsXHJcbiAgICAnc3RpbHQnLFxyXG4gICAgJ3N0aW11bGFudCcsXHJcbiAgICAnc3RpbXVsYXRlJyxcclxuICAgICdzdGltdWxpJyxcclxuICAgICdzdGltdWx1cycsXHJcbiAgICAnc3RpbmdlcicsXHJcbiAgICAnc3RpbmdpbHknLFxyXG4gICAgJ3N0aW5naW5nJyxcclxuICAgICdzdGluZ3JheScsXHJcbiAgICAnc3Rpbmd5JyxcclxuICAgICdzdGlua2luZycsXHJcbiAgICAnc3Rpbmt5JyxcclxuICAgICdzdGlwZW5kJyxcclxuICAgICdzdGlwdWxhdGUnLFxyXG4gICAgJ3N0aXInLFxyXG4gICAgJ3N0aXRjaCcsXHJcbiAgICAnc3RvY2snLFxyXG4gICAgJ3N0b2ljJyxcclxuICAgICdzdG9rZScsXHJcbiAgICAnc3RvbGUnLFxyXG4gICAgJ3N0b21wJyxcclxuICAgICdzdG9uZXdhbGwnLFxyXG4gICAgJ3N0b25ld2FyZScsXHJcbiAgICAnc3RvbmV3b3JrJyxcclxuICAgICdzdG9uaW5nJyxcclxuICAgICdzdG9ueScsXHJcbiAgICAnc3Rvb2QnLFxyXG4gICAgJ3N0b29nZScsXHJcbiAgICAnc3Rvb2wnLFxyXG4gICAgJ3N0b29wJyxcclxuICAgICdzdG9wbGlnaHQnLFxyXG4gICAgJ3N0b3BwYWJsZScsXHJcbiAgICAnc3RvcHBhZ2UnLFxyXG4gICAgJ3N0b3BwZWQnLFxyXG4gICAgJ3N0b3BwZXInLFxyXG4gICAgJ3N0b3BwaW5nJyxcclxuICAgICdzdG9wd2F0Y2gnLFxyXG4gICAgJ3N0b3JhYmxlJyxcclxuICAgICdzdG9yYWdlJyxcclxuICAgICdzdG9yZXJvb20nLFxyXG4gICAgJ3N0b3Jld2lkZScsXHJcbiAgICAnc3Rvcm0nLFxyXG4gICAgJ3N0b3V0JyxcclxuICAgICdzdG92ZScsXHJcbiAgICAnc3Rvd2F3YXknLFxyXG4gICAgJ3N0b3dpbmcnLFxyXG4gICAgJ3N0cmFkZGxlJyxcclxuICAgICdzdHJhZ2dsZXInLFxyXG4gICAgJ3N0cmFpbmVkJyxcclxuICAgICdzdHJhaW5lcicsXHJcbiAgICAnc3RyYWluaW5nJyxcclxuICAgICdzdHJhbmdlbHknLFxyXG4gICAgJ3N0cmFuZ2VyJyxcclxuICAgICdzdHJhbmdsZScsXHJcbiAgICAnc3RyYXRlZ2ljJyxcclxuICAgICdzdHJhdGVneScsXHJcbiAgICAnc3RyYXR1cycsXHJcbiAgICAnc3RyYXcnLFxyXG4gICAgJ3N0cmF5JyxcclxuICAgICdzdHJlYWsnLFxyXG4gICAgJ3N0cmVhbScsXHJcbiAgICAnc3RyZWV0JyxcclxuICAgICdzdHJlbmd0aCcsXHJcbiAgICAnc3RyZW51b3VzJyxcclxuICAgICdzdHJlcCcsXHJcbiAgICAnc3RyZXNzJyxcclxuICAgICdzdHJldGNoJyxcclxuICAgICdzdHJld24nLFxyXG4gICAgJ3N0cmlja2VuJyxcclxuICAgICdzdHJpY3QnLFxyXG4gICAgJ3N0cmlkZScsXHJcbiAgICAnc3RyaWZlJyxcclxuICAgICdzdHJpa2UnLFxyXG4gICAgJ3N0cmlraW5nJyxcclxuICAgICdzdHJpdmUnLFxyXG4gICAgJ3N0cml2aW5nJyxcclxuICAgICdzdHJvYmUnLFxyXG4gICAgJ3N0cm9kZScsXHJcbiAgICAnc3Ryb2xsZXInLFxyXG4gICAgJ3N0cm9uZ2JveCcsXHJcbiAgICAnc3Ryb25nbHknLFxyXG4gICAgJ3N0cm9uZ21hbicsXHJcbiAgICAnc3RydWNrJyxcclxuICAgICdzdHJ1Y3R1cmUnLFxyXG4gICAgJ3N0cnVkZWwnLFxyXG4gICAgJ3N0cnVnZ2xlJyxcclxuICAgICdzdHJ1bScsXHJcbiAgICAnc3RydW5nJyxcclxuICAgICdzdHJ1dCcsXHJcbiAgICAnc3R1YmJlZCcsXHJcbiAgICAnc3R1YmJsZScsXHJcbiAgICAnc3R1YmJseScsXHJcbiAgICAnc3R1YmJvcm4nLFxyXG4gICAgJ3N0dWNjbycsXHJcbiAgICAnc3R1Y2snLFxyXG4gICAgJ3N0dWRlbnQnLFxyXG4gICAgJ3N0dWRpZWQnLFxyXG4gICAgJ3N0dWRpbycsXHJcbiAgICAnc3R1ZHknLFxyXG4gICAgJ3N0dWZmZWQnLFxyXG4gICAgJ3N0dWZmaW5nJyxcclxuICAgICdzdHVmZnknLFxyXG4gICAgJ3N0dW1ibGUnLFxyXG4gICAgJ3N0dW1ibGluZycsXHJcbiAgICAnc3R1bXAnLFxyXG4gICAgJ3N0dW5nJyxcclxuICAgICdzdHVubmVkJyxcclxuICAgICdzdHVubmVyJyxcclxuICAgICdzdHVubmluZycsXHJcbiAgICAnc3R1bnQnLFxyXG4gICAgJ3N0dXBvcicsXHJcbiAgICAnc3R1cmRpbHknLFxyXG4gICAgJ3N0dXJkeScsXHJcbiAgICAnc3R5bGluZycsXHJcbiAgICAnc3R5bGlzaGx5JyxcclxuICAgICdzdHlsaXN0JyxcclxuICAgICdzdHlsaXplZCcsXHJcbiAgICAnc3R5bHVzJyxcclxuICAgICdzdWF2ZScsXHJcbiAgICAnc3ViYXJjdGljJyxcclxuICAgICdzdWJhdG9taWMnLFxyXG4gICAgJ3N1YmRpdmlkZScsXHJcbiAgICAnc3ViZHVlZCcsXHJcbiAgICAnc3ViZHVpbmcnLFxyXG4gICAgJ3N1YmZsb29yJyxcclxuICAgICdzdWJncm91cCcsXHJcbiAgICAnc3ViaGVhZGVyJyxcclxuICAgICdzdWJqZWN0JyxcclxuICAgICdzdWJsZWFzZScsXHJcbiAgICAnc3VibGV0JyxcclxuICAgICdzdWJsZXZlbCcsXHJcbiAgICAnc3VibGltZScsXHJcbiAgICAnc3VibWFyaW5lJyxcclxuICAgICdzdWJtZXJnZScsXHJcbiAgICAnc3VibWVyc2VkJyxcclxuICAgICdzdWJtaXR0ZXInLFxyXG4gICAgJ3N1YnBhbmVsJyxcclxuICAgICdzdWJwYXInLFxyXG4gICAgJ3N1YnBsb3QnLFxyXG4gICAgJ3N1YnByaW1lJyxcclxuICAgICdzdWJzY3JpYmUnLFxyXG4gICAgJ3N1YnNjcmlwdCcsXHJcbiAgICAnc3Vic2VjdG9yJyxcclxuICAgICdzdWJzaWRlJyxcclxuICAgICdzdWJzaWRpbmcnLFxyXG4gICAgJ3N1YnNpZGl6ZScsXHJcbiAgICAnc3Vic2lkeScsXHJcbiAgICAnc3Vic29pbCcsXHJcbiAgICAnc3Vic29uaWMnLFxyXG4gICAgJ3N1YnN0YW5jZScsXHJcbiAgICAnc3Vic3lzdGVtJyxcclxuICAgICdzdWJ0ZXh0JyxcclxuICAgICdzdWJ0aXRsZScsXHJcbiAgICAnc3VidGx5JyxcclxuICAgICdzdWJ0b3RhbCcsXHJcbiAgICAnc3VidHJhY3QnLFxyXG4gICAgJ3N1YnR5cGUnLFxyXG4gICAgJ3N1YnVyYicsXHJcbiAgICAnc3Vid2F5JyxcclxuICAgICdzdWJ3b29mZXInLFxyXG4gICAgJ3N1Ynplcm8nLFxyXG4gICAgJ3N1Y2N1bGVudCcsXHJcbiAgICAnc3VjaCcsXHJcbiAgICAnc3VjdGlvbicsXHJcbiAgICAnc3VkZGVuJyxcclxuICAgICdzdWRva3UnLFxyXG4gICAgJ3N1ZHMnLFxyXG4gICAgJ3N1ZmZlcmVyJyxcclxuICAgICdzdWZmZXJpbmcnLFxyXG4gICAgJ3N1ZmZpY2UnLFxyXG4gICAgJ3N1ZmZpeCcsXHJcbiAgICAnc3VmZm9jYXRlJyxcclxuICAgICdzdWZmcmFnZScsXHJcbiAgICAnc3VnYXInLFxyXG4gICAgJ3N1Z2dlc3QnLFxyXG4gICAgJ3N1aW5nJyxcclxuICAgICdzdWl0YWJsZScsXHJcbiAgICAnc3VpdGFibHknLFxyXG4gICAgJ3N1aXRjYXNlJyxcclxuICAgICdzdWl0b3InLFxyXG4gICAgJ3N1bGZhdGUnLFxyXG4gICAgJ3N1bGZpZGUnLFxyXG4gICAgJ3N1bGZpdGUnLFxyXG4gICAgJ3N1bGZ1cicsXHJcbiAgICAnc3VsaycsXHJcbiAgICAnc3VsbGVuJyxcclxuICAgICdzdWxwaGF0ZScsXHJcbiAgICAnc3VscGh1cmljJyxcclxuICAgICdzdWx0cnknLFxyXG4gICAgJ3N1cGVyYm93bCcsXHJcbiAgICAnc3VwZXJnbHVlJyxcclxuICAgICdzdXBlcmhlcm8nLFxyXG4gICAgJ3N1cGVyaW9yJyxcclxuICAgICdzdXBlcmpldCcsXHJcbiAgICAnc3VwZXJtYW4nLFxyXG4gICAgJ3N1cGVybW9tJyxcclxuICAgICdzdXBlcm5vdmEnLFxyXG4gICAgJ3N1cGVydmlzZScsXHJcbiAgICAnc3VwcGVyJyxcclxuICAgICdzdXBwbGllcicsXHJcbiAgICAnc3VwcGx5JyxcclxuICAgICdzdXBwb3J0JyxcclxuICAgICdzdXByZW1hY3knLFxyXG4gICAgJ3N1cHJlbWUnLFxyXG4gICAgJ3N1cmNoYXJnZScsXHJcbiAgICAnc3VyZWx5JyxcclxuICAgICdzdXJlbmVzcycsXHJcbiAgICAnc3VyZmFjZScsXHJcbiAgICAnc3VyZmFjaW5nJyxcclxuICAgICdzdXJmYm9hcmQnLFxyXG4gICAgJ3N1cmZlcicsXHJcbiAgICAnc3VyZ2VyeScsXHJcbiAgICAnc3VyZ2ljYWwnLFxyXG4gICAgJ3N1cmdpbmcnLFxyXG4gICAgJ3N1cm5hbWUnLFxyXG4gICAgJ3N1cnBhc3MnLFxyXG4gICAgJ3N1cnBsdXMnLFxyXG4gICAgJ3N1cnByaXNlJyxcclxuICAgICdzdXJyZWFsJyxcclxuICAgICdzdXJyZW5kZXInLFxyXG4gICAgJ3N1cnJvZ2F0ZScsXHJcbiAgICAnc3Vycm91bmQnLFxyXG4gICAgJ3N1cnZleScsXHJcbiAgICAnc3Vydml2YWwnLFxyXG4gICAgJ3N1cnZpdmUnLFxyXG4gICAgJ3N1cnZpdmluZycsXHJcbiAgICAnc3Vydml2b3InLFxyXG4gICAgJ3N1c2hpJyxcclxuICAgICdzdXNwZWN0JyxcclxuICAgICdzdXNwZW5kJyxcclxuICAgICdzdXNwZW5zZScsXHJcbiAgICAnc3VzdGFpbmVkJyxcclxuICAgICdzdXN0YWluZXInLFxyXG4gICAgJ3N3YWInLFxyXG4gICAgJ3N3YWRkbGluZycsXHJcbiAgICAnc3dhZ2dlcicsXHJcbiAgICAnc3dhbXBsYW5kJyxcclxuICAgICdzd2FuJyxcclxuICAgICdzd2FwcGluZycsXHJcbiAgICAnc3dhcm0nLFxyXG4gICAgJ3N3YXknLFxyXG4gICAgJ3N3ZWFyJyxcclxuICAgICdzd2VhdCcsXHJcbiAgICAnc3dlZXAnLFxyXG4gICAgJ3N3ZWxsJyxcclxuICAgICdzd2VwdCcsXHJcbiAgICAnc3dlcnZlJyxcclxuICAgICdzd2lmdGVyJyxcclxuICAgICdzd2lmdGx5JyxcclxuICAgICdzd2lmdG5lc3MnLFxyXG4gICAgJ3N3aW1tYWJsZScsXHJcbiAgICAnc3dpbW1lcicsXHJcbiAgICAnc3dpbW1pbmcnLFxyXG4gICAgJ3N3aW1zdWl0JyxcclxuICAgICdzd2ltd2VhcicsXHJcbiAgICAnc3dpbmdlcicsXHJcbiAgICAnc3dpbmdpbmcnLFxyXG4gICAgJ3N3aXBlJyxcclxuICAgICdzd2lybCcsXHJcbiAgICAnc3dpdGNoJyxcclxuICAgICdzd2l2ZWwnLFxyXG4gICAgJ3N3aXp6bGUnLFxyXG4gICAgJ3N3b29uZWQnLFxyXG4gICAgJ3N3b29wJyxcclxuICAgICdzd29vc2gnLFxyXG4gICAgJ3N3b3JlJyxcclxuICAgICdzd29ybicsXHJcbiAgICAnc3d1bmcnLFxyXG4gICAgJ3N5Y2Ftb3JlJyxcclxuICAgICdzeW1wYXRoeScsXHJcbiAgICAnc3ltcGhvbmljJyxcclxuICAgICdzeW1waG9ueScsXHJcbiAgICAnc3ltcHRvbScsXHJcbiAgICAnc3luYXBzZScsXHJcbiAgICAnc3luZHJvbWUnLFxyXG4gICAgJ3N5bmVyZ3knLFxyXG4gICAgJ3N5bm9wc2VzJyxcclxuICAgICdzeW5vcHNpcycsXHJcbiAgICAnc3ludGhlc2lzJyxcclxuICAgICdzeW50aGV0aWMnLFxyXG4gICAgJ3N5cnVwJyxcclxuICAgICdzeXN0ZW0nLFxyXG4gICAgJ3Qtc2hpcnQnLFxyXG4gICAgJ3RhYmFzY28nLFxyXG4gICAgJ3RhYmJ5JyxcclxuICAgICd0YWJsZWZ1bCcsXHJcbiAgICAndGFibGVzJyxcclxuICAgICd0YWJsZXQnLFxyXG4gICAgJ3RhYmxld2FyZScsXHJcbiAgICAndGFibG9pZCcsXHJcbiAgICAndGFja2luZXNzJyxcclxuICAgICd0YWNraW5nJyxcclxuICAgICd0YWNrbGUnLFxyXG4gICAgJ3RhY2tsaW5nJyxcclxuICAgICd0YWNreScsXHJcbiAgICAndGFjbycsXHJcbiAgICAndGFjdGZ1bCcsXHJcbiAgICAndGFjdGljYWwnLFxyXG4gICAgJ3RhY3RpY3MnLFxyXG4gICAgJ3RhY3RpbGUnLFxyXG4gICAgJ3RhY3RsZXNzJyxcclxuICAgICd0YWRwb2xlJyxcclxuICAgICd0YWVrd29uZG8nLFxyXG4gICAgJ3RhZycsXHJcbiAgICAndGFpbnRlZCcsXHJcbiAgICAndGFrZScsXHJcbiAgICAndGFraW5nJyxcclxuICAgICd0YWxjdW0nLFxyXG4gICAgJ3RhbGlzbWFuJyxcclxuICAgICd0YWxsJyxcclxuICAgICd0YWxvbicsXHJcbiAgICAndGFtYWxlJyxcclxuICAgICd0YW1lbmVzcycsXHJcbiAgICAndGFtZXInLFxyXG4gICAgJ3RhbXBlcicsXHJcbiAgICAndGFuaycsXHJcbiAgICAndGFubmVkJyxcclxuICAgICd0YW5uZXJ5JyxcclxuICAgICd0YW5uaW5nJyxcclxuICAgICd0YW50cnVtJyxcclxuICAgICd0YXBlbGVzcycsXHJcbiAgICAndGFwZXJlZCcsXHJcbiAgICAndGFwZXJpbmcnLFxyXG4gICAgJ3RhcGVzdHJ5JyxcclxuICAgICd0YXBpb2NhJyxcclxuICAgICd0YXBwaW5nJyxcclxuICAgICd0YXBzJyxcclxuICAgICd0YXJhbnR1bGEnLFxyXG4gICAgJ3RhcmdldCcsXHJcbiAgICAndGFybWFjJyxcclxuICAgICd0YXJuaXNoJyxcclxuICAgICd0YXJvdCcsXHJcbiAgICAndGFydGFyJyxcclxuICAgICd0YXJ0bHknLFxyXG4gICAgJ3RhcnRuZXNzJyxcclxuICAgICd0YXNrJyxcclxuICAgICd0YXNzZWwnLFxyXG4gICAgJ3Rhc3RlJyxcclxuICAgICd0YXN0aW5lc3MnLFxyXG4gICAgJ3Rhc3RpbmcnLFxyXG4gICAgJ3Rhc3R5JyxcclxuICAgICd0YXR0ZXJlZCcsXHJcbiAgICAndGF0dGxlJyxcclxuICAgICd0YXR0bGluZycsXHJcbiAgICAndGF0dG9vJyxcclxuICAgICd0YXVudCcsXHJcbiAgICAndGF2ZXJuJyxcclxuICAgICd0aGFuaycsXHJcbiAgICAndGhhdCcsXHJcbiAgICAndGhhdycsXHJcbiAgICAndGhlYXRlcicsXHJcbiAgICAndGhlYXRyaWNzJyxcclxuICAgICd0aGVlJyxcclxuICAgICd0aGVmdCcsXHJcbiAgICAndGhlbWUnLFxyXG4gICAgJ3RoZW9sb2d5JyxcclxuICAgICd0aGVvcml6ZScsXHJcbiAgICAndGhlcm1hbCcsXHJcbiAgICAndGhlcm1vcycsXHJcbiAgICAndGhlc2F1cnVzJyxcclxuICAgICd0aGVzZScsXHJcbiAgICAndGhlc2lzJyxcclxuICAgICd0aGVzcGlhbicsXHJcbiAgICAndGhpY2tlbicsXHJcbiAgICAndGhpY2tldCcsXHJcbiAgICAndGhpY2tuZXNzJyxcclxuICAgICd0aGlldmluZycsXHJcbiAgICAndGhpZXZpc2gnLFxyXG4gICAgJ3RoaWdoJyxcclxuICAgICd0aGltYmxlJyxcclxuICAgICd0aGluZycsXHJcbiAgICAndGhpbmsnLFxyXG4gICAgJ3RoaW5seScsXHJcbiAgICAndGhpbm5lcicsXHJcbiAgICAndGhpbm5lc3MnLFxyXG4gICAgJ3RoaW5uaW5nJyxcclxuICAgICd0aGlyc3RpbHknLFxyXG4gICAgJ3RoaXJzdGluZycsXHJcbiAgICAndGhpcnN0eScsXHJcbiAgICAndGhpcnRlZW4nLFxyXG4gICAgJ3RoaXJ0eScsXHJcbiAgICAndGhvbmcnLFxyXG4gICAgJ3Rob3JuJyxcclxuICAgICd0aG9zZScsXHJcbiAgICAndGhvdXNhbmQnLFxyXG4gICAgJ3RocmFzaCcsXHJcbiAgICAndGhyZWFkJyxcclxuICAgICd0aHJlYXRlbicsXHJcbiAgICAndGhyZWVmb2xkJyxcclxuICAgICd0aHJpZnQnLFxyXG4gICAgJ3RocmlsbCcsXHJcbiAgICAndGhyaXZlJyxcclxuICAgICd0aHJpdmluZycsXHJcbiAgICAndGhyb2F0JyxcclxuICAgICd0aHJvYmJpbmcnLFxyXG4gICAgJ3Rocm9uZycsXHJcbiAgICAndGhyb3R0bGUnLFxyXG4gICAgJ3Rocm93YXdheScsXHJcbiAgICAndGhyb3diYWNrJyxcclxuICAgICd0aHJvd2VyJyxcclxuICAgICd0aHJvd2luZycsXHJcbiAgICAndGh1ZCcsXHJcbiAgICAndGh1bWInLFxyXG4gICAgJ3RodW1waW5nJyxcclxuICAgICd0aHVyc2RheScsXHJcbiAgICAndGh1cycsXHJcbiAgICAndGh3YXJ0aW5nJyxcclxuICAgICd0aHlzZWxmJyxcclxuICAgICd0aWFyYScsXHJcbiAgICAndGliaWEnLFxyXG4gICAgJ3RpZGFsJyxcclxuICAgICd0aWRiaXQnLFxyXG4gICAgJ3RpZGluZXNzJyxcclxuICAgICd0aWRpbmdzJyxcclxuICAgICd0aWR5JyxcclxuICAgICd0aWdlcicsXHJcbiAgICAndGlnaHRlbicsXHJcbiAgICAndGlnaHRseScsXHJcbiAgICAndGlnaHRuZXNzJyxcclxuICAgICd0aWdodHJvcGUnLFxyXG4gICAgJ3RpZ2h0d2FkJyxcclxuICAgICd0aWdyZXNzJyxcclxuICAgICd0aWxlJyxcclxuICAgICd0aWxpbmcnLFxyXG4gICAgJ3RpbGwnLFxyXG4gICAgJ3RpbHQnLFxyXG4gICAgJ3RpbWlkJyxcclxuICAgICd0aW1pbmcnLFxyXG4gICAgJ3RpbW90aHknLFxyXG4gICAgJ3RpbmRlcmJveCcsXHJcbiAgICAndGluZm9pbCcsXHJcbiAgICAndGluZ2xlJyxcclxuICAgICd0aW5nbGluZycsXHJcbiAgICAndGluZ2x5JyxcclxuICAgICd0aW5rZXInLFxyXG4gICAgJ3RpbmtsaW5nJyxcclxuICAgICd0aW5zZWwnLFxyXG4gICAgJ3RpbnNtaXRoJyxcclxuICAgICd0aW50JyxcclxuICAgICd0aW53b3JrJyxcclxuICAgICd0aW55JyxcclxuICAgICd0aXBvZmYnLFxyXG4gICAgJ3RpcHBlZCcsXHJcbiAgICAndGlwcGVyJyxcclxuICAgICd0aXBwaW5nJyxcclxuICAgICd0aXB0b2VpbmcnLFxyXG4gICAgJ3RpcHRvcCcsXHJcbiAgICAndGlyaW5nJyxcclxuICAgICd0aXNzdWUnLFxyXG4gICAgJ3RyYWNlJyxcclxuICAgICd0cmFjaW5nJyxcclxuICAgICd0cmFjaycsXHJcbiAgICAndHJhY3Rpb24nLFxyXG4gICAgJ3RyYWN0b3InLFxyXG4gICAgJ3RyYWRlJyxcclxuICAgICd0cmFkaW5nJyxcclxuICAgICd0cmFkaXRpb24nLFxyXG4gICAgJ3RyYWZmaWMnLFxyXG4gICAgJ3RyYWdlZHknLFxyXG4gICAgJ3RyYWlsaW5nJyxcclxuICAgICd0cmFpbHNpZGUnLFxyXG4gICAgJ3RyYWluJyxcclxuICAgICd0cmFpdG9yJyxcclxuICAgICd0cmFuY2UnLFxyXG4gICAgJ3RyYW5xdWlsJyxcclxuICAgICd0cmFuc2ZlcicsXHJcbiAgICAndHJhbnNmb3JtJyxcclxuICAgICd0cmFuc2xhdGUnLFxyXG4gICAgJ3RyYW5zcGlyZScsXHJcbiAgICAndHJhbnNwb3J0JyxcclxuICAgICd0cmFuc3Bvc2UnLFxyXG4gICAgJ3RyYXBkb29yJyxcclxuICAgICd0cmFwZXplJyxcclxuICAgICd0cmFwZXpvaWQnLFxyXG4gICAgJ3RyYXBwZWQnLFxyXG4gICAgJ3RyYXBwZXInLFxyXG4gICAgJ3RyYXBwaW5nJyxcclxuICAgICd0cmFwcycsXHJcbiAgICAndHJhc2gnLFxyXG4gICAgJ3RyYXZlbCcsXHJcbiAgICAndHJhdmVyc2UnLFxyXG4gICAgJ3RyYXZlc3R5JyxcclxuICAgICd0cmF5JyxcclxuICAgICd0cmVhY2hlcnknLFxyXG4gICAgJ3RyZWFkaW5nJyxcclxuICAgICd0cmVhZG1pbGwnLFxyXG4gICAgJ3RyZWFzb24nLFxyXG4gICAgJ3RyZWF0JyxcclxuICAgICd0cmVibGUnLFxyXG4gICAgJ3RyZWUnLFxyXG4gICAgJ3RyZWtrZXInLFxyXG4gICAgJ3RyZW1ibGUnLFxyXG4gICAgJ3RyZW1ibGluZycsXHJcbiAgICAndHJlbW9yJyxcclxuICAgICd0cmVuY2gnLFxyXG4gICAgJ3RyZW5kJyxcclxuICAgICd0cmVzcGFzcycsXHJcbiAgICAndHJpYWdlJyxcclxuICAgICd0cmlhbCcsXHJcbiAgICAndHJpYW5nbGUnLFxyXG4gICAgJ3RyaWJlc21hbicsXHJcbiAgICAndHJpYnVuYWwnLFxyXG4gICAgJ3RyaWJ1bmUnLFxyXG4gICAgJ3RyaWJ1dGFyeScsXHJcbiAgICAndHJpYnV0ZScsXHJcbiAgICAndHJpY2VwcycsXHJcbiAgICAndHJpY2tlcnknLFxyXG4gICAgJ3RyaWNraWx5JyxcclxuICAgICd0cmlja2luZycsXHJcbiAgICAndHJpY2tsZScsXHJcbiAgICAndHJpY2tzdGVyJyxcclxuICAgICd0cmlja3knLFxyXG4gICAgJ3RyaWNvbG9yJyxcclxuICAgICd0cmljeWNsZScsXHJcbiAgICAndHJpZGVudCcsXHJcbiAgICAndHJpZWQnLFxyXG4gICAgJ3RyaWZsZScsXHJcbiAgICAndHJpZm9jYWxzJyxcclxuICAgICd0cmlsbGlvbicsXHJcbiAgICAndHJpbG9neScsXHJcbiAgICAndHJpbWVzdGVyJyxcclxuICAgICd0cmltbWVyJyxcclxuICAgICd0cmltbWluZycsXHJcbiAgICAndHJpbW5lc3MnLFxyXG4gICAgJ3RyaW5pdHknLFxyXG4gICAgJ3RyaW8nLFxyXG4gICAgJ3RyaXBvZCcsXHJcbiAgICAndHJpcHBpbmcnLFxyXG4gICAgJ3RyaXVtcGgnLFxyXG4gICAgJ3RyaXZpYWwnLFxyXG4gICAgJ3Ryb2RkZW4nLFxyXG4gICAgJ3Ryb2xsaW5nJyxcclxuICAgICd0cm9tYm9uZScsXHJcbiAgICAndHJvcGh5JyxcclxuICAgICd0cm9waWNhbCcsXHJcbiAgICAndHJvcGljcycsXHJcbiAgICAndHJvdWJsZScsXHJcbiAgICAndHJvdWJsaW5nJyxcclxuICAgICd0cm91Z2gnLFxyXG4gICAgJ3Ryb3VzZXJzJyxcclxuICAgICd0cm91dCcsXHJcbiAgICAndHJvd2VsJyxcclxuICAgICd0cnVjZScsXHJcbiAgICAndHJ1Y2snLFxyXG4gICAgJ3RydWZmbGUnLFxyXG4gICAgJ3RydW1wJyxcclxuICAgICd0cnVua3MnLFxyXG4gICAgJ3RydXN0YWJsZScsXHJcbiAgICAndHJ1c3RlZScsXHJcbiAgICAndHJ1c3RmdWwnLFxyXG4gICAgJ3RydXN0aW5nJyxcclxuICAgICd0cnVzdGxlc3MnLFxyXG4gICAgJ3RydXRoJyxcclxuICAgICd0cnknLFxyXG4gICAgJ3R1YmJ5JyxcclxuICAgICd0dWJlbGVzcycsXHJcbiAgICAndHVidWxhcicsXHJcbiAgICAndHVja2luZycsXHJcbiAgICAndHVlc2RheScsXHJcbiAgICAndHVnJyxcclxuICAgICd0dWl0aW9uJyxcclxuICAgICd0dWxpcCcsXHJcbiAgICAndHVtYmxlJyxcclxuICAgICd0dW1ibGluZycsXHJcbiAgICAndHVtbXknLFxyXG4gICAgJ3R1cmJhbicsXHJcbiAgICAndHVyYmluZScsXHJcbiAgICAndHVyYm9mYW4nLFxyXG4gICAgJ3R1cmJvamV0JyxcclxuICAgICd0dXJidWxlbnQnLFxyXG4gICAgJ3R1cmYnLFxyXG4gICAgJ3R1cmtleScsXHJcbiAgICAndHVybW9pbCcsXHJcbiAgICAndHVycmV0JyxcclxuICAgICd0dXJ0bGUnLFxyXG4gICAgJ3R1c2snLFxyXG4gICAgJ3R1dG9yJyxcclxuICAgICd0dXR1JyxcclxuICAgICd0dXgnLFxyXG4gICAgJ3R3ZWFrJyxcclxuICAgICd0d2VlZCcsXHJcbiAgICAndHdlZXQnLFxyXG4gICAgJ3R3ZWV6ZXJzJyxcclxuICAgICd0d2VsdmUnLFxyXG4gICAgJ3R3ZW50aWV0aCcsXHJcbiAgICAndHdlbnR5JyxcclxuICAgICd0d2VycCcsXHJcbiAgICAndHdpY2UnLFxyXG4gICAgJ3R3aWRkbGUnLFxyXG4gICAgJ3R3aWRkbGluZycsXHJcbiAgICAndHdpZycsXHJcbiAgICAndHdpbGlnaHQnLFxyXG4gICAgJ3R3aW5lJyxcclxuICAgICd0d2lucycsXHJcbiAgICAndHdpcmwnLFxyXG4gICAgJ3R3aXN0YWJsZScsXHJcbiAgICAndHdpc3RlZCcsXHJcbiAgICAndHdpc3RlcicsXHJcbiAgICAndHdpc3RpbmcnLFxyXG4gICAgJ3R3aXN0eScsXHJcbiAgICAndHdpdGNoJyxcclxuICAgICd0d2l0dGVyJyxcclxuICAgICd0eWNvb24nLFxyXG4gICAgJ3R5aW5nJyxcclxuICAgICd0eWtlJyxcclxuICAgICd1ZGRlcicsXHJcbiAgICAndWx0aW1hdGUnLFxyXG4gICAgJ3VsdGltYXR1bScsXHJcbiAgICAndWx0cmEnLFxyXG4gICAgJ3VtYmlsaWNhbCcsXHJcbiAgICAndW1icmVsbGEnLFxyXG4gICAgJ3VtcGlyZScsXHJcbiAgICAndW5hYmFzaGVkJyxcclxuICAgICd1bmFibGUnLFxyXG4gICAgJ3VuYWRvcm5lZCcsXHJcbiAgICAndW5hZHZpc2VkJyxcclxuICAgICd1bmFmcmFpZCcsXHJcbiAgICAndW5haXJlZCcsXHJcbiAgICAndW5hbGlnbmVkJyxcclxuICAgICd1bmFsdGVyZWQnLFxyXG4gICAgJ3VuYXJtb3JlZCcsXHJcbiAgICAndW5hc2hhbWVkJyxcclxuICAgICd1bmF1ZGl0ZWQnLFxyXG4gICAgJ3VuYXdha2UnLFxyXG4gICAgJ3VuYXdhcmUnLFxyXG4gICAgJ3VuYmFrZWQnLFxyXG4gICAgJ3VuYmFsYW5jZScsXHJcbiAgICAndW5iZWF0ZW4nLFxyXG4gICAgJ3VuYmVuZCcsXHJcbiAgICAndW5iZW50JyxcclxuICAgICd1bmJpYXNlZCcsXHJcbiAgICAndW5iaXR0ZW4nLFxyXG4gICAgJ3VuYmxlbmRlZCcsXHJcbiAgICAndW5ibGVzc2VkJyxcclxuICAgICd1bmJsb2NrJyxcclxuICAgICd1bmJvbHRlZCcsXHJcbiAgICAndW5ib3VuZGVkJyxcclxuICAgICd1bmJveGVkJyxcclxuICAgICd1bmJyYWlkZWQnLFxyXG4gICAgJ3VuYnJpZGxlJyxcclxuICAgICd1bmJyb2tlbicsXHJcbiAgICAndW5idWNrbGVkJyxcclxuICAgICd1bmJ1bmRsZScsXHJcbiAgICAndW5idXJuZWQnLFxyXG4gICAgJ3VuYnV0dG9uJyxcclxuICAgICd1bmNhbm55JyxcclxuICAgICd1bmNhcHBlZCcsXHJcbiAgICAndW5jYXJpbmcnLFxyXG4gICAgJ3VuY2VydGFpbicsXHJcbiAgICAndW5jaGFpbicsXHJcbiAgICAndW5jaGFuZ2VkJyxcclxuICAgICd1bmNoYXJ0ZWQnLFxyXG4gICAgJ3VuY2hlY2snLFxyXG4gICAgJ3VuY2l2aWwnLFxyXG4gICAgJ3VuY2xhZCcsXHJcbiAgICAndW5jbGFpbWVkJyxcclxuICAgICd1bmNsYW1wZWQnLFxyXG4gICAgJ3VuY2xhc3AnLFxyXG4gICAgJ3VuY2xlJyxcclxuICAgICd1bmNsaXAnLFxyXG4gICAgJ3VuY2xvYWsnLFxyXG4gICAgJ3VuY2xvZycsXHJcbiAgICAndW5jbG90aGVkJyxcclxuICAgICd1bmNvYXRlZCcsXHJcbiAgICAndW5jb2lsZWQnLFxyXG4gICAgJ3VuY29sb3JlZCcsXHJcbiAgICAndW5jb21iZWQnLFxyXG4gICAgJ3VuY29tbW9uJyxcclxuICAgICd1bmNvb2tlZCcsXHJcbiAgICAndW5jb3JrJyxcclxuICAgICd1bmNvcnJ1cHQnLFxyXG4gICAgJ3VuY291bnRlZCcsXHJcbiAgICAndW5jb3VwbGUnLFxyXG4gICAgJ3VuY291dGgnLFxyXG4gICAgJ3VuY292ZXInLFxyXG4gICAgJ3VuY3Jvc3MnLFxyXG4gICAgJ3VuY3Jvd24nLFxyXG4gICAgJ3VuY3J1c2hlZCcsXHJcbiAgICAndW5jdXJlZCcsXHJcbiAgICAndW5jdXJpb3VzJyxcclxuICAgICd1bmN1cmxlZCcsXHJcbiAgICAndW5jdXQnLFxyXG4gICAgJ3VuZGFtYWdlZCcsXHJcbiAgICAndW5kYXRlZCcsXHJcbiAgICAndW5kYXVudGVkJyxcclxuICAgICd1bmRlYWQnLFxyXG4gICAgJ3VuZGVjaWRlZCcsXHJcbiAgICAndW5kZWZpbmVkJyxcclxuICAgICd1bmRlcmFnZScsXHJcbiAgICAndW5kZXJhcm0nLFxyXG4gICAgJ3VuZGVyY29hdCcsXHJcbiAgICAndW5kZXJjb29rJyxcclxuICAgICd1bmRlcmN1dCcsXHJcbiAgICAndW5kZXJkb2cnLFxyXG4gICAgJ3VuZGVyZG9uZScsXHJcbiAgICAndW5kZXJmZWQnLFxyXG4gICAgJ3VuZGVyZmVlZCcsXHJcbiAgICAndW5kZXJmb290JyxcclxuICAgICd1bmRlcmdvJyxcclxuICAgICd1bmRlcmdyYWQnLFxyXG4gICAgJ3VuZGVyaGFuZCcsXHJcbiAgICAndW5kZXJsaW5lJyxcclxuICAgICd1bmRlcmxpbmcnLFxyXG4gICAgJ3VuZGVybWluZScsXHJcbiAgICAndW5kZXJtb3N0JyxcclxuICAgICd1bmRlcnBhaWQnLFxyXG4gICAgJ3VuZGVycGFzcycsXHJcbiAgICAndW5kZXJwYXknLFxyXG4gICAgJ3VuZGVycmF0ZScsXHJcbiAgICAndW5kZXJ0YWtlJyxcclxuICAgICd1bmRlcnRvbmUnLFxyXG4gICAgJ3VuZGVydG9vaycsXHJcbiAgICAndW5kZXJ0b3cnLFxyXG4gICAgJ3VuZGVydXNlJyxcclxuICAgICd1bmRlcndlYXInLFxyXG4gICAgJ3VuZGVyd2VudCcsXHJcbiAgICAndW5kZXJ3aXJlJyxcclxuICAgICd1bmRlc2lyZWQnLFxyXG4gICAgJ3VuZGlsdXRlZCcsXHJcbiAgICAndW5kaXZpZGVkJyxcclxuICAgICd1bmRvY2tlZCcsXHJcbiAgICAndW5kb2luZycsXHJcbiAgICAndW5kb25lJyxcclxuICAgICd1bmRyYWZ0ZWQnLFxyXG4gICAgJ3VuZHJlc3MnLFxyXG4gICAgJ3VuZHJpbGxlZCcsXHJcbiAgICAndW5kdXN0ZWQnLFxyXG4gICAgJ3VuZHlpbmcnLFxyXG4gICAgJ3VuZWFybmVkJyxcclxuICAgICd1bmVhcnRoJyxcclxuICAgICd1bmVhc2UnLFxyXG4gICAgJ3VuZWFzaWx5JyxcclxuICAgICd1bmVhc3knLFxyXG4gICAgJ3VuZWF0YWJsZScsXHJcbiAgICAndW5lYXRlbicsXHJcbiAgICAndW5lZGl0ZWQnLFxyXG4gICAgJ3VuZWxlY3RlZCcsXHJcbiAgICAndW5lbmRpbmcnLFxyXG4gICAgJ3VuZW5nYWdlZCcsXHJcbiAgICAndW5lbnZpZWQnLFxyXG4gICAgJ3VuZXF1YWwnLFxyXG4gICAgJ3VuZXRoaWNhbCcsXHJcbiAgICAndW5ldmVuJyxcclxuICAgICd1bmV4cGlyZWQnLFxyXG4gICAgJ3VuZXhwb3NlZCcsXHJcbiAgICAndW5mYWlsaW5nJyxcclxuICAgICd1bmZhaXInLFxyXG4gICAgJ3VuZmFzdGVuJyxcclxuICAgICd1bmZhemVkJyxcclxuICAgICd1bmZlZWxpbmcnLFxyXG4gICAgJ3VuZmlsZWQnLFxyXG4gICAgJ3VuZmlsbGVkJyxcclxuICAgICd1bmZpdHRlZCcsXHJcbiAgICAndW5maXR0aW5nJyxcclxuICAgICd1bmZpeGFibGUnLFxyXG4gICAgJ3VuZml4ZWQnLFxyXG4gICAgJ3VuZmxhd2VkJyxcclxuICAgICd1bmZvY3VzZWQnLFxyXG4gICAgJ3VuZm9sZCcsXHJcbiAgICAndW5mb3VuZGVkJyxcclxuICAgICd1bmZyYW1lZCcsXHJcbiAgICAndW5mcmVlemUnLFxyXG4gICAgJ3VuZnJvc3RlZCcsXHJcbiAgICAndW5mcm96ZW4nLFxyXG4gICAgJ3VuZnVuZGVkJyxcclxuICAgICd1bmdsYXplZCcsXHJcbiAgICAndW5nbG92ZWQnLFxyXG4gICAgJ3VuZ2x1ZScsXHJcbiAgICAndW5nb2RseScsXHJcbiAgICAndW5ncmFkZWQnLFxyXG4gICAgJ3VuZ3JlYXNlZCcsXHJcbiAgICAndW5ndWFyZGVkJyxcclxuICAgICd1bmd1aWRlZCcsXHJcbiAgICAndW5oYXBwaWx5JyxcclxuICAgICd1bmhhcHB5JyxcclxuICAgICd1bmhhcm1lZCcsXHJcbiAgICAndW5oZWFsdGh5JyxcclxuICAgICd1bmhlYXJkJyxcclxuICAgICd1bmhlYXJpbmcnLFxyXG4gICAgJ3VuaGVhdGVkJyxcclxuICAgICd1bmhlbHBmdWwnLFxyXG4gICAgJ3VuaGlkZGVuJyxcclxuICAgICd1bmhpbmdlJyxcclxuICAgICd1bmhpdGNoZWQnLFxyXG4gICAgJ3VuaG9seScsXHJcbiAgICAndW5ob29rJyxcclxuICAgICd1bmljb3JuJyxcclxuICAgICd1bmljeWNsZScsXHJcbiAgICAndW5pZmllZCcsXHJcbiAgICAndW5pZmllcicsXHJcbiAgICAndW5pZm9ybWVkJyxcclxuICAgICd1bmlmb3JtbHknLFxyXG4gICAgJ3VuaWZ5JyxcclxuICAgICd1bmltcGVkZWQnLFxyXG4gICAgJ3VuaW5qdXJlZCcsXHJcbiAgICAndW5pbnN0YWxsJyxcclxuICAgICd1bmluc3VyZWQnLFxyXG4gICAgJ3VuaW52aXRlZCcsXHJcbiAgICAndW5pb24nLFxyXG4gICAgJ3VuaXF1ZWx5JyxcclxuICAgICd1bmlzZXh1YWwnLFxyXG4gICAgJ3VuaXNvbicsXHJcbiAgICAndW5pc3N1ZWQnLFxyXG4gICAgJ3VuaXQnLFxyXG4gICAgJ3VuaXZlcnNhbCcsXHJcbiAgICAndW5pdmVyc2UnLFxyXG4gICAgJ3VuanVzdGx5JyxcclxuICAgICd1bmtlbXB0JyxcclxuICAgICd1bmtpbmQnLFxyXG4gICAgJ3Vua25vdHRlZCcsXHJcbiAgICAndW5rbm93aW5nJyxcclxuICAgICd1bmtub3duJyxcclxuICAgICd1bmxhY2VkJyxcclxuICAgICd1bmxhdGNoJyxcclxuICAgICd1bmxhd2Z1bCcsXHJcbiAgICAndW5sZWFkZWQnLFxyXG4gICAgJ3VubGVhcm5lZCcsXHJcbiAgICAndW5sZWFzaCcsXHJcbiAgICAndW5sZXNzJyxcclxuICAgICd1bmxldmVsZWQnLFxyXG4gICAgJ3VubGlnaHRlZCcsXHJcbiAgICAndW5saWthYmxlJyxcclxuICAgICd1bmxpbWl0ZWQnLFxyXG4gICAgJ3VubGluZWQnLFxyXG4gICAgJ3VubGlua2VkJyxcclxuICAgICd1bmxpc3RlZCcsXHJcbiAgICAndW5saXQnLFxyXG4gICAgJ3VubGl2YWJsZScsXHJcbiAgICAndW5sb2FkZWQnLFxyXG4gICAgJ3VubG9hZGVyJyxcclxuICAgICd1bmxvY2tlZCcsXHJcbiAgICAndW5sb2NraW5nJyxcclxuICAgICd1bmxvdmFibGUnLFxyXG4gICAgJ3VubG92ZWQnLFxyXG4gICAgJ3VubG92ZWx5JyxcclxuICAgICd1bmxvdmluZycsXHJcbiAgICAndW5sdWNraWx5JyxcclxuICAgICd1bmx1Y2t5JyxcclxuICAgICd1bm1hZGUnLFxyXG4gICAgJ3VubWFuYWdlZCcsXHJcbiAgICAndW5tYW5uZWQnLFxyXG4gICAgJ3VubWFwcGVkJyxcclxuICAgICd1bm1hcmtlZCcsXHJcbiAgICAndW5tYXNrZWQnLFxyXG4gICAgJ3VubWFza2luZycsXHJcbiAgICAndW5tYXRjaGVkJyxcclxuICAgICd1bm1pbmRmdWwnLFxyXG4gICAgJ3VubWl4YWJsZScsXHJcbiAgICAndW5taXhlZCcsXHJcbiAgICAndW5tb2xkZWQnLFxyXG4gICAgJ3VubW9yYWwnLFxyXG4gICAgJ3VubW92YWJsZScsXHJcbiAgICAndW5tb3ZlZCcsXHJcbiAgICAndW5tb3ZpbmcnLFxyXG4gICAgJ3VubmFtYWJsZScsXHJcbiAgICAndW5uYW1lZCcsXHJcbiAgICAndW5uYXR1cmFsJyxcclxuICAgICd1bm5lZWRlZCcsXHJcbiAgICAndW5uZXJ2ZScsXHJcbiAgICAndW5uZXJ2aW5nJyxcclxuICAgICd1bm5vdGljZWQnLFxyXG4gICAgJ3Vub3BlbmVkJyxcclxuICAgICd1bm9wcG9zZWQnLFxyXG4gICAgJ3VucGFjaycsXHJcbiAgICAndW5wYWRkZWQnLFxyXG4gICAgJ3VucGFpZCcsXHJcbiAgICAndW5wYWludGVkJyxcclxuICAgICd1bnBhaXJlZCcsXHJcbiAgICAndW5wYXZlZCcsXHJcbiAgICAndW5wZWVsZWQnLFxyXG4gICAgJ3VucGlja2VkJyxcclxuICAgICd1bnBpbG90ZWQnLFxyXG4gICAgJ3VucGlubmVkJyxcclxuICAgICd1bnBsYW5uZWQnLFxyXG4gICAgJ3VucGxhbnRlZCcsXHJcbiAgICAndW5wbGVhc2VkJyxcclxuICAgICd1bnBsZWRnZWQnLFxyXG4gICAgJ3VucGxvd2VkJyxcclxuICAgICd1bnBsdWcnLFxyXG4gICAgJ3VucG9wdWxhcicsXHJcbiAgICAndW5wcm92ZW4nLFxyXG4gICAgJ3VucXVvdGUnLFxyXG4gICAgJ3VucmFua2VkJyxcclxuICAgICd1bnJhdGVkJyxcclxuICAgICd1bnJhdmVsZWQnLFxyXG4gICAgJ3VucmVhY2hlZCcsXHJcbiAgICAndW5yZWFkJyxcclxuICAgICd1bnJlYWwnLFxyXG4gICAgJ3VucmVlbGluZycsXHJcbiAgICAndW5yZWZpbmVkJyxcclxuICAgICd1bnJlbGF0ZWQnLFxyXG4gICAgJ3VucmVudGVkJyxcclxuICAgICd1bnJlc3QnLFxyXG4gICAgJ3VucmV0aXJlZCcsXHJcbiAgICAndW5yZXZpc2VkJyxcclxuICAgICd1bnJpZ2dlZCcsXHJcbiAgICAndW5yaXBlJyxcclxuICAgICd1bnJpdmFsZWQnLFxyXG4gICAgJ3Vucm9hc3RlZCcsXHJcbiAgICAndW5yb2JlZCcsXHJcbiAgICAndW5yb2xsJyxcclxuICAgICd1bnJ1ZmZsZWQnLFxyXG4gICAgJ3VucnVseScsXHJcbiAgICAndW5ydXNoZWQnLFxyXG4gICAgJ3Vuc2FkZGxlJyxcclxuICAgICd1bnNhZmUnLFxyXG4gICAgJ3Vuc2FpZCcsXHJcbiAgICAndW5zYWx0ZWQnLFxyXG4gICAgJ3Vuc2F2ZWQnLFxyXG4gICAgJ3Vuc2F2b3J5JyxcclxuICAgICd1bnNjYXRoZWQnLFxyXG4gICAgJ3Vuc2NlbnRlZCcsXHJcbiAgICAndW5zY3JldycsXHJcbiAgICAndW5zZWFsZWQnLFxyXG4gICAgJ3Vuc2VhdGVkJyxcclxuICAgICd1bnNlY3VyZWQnLFxyXG4gICAgJ3Vuc2VlaW5nJyxcclxuICAgICd1bnNlZW1seScsXHJcbiAgICAndW5zZWVuJyxcclxuICAgICd1bnNlbGVjdCcsXHJcbiAgICAndW5zZWxmaXNoJyxcclxuICAgICd1bnNlbnQnLFxyXG4gICAgJ3Vuc2V0dGxlZCcsXHJcbiAgICAndW5zaGFja2xlJyxcclxuICAgICd1bnNoYWtlbicsXHJcbiAgICAndW5zaGF2ZWQnLFxyXG4gICAgJ3Vuc2hhdmVuJyxcclxuICAgICd1bnNoZWF0aGUnLFxyXG4gICAgJ3Vuc2hpcHBlZCcsXHJcbiAgICAndW5zaWdodGx5JyxcclxuICAgICd1bnNpZ25lZCcsXHJcbiAgICAndW5za2lsbGVkJyxcclxuICAgICd1bnNsaWNlZCcsXHJcbiAgICAndW5zbW9vdGgnLFxyXG4gICAgJ3Vuc25hcCcsXHJcbiAgICAndW5zb2NpYWwnLFxyXG4gICAgJ3Vuc29pbGVkJyxcclxuICAgICd1bnNvbGQnLFxyXG4gICAgJ3Vuc29sdmVkJyxcclxuICAgICd1bnNvcnRlZCcsXHJcbiAgICAndW5zcG9pbGVkJyxcclxuICAgICd1bnNwb2tlbicsXHJcbiAgICAndW5zdGFibGUnLFxyXG4gICAgJ3Vuc3RhZmZlZCcsXHJcbiAgICAndW5zdGFtcGVkJyxcclxuICAgICd1bnN0ZWFkeScsXHJcbiAgICAndW5zdGVyaWxlJyxcclxuICAgICd1bnN0aXJyZWQnLFxyXG4gICAgJ3Vuc3RpdGNoJyxcclxuICAgICd1bnN0b3BwZWQnLFxyXG4gICAgJ3Vuc3R1Y2snLFxyXG4gICAgJ3Vuc3R1ZmZlZCcsXHJcbiAgICAndW5zdHlsaXNoJyxcclxuICAgICd1bnN1YnRsZScsXHJcbiAgICAndW5zdWJ0bHknLFxyXG4gICAgJ3Vuc3VpdGVkJyxcclxuICAgICd1bnN1cmUnLFxyXG4gICAgJ3Vuc3dvcm4nLFxyXG4gICAgJ3VudGFnZ2VkJyxcclxuICAgICd1bnRhaW50ZWQnLFxyXG4gICAgJ3VudGFrZW4nLFxyXG4gICAgJ3VudGFtZWQnLFxyXG4gICAgJ3VudGFuZ2xlZCcsXHJcbiAgICAndW50YXBwZWQnLFxyXG4gICAgJ3VudGF4ZWQnLFxyXG4gICAgJ3VudGhhd2VkJyxcclxuICAgICd1bnRocmVhZCcsXHJcbiAgICAndW50aWR5JyxcclxuICAgICd1bnRpZScsXHJcbiAgICAndW50aWwnLFxyXG4gICAgJ3VudGltZWQnLFxyXG4gICAgJ3VudGltZWx5JyxcclxuICAgICd1bnRpdGxlZCcsXHJcbiAgICAndW50b2FzdGVkJyxcclxuICAgICd1bnRvbGQnLFxyXG4gICAgJ3VudG91Y2hlZCcsXHJcbiAgICAndW50cmFja2VkJyxcclxuICAgICd1bnRyYWluZWQnLFxyXG4gICAgJ3VudHJlYXRlZCcsXHJcbiAgICAndW50cmllZCcsXHJcbiAgICAndW50cmltbWVkJyxcclxuICAgICd1bnRydWUnLFxyXG4gICAgJ3VudHJ1dGgnLFxyXG4gICAgJ3VudHVybmVkJyxcclxuICAgICd1bnR3aXN0JyxcclxuICAgICd1bnR5aW5nJyxcclxuICAgICd1bnVzYWJsZScsXHJcbiAgICAndW51c2VkJyxcclxuICAgICd1bnVzdWFsJyxcclxuICAgICd1bnZhbHVlZCcsXHJcbiAgICAndW52YXJpZWQnLFxyXG4gICAgJ3VudmFyeWluZycsXHJcbiAgICAndW52ZWlsZWQnLFxyXG4gICAgJ3VudmVpbGluZycsXHJcbiAgICAndW52ZW50ZWQnLFxyXG4gICAgJ3VudmlhYmxlJyxcclxuICAgICd1bnZpc2l0ZWQnLFxyXG4gICAgJ3Vudm9jYWwnLFxyXG4gICAgJ3Vud2FudGVkJyxcclxuICAgICd1bndhcmxpa2UnLFxyXG4gICAgJ3Vud2FyeScsXHJcbiAgICAndW53YXNoZWQnLFxyXG4gICAgJ3Vud2F0Y2hlZCcsXHJcbiAgICAndW53ZWF2ZScsXHJcbiAgICAndW53ZWQnLFxyXG4gICAgJ3Vud2VsY29tZScsXHJcbiAgICAndW53ZWxsJyxcclxuICAgICd1bndpZWxkeScsXHJcbiAgICAndW53aWxsaW5nJyxcclxuICAgICd1bndpbmQnLFxyXG4gICAgJ3Vud2lyZWQnLFxyXG4gICAgJ3Vud2l0dGluZycsXHJcbiAgICAndW53b21hbmx5JyxcclxuICAgICd1bndvcmxkbHknLFxyXG4gICAgJ3Vud29ybicsXHJcbiAgICAndW53b3JyaWVkJyxcclxuICAgICd1bndvcnRoeScsXHJcbiAgICAndW53b3VuZCcsXHJcbiAgICAndW53b3ZlbicsXHJcbiAgICAndW53cmFwcGVkJyxcclxuICAgICd1bndyaXR0ZW4nLFxyXG4gICAgJ3VuemlwJyxcclxuICAgICd1cGJlYXQnLFxyXG4gICAgJ3VwY2h1Y2snLFxyXG4gICAgJ3VwY29taW5nJyxcclxuICAgICd1cGNvdW50cnknLFxyXG4gICAgJ3VwZGF0ZScsXHJcbiAgICAndXBmcm9udCcsXHJcbiAgICAndXBncmFkZScsXHJcbiAgICAndXBoZWF2YWwnLFxyXG4gICAgJ3VwaGVsZCcsXHJcbiAgICAndXBoaWxsJyxcclxuICAgICd1cGhvbGQnLFxyXG4gICAgJ3VwbGlmdGVkJyxcclxuICAgICd1cGxpZnRpbmcnLFxyXG4gICAgJ3VwbG9hZCcsXHJcbiAgICAndXBvbicsXHJcbiAgICAndXBwZXInLFxyXG4gICAgJ3VwcmlnaHQnLFxyXG4gICAgJ3VwcmlzaW5nJyxcclxuICAgICd1cHJpdmVyJyxcclxuICAgICd1cHJvYXInLFxyXG4gICAgJ3Vwcm9vdCcsXHJcbiAgICAndXBzY2FsZScsXHJcbiAgICAndXBzaWRlJyxcclxuICAgICd1cHN0YWdlJyxcclxuICAgICd1cHN0YWlycycsXHJcbiAgICAndXBzdGFydCcsXHJcbiAgICAndXBzdGF0ZScsXHJcbiAgICAndXBzdHJlYW0nLFxyXG4gICAgJ3Vwc3Ryb2tlJyxcclxuICAgICd1cHN3aW5nJyxcclxuICAgICd1cHRha2UnLFxyXG4gICAgJ3VwdGlnaHQnLFxyXG4gICAgJ3VwdG93bicsXHJcbiAgICAndXB0dXJuZWQnLFxyXG4gICAgJ3Vwd2FyZCcsXHJcbiAgICAndXB3aW5kJyxcclxuICAgICd1cmFuaXVtJyxcclxuICAgICd1cmJhbicsXHJcbiAgICAndXJjaGluJyxcclxuICAgICd1cmV0aGFuZScsXHJcbiAgICAndXJnZW5jeScsXHJcbiAgICAndXJnZW50JyxcclxuICAgICd1cmdpbmcnLFxyXG4gICAgJ3Vyb2xvZ2lzdCcsXHJcbiAgICAndXJvbG9neScsXHJcbiAgICAndXNhYmxlJyxcclxuICAgICd1c2FnZScsXHJcbiAgICAndXNlYWJsZScsXHJcbiAgICAndXNlZCcsXHJcbiAgICAndXNlbGVzc2x5JyxcclxuICAgICd1c2VyJyxcclxuICAgICd1c2hlcicsXHJcbiAgICAndXN1YWwnLFxyXG4gICAgJ3V0ZW5zaWwnLFxyXG4gICAgJ3V0aWxpdHknLFxyXG4gICAgJ3V0aWxpemUnLFxyXG4gICAgJ3V0bW9zdCcsXHJcbiAgICAndXRvcGlhJyxcclxuICAgICd1dHRlcicsXHJcbiAgICAndmFjYW5jeScsXHJcbiAgICAndmFjYW50JyxcclxuICAgICd2YWNhdGUnLFxyXG4gICAgJ3ZhY2F0aW9uJyxcclxuICAgICd2YWdhYm9uZCcsXHJcbiAgICAndmFncmFuY3knLFxyXG4gICAgJ3ZhZ3JhbnRseScsXHJcbiAgICAndmFndWVseScsXHJcbiAgICAndmFndWVuZXNzJyxcclxuICAgICd2YWxpYW50JyxcclxuICAgICd2YWxpZCcsXHJcbiAgICAndmFsaXVtJyxcclxuICAgICd2YWxsZXknLFxyXG4gICAgJ3ZhbHVhYmxlcycsXHJcbiAgICAndmFsdWUnLFxyXG4gICAgJ3ZhbmlsbGEnLFxyXG4gICAgJ3ZhbmlzaCcsXHJcbiAgICAndmFuaXR5JyxcclxuICAgICd2YW5xdWlzaCcsXHJcbiAgICAndmFudGFnZScsXHJcbiAgICAndmFwb3JpemVyJyxcclxuICAgICd2YXJpYWJsZScsXHJcbiAgICAndmFyaWFibHknLFxyXG4gICAgJ3ZhcmllZCcsXHJcbiAgICAndmFyaWV0eScsXHJcbiAgICAndmFyaW91cycsXHJcbiAgICAndmFybWludCcsXHJcbiAgICAndmFybmlzaCcsXHJcbiAgICAndmFyc2l0eScsXHJcbiAgICAndmFyeWluZycsXHJcbiAgICAndmFzY3VsYXInLFxyXG4gICAgJ3Zhc2VsaW5lJyxcclxuICAgICd2YXN0bHknLFxyXG4gICAgJ3Zhc3RuZXNzJyxcclxuICAgICd2ZWFsJyxcclxuICAgICd2ZWdhbicsXHJcbiAgICAndmVnZ2llJyxcclxuICAgICd2ZWhpY3VsYXInLFxyXG4gICAgJ3ZlbGNybycsXHJcbiAgICAndmVsb2NpdHknLFxyXG4gICAgJ3ZlbHZldCcsXHJcbiAgICAndmVuZGV0dGEnLFxyXG4gICAgJ3ZlbmRpbmcnLFxyXG4gICAgJ3ZlbmRvcicsXHJcbiAgICAndmVuZWVyaW5nJyxcclxuICAgICd2ZW5nZWZ1bCcsXHJcbiAgICAndmVub21vdXMnLFxyXG4gICAgJ3ZlbnRyaWNsZScsXHJcbiAgICAndmVudHVyZScsXHJcbiAgICAndmVudWUnLFxyXG4gICAgJ3ZlbnVzJyxcclxuICAgICd2ZXJiYWxpemUnLFxyXG4gICAgJ3ZlcmJhbGx5JyxcclxuICAgICd2ZXJib3NlJyxcclxuICAgICd2ZXJkaWN0JyxcclxuICAgICd2ZXJpZnknLFxyXG4gICAgJ3ZlcnNlJyxcclxuICAgICd2ZXJzaW9uJyxcclxuICAgICd2ZXJzdXMnLFxyXG4gICAgJ3ZlcnRlYnJhZScsXHJcbiAgICAndmVydGljYWwnLFxyXG4gICAgJ3ZlcnRpZ28nLFxyXG4gICAgJ3ZlcnknLFxyXG4gICAgJ3Zlc3NlbCcsXHJcbiAgICAndmVzdCcsXHJcbiAgICAndmV0ZXJhbicsXHJcbiAgICAndmV0bycsXHJcbiAgICAndmV4aW5nbHknLFxyXG4gICAgJ3ZpYWJpbGl0eScsXHJcbiAgICAndmlhYmxlJyxcclxuICAgICd2aWJlcycsXHJcbiAgICAndmljZScsXHJcbiAgICAndmljaW5pdHknLFxyXG4gICAgJ3ZpY3RvcnknLFxyXG4gICAgJ3ZpZGVvJyxcclxuICAgICd2aWV3YWJsZScsXHJcbiAgICAndmlld2VyJyxcclxuICAgICd2aWV3aW5nJyxcclxuICAgICd2aWV3bGVzcycsXHJcbiAgICAndmlld3BvaW50JyxcclxuICAgICd2aWdvcm91cycsXHJcbiAgICAndmlsbGFnZScsXHJcbiAgICAndmlsbGFpbicsXHJcbiAgICAndmluZGljYXRlJyxcclxuICAgICd2aW5leWFyZCcsXHJcbiAgICAndmludGFnZScsXHJcbiAgICAndmlvbGF0ZScsXHJcbiAgICAndmlvbGF0aW9uJyxcclxuICAgICd2aW9sYXRvcicsXHJcbiAgICAndmlvbGV0JyxcclxuICAgICd2aW9saW4nLFxyXG4gICAgJ3ZpcGVyJyxcclxuICAgICd2aXJhbCcsXHJcbiAgICAndmlydHVhbCcsXHJcbiAgICAndmlydHVvdXMnLFxyXG4gICAgJ3ZpcnVzJyxcclxuICAgICd2aXNhJyxcclxuICAgICd2aXNjb3NpdHknLFxyXG4gICAgJ3Zpc2NvdXMnLFxyXG4gICAgJ3Zpc2VsaWtlJyxcclxuICAgICd2aXNpYmxlJyxcclxuICAgICd2aXNpYmx5JyxcclxuICAgICd2aXNpb24nLFxyXG4gICAgJ3Zpc2l0aW5nJyxcclxuICAgICd2aXNpdG9yJyxcclxuICAgICd2aXNvcicsXHJcbiAgICAndmlzdGEnLFxyXG4gICAgJ3ZpdGFsaXR5JyxcclxuICAgICd2aXRhbGl6ZScsXHJcbiAgICAndml0YWxseScsXHJcbiAgICAndml0YW1pbnMnLFxyXG4gICAgJ3ZpdmFjaW91cycsXHJcbiAgICAndml2aWRseScsXHJcbiAgICAndml2aWRuZXNzJyxcclxuICAgICd2aXhlbicsXHJcbiAgICAndm9jYWxpc3QnLFxyXG4gICAgJ3ZvY2FsaXplJyxcclxuICAgICd2b2NhbGx5JyxcclxuICAgICd2b2NhdGlvbicsXHJcbiAgICAndm9pY2UnLFxyXG4gICAgJ3ZvaWNpbmcnLFxyXG4gICAgJ3ZvaWQnLFxyXG4gICAgJ3ZvbGF0aWxlJyxcclxuICAgICd2b2xsZXknLFxyXG4gICAgJ3ZvbHRhZ2UnLFxyXG4gICAgJ3ZvbHVtZXMnLFxyXG4gICAgJ3ZvdGVyJyxcclxuICAgICd2b3RpbmcnLFxyXG4gICAgJ3ZvdWNoZXInLFxyXG4gICAgJ3Zvd2VkJyxcclxuICAgICd2b3dlbCcsXHJcbiAgICAndm95YWdlJyxcclxuICAgICd3YWNraW5lc3MnLFxyXG4gICAgJ3dhZCcsXHJcbiAgICAnd2FmZXInLFxyXG4gICAgJ3dhZmZsZScsXHJcbiAgICAnd2FnZWQnLFxyXG4gICAgJ3dhZ2VyJyxcclxuICAgICd3YWdlcycsXHJcbiAgICAnd2FnZ2xlJyxcclxuICAgICd3YWdvbicsXHJcbiAgICAnd2FrZScsXHJcbiAgICAnd2FraW5nJyxcclxuICAgICd3YWxrJyxcclxuICAgICd3YWxtYXJ0JyxcclxuICAgICd3YWxudXQnLFxyXG4gICAgJ3dhbHJ1cycsXHJcbiAgICAnd2FsdHonLFxyXG4gICAgJ3dhbmQnLFxyXG4gICAgJ3dhbm5hYmUnLFxyXG4gICAgJ3dhbnRlZCcsXHJcbiAgICAnd2FudGluZycsXHJcbiAgICAnd2FzYWJpJyxcclxuICAgICd3YXNoYWJsZScsXHJcbiAgICAnd2FzaGJhc2luJyxcclxuICAgICd3YXNoYm9hcmQnLFxyXG4gICAgJ3dhc2hib3dsJyxcclxuICAgICd3YXNoY2xvdGgnLFxyXG4gICAgJ3dhc2hkYXknLFxyXG4gICAgJ3dhc2hlZCcsXHJcbiAgICAnd2FzaGVyJyxcclxuICAgICd3YXNoaG91c2UnLFxyXG4gICAgJ3dhc2hpbmcnLFxyXG4gICAgJ3dhc2hvdXQnLFxyXG4gICAgJ3dhc2hyb29tJyxcclxuICAgICd3YXNoc3RhbmQnLFxyXG4gICAgJ3dhc2h0dWInLFxyXG4gICAgJ3dhc3AnLFxyXG4gICAgJ3dhc3RpbmcnLFxyXG4gICAgJ3dhdGNoJyxcclxuICAgICd3YXRlcicsXHJcbiAgICAnd2F2aW5lc3MnLFxyXG4gICAgJ3dhdmluZycsXHJcbiAgICAnd2F2eScsXHJcbiAgICAnd2hhY2tpbmcnLFxyXG4gICAgJ3doYWNreScsXHJcbiAgICAnd2hhbScsXHJcbiAgICAnd2hhcmYnLFxyXG4gICAgJ3doZWF0JyxcclxuICAgICd3aGVuZXZlcicsXHJcbiAgICAnd2hpZmYnLFxyXG4gICAgJ3doaW1zaWNhbCcsXHJcbiAgICAnd2hpbm55JyxcclxuICAgICd3aGlueScsXHJcbiAgICAnd2hpc2tpbmcnLFxyXG4gICAgJ3dob2V2ZXInLFxyXG4gICAgJ3dob2xlJyxcclxuICAgICd3aG9tZXZlcicsXHJcbiAgICAnd2hvb3BlZScsXHJcbiAgICAnd2hvb3BpbmcnLFxyXG4gICAgJ3dob29wcycsXHJcbiAgICAnd2h5JyxcclxuICAgICd3aWNrJyxcclxuICAgICd3aWRlbHknLFxyXG4gICAgJ3dpZGVuJyxcclxuICAgICd3aWRnZXQnLFxyXG4gICAgJ3dpZG93JyxcclxuICAgICd3aWR0aCcsXHJcbiAgICAnd2llbGRhYmxlJyxcclxuICAgICd3aWVsZGVyJyxcclxuICAgICd3aWZlJyxcclxuICAgICd3aWZpJyxcclxuICAgICd3aWtpcGVkaWEnLFxyXG4gICAgJ3dpbGRjYXJkJyxcclxuICAgICd3aWxkY2F0JyxcclxuICAgICd3aWxkZXInLFxyXG4gICAgJ3dpbGRmaXJlJyxcclxuICAgICd3aWxkZm93bCcsXHJcbiAgICAnd2lsZGxhbmQnLFxyXG4gICAgJ3dpbGRsaWZlJyxcclxuICAgICd3aWxkbHknLFxyXG4gICAgJ3dpbGRuZXNzJyxcclxuICAgICd3aWxsZWQnLFxyXG4gICAgJ3dpbGxmdWxseScsXHJcbiAgICAnd2lsbGluZycsXHJcbiAgICAnd2lsbG93JyxcclxuICAgICd3aWxscG93ZXInLFxyXG4gICAgJ3dpbHQnLFxyXG4gICAgJ3dpbXAnLFxyXG4gICAgJ3dpbmNlJyxcclxuICAgICd3aW5jaW5nJyxcclxuICAgICd3aW5kJyxcclxuICAgICd3aW5nJyxcclxuICAgICd3aW5raW5nJyxcclxuICAgICd3aW5uZXInLFxyXG4gICAgJ3dpbm5pbmdzJyxcclxuICAgICd3aW50ZXInLFxyXG4gICAgJ3dpcGUnLFxyXG4gICAgJ3dpcmVkJyxcclxuICAgICd3aXJlbGVzcycsXHJcbiAgICAnd2lyaW5nJyxcclxuICAgICd3aXJ5JyxcclxuICAgICd3aXNkb20nLFxyXG4gICAgJ3dpc2UnLFxyXG4gICAgJ3dpc2gnLFxyXG4gICAgJ3dpc3BsaWtlJyxcclxuICAgICd3aXNweScsXHJcbiAgICAnd2lzdGZ1bCcsXHJcbiAgICAnd2l6YXJkJyxcclxuICAgICd3b2JibGUnLFxyXG4gICAgJ3dvYmJsaW5nJyxcclxuICAgICd3b2JibHknLFxyXG4gICAgJ3dvaycsXHJcbiAgICAnd29sZicsXHJcbiAgICAnd29sdmVyaW5lJyxcclxuICAgICd3b21hbmhvb2QnLFxyXG4gICAgJ3dvbWFua2luZCcsXHJcbiAgICAnd29tYW5sZXNzJyxcclxuICAgICd3b21hbmxpa2UnLFxyXG4gICAgJ3dvbWFubHknLFxyXG4gICAgJ3dvbWInLFxyXG4gICAgJ3dvb2YnLFxyXG4gICAgJ3dvb2luZycsXHJcbiAgICAnd29vbCcsXHJcbiAgICAnd29venknLFxyXG4gICAgJ3dvcmQnLFxyXG4gICAgJ3dvcmsnLFxyXG4gICAgJ3dvcnJpZWQnLFxyXG4gICAgJ3dvcnJpZXInLFxyXG4gICAgJ3dvcnJpc29tZScsXHJcbiAgICAnd29ycnknLFxyXG4gICAgJ3dvcnNlbmluZycsXHJcbiAgICAnd29yc2hpcGVyJyxcclxuICAgICd3b3JzdCcsXHJcbiAgICAnd291bmQnLFxyXG4gICAgJ3dvdmVuJyxcclxuICAgICd3b3cnLFxyXG4gICAgJ3dyYW5nbGUnLFxyXG4gICAgJ3dyYXRoJyxcclxuICAgICd3cmVhdGgnLFxyXG4gICAgJ3dyZWNrYWdlJyxcclxuICAgICd3cmVja2VyJyxcclxuICAgICd3cmVja2luZycsXHJcbiAgICAnd3JlbmNoJyxcclxuICAgICd3cmlnZ2xlJyxcclxuICAgICd3cmlnZ2x5JyxcclxuICAgICd3cmlua2xlJyxcclxuICAgICd3cmlua2x5JyxcclxuICAgICd3cmlzdCcsXHJcbiAgICAnd3JpdGluZycsXHJcbiAgICAnd3JpdHRlbicsXHJcbiAgICAnd3Jvbmdkb2VyJyxcclxuICAgICd3cm9uZ2VkJyxcclxuICAgICd3cm9uZ2Z1bCcsXHJcbiAgICAnd3JvbmdseScsXHJcbiAgICAnd3JvbmduZXNzJyxcclxuICAgICd3cm91Z2h0JyxcclxuICAgICd4Ym94JyxcclxuICAgICd4ZXJveCcsXHJcbiAgICAneWFob28nLFxyXG4gICAgJ3lhbScsXHJcbiAgICAneWFua2luZycsXHJcbiAgICAneWFwcGluZycsXHJcbiAgICAneWFyZCcsXHJcbiAgICAneWFybicsXHJcbiAgICAneWVhaCcsXHJcbiAgICAneWVhcmJvb2snLFxyXG4gICAgJ3llYXJsaW5nJyxcclxuICAgICd5ZWFybHknLFxyXG4gICAgJ3llYXJuaW5nJyxcclxuICAgICd5ZWFzdCcsXHJcbiAgICAneWVsbGluZycsXHJcbiAgICAneWVscCcsXHJcbiAgICAneWVuJyxcclxuICAgICd5ZXN0ZXJkYXknLFxyXG4gICAgJ3lpZGRpc2gnLFxyXG4gICAgJ3lpZWxkJyxcclxuICAgICd5aW4nLFxyXG4gICAgJ3lpcHBlZScsXHJcbiAgICAneW8teW8nLFxyXG4gICAgJ3lvZGVsJyxcclxuICAgICd5b2dhJyxcclxuICAgICd5b2d1cnQnLFxyXG4gICAgJ3lvbmRlcicsXHJcbiAgICAneW95bycsXHJcbiAgICAneXVtbXknLFxyXG4gICAgJ3phcCcsXHJcbiAgICAnemVhbG91cycsXHJcbiAgICAnemVicmEnLFxyXG4gICAgJ3plbicsXHJcbiAgICAnemVwcGVsaW4nLFxyXG4gICAgJ3plcm8nLFxyXG4gICAgJ3plc3RmdWxseScsXHJcbiAgICAnemVzdHknLFxyXG4gICAgJ3ppZ3phZ2dlZCcsXHJcbiAgICAnemlwZmlsZScsXHJcbiAgICAnemlwcGluZycsXHJcbiAgICAnemlwcHknLFxyXG4gICAgJ3ppcHMnLFxyXG4gICAgJ3ppdCcsXHJcbiAgICAnem9kaWFjJyxcclxuICAgICd6b21iaWUnLFxyXG4gICAgJ3pvbmUnLFxyXG4gICAgJ3pvbmluZycsXHJcbiAgICAnem9va2VlcGVyJyxcclxuICAgICd6b29sb2dpc3QnLFxyXG4gICAgJ3pvb2xvZ3knLFxyXG4gICAgJ3pvb20nLFxyXG5dO1xyXG4iLCJpbXBvcnQgKiBhcyB6eGN2Ym4gZnJvbSAnenhjdmJuJztcclxuXHJcbmltcG9ydCB7IEVuY1N0cmluZyB9IGZyb20gJy4uL21vZGVscy9kb21haW4vZW5jU3RyaW5nJztcclxuaW1wb3J0IHsgR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9nZW5lcmF0ZWRQYXNzd29yZEhpc3RvcnknO1xyXG5pbXBvcnQgeyBQYXNzd29yZEdlbmVyYXRvclBvbGljeU9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3Bhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9ucyc7XHJcbmltcG9ydCB7IFBvbGljeSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vcG9saWN5JztcclxuXHJcbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY3J5cHRvLnNlcnZpY2UnO1xyXG5pbXBvcnQge1xyXG4gICAgUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSBhcyBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlQWJzdHJhY3Rpb24sXHJcbn0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3Bhc3N3b3JkR2VuZXJhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9saWN5U2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9wb2xpY3kuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBFRUZMb25nV29yZExpc3QgfSBmcm9tICcuLi9taXNjL3dvcmRsaXN0JztcclxuXHJcbmltcG9ydCB7IFBvbGljeVR5cGUgfSBmcm9tICcuLi9lbnVtcy9wb2xpY3lUeXBlJztcclxuXHJcbmNvbnN0IERlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgbGVuZ3RoOiAxNCxcclxuICAgIGFtYmlndW91czogZmFsc2UsXHJcbiAgICBudW1iZXI6IHRydWUsXHJcbiAgICBtaW5OdW1iZXI6IDEsXHJcbiAgICB1cHBlcmNhc2U6IHRydWUsXHJcbiAgICBtaW5VcHBlcmNhc2U6IDAsXHJcbiAgICBsb3dlcmNhc2U6IHRydWUsXHJcbiAgICBtaW5Mb3dlcmNhc2U6IDAsXHJcbiAgICBzcGVjaWFsOiBmYWxzZSxcclxuICAgIG1pblNwZWNpYWw6IDEsXHJcbiAgICB0eXBlOiAncGFzc3dvcmQnLFxyXG4gICAgbnVtV29yZHM6IDMsXHJcbiAgICB3b3JkU2VwYXJhdG9yOiAnLScsXHJcbiAgICBjYXBpdGFsaXplOiBmYWxzZSxcclxuICAgIGluY2x1ZGVOdW1iZXI6IGZhbHNlLFxyXG59O1xyXG5cclxuY29uc3QgS2V5cyA9IHtcclxuICAgIG9wdGlvbnM6ICdwYXNzd29yZEdlbmVyYXRpb25PcHRpb25zJyxcclxuICAgIGhpc3Rvcnk6ICdnZW5lcmF0ZWRQYXNzd29yZEhpc3RvcnknLFxyXG59O1xyXG5cclxuY29uc3QgTWF4UGFzc3dvcmRzSW5IaXN0b3J5ID0gMTAwO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UgaW1wbGVtZW50cyBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgcHJpdmF0ZSBvcHRpb25zQ2FjaGU6IGFueTtcclxuICAgIHByaXZhdGUgaGlzdG9yeTogR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5W107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHBvbGljeVNlcnZpY2U6IFBvbGljeVNlcnZpY2UpIHsgfVxyXG5cclxuICAgIGFzeW5jIGdlbmVyYXRlUGFzc3dvcmQob3B0aW9uczogYW55KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICAvLyBvdmVybG9hZCBkZWZhdWx0cyB3aXRoIGdpdmVuIG9wdGlvbnNcclxuICAgICAgICBjb25zdCBvID0gT2JqZWN0LmFzc2lnbih7fSwgRGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAoby50eXBlID09PSAncGFzc3BocmFzZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVQYXNzcGhyYXNlKG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2FuaXRpemVcclxuICAgICAgICB0aGlzLnNhbml0aXplUGFzc3dvcmRMZW5ndGgobywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1pbkxlbmd0aDogbnVtYmVyID0gby5taW5VcHBlcmNhc2UgKyBvLm1pbkxvd2VyY2FzZSArIG8ubWluTnVtYmVyICsgby5taW5TcGVjaWFsO1xyXG4gICAgICAgIGlmIChvLmxlbmd0aCA8IG1pbkxlbmd0aCkge1xyXG4gICAgICAgICAgICBvLmxlbmd0aCA9IG1pbkxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBpZiAoby5sb3dlcmNhc2UgJiYgby5taW5Mb3dlcmNhc2UgPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgby5taW5Mb3dlcmNhc2U7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goJ2wnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoby51cHBlcmNhc2UgJiYgby5taW5VcHBlcmNhc2UgPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgby5taW5VcHBlcmNhc2U7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goJ3UnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoby5udW1iZXIgJiYgby5taW5OdW1iZXIgPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgby5taW5OdW1iZXI7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goJ24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoby5zcGVjaWFsICYmIG8ubWluU3BlY2lhbCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvLm1pblNwZWNpYWw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goJ3MnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAocG9zaXRpb25zLmxlbmd0aCA8IG8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKCdhJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzaHVmZmxlXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zaHVmZmxlQXJyYXkocG9zaXRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gYnVpbGQgb3V0IHRoZSBjaGFyIHNldHNcclxuICAgICAgICBsZXQgYWxsQ2hhclNldCA9ICcnO1xyXG5cclxuICAgICAgICBsZXQgbG93ZXJjYXNlQ2hhclNldCA9ICdhYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6JztcclxuICAgICAgICBpZiAoby5hbWJpZ3VvdXMpIHtcclxuICAgICAgICAgICAgbG93ZXJjYXNlQ2hhclNldCArPSAnbCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvLmxvd2VyY2FzZSkge1xyXG4gICAgICAgICAgICBhbGxDaGFyU2V0ICs9IGxvd2VyY2FzZUNoYXJTZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdXBwZXJjYXNlQ2hhclNldCA9ICdBQkNERUZHSEpLTE1OUFFSU1RVVldYWVonO1xyXG4gICAgICAgIGlmIChvLmFtYmlndW91cykge1xyXG4gICAgICAgICAgICB1cHBlcmNhc2VDaGFyU2V0ICs9ICdJTyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvLnVwcGVyY2FzZSkge1xyXG4gICAgICAgICAgICBhbGxDaGFyU2V0ICs9IHVwcGVyY2FzZUNoYXJTZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbnVtYmVyQ2hhclNldCA9ICcyMzQ1Njc4OSc7XHJcbiAgICAgICAgaWYgKG8uYW1iaWd1b3VzKSB7XHJcbiAgICAgICAgICAgIG51bWJlckNoYXJTZXQgKz0gJzAxJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG8ubnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGFsbENoYXJTZXQgKz0gbnVtYmVyQ2hhclNldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNwZWNpYWxDaGFyU2V0ID0gJyFAIyQlXiYqJztcclxuICAgICAgICBpZiAoby5zcGVjaWFsKSB7XHJcbiAgICAgICAgICAgIGFsbENoYXJTZXQgKz0gc3BlY2lhbENoYXJTZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcGFzc3dvcmQgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG8ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHBvc2l0aW9uQ2hhcnM6IHN0cmluZztcclxuICAgICAgICAgICAgc3dpdGNoIChwb3NpdGlvbnNbaV0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2hhcnMgPSBsb3dlcmNhc2VDaGFyU2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25DaGFycyA9IHVwcGVyY2FzZUNoYXJTZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICduJzpcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkNoYXJzID0gbnVtYmVyQ2hhclNldDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2hhcnMgPSBzcGVjaWFsQ2hhclNldDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2hhcnMgPSBhbGxDaGFyU2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZG9tQ2hhckluZGV4ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnJhbmRvbU51bWJlcigwLCBwb3NpdGlvbkNoYXJzLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICBwYXNzd29yZCArPSBwb3NpdGlvbkNoYXJzLmNoYXJBdChyYW5kb21DaGFySW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhc3N3b3JkO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdlbmVyYXRlUGFzc3BocmFzZShvcHRpb25zOiBhbnkpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IG8gPSBPYmplY3QuYXNzaWduKHt9LCBEZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGlmIChvLm51bVdvcmRzID09IG51bGwgfHwgby5udW1Xb3JkcyA8PSAyKSB7XHJcbiAgICAgICAgICAgIG8ubnVtV29yZHMgPSBEZWZhdWx0T3B0aW9ucy5udW1Xb3JkcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG8ud29yZFNlcGFyYXRvciA9PSBudWxsIHx8IG8ud29yZFNlcGFyYXRvci5sZW5ndGggPT09IDAgfHwgby53b3JkU2VwYXJhdG9yLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgby53b3JkU2VwYXJhdG9yID0gJyAnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoby5jYXBpdGFsaXplID09IG51bGwpIHtcclxuICAgICAgICAgICAgby5jYXBpdGFsaXplID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvLmluY2x1ZGVOdW1iZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBvLmluY2x1ZGVOdW1iZXIgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxpc3RMZW5ndGggPSBFRUZMb25nV29yZExpc3QubGVuZ3RoIC0gMTtcclxuICAgICAgICBjb25zdCB3b3JkTGlzdCA9IG5ldyBBcnJheShvLm51bVdvcmRzKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG8ubnVtV29yZHM7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB3b3JkSW5kZXggPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UucmFuZG9tTnVtYmVyKDAsIGxpc3RMZW5ndGgpO1xyXG4gICAgICAgICAgICBpZiAoby5jYXBpdGFsaXplKSB7XHJcbiAgICAgICAgICAgICAgICB3b3JkTGlzdFtpXSA9IHRoaXMuY2FwaXRhbGl6ZShFRUZMb25nV29yZExpc3Rbd29yZEluZGV4XSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3b3JkTGlzdFtpXSA9IEVFRkxvbmdXb3JkTGlzdFt3b3JkSW5kZXhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoby5pbmNsdWRlTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwZW5kUmFuZG9tTnVtYmVyVG9SYW5kb21Xb3JkKHdvcmRMaXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdvcmRMaXN0LmpvaW4oby53b3JkU2VwYXJhdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRPcHRpb25zKCk6IFByb21pc2U8W2FueSwgUGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zXT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNDYWNoZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldChLZXlzLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNDYWNoZSA9IERlZmF1bHRPcHRpb25zO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zQ2FjaGUgPSBPYmplY3QuYXNzaWduKHt9LCBEZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZW5mb3JjZWRPcHRpb25zID0gYXdhaXQgdGhpcy5lbmZvcmNlUGFzc3dvcmRHZW5lcmF0b3JQb2xpY2llc09uT3B0aW9ucyh0aGlzLm9wdGlvbnNDYWNoZSk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zQ2FjaGUgPSBlbmZvcmNlZE9wdGlvbnNbMF07XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLm9wdGlvbnNDYWNoZSwgZW5mb3JjZWRPcHRpb25zWzFdXTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlbmZvcmNlUGFzc3dvcmRHZW5lcmF0b3JQb2xpY2llc09uT3B0aW9ucyhvcHRpb25zOiBhbnkpOiBQcm9taXNlPFthbnksIFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9uc10+IHtcclxuICAgICAgICBsZXQgZW5mb3JjZWRQb2xpY3lPcHRpb25zID0gYXdhaXQgdGhpcy5nZXRQYXNzd29yZEdlbmVyYXRvclBvbGljeU9wdGlvbnMoKTtcclxuICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbkxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sZW5ndGggPSBlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLnVzZVVwcGVyY2FzZSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy51cHBlcmNhc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLnVzZUxvd2VyY2FzZSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sb3dlcmNhc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLnVzZU51bWJlcnMpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMubnVtYmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWluTnVtYmVyIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLm51bWJlckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLm1pbk51bWJlciA9IGVuZm9yY2VkUG9saWN5T3B0aW9ucy5udW1iZXJDb3VudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGVuZm9yY2VkUG9saWN5T3B0aW9ucy51c2VTcGVjaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNwZWNpYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5taW5TcGVjaWFsIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLnNwZWNpYWxDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5taW5TcGVjaWFsID0gZW5mb3JjZWRQb2xpY3lPcHRpb25zLnNwZWNpYWxDb3VudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gTXVzdCBub3JtYWxpemUgdGhlc2UgZmllbGRzIGJlY2F1c2UgdGhlIHJlY2VpdmluZyBjYWxsIGV4cGVjdHMgYWxsIG9wdGlvbnMgdG8gcGFzcyB0aGUgY3VycmVudCBydWxlc1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5taW5TcGVjaWFsICsgb3B0aW9ucy5taW5OdW1iZXIgPiBvcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5taW5TcGVjaWFsID0gb3B0aW9ucy5sZW5ndGggLSBvcHRpb25zLm1pbk51bWJlcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubnVtV29yZHMgPCBlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTnVtYmVyV29yZHMpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMubnVtV29yZHMgPSBlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTnVtYmVyV29yZHM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMuY2FwaXRhbGl6ZSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jYXBpdGFsaXplID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGVuZm9yY2VkUG9saWN5T3B0aW9ucy5pbmNsdWRlTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmluY2x1ZGVOdW1iZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBGb3JjZSBkZWZhdWx0IHR5cGUgaWYgcGFzc3dvcmQvcGFzc3BocmFzZSBzZWxlY3RlZCB2aWEgcG9saWN5XHJcbiAgICAgICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMuZGVmYXVsdFR5cGUgPT09ICdwYXNzd29yZCcgfHxcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkUG9saWN5T3B0aW9ucy5kZWZhdWx0VHlwZSA9PT0gJ3Bhc3NwaHJhc2UnKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnR5cGUgPSBlbmZvcmNlZFBvbGljeU9wdGlvbnMuZGVmYXVsdFR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgeyAvLyBVSSBsYXllciBleHBlY3RzIGFuIGluc3RhbnRpYXRlZCBvYmplY3QgdG8gcHJldmVudCBtb3JlIGV4cGxpY2l0IG51bGwgY2hlY2tzXHJcbiAgICAgICAgICAgIGVuZm9yY2VkUG9saWN5T3B0aW9ucyA9IG5ldyBQYXNzd29yZEdlbmVyYXRvclBvbGljeU9wdGlvbnMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtvcHRpb25zLCBlbmZvcmNlZFBvbGljeU9wdGlvbnNdO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9ucygpOiBQcm9taXNlPFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9ucz4ge1xyXG4gICAgICAgIGNvbnN0IHBvbGljaWVzOiBQb2xpY3lbXSA9IHRoaXMucG9saWN5U2VydmljZSA9PSBudWxsID8gbnVsbCA6XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucG9saWN5U2VydmljZS5nZXRBbGwoUG9saWN5VHlwZS5QYXNzd29yZEdlbmVyYXRvcik7XHJcbiAgICAgICAgbGV0IGVuZm9yY2VkT3B0aW9uczogUGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHBvbGljaWVzID09IG51bGwgfHwgcG9saWNpZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbmZvcmNlZE9wdGlvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb2xpY2llcy5mb3JFYWNoKGN1cnJlbnRQb2xpY3kgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRQb2xpY3kuZW5hYmxlZCB8fCBjdXJyZW50UG9saWN5LmRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRPcHRpb25zID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucyA9IG5ldyBQYXNzd29yZEdlbmVyYXRvclBvbGljeU9wdGlvbnMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGFzc3dvcmQgd2lucyBpbiBtdWx0aS1vcmcgY29sbGlzaW9uc1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvbGljeS5kYXRhLmRlZmF1bHRUeXBlICE9IG51bGwgJiYgZW5mb3JjZWRPcHRpb25zLmRlZmF1bHRUeXBlICE9PSAncGFzc3dvcmQnKSB7XHJcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMuZGVmYXVsdFR5cGUgPSBjdXJyZW50UG9saWN5LmRhdGEuZGVmYXVsdFR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEubWluTGVuZ3RoICE9IG51bGxcclxuICAgICAgICAgICAgICAgICYmIGN1cnJlbnRQb2xpY3kuZGF0YS5taW5MZW5ndGggPiBlbmZvcmNlZE9wdGlvbnMubWluTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMubWluTGVuZ3RoID0gY3VycmVudFBvbGljeS5kYXRhLm1pbkxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS51c2VVcHBlcikge1xyXG4gICAgICAgICAgICAgICAgZW5mb3JjZWRPcHRpb25zLnVzZVVwcGVyY2FzZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEudXNlTG93ZXIpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy51c2VMb3dlcmNhc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvbGljeS5kYXRhLnVzZU51bWJlcnMpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy51c2VOdW1iZXJzID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5taW5OdW1iZXJzICE9IG51bGxcclxuICAgICAgICAgICAgICAgICYmIGN1cnJlbnRQb2xpY3kuZGF0YS5taW5OdW1iZXJzID4gZW5mb3JjZWRPcHRpb25zLm51bWJlckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMubnVtYmVyQ291bnQgPSBjdXJyZW50UG9saWN5LmRhdGEubWluTnVtYmVycztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS51c2VTcGVjaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMudXNlU3BlY2lhbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEubWluU3BlY2lhbCAhPSBudWxsXHJcbiAgICAgICAgICAgICAgICAmJiBjdXJyZW50UG9saWN5LmRhdGEubWluU3BlY2lhbCA+IGVuZm9yY2VkT3B0aW9ucy5zcGVjaWFsQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5zcGVjaWFsQ291bnQgPSBjdXJyZW50UG9saWN5LmRhdGEubWluU3BlY2lhbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5taW5OdW1iZXJXb3JkcyAhPSBudWxsXHJcbiAgICAgICAgICAgICAgICAmJiBjdXJyZW50UG9saWN5LmRhdGEubWluTnVtYmVyV29yZHMgPiBlbmZvcmNlZE9wdGlvbnMubWluTnVtYmVyV29yZHMpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5taW5OdW1iZXJXb3JkcyA9IGN1cnJlbnRQb2xpY3kuZGF0YS5taW5OdW1iZXJXb3JkcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5jYXBpdGFsaXplKSB7XHJcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMuY2FwaXRhbGl6ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEuaW5jbHVkZU51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgZW5mb3JjZWRPcHRpb25zLmluY2x1ZGVOdW1iZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlbmZvcmNlZE9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2F2ZU9wdGlvbnMob3B0aW9uczogYW55KSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMub3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zQ2FjaGUgPSBvcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEhpc3RvcnkoKTogUHJvbWlzZTxHZW5lcmF0ZWRQYXNzd29yZEhpc3RvcnlbXT4ge1xyXG4gICAgICAgIGNvbnN0IGhhc0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5oYXNLZXkoKTtcclxuICAgICAgICBpZiAoIWhhc0tleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5PEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeT4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5oaXN0b3J5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeVtdPihLZXlzLmhpc3RvcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkgPSBhd2FpdCB0aGlzLmRlY3J5cHRIaXN0b3J5KGVuY3J5cHRlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5oaXN0b3J5IHx8IG5ldyBBcnJheTxHZW5lcmF0ZWRQYXNzd29yZEhpc3Rvcnk+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYWRkSGlzdG9yeShwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICAvLyBDYW5ub3QgYWRkIG5ldyBoaXN0b3J5IGlmIG5vIGtleSBpcyBhdmFpbGFibGVcclxuICAgICAgICBjb25zdCBoYXNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzS2V5KCk7XHJcbiAgICAgICAgaWYgKCFoYXNLZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY3VycmVudEhpc3RvcnkgPSBhd2FpdCB0aGlzLmdldEhpc3RvcnkoKTtcclxuXHJcbiAgICAgICAgLy8gUHJldmVudCBkdXBsaWNhdGVzXHJcbiAgICAgICAgaWYgKHRoaXMubWF0Y2hlc1ByZXZpb3VzKHBhc3N3b3JkLCBjdXJyZW50SGlzdG9yeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3VycmVudEhpc3RvcnkudW5zaGlmdChuZXcgR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5KHBhc3N3b3JkLCBEYXRlLm5vdygpKSk7XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBvbGQgaXRlbXMuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRIaXN0b3J5Lmxlbmd0aCA+IE1heFBhc3N3b3Jkc0luSGlzdG9yeSkge1xyXG4gICAgICAgICAgICBjdXJyZW50SGlzdG9yeS5wb3AoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld0hpc3RvcnkgPSBhd2FpdCB0aGlzLmVuY3J5cHRIaXN0b3J5KGN1cnJlbnRIaXN0b3J5KTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuaGlzdG9yeSwgbmV3SGlzdG9yeSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2xlYXIoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICB0aGlzLmhpc3RvcnkgPSBbXTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5oaXN0b3J5KTtcclxuICAgIH1cclxuXHJcbiAgICBwYXNzd29yZFN0cmVuZ3RoKHBhc3N3b3JkOiBzdHJpbmcsIHVzZXJJbnB1dHM6IHN0cmluZ1tdID0gbnVsbCk6IHp4Y3Zibi5aWENWQk5SZXN1bHQge1xyXG4gICAgICAgIGlmIChwYXNzd29yZCA9PSBudWxsIHx8IHBhc3N3b3JkLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGdsb2JhbFVzZXJJbnB1dHMgPSBbJ2JpdHdhcmRlbicsICdiaXQnLCAnd2FyZGVuJ107XHJcbiAgICAgICAgaWYgKHVzZXJJbnB1dHMgIT0gbnVsbCAmJiB1c2VySW5wdXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZ2xvYmFsVXNlcklucHV0cyA9IGdsb2JhbFVzZXJJbnB1dHMuY29uY2F0KHVzZXJJbnB1dHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBVc2UgYSBoYXNoIHNldCB0byBnZXQgcmlkIG9mIGFueSBkdXBsaWNhdGUgdXNlciBpbnB1dHNcclxuICAgICAgICBjb25zdCBmaW5hbFVzZXJJbnB1dHMgPSBBcnJheS5mcm9tKG5ldyBTZXQoZ2xvYmFsVXNlcklucHV0cykpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHp4Y3ZibihwYXNzd29yZCwgZmluYWxVc2VySW5wdXRzKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIG5vcm1hbGl6ZU9wdGlvbnMob3B0aW9uczogYW55LCBlbmZvcmNlZFBvbGljeU9wdGlvbnM6IFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9ucykge1xyXG4gICAgICAgIG9wdGlvbnMubWluTG93ZXJjYXNlID0gMDtcclxuICAgICAgICBvcHRpb25zLm1pblVwcGVyY2FzZSA9IDA7XHJcblxyXG4gICAgICAgIGlmICghb3B0aW9ucy5sZW5ndGggfHwgb3B0aW9ucy5sZW5ndGggPCA1KSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubGVuZ3RoID0gNTtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubGVuZ3RoID4gMTI4KSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubGVuZ3RoID0gMTI4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbkxlbmd0aCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmxlbmd0aCA9IGVuZm9yY2VkUG9saWN5T3B0aW9ucy5taW5MZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW9wdGlvbnMubWluTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubWluTnVtYmVyID0gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubWluTnVtYmVyID4gb3B0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5taW5OdW1iZXIgPSBvcHRpb25zLmxlbmd0aDtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubWluTnVtYmVyID4gOSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLm1pbk51bWJlciA9IDk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5taW5OdW1iZXIgPCBlbmZvcmNlZFBvbGljeU9wdGlvbnMubnVtYmVyQ291bnQpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5taW5OdW1iZXIgPSBlbmZvcmNlZFBvbGljeU9wdGlvbnMubnVtYmVyQ291bnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW9wdGlvbnMubWluU3BlY2lhbCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLm1pblNwZWNpYWwgPSAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5taW5TcGVjaWFsID4gb3B0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5taW5TcGVjaWFsID0gb3B0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm1pblNwZWNpYWwgPiA5KSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubWluU3BlY2lhbCA9IDk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5taW5TcGVjaWFsIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLnNwZWNpYWxDb3VudCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLm1pblNwZWNpYWwgPSBlbmZvcmNlZFBvbGljeU9wdGlvbnMuc3BlY2lhbENvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMubWluU3BlY2lhbCArIG9wdGlvbnMubWluTnVtYmVyID4gb3B0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5taW5TcGVjaWFsID0gb3B0aW9ucy5sZW5ndGggLSBvcHRpb25zLm1pbk51bWJlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLm51bVdvcmRzID09IG51bGwgfHwgb3B0aW9ucy5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubnVtV29yZHMgPSAzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5udW1Xb3JkcyA+IDIwKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubnVtV29yZHMgPSAyMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLm51bVdvcmRzIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbk51bWJlcldvcmRzKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubnVtV29yZHMgPSBlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTnVtYmVyV29yZHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy53b3JkU2VwYXJhdG9yICE9IG51bGwgJiYgb3B0aW9ucy53b3JkU2VwYXJhdG9yLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy53b3JkU2VwYXJhdG9yID0gb3B0aW9ucy53b3JkU2VwYXJhdG9yWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zYW5pdGl6ZVBhc3N3b3JkTGVuZ3RoKG9wdGlvbnMsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNhcGl0YWxpemUoc3RyOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgYXBwZW5kUmFuZG9tTnVtYmVyVG9SYW5kb21Xb3JkKHdvcmRMaXN0OiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGlmICh3b3JkTGlzdCA9PSBudWxsIHx8IHdvcmRMaXN0Lmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UucmFuZG9tTnVtYmVyKDAsIHdvcmRMaXN0Lmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIGNvbnN0IG51bSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5yYW5kb21OdW1iZXIoMCwgOSk7XHJcbiAgICAgICAgd29yZExpc3RbaW5kZXhdID0gd29yZExpc3RbaW5kZXhdICsgbnVtO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZW5jcnlwdEhpc3RvcnkoaGlzdG9yeTogR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5W10pOiBQcm9taXNlPEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeVtdPiB7XHJcbiAgICAgICAgaWYgKGhpc3RvcnkgPT0gbnVsbCB8fCBoaXN0b3J5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gaGlzdG9yeS5tYXAoYXN5bmMgaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KGl0ZW0ucGFzc3dvcmQpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeShlbmNyeXB0ZWQuZW5jcnlwdGVkU3RyaW5nLCBpdGVtLmRhdGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZGVjcnlwdEhpc3RvcnkoaGlzdG9yeTogR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5W10pOiBQcm9taXNlPEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeVtdPiB7XHJcbiAgICAgICAgaWYgKGhpc3RvcnkgPT0gbnVsbCB8fCBoaXN0b3J5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gaGlzdG9yeS5tYXAoYXN5bmMgaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY3J5cHRlZCA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5kZWNyeXB0VG9VdGY4KG5ldyBFbmNTdHJpbmcoaXRlbS5wYXNzd29yZCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeShkZWNyeXB0ZWQsIGl0ZW0uZGF0ZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtYXRjaGVzUHJldmlvdXMocGFzc3dvcmQ6IHN0cmluZywgaGlzdG9yeTogR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5W10pOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoaGlzdG9yeSA9PSBudWxsIHx8IGhpc3RvcnkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoaXN0b3J5W2hpc3RvcnkubGVuZ3RoIC0gMV0ucGFzc3dvcmQgPT09IHBhc3N3b3JkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlZjogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEyNjQ2ODY0LzEwOTAzNTlcclxuICAgIHByaXZhdGUgYXN5bmMgc2h1ZmZsZUFycmF5KGFycmF5OiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGogPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UucmFuZG9tTnVtYmVyKDAsIGkpO1xyXG4gICAgICAgICAgICBbYXJyYXlbaV0sIGFycmF5W2pdXSA9IFthcnJheVtqXSwgYXJyYXlbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNhbml0aXplUGFzc3dvcmRMZW5ndGgob3B0aW9uczogYW55LCBmb3JHZW5lcmF0aW9uOiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IG1pblVwcGVyY2FzZUNhbGMgPSAwO1xyXG4gICAgICAgIGxldCBtaW5Mb3dlcmNhc2VDYWxjID0gMDtcclxuICAgICAgICBsZXQgbWluTnVtYmVyQ2FsYzogbnVtYmVyID0gb3B0aW9ucy5taW5OdW1iZXI7XHJcbiAgICAgICAgbGV0IG1pblNwZWNpYWxDYWxjOiBudW1iZXIgPSBvcHRpb25zLm1pblNwZWNpYWw7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLnVwcGVyY2FzZSAmJiBvcHRpb25zLm1pblVwcGVyY2FzZSA8PSAwKSB7XHJcbiAgICAgICAgICAgIG1pblVwcGVyY2FzZUNhbGMgPSAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMudXBwZXJjYXNlKSB7XHJcbiAgICAgICAgICAgIG1pblVwcGVyY2FzZUNhbGMgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMubG93ZXJjYXNlICYmIG9wdGlvbnMubWluTG93ZXJjYXNlIDw9IDApIHtcclxuICAgICAgICAgICAgbWluTG93ZXJjYXNlQ2FsYyA9IDE7XHJcbiAgICAgICAgfSBlbHNlIGlmICghb3B0aW9ucy5sb3dlcmNhc2UpIHtcclxuICAgICAgICAgICAgbWluTG93ZXJjYXNlQ2FsYyA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5udW1iZXIgJiYgb3B0aW9ucy5taW5OdW1iZXIgPD0gMCkge1xyXG4gICAgICAgICAgICBtaW5OdW1iZXJDYWxjID0gMTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFvcHRpb25zLm51bWJlcikge1xyXG4gICAgICAgICAgICBtaW5OdW1iZXJDYWxjID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLnNwZWNpYWwgJiYgb3B0aW9ucy5taW5TcGVjaWFsIDw9IDApIHtcclxuICAgICAgICAgICAgbWluU3BlY2lhbENhbGMgPSAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuc3BlY2lhbCkge1xyXG4gICAgICAgICAgICBtaW5TcGVjaWFsQ2FsYyA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gYnV0IGlzIGEgZmluYWwgc2FmZXR5IG5ldFxyXG4gICAgICAgIGlmICghb3B0aW9ucy5sZW5ndGggfHwgb3B0aW9ucy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubGVuZ3RoID0gMTA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtaW5MZW5ndGg6IG51bWJlciA9IG1pblVwcGVyY2FzZUNhbGMgKyBtaW5Mb3dlcmNhc2VDYWxjICsgbWluTnVtYmVyQ2FsYyArIG1pblNwZWNpYWxDYWxjO1xyXG4gICAgICAgIC8vIE5vcm1hbGl6ZSBhbmQgR2VuZXJhdGlvbiBib3RoIHJlcXVpcmUgdGhpcyBtb2RpZmljYXRpb25cclxuICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGggPCBtaW5MZW5ndGgpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5sZW5ndGggPSBtaW5MZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBcHBseSBvdGhlciBjaGFuZ2VzIGlmIHRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgaW4gaXMgZm9yIGdlbmVyYXRpb25cclxuICAgICAgICBpZiAoZm9yR2VuZXJhdGlvbikge1xyXG4gICAgICAgICAgICBvcHRpb25zLm1pblVwcGVyY2FzZSA9IG1pblVwcGVyY2FzZUNhbGM7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubWluTG93ZXJjYXNlID0gbWluTG93ZXJjYXNlQ2FsYztcclxuICAgICAgICAgICAgb3B0aW9ucy5taW5OdW1iZXIgPSBtaW5OdW1iZXJDYWxjO1xyXG4gICAgICAgICAgICBvcHRpb25zLm1pblNwZWNpYWwgPSBtaW5TcGVjaWFsQ2FsYztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUG9saWN5UmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9wb2xpY3lSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBQb2xpY3lUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvcG9saWN5VHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9saWN5RGF0YSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZztcclxuICAgIHR5cGU6IFBvbGljeVR5cGU7XHJcbiAgICBkYXRhOiBhbnk7XHJcbiAgICBlbmFibGVkOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBQb2xpY3lSZXNwb25zZSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSByZXNwb25zZS5pZDtcclxuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gcmVzcG9uc2Uub3JnYW5pemF0aW9uSWQ7XHJcbiAgICAgICAgdGhpcy50eXBlID0gcmVzcG9uc2UudHlwZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHJlc3BvbnNlLmVuYWJsZWQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUG9saWN5RGF0YSB9IGZyb20gJy4uL2RhdGEvcG9saWN5RGF0YSc7XHJcblxyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcblxyXG5pbXBvcnQgeyBQb2xpY3lUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvcG9saWN5VHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9saWN5IGV4dGVuZHMgRG9tYWluIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xyXG4gICAgdHlwZTogUG9saWN5VHlwZTtcclxuICAgIGRhdGE6IGFueTtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3Iob2JqPzogUG9saWN5RGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaWQgPSBvYmouaWQ7XHJcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IG9iai5vcmdhbml6YXRpb25JZDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBvYmoudHlwZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBvYmouZGF0YTtcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSBvYmouZW5hYmxlZDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzZXRQYXNzd29yZFBvbGljeU9wdGlvbnMgZXh0ZW5kcyBEb21haW4ge1xyXG4gICAgYXV0b0Vucm9sbEVuYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxufVxyXG4iLCJpbXBvcnQgeyBQb2xpY3lTZXJ2aWNlIGFzIFBvbGljeVNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9wb2xpY3kuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBQb2xpY3lEYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvcG9saWN5RGF0YSc7XHJcblxyXG5pbXBvcnQgeyBNYXN0ZXJQYXNzd29yZFBvbGljeU9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL21hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucyc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvbiB9IGZyb20gJy4uL21vZGVscy9kb21haW4vb3JnYW5pemF0aW9uJztcclxuaW1wb3J0IHsgUG9saWN5IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9wb2xpY3knO1xyXG5pbXBvcnQgeyBSZXNldFBhc3N3b3JkUG9saWN5T3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9kb21haW4vcmVzZXRQYXNzd29yZFBvbGljeU9wdGlvbnMnO1xyXG5cclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGUgfSBmcm9tICcuLi9lbnVtcy9vcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJUeXBlIH0gZnJvbSAnLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclR5cGUnO1xyXG5pbXBvcnQgeyBQb2xpY3lUeXBlIH0gZnJvbSAnLi4vZW51bXMvcG9saWN5VHlwZSc7XHJcblxyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGlzdFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2xpc3RSZXNwb25zZSc7XHJcbmltcG9ydCB7IFBvbGljeVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3BvbGljeVJlc3BvbnNlJztcclxuXHJcbmNvbnN0IEtleXMgPSB7XHJcbiAgICBwb2xpY2llc1ByZWZpeDogJ3BvbGljaWVzXycsXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgUG9saWN5U2VydmljZSBpbXBsZW1lbnRzIFBvbGljeVNlcnZpY2VBYnN0cmFjdGlvbiB7XHJcbiAgICBwb2xpY3lDYWNoZTogUG9saWN5W107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSkge1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyQ2FjaGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wb2xpY3lDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0QWxsKHR5cGU/OiBQb2xpY3lUeXBlKTogUHJvbWlzZTxQb2xpY3lbXT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnBvbGljeUNhY2hlID09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICAgICAgY29uc3QgcG9saWNpZXMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogUG9saWN5RGF0YTsgfT4oXHJcbiAgICAgICAgICAgICAgICBLZXlzLnBvbGljaWVzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2U6IFBvbGljeVtdID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gcG9saWNpZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwb2xpY2llcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKG5ldyBQb2xpY3kocG9saWNpZXNbaWRdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wb2xpY3lDYWNoZSA9IHJlc3BvbnNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvbGljeUNhY2hlLmZpbHRlcihwID0+IHAudHlwZSA9PT0gdHlwZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9saWN5Q2FjaGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFBvbGljeUZvck9yZ2FuaXphdGlvbihwb2xpY3lUeXBlOiBQb2xpY3lUeXBlLCBvcmdhbml6YXRpb25JZDogc3RyaW5nKTogUHJvbWlzZTxQb2xpY3k+IHtcclxuICAgICAgICBjb25zdCBvcmcgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldE9yZ2FuaXphdGlvbihvcmdhbml6YXRpb25JZCk7XHJcbiAgICAgICAgaWYgKG9yZz8uaXNQcm92aWRlclVzZXIpIHtcclxuICAgICAgICAgICAgY29uc3Qgb3JnUG9saWNpZXMgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZ2V0UG9saWNpZXMob3JnYW5pemF0aW9uSWQpO1xyXG4gICAgICAgICAgICBjb25zdCBwb2xpY3kgPSBvcmdQb2xpY2llcy5kYXRhLmZpbmQocCA9PiBwLm9yZ2FuaXphdGlvbklkID09PSBvcmdhbml6YXRpb25JZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocG9saWN5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvbGljeShuZXcgUG9saWN5RGF0YShwb2xpY3kpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBvbGljaWVzID0gYXdhaXQgdGhpcy5nZXRBbGwocG9saWN5VHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIHBvbGljaWVzLmZpbmQocCA9PiBwLm9yZ2FuaXphdGlvbklkID09PSBvcmdhbml6YXRpb25JZCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVwbGFjZShwb2xpY2llczogeyBbaWQ6IHN0cmluZ106IFBvbGljeURhdGE7IH0pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMucG9saWNpZXNQcmVmaXggKyB1c2VySWQsIHBvbGljaWVzKTtcclxuICAgICAgICB0aGlzLnBvbGljeUNhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhcih1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5wb2xpY2llc1ByZWZpeCArIHVzZXJJZCk7XHJcbiAgICAgICAgdGhpcy5wb2xpY3lDYWNoZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0TWFzdGVyUGFzc3dvcmRQb2xpY3lPcHRpb25zKHBvbGljaWVzPzogUG9saWN5W10pOiBQcm9taXNlPE1hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucz4ge1xyXG4gICAgICAgIGxldCBlbmZvcmNlZE9wdGlvbnM6IE1hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucyA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmIChwb2xpY2llcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHBvbGljaWVzID0gYXdhaXQgdGhpcy5nZXRBbGwoUG9saWN5VHlwZS5NYXN0ZXJQYXNzd29yZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcG9saWNpZXMgPSBwb2xpY2llcy5maWx0ZXIocCA9PiBwLnR5cGUgPT09IFBvbGljeVR5cGUuTWFzdGVyUGFzc3dvcmQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBvbGljaWVzID09IG51bGwgfHwgcG9saWNpZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbmZvcmNlZE9wdGlvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb2xpY2llcy5mb3JFYWNoKGN1cnJlbnRQb2xpY3kgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRQb2xpY3kuZW5hYmxlZCB8fCBjdXJyZW50UG9saWN5LmRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRPcHRpb25zID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucyA9IG5ldyBNYXN0ZXJQYXNzd29yZFBvbGljeU9wdGlvbnMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5taW5Db21wbGV4aXR5ICE9IG51bGxcclxuICAgICAgICAgICAgICAgICYmIGN1cnJlbnRQb2xpY3kuZGF0YS5taW5Db21wbGV4aXR5ID4gZW5mb3JjZWRPcHRpb25zLm1pbkNvbXBsZXhpdHkpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5taW5Db21wbGV4aXR5ID0gY3VycmVudFBvbGljeS5kYXRhLm1pbkNvbXBsZXhpdHk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEubWluTGVuZ3RoICE9IG51bGxcclxuICAgICAgICAgICAgICAgICYmIGN1cnJlbnRQb2xpY3kuZGF0YS5taW5MZW5ndGggPiBlbmZvcmNlZE9wdGlvbnMubWluTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMubWluTGVuZ3RoID0gY3VycmVudFBvbGljeS5kYXRhLm1pbkxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5yZXF1aXJlVXBwZXIpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5yZXF1aXJlVXBwZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvbGljeS5kYXRhLnJlcXVpcmVMb3dlcikge1xyXG4gICAgICAgICAgICAgICAgZW5mb3JjZWRPcHRpb25zLnJlcXVpcmVMb3dlciA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEucmVxdWlyZU51bWJlcnMpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5yZXF1aXJlTnVtYmVycyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEucmVxdWlyZVNwZWNpYWwpIHtcclxuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5yZXF1aXJlU3BlY2lhbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVuZm9yY2VkT3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBldmFsdWF0ZU1hc3RlclBhc3N3b3JkKHBhc3N3b3JkU3RyZW5ndGg6IG51bWJlciwgbmV3UGFzc3dvcmQ6IHN0cmluZyxcclxuICAgICAgICBlbmZvcmNlZFBvbGljeU9wdGlvbnM6IE1hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluQ29tcGxleGl0eSA+IDAgJiYgZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbkNvbXBsZXhpdHkgPiBwYXNzd29yZFN0cmVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTGVuZ3RoID4gMCAmJiBlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTGVuZ3RoID4gbmV3UGFzc3dvcmQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMucmVxdWlyZVVwcGVyICYmIG5ld1Bhc3N3b3JkLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IG5ld1Bhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMucmVxdWlyZUxvd2VyICYmIG5ld1Bhc3N3b3JkLnRvTG9jYWxlVXBwZXJDYXNlKCkgPT09IG5ld1Bhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMucmVxdWlyZU51bWJlcnMgJiYgISgvWzAtOV0vLnRlc3QobmV3UGFzc3dvcmQpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLnJlcXVpcmVTcGVjaWFsICYmICEoL1shQCMkJVxcXiYqXS9nLnRlc3QobmV3UGFzc3dvcmQpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZXNldFBhc3N3b3JkUG9saWN5T3B0aW9ucyhwb2xpY2llczogUG9saWN5W10sIG9yZ0lkOiBzdHJpbmcpOiBbUmVzZXRQYXNzd29yZFBvbGljeU9wdGlvbnMsIGJvb2xlYW5dIHtcclxuICAgICAgICBjb25zdCByZXNldFBhc3N3b3JkUG9saWN5T3B0aW9ucyA9IG5ldyBSZXNldFBhc3N3b3JkUG9saWN5T3B0aW9ucygpO1xyXG5cclxuICAgICAgICBpZiAocG9saWNpZXMgPT0gbnVsbCB8fCBvcmdJZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbcmVzZXRQYXNzd29yZFBvbGljeU9wdGlvbnMsIGZhbHNlXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBvbGljeSA9IHBvbGljaWVzLmZpbmQocCA9PiBwLm9yZ2FuaXphdGlvbklkID09PSBvcmdJZCAmJiBwLnR5cGUgPT09IFBvbGljeVR5cGUuUmVzZXRQYXNzd29yZCAmJiBwLmVuYWJsZWQpO1xyXG4gICAgICAgIHJlc2V0UGFzc3dvcmRQb2xpY3lPcHRpb25zLmF1dG9FbnJvbGxFbmFibGVkID0gcG9saWN5Py5kYXRhPy5hdXRvRW5yb2xsRW5hYmxlZCA/PyBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtyZXNldFBhc3N3b3JkUG9saWN5T3B0aW9ucywgcG9saWN5Py5lbmFibGVkID8/IGZhbHNlXTtcclxuICAgIH1cclxuXHJcbiAgICBtYXBQb2xpY2llc0Zyb21Ub2tlbihwb2xpY2llc1Jlc3BvbnNlOiBMaXN0UmVzcG9uc2U8UG9saWN5UmVzcG9uc2U+KTogUG9saWN5W10ge1xyXG4gICAgICAgIGlmIChwb2xpY2llc1Jlc3BvbnNlID09IG51bGwgfHwgcG9saWNpZXNSZXNwb25zZS5kYXRhID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwb2xpY2llc0RhdGEgPSBwb2xpY2llc1Jlc3BvbnNlLmRhdGEubWFwKHAgPT4gbmV3IFBvbGljeURhdGEocCkpO1xyXG4gICAgICAgIHJldHVybiBwb2xpY2llc0RhdGEubWFwKHAgPT4gbmV3IFBvbGljeShwKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcG9saWN5QXBwbGllc1RvVXNlcihwb2xpY3lUeXBlOiBQb2xpY3lUeXBlLCBwb2xpY3lGaWx0ZXI/OiAocG9saWN5OiBQb2xpY3kpID0+IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCBwb2xpY2llcyA9IGF3YWl0IHRoaXMuZ2V0QWxsKHBvbGljeVR5cGUpO1xyXG4gICAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbnMgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldEFsbE9yZ2FuaXphdGlvbnMoKTtcclxuICAgICAgICBsZXQgZmlsdGVyZWRQb2xpY2llcztcclxuXHJcbiAgICAgICAgaWYgKHBvbGljeUZpbHRlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZpbHRlcmVkUG9saWNpZXMgPSBwb2xpY2llcy5maWx0ZXIocCA9PiBwLmVuYWJsZWQgJiYgcG9saWN5RmlsdGVyKHApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZpbHRlcmVkUG9saWNpZXMgPSBwb2xpY2llcy5maWx0ZXIocCA9PiBwLmVuYWJsZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcG9saWN5U2V0ID0gbmV3IFNldChmaWx0ZXJlZFBvbGljaWVzLm1hcChwID0+IHAub3JnYW5pemF0aW9uSWQpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9yZ2FuaXphdGlvbnMuc29tZShvID0+XHJcbiAgICAgICAgICAgIG8uZW5hYmxlZCAmJlxyXG4gICAgICAgICAgICBvLnN0YXR1cyA+PSBPcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZS5BY2NlcHRlZCAmJlxyXG4gICAgICAgICAgICBvLnVzZVBvbGljaWVzICYmXHJcbiAgICAgICAgICAgICF0aGlzLmlzRXhjZW1wdEZyb21Qb2xpY2llcyhvLCBwb2xpY3lUeXBlKSAmJlxyXG4gICAgICAgICAgICBwb2xpY3lTZXQuaGFzKG8uaWQpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzRXhjZW1wdEZyb21Qb2xpY2llcyhvcmdhbml6YXRpb246IE9yZ2FuaXphdGlvbiwgcG9saWN5VHlwZTogUG9saWN5VHlwZSkge1xyXG4gICAgICAgIGlmIChwb2xpY3lUeXBlID09PSBQb2xpY3lUeXBlLk1heGltdW1WYXVsdFRpbWVvdXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9yZ2FuaXphdGlvbi50eXBlID09PSBPcmdhbml6YXRpb25Vc2VyVHlwZS5Pd25lcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvcmdhbml6YXRpb24uaXNFeGVtcHRGcm9tUG9saWNpZXM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU2V0dGluZ3NTZXJ2aWNlIGFzIFNldHRpbmdzU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NldHRpbmdzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy91c2VyLnNlcnZpY2UnO1xyXG5cclxuY29uc3QgS2V5cyA9IHtcclxuICAgIHNldHRpbmdzUHJlZml4OiAnc2V0dGluZ3NfJyxcclxuICAgIGVxdWl2YWxlbnREb21haW5zOiAnZXF1aXZhbGVudERvbWFpbnMnLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdzU2VydmljZSBpbXBsZW1lbnRzIFNldHRpbmdzU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIHByaXZhdGUgc2V0dGluZ3NDYWNoZTogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSkge1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyQ2FjaGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0NhY2hlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFcXVpdmFsZW50RG9tYWlucygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFNldHRpbmdzS2V5KEtleXMuZXF1aXZhbGVudERvbWFpbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNldEVxdWl2YWxlbnREb21haW5zKGVxdWl2YWxlbnREb21haW5zOiBzdHJpbmdbXVtdKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTZXR0aW5nc0tleShLZXlzLmVxdWl2YWxlbnREb21haW5zLCBlcXVpdmFsZW50RG9tYWlucyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2xlYXIodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLnNldHRpbmdzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIZWxwZXJzXHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRTZXR0aW5ncygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzQ2FjaGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzQ2FjaGUgPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldChLZXlzLnNldHRpbmdzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NDYWNoZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldFNldHRpbmdzS2V5KGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IGF3YWl0IHRoaXMuZ2V0U2V0dGluZ3MoKTtcclxuICAgICAgICBpZiAoc2V0dGluZ3MgIT0gbnVsbCAmJiBzZXR0aW5nc1trZXldKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5nc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHNldFNldHRpbmdzS2V5KGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICBsZXQgc2V0dGluZ3MgPSBhd2FpdCB0aGlzLmdldFNldHRpbmdzKCk7XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBzZXR0aW5ncyA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0dGluZ3Nba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnNldHRpbmdzUHJlZml4ICsgdXNlcklkLCBzZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0NhY2hlID0gc2V0dGluZ3M7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUHJvZmlsZU9yZ2FuaXphdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvcHJvZmlsZU9yZ2FuaXphdGlvblJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGUnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25Vc2VyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL29yZ2FuaXphdGlvblVzZXJUeXBlJztcclxuaW1wb3J0IHsgUHJvZHVjdFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wcm9kdWN0VHlwZSc7XHJcblxyXG5pbXBvcnQgeyBQZXJtaXNzaW9uc0FwaSB9IGZyb20gJy4uL2FwaS9wZXJtaXNzaW9uc0FwaSc7XHJcblxyXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uRGF0YSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgc3RhdHVzOiBPcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZTtcclxuICAgIHR5cGU6IE9yZ2FuaXphdGlvblVzZXJUeXBlO1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgIHVzZVBvbGljaWVzOiBib29sZWFuO1xyXG4gICAgdXNlR3JvdXBzOiBib29sZWFuO1xyXG4gICAgdXNlRGlyZWN0b3J5OiBib29sZWFuO1xyXG4gICAgdXNlRXZlbnRzOiBib29sZWFuO1xyXG4gICAgdXNlVG90cDogYm9vbGVhbjtcclxuICAgIHVzZTJmYTogYm9vbGVhbjtcclxuICAgIHVzZUFwaTogYm9vbGVhbjtcclxuICAgIHVzZVNzbzogYm9vbGVhbjtcclxuICAgIHVzZUtleUNvbm5lY3RvcjogYm9vbGVhbjtcclxuICAgIHVzZVJlc2V0UGFzc3dvcmQ6IGJvb2xlYW47XHJcbiAgICBzZWxmSG9zdDogYm9vbGVhbjtcclxuICAgIHVzZXJzR2V0UHJlbWl1bTogYm9vbGVhbjtcclxuICAgIHNlYXRzOiBudW1iZXI7XHJcbiAgICBtYXhDb2xsZWN0aW9uczogbnVtYmVyO1xyXG4gICAgbWF4U3RvcmFnZUdiPzogbnVtYmVyO1xyXG4gICAgc3NvQm91bmQ6IGJvb2xlYW47XHJcbiAgICBpZGVudGlmaWVyOiBzdHJpbmc7XHJcbiAgICBwZXJtaXNzaW9uczogUGVybWlzc2lvbnNBcGk7XHJcbiAgICByZXNldFBhc3N3b3JkRW5yb2xsZWQ6IGJvb2xlYW47XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxuICAgIGhhc1B1YmxpY0FuZFByaXZhdGVLZXlzOiBib29sZWFuO1xyXG4gICAgcHJvdmlkZXJJZDogc3RyaW5nO1xyXG4gICAgcHJvdmlkZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBpc1Byb3ZpZGVyVXNlcjogYm9vbGVhbjtcclxuICAgIGZhbWlseVNwb25zb3JzaGlwRnJpZW5kbHlOYW1lOiBzdHJpbmc7XHJcbiAgICBmYW1pbHlTcG9uc29yc2hpcEF2YWlsYWJsZTogYm9vbGVhbjtcclxuICAgIHBsYW5Qcm9kdWN0VHlwZTogUHJvZHVjdFR5cGU7XHJcbiAgICBrZXlDb25uZWN0b3JFbmFibGVkOiBib29sZWFuO1xyXG4gICAga2V5Q29ubmVjdG9yVXJsOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSByZXNwb25zZS5pZDtcclxuICAgICAgICB0aGlzLm5hbWUgPSByZXNwb25zZS5uYW1lO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHJlc3BvbnNlLnR5cGU7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gcmVzcG9uc2UuZW5hYmxlZDtcclxuICAgICAgICB0aGlzLnVzZVBvbGljaWVzID0gcmVzcG9uc2UudXNlUG9saWNpZXM7XHJcbiAgICAgICAgdGhpcy51c2VHcm91cHMgPSByZXNwb25zZS51c2VHcm91cHM7XHJcbiAgICAgICAgdGhpcy51c2VEaXJlY3RvcnkgPSByZXNwb25zZS51c2VEaXJlY3Rvcnk7XHJcbiAgICAgICAgdGhpcy51c2VFdmVudHMgPSByZXNwb25zZS51c2VFdmVudHM7XHJcbiAgICAgICAgdGhpcy51c2VUb3RwID0gcmVzcG9uc2UudXNlVG90cDtcclxuICAgICAgICB0aGlzLnVzZTJmYSA9IHJlc3BvbnNlLnVzZTJmYTtcclxuICAgICAgICB0aGlzLnVzZUFwaSA9IHJlc3BvbnNlLnVzZUFwaTtcclxuICAgICAgICB0aGlzLnVzZVNzbyA9IHJlc3BvbnNlLnVzZVNzbztcclxuICAgICAgICB0aGlzLnVzZUtleUNvbm5lY3RvciA9IHJlc3BvbnNlLnVzZUtleUNvbm5lY3RvcjtcclxuICAgICAgICB0aGlzLnVzZVJlc2V0UGFzc3dvcmQgPSByZXNwb25zZS51c2VSZXNldFBhc3N3b3JkO1xyXG4gICAgICAgIHRoaXMuc2VsZkhvc3QgPSByZXNwb25zZS5zZWxmSG9zdDtcclxuICAgICAgICB0aGlzLnVzZXJzR2V0UHJlbWl1bSA9IHJlc3BvbnNlLnVzZXJzR2V0UHJlbWl1bTtcclxuICAgICAgICB0aGlzLnNlYXRzID0gcmVzcG9uc2Uuc2VhdHM7XHJcbiAgICAgICAgdGhpcy5tYXhDb2xsZWN0aW9ucyA9IHJlc3BvbnNlLm1heENvbGxlY3Rpb25zO1xyXG4gICAgICAgIHRoaXMubWF4U3RvcmFnZUdiID0gcmVzcG9uc2UubWF4U3RvcmFnZUdiO1xyXG4gICAgICAgIHRoaXMuc3NvQm91bmQgPSByZXNwb25zZS5zc29Cb3VuZDtcclxuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSByZXNwb25zZS5pZGVudGlmaWVyO1xyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnMgPSByZXNwb25zZS5wZXJtaXNzaW9ucztcclxuICAgICAgICB0aGlzLnJlc2V0UGFzc3dvcmRFbnJvbGxlZCA9IHJlc3BvbnNlLnJlc2V0UGFzc3dvcmRFbnJvbGxlZDtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHJlc3BvbnNlLnVzZXJJZDtcclxuICAgICAgICB0aGlzLmhhc1B1YmxpY0FuZFByaXZhdGVLZXlzID0gcmVzcG9uc2UuaGFzUHVibGljQW5kUHJpdmF0ZUtleXM7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcklkID0gcmVzcG9uc2UucHJvdmlkZXJJZDtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyTmFtZSA9IHJlc3BvbnNlLnByb3ZpZGVyTmFtZTtcclxuICAgICAgICB0aGlzLmZhbWlseVNwb25zb3JzaGlwRnJpZW5kbHlOYW1lID0gcmVzcG9uc2UuZmFtaWx5U3BvbnNvcnNoaXBGcmllbmRseU5hbWU7XHJcbiAgICAgICAgdGhpcy5mYW1pbHlTcG9uc29yc2hpcEF2YWlsYWJsZSA9IHJlc3BvbnNlLmZhbWlseVNwb25zb3JzaGlwQXZhaWxhYmxlO1xyXG4gICAgICAgIHRoaXMucGxhblByb2R1Y3RUeXBlID0gcmVzcG9uc2UucGxhblByb2R1Y3RUeXBlO1xyXG4gICAgICAgIHRoaXMua2V5Q29ubmVjdG9yRW5hYmxlZCA9IHJlc3BvbnNlLmtleUNvbm5lY3RvckVuYWJsZWQ7XHJcbiAgICAgICAgdGhpcy5rZXlDb25uZWN0b3JVcmwgPSByZXNwb25zZS5rZXlDb25uZWN0b3JVcmw7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUHJvZmlsZVByb3ZpZGVyUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9wcm9maWxlUHJvdmlkZXJSZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBQcm92aWRlclVzZXJTdGF0dXNUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvcHJvdmlkZXJVc2VyU3RhdHVzVHlwZSc7XHJcbmltcG9ydCB7IFByb3ZpZGVyVXNlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wcm92aWRlclVzZXJUeXBlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm92aWRlckRhdGEge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHN0YXR1czogUHJvdmlkZXJVc2VyU3RhdHVzVHlwZTtcclxuICAgIHR5cGU6IFByb3ZpZGVyVXNlclR5cGU7XHJcbiAgICBlbmFibGVkOiBib29sZWFuO1xyXG4gICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICB1c2VFdmVudHM6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IFByb2ZpbGVQcm92aWRlclJlc3BvbnNlKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IHJlc3BvbnNlLmlkO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHJlc3BvbnNlLm5hbWU7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XHJcbiAgICAgICAgdGhpcy50eXBlID0gcmVzcG9uc2UudHlwZTtcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSByZXNwb25zZS5lbmFibGVkO1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gcmVzcG9uc2UudXNlcklkO1xyXG4gICAgICAgIHRoaXMudXNlRXZlbnRzID0gcmVzcG9uc2UudXNlRXZlbnRzO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29sbGVjdGlvblNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY29sbGVjdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XHJcbmltcG9ydCB7IEZvbGRlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvZm9sZGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBLZXlDb25uZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2tleUNvbm5lY3Rvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2luZ1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvbWVzc2FnaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb2xpY3lTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3BvbGljeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VuZFNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc2VuZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NldHRpbmdzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTeW5jU2VydmljZSBhcyBTeW5jU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N5bmMuc2VydmljZSc7XHJcbmltcG9ydCB7IFRva2VuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy90b2tlbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdXNlci5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IENpcGhlckRhdGEgfSBmcm9tICcuLi9tb2RlbHMvZGF0YS9jaXBoZXJEYXRhJztcclxuaW1wb3J0IHsgQ29sbGVjdGlvbkRhdGEgfSBmcm9tICcuLi9tb2RlbHMvZGF0YS9jb2xsZWN0aW9uRGF0YSc7XHJcbmltcG9ydCB7IEZvbGRlckRhdGEgfSBmcm9tICcuLi9tb2RlbHMvZGF0YS9mb2xkZXJEYXRhJztcclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL29yZ2FuaXphdGlvbkRhdGEnO1xyXG5pbXBvcnQgeyBQb2xpY3lEYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvcG9saWN5RGF0YSc7XHJcbmltcG9ydCB7IFByb3ZpZGVyRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL3Byb3ZpZGVyRGF0YSc7XHJcbmltcG9ydCB7IFNlbmREYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvc2VuZERhdGEnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvY2lwaGVyUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2NvbGxlY3Rpb25SZXNwb25zZSc7XHJcbmltcG9ydCB7IERvbWFpbnNSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9kb21haW5zUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBGb2xkZXJSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9mb2xkZXJSZXNwb25zZSc7XHJcbmltcG9ydCB7XHJcbiAgICBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uLFxyXG4gICAgU3luY0ZvbGRlck5vdGlmaWNhdGlvbixcclxuICAgIFN5bmNTZW5kTm90aWZpY2F0aW9uLFxyXG59IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9ub3RpZmljYXRpb25SZXNwb25zZSc7XHJcbmltcG9ydCB7IFBvbGljeVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3BvbGljeVJlc3BvbnNlJztcclxuaW1wb3J0IHsgUHJvZmlsZVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb2ZpbGVSZXNwb25zZSc7XHJcbmltcG9ydCB7IFNlbmRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9zZW5kUmVzcG9uc2UnO1xyXG5cclxuY29uc3QgS2V5cyA9IHtcclxuICAgIGxhc3RTeW5jUHJlZml4OiAnbGFzdFN5bmNfJyxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTeW5jU2VydmljZSBpbXBsZW1lbnRzIFN5bmNTZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgc3luY0luUHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSwgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgc2V0dGluZ3NTZXJ2aWNlOiBTZXR0aW5nc1NlcnZpY2UsIHByaXZhdGUgZm9sZGVyU2VydmljZTogRm9sZGVyU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNpcGhlclNlcnZpY2U6IENpcGhlclNlcnZpY2UsIHByaXZhdGUgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNvbGxlY3Rpb25TZXJ2aWNlOiBDb2xsZWN0aW9uU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBtZXNzYWdpbmdTZXJ2aWNlOiBNZXNzYWdpbmdTZXJ2aWNlLCBwcml2YXRlIHBvbGljeVNlcnZpY2U6IFBvbGljeVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBzZW5kU2VydmljZTogU2VuZFNlcnZpY2UsIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHRva2VuU2VydmljZTogVG9rZW5TZXJ2aWNlLCBwcml2YXRlIGtleUNvbm5lY3RvclNlcnZpY2U6IEtleUNvbm5lY3RvclNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBsb2dvdXRDYWxsYmFjazogKGV4cGlyZWQ6IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD4pIHtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRMYXN0U3luYygpOiBQcm9taXNlPERhdGU+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGlmICh1c2VySWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxhc3RTeW5jID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8YW55PihLZXlzLmxhc3RTeW5jUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICBpZiAobGFzdFN5bmMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGxhc3RTeW5jKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNldExhc3RTeW5jKGRhdGU6IERhdGUpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgaWYgKHVzZXJJZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmxhc3RTeW5jUHJlZml4ICsgdXNlcklkLCBkYXRlLnRvSlNPTigpKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBmdWxsU3luYyhmb3JjZVN5bmM6IGJvb2xlYW4sIGFsbG93VGhyb3dPbkVycm9yID0gZmFsc2UpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICB0aGlzLnN5bmNTdGFydGVkKCk7XHJcbiAgICAgICAgY29uc3QgaXNBdXRoZW50aWNhdGVkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKTtcclxuICAgICAgICBpZiAoIWlzQXV0aGVudGljYXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgbGV0IG5lZWRzU3luYyA9IGZhbHNlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIG5lZWRzU3luYyA9IGF3YWl0IHRoaXMubmVlZHNTeW5jaW5nKGZvcmNlU3luYyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBpZiAoYWxsb3dUaHJvd09uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghbmVlZHNTeW5jKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0TGFzdFN5bmMobm93KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY0NvbXBsZXRlZChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5yZWZyZXNoSWRlbnRpdHlUb2tlbigpO1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5nZXRTeW5jKCk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN5bmNQcm9maWxlKHJlc3BvbnNlLnByb2ZpbGUpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN5bmNGb2xkZXJzKHVzZXJJZCwgcmVzcG9uc2UuZm9sZGVycyk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3luY0NvbGxlY3Rpb25zKHJlc3BvbnNlLmNvbGxlY3Rpb25zKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jQ2lwaGVycyh1c2VySWQsIHJlc3BvbnNlLmNpcGhlcnMpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN5bmNTZW5kcyh1c2VySWQsIHJlc3BvbnNlLnNlbmRzKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2V0dGluZ3ModXNlcklkLCByZXNwb25zZS5kb21haW5zKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jUG9saWNpZXMocmVzcG9uc2UucG9saWNpZXMpO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRMYXN0U3luYyhub3cpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKHRydWUpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKGFsbG93VGhyb3dPbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY0NvbXBsZXRlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc3luY1Vwc2VydEZvbGRlcihub3RpZmljYXRpb246IFN5bmNGb2xkZXJOb3RpZmljYXRpb24sIGlzRWRpdDogYm9vbGVhbik6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHRoaXMuc3luY1N0YXJ0ZWQoKTtcclxuICAgICAgICBpZiAoYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxGb2xkZXIgPSBhd2FpdCB0aGlzLmZvbGRlclNlcnZpY2UuZ2V0KG5vdGlmaWNhdGlvbi5pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKCFpc0VkaXQgJiYgbG9jYWxGb2xkZXIgPT0gbnVsbCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAoaXNFZGl0ICYmIGxvY2FsRm9sZGVyICE9IG51bGwgJiYgbG9jYWxGb2xkZXIucmV2aXNpb25EYXRlIDwgbm90aWZpY2F0aW9uLnJldmlzaW9uRGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdGVGb2xkZXIgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZ2V0Rm9sZGVyKG5vdGlmaWNhdGlvbi5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW90ZUZvbGRlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZm9sZGVyU2VydmljZS51cHNlcnQobmV3IEZvbGRlckRhdGEocmVtb3RlRm9sZGVyLCB1c2VySWQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3N5bmNlZFVwc2VydGVkRm9sZGVyJywgeyBmb2xkZXJJZDogbm90aWZpY2F0aW9uLmlkIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHN5bmNEZWxldGVGb2xkZXIobm90aWZpY2F0aW9uOiBTeW5jRm9sZGVyTm90aWZpY2F0aW9uKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgdGhpcy5zeW5jU3RhcnRlZCgpO1xyXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZm9sZGVyU2VydmljZS5kZWxldGUobm90aWZpY2F0aW9uLmlkKTtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3N5bmNlZERlbGV0ZWRGb2xkZXInLCB7IGZvbGRlcklkOiBub3RpZmljYXRpb24uaWQgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3luY0NvbXBsZXRlZCh0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHN5bmNVcHNlcnRDaXBoZXIobm90aWZpY2F0aW9uOiBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uLCBpc0VkaXQ6IGJvb2xlYW4pOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICB0aGlzLnN5bmNTdGFydGVkKCk7XHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxldCBzaG91bGRVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxDaXBoZXIgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0KG5vdGlmaWNhdGlvbi5pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxDaXBoZXIgIT0gbnVsbCAmJiBsb2NhbENpcGhlci5yZXZpc2lvbkRhdGUgPj0gbm90aWZpY2F0aW9uLnJldmlzaW9uRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjaGVja0NvbGxlY3Rpb25zID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRWRpdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRVcGRhdGUgPSBsb2NhbENpcGhlciAhPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja0NvbGxlY3Rpb25zID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uLmNvbGxlY3Rpb25JZHMgPT0gbnVsbCB8fCBub3RpZmljYXRpb24ub3JnYW5pemF0aW9uSWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gbG9jYWxDaXBoZXIgPT0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tDb2xsZWN0aW9ucyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGRVcGRhdGUgJiYgY2hlY2tDb2xsZWN0aW9ucyAmJiBub3RpZmljYXRpb24ub3JnYW5pemF0aW9uSWQgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5jb2xsZWN0aW9uSWRzICE9IG51bGwgJiYgbm90aWZpY2F0aW9uLmNvbGxlY3Rpb25JZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gYXdhaXQgdGhpcy5jb2xsZWN0aW9uU2VydmljZS5nZXRBbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uLmNvbGxlY3Rpb25JZHMuaW5kZXhPZihjb2xsZWN0aW9uc1tpXS5pZCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW90ZUNpcGhlciA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5nZXRDaXBoZXIobm90aWZpY2F0aW9uLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3RlQ2lwaGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLnVwc2VydChuZXcgQ2lwaGVyRGF0YShyZW1vdGVDaXBoZXIsIHVzZXJJZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc3luY2VkVXBzZXJ0ZWRDaXBoZXInLCB7IGNpcGhlcklkOiBub3RpZmljYXRpb24uaWQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAhPSBudWxsICYmIGUuc3RhdHVzQ29kZSA9PT0gNDA0ICYmIGlzRWRpdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5kZWxldGUobm90aWZpY2F0aW9uLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc3luY2VkRGVsZXRlZENpcGhlcicsIHsgY2lwaGVySWQ6IG5vdGlmaWNhdGlvbi5pZCB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHN5bmNEZWxldGVDaXBoZXIobm90aWZpY2F0aW9uOiBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgdGhpcy5zeW5jU3RhcnRlZCgpO1xyXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5kZWxldGUobm90aWZpY2F0aW9uLmlkKTtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3N5bmNlZERlbGV0ZWRDaXBoZXInLCB7IGNpcGhlcklkOiBub3RpZmljYXRpb24uaWQgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHN5bmNVcHNlcnRTZW5kKG5vdGlmaWNhdGlvbjogU3luY1NlbmROb3RpZmljYXRpb24sIGlzRWRpdDogYm9vbGVhbik6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHRoaXMuc3luY1N0YXJ0ZWQoKTtcclxuICAgICAgICBpZiAoYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxTZW5kID0gYXdhaXQgdGhpcy5zZW5kU2VydmljZS5nZXQobm90aWZpY2F0aW9uLmlkKTtcclxuICAgICAgICAgICAgICAgIGlmICgoIWlzRWRpdCAmJiBsb2NhbFNlbmQgPT0gbnVsbCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAoaXNFZGl0ICYmIGxvY2FsU2VuZCAhPSBudWxsICYmIGxvY2FsU2VuZC5yZXZpc2lvbkRhdGUgPCBub3RpZmljYXRpb24ucmV2aXNpb25EYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW90ZVNlbmQgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZ2V0U2VuZChub3RpZmljYXRpb24uaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVTZW5kICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZW5kU2VydmljZS51cHNlcnQobmV3IFNlbmREYXRhKHJlbW90ZVNlbmQsIHVzZXJJZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc3luY2VkVXBzZXJ0ZWRTZW5kJywgeyBzZW5kSWQ6IG5vdGlmaWNhdGlvbi5pZCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY0NvbXBsZXRlZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzeW5jRGVsZXRlU2VuZChub3RpZmljYXRpb246IFN5bmNTZW5kTm90aWZpY2F0aW9uKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgdGhpcy5zeW5jU3RhcnRlZCgpO1xyXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZFNlcnZpY2UuZGVsZXRlKG5vdGlmaWNhdGlvbi5pZCk7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzeW5jZWREZWxldGVkU2VuZCcsIHsgc2VuZElkOiBub3RpZmljYXRpb24uaWQgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3luY0NvbXBsZXRlZCh0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlcnNcclxuXHJcbiAgICBwcml2YXRlIHN5bmNTdGFydGVkKCkge1xyXG4gICAgICAgIHRoaXMuc3luY0luUHJvZ3Jlc3MgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzeW5jU3RhcnRlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3luY0NvbXBsZXRlZChzdWNjZXNzZnVsbHk6IGJvb2xlYW4pOiBib29sZWFuIHtcclxuICAgICAgICB0aGlzLnN5bmNJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3N5bmNDb21wbGV0ZWQnLCB7IHN1Y2Nlc3NmdWxseTogc3VjY2Vzc2Z1bGx5IH0pO1xyXG4gICAgICAgIHJldHVybiBzdWNjZXNzZnVsbHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBuZWVkc1N5bmNpbmcoZm9yY2VTeW5jOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKGZvcmNlU3luYykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxhc3RTeW5jID0gYXdhaXQgdGhpcy5nZXRMYXN0U3luYygpO1xyXG4gICAgICAgIGlmIChsYXN0U3luYyA9PSBudWxsIHx8IGxhc3RTeW5jLmdldFRpbWUoKSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLmdldEFjY291bnRSZXZpc2lvbkRhdGUoKTtcclxuICAgICAgICBpZiAobmV3IERhdGUocmVzcG9uc2UpIDw9IGxhc3RTeW5jKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBzeW5jUHJvZmlsZShyZXNwb25zZTogUHJvZmlsZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFNlY3VyaXR5U3RhbXAoKTtcclxuICAgICAgICBpZiAoc3RhbXAgIT0gbnVsbCAmJiBzdGFtcCAhPT0gcmVzcG9uc2Uuc2VjdXJpdHlTdGFtcCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sb2dvdXRDYWxsYmFjayAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvZ291dENhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YW1wIGhhcyBjaGFuZ2VkJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2Uuc2V0RW5jS2V5KHJlc3BvbnNlLmtleSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldEVuY1ByaXZhdGVLZXkocmVzcG9uc2UucHJpdmF0ZUtleSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldFByb3ZpZGVyS2V5cyhyZXNwb25zZS5wcm92aWRlcnMpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5zZXRPcmdLZXlzKHJlc3BvbnNlLm9yZ2FuaXphdGlvbnMsIHJlc3BvbnNlLnByb3ZpZGVyT3JnYW5pemF0aW9ucyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51c2VyU2VydmljZS5zZXRTZWN1cml0eVN0YW1wKHJlc3BvbnNlLnNlY3VyaXR5U3RhbXApO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXNlclNlcnZpY2Uuc2V0RW1haWxWZXJpZmllZChyZXNwb25zZS5lbWFpbFZlcmlmaWVkKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLnNldEZvcmNlUGFzc3dvcmRSZXNldChyZXNwb25zZS5mb3JjZVBhc3N3b3JkUmVzZXQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMua2V5Q29ubmVjdG9yU2VydmljZS5zZXRVc2VzS2V5Q29ubmVjdG9yKHJlc3BvbnNlLnVzZXNLZXlDb25uZWN0b3IpO1xyXG5cclxuICAgICAgICBjb25zdCBvcmdhbml6YXRpb25zOiB7IFtpZDogc3RyaW5nXTogT3JnYW5pemF0aW9uRGF0YTsgfSA9IHt9O1xyXG4gICAgICAgIHJlc3BvbnNlLm9yZ2FuaXphdGlvbnMuZm9yRWFjaChvID0+IHtcclxuICAgICAgICAgICAgb3JnYW5pemF0aW9uc1tvLmlkXSA9IG5ldyBPcmdhbml6YXRpb25EYXRhKG8pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBwcm92aWRlcnM6IHsgW2lkOiBzdHJpbmddOiBQcm92aWRlckRhdGE7IH0gPSB7fTtcclxuICAgICAgICByZXNwb25zZS5wcm92aWRlcnMuZm9yRWFjaChwID0+IHtcclxuICAgICAgICAgICAgcHJvdmlkZXJzW3AuaWRdID0gbmV3IFByb3ZpZGVyRGF0YShwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVzcG9uc2UucHJvdmlkZXJPcmdhbml6YXRpb25zLmZvckVhY2gobyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvcmdhbml6YXRpb25zW28uaWRdID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbnNbby5pZF0gPSBuZXcgT3JnYW5pemF0aW9uRGF0YShvKTtcclxuICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbnNbby5pZF0uaXNQcm92aWRlclVzZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICAgICAgdGhpcy51c2VyU2VydmljZS5yZXBsYWNlT3JnYW5pemF0aW9ucyhvcmdhbml6YXRpb25zKSxcclxuICAgICAgICAgICAgdGhpcy51c2VyU2VydmljZS5yZXBsYWNlUHJvdmlkZXJzKHByb3ZpZGVycyksXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmtleUNvbm5lY3RvclNlcnZpY2UudXNlck5lZWRzTWlncmF0aW9uKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ2NvbnZlcnRBY2NvdW50VG9LZXlDb25uZWN0b3InKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmtleUNvbm5lY3RvclNlcnZpY2UucmVtb3ZlQ29udmVydEFjY291bnRSZXF1aXJlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHN5bmNGb2xkZXJzKHVzZXJJZDogc3RyaW5nLCByZXNwb25zZTogRm9sZGVyUmVzcG9uc2VbXSkge1xyXG4gICAgICAgIGNvbnN0IGZvbGRlcnM6IHsgW2lkOiBzdHJpbmddOiBGb2xkZXJEYXRhOyB9ID0ge307XHJcbiAgICAgICAgcmVzcG9uc2UuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgZm9sZGVyc1tmLmlkXSA9IG5ldyBGb2xkZXJEYXRhKGYsIHVzZXJJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZm9sZGVyU2VydmljZS5yZXBsYWNlKGZvbGRlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc3luY0NvbGxlY3Rpb25zKHJlc3BvbnNlOiBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlW10pIHtcclxuICAgICAgICBjb25zdCBjb2xsZWN0aW9uczogeyBbaWQ6IHN0cmluZ106IENvbGxlY3Rpb25EYXRhOyB9ID0ge307XHJcbiAgICAgICAgcmVzcG9uc2UuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbnNbYy5pZF0gPSBuZXcgQ29sbGVjdGlvbkRhdGEoYyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29sbGVjdGlvblNlcnZpY2UucmVwbGFjZShjb2xsZWN0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBzeW5jQ2lwaGVycyh1c2VySWQ6IHN0cmluZywgcmVzcG9uc2U6IENpcGhlclJlc3BvbnNlW10pIHtcclxuICAgICAgICBjb25zdCBjaXBoZXJzOiB7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfSA9IHt9O1xyXG4gICAgICAgIHJlc3BvbnNlLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgIGNpcGhlcnNbYy5pZF0gPSBuZXcgQ2lwaGVyRGF0YShjLCB1c2VySWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UucmVwbGFjZShjaXBoZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHN5bmNTZW5kcyh1c2VySWQ6IHN0cmluZywgcmVzcG9uc2U6IFNlbmRSZXNwb25zZVtdKSB7XHJcbiAgICAgICAgY29uc3Qgc2VuZHM6IHsgW2lkOiBzdHJpbmddOiBTZW5kRGF0YTsgfSA9IHt9O1xyXG4gICAgICAgIHJlc3BvbnNlLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgIHNlbmRzW3MuaWRdID0gbmV3IFNlbmREYXRhKHMsIHVzZXJJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFNlcnZpY2UucmVwbGFjZShzZW5kcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBzeW5jU2V0dGluZ3ModXNlcklkOiBzdHJpbmcsIHJlc3BvbnNlOiBEb21haW5zUmVzcG9uc2UpIHtcclxuICAgICAgICBsZXQgZXFEb21haW5zOiBzdHJpbmdbXVtdID0gW107XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlICE9IG51bGwgJiYgcmVzcG9uc2UuZXF1aXZhbGVudERvbWFpbnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBlcURvbWFpbnMgPSBlcURvbWFpbnMuY29uY2F0KHJlc3BvbnNlLmVxdWl2YWxlbnREb21haW5zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZSAhPSBudWxsICYmIHJlc3BvbnNlLmdsb2JhbEVxdWl2YWxlbnREb21haW5zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UuZ2xvYmFsRXF1aXZhbGVudERvbWFpbnMuZm9yRWFjaChnbG9iYWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5kb21haW5zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBlcURvbWFpbnMucHVzaChnbG9iYWwuZG9tYWlucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NTZXJ2aWNlLnNldEVxdWl2YWxlbnREb21haW5zKGVxRG9tYWlucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBzeW5jUG9saWNpZXMocmVzcG9uc2U6IFBvbGljeVJlc3BvbnNlW10pIHtcclxuICAgICAgICBjb25zdCBwb2xpY2llczogeyBbaWQ6IHN0cmluZ106IFBvbGljeURhdGE7IH0gPSB7fTtcclxuICAgICAgICBpZiAocmVzcG9uc2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXNwb25zZS5mb3JFYWNoKHAgPT4ge1xyXG4gICAgICAgICAgICAgICAgcG9saWNpZXNbcC5pZF0gPSBuZXcgUG9saWN5RGF0YShwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBvbGljeVNlcnZpY2UucmVwbGFjZShwb2xpY2llcyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTWVzc2FnaW5nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9tZXNzYWdpbmcuc2VydmljZSc7XHJcbmltcG9ydCB7IFBsYXRmb3JtVXRpbHNTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3BsYXRmb3JtVXRpbHMuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFN5c3RlbVNlcnZpY2UgYXMgU3lzdGVtU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N5c3RlbS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy92YXVsdFRpbWVvdXQuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnLi9jb25zdGFudHMuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN5c3RlbVNlcnZpY2UgaW1wbGVtZW50cyBTeXN0ZW1TZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgcHJpdmF0ZSByZWxvYWRJbnRlcnZhbDogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgY2xlYXJDbGlwYm9hcmRUaW1lb3V0OiBhbnkgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBjbGVhckNsaXBib2FyZFRpbWVvdXRGdW5jdGlvbjogKCkgPT4gUHJvbWlzZTxhbnk+ID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSB2YXVsdFRpbWVvdXRTZXJ2aWNlOiBWYXVsdFRpbWVvdXRTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgbWVzc2FnaW5nU2VydmljZTogTWVzc2FnaW5nU2VydmljZSwgcHJpdmF0ZSBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSByZWxvYWRDYWxsYmFjazogKCkgPT4gUHJvbWlzZTx2b2lkPiA9IG51bGwpIHtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydFByb2Nlc3NSZWxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5waW5Qcm90ZWN0ZWRLZXkgIT0gbnVsbCB8fFxyXG4gICAgICAgICAgICB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UuYmlvbWV0cmljTG9ja2VkIHx8XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkSW50ZXJ2YWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FuY2VsUHJvY2Vzc1JlbG9hZCgpO1xyXG4gICAgICAgIHRoaXMucmVsb2FkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBkb1JlZnJlc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oQ29uc3RhbnRzU2VydmljZS5sYXN0QWN0aXZlS2V5KTtcclxuICAgICAgICAgICAgaWYgKGxhc3RBY3RpdmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlmZlNlY29uZHMgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gbGFzdEFjdGl2ZTtcclxuICAgICAgICAgICAgICAgIC8vIERvbid0IHJlZnJlc2ggaWYgdGhleSBhcmUgc3RpbGwgYWN0aXZlIGluIHRoZSB3aW5kb3dcclxuICAgICAgICAgICAgICAgIGRvUmVmcmVzaCA9IGRpZmZTZWNvbmRzID49IDUwMDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYmlvbWV0cmljTG9ja2VkRmluZ2VycHJpbnRWYWxpZGF0ZWQgPVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8Ym9vbGVhbj4oQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNGaW5nZXJwcmludFZhbGlkYXRlZCkgJiYgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmJpb21ldHJpY0xvY2tlZDtcclxuICAgICAgICAgICAgaWYgKGRvUmVmcmVzaCAmJiAhYmlvbWV0cmljTG9ja2VkRmluZ2VycHJpbnRWYWxpZGF0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWxvYWRJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZEludGVydmFsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdyZWxvYWRQcm9jZXNzJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWxvYWRDYWxsYmFjayAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTAwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbFByb2Nlc3NSZWxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVsb2FkSW50ZXJ2YWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMucmVsb2FkSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbG9hZEludGVydmFsID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJDbGlwYm9hcmQoY2xpcGJvYXJkVmFsdWU6IHN0cmluZywgdGltZW91dE1zOiBudW1iZXIgPSBudWxsKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xlYXJDbGlwYm9hcmRUaW1lb3V0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xlYXJDbGlwYm9hcmRUaW1lb3V0KTtcclxuICAgICAgICAgICAgdGhpcy5jbGVhckNsaXBib2FyZFRpbWVvdXQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKGNsaXBib2FyZFZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oQ29uc3RhbnRzU2VydmljZS5jbGVhckNsaXBib2FyZEtleSkudGhlbihjbGVhclNlY29uZHMgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2xlYXJTZWNvbmRzID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGltZW91dE1zID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVvdXRNcyA9IGNsZWFyU2Vjb25kcyAqIDEwMDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jbGVhckNsaXBib2FyZFRpbWVvdXRGdW5jdGlvbiA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsaXBib2FyZFZhbHVlTm93ID0gYXdhaXQgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5yZWFkRnJvbUNsaXBib2FyZCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsaXBib2FyZFZhbHVlID09PSBjbGlwYm9hcmRWYWx1ZU5vdykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKCcnLCB7IGNsZWFyaW5nOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2xpcGJvYXJkVGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jbGVhclBlbmRpbmdDbGlwYm9hcmQoKTtcclxuICAgICAgICAgICAgfSwgdGltZW91dE1zKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhclBlbmRpbmdDbGlwYm9hcmQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xlYXJDbGlwYm9hcmRUaW1lb3V0RnVuY3Rpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsZWFyQ2xpcGJvYXJkVGltZW91dEZ1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDbGlwYm9hcmRUaW1lb3V0RnVuY3Rpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnLi9jb25zdGFudHMuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUb2tlblNlcnZpY2UgYXMgVG9rZW5TZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdG9rZW4uc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xyXG5cclxuY29uc3QgS2V5cyA9IHtcclxuICAgIGFjY2Vzc1Rva2VuOiAnYWNjZXNzVG9rZW4nLFxyXG4gICAgcmVmcmVzaFRva2VuOiAncmVmcmVzaFRva2VuJyxcclxuICAgIHR3b0ZhY3RvclRva2VuUHJlZml4OiAndHdvRmFjdG9yVG9rZW5fJyxcclxuICAgIGNsaWVudElkOiAnYXBpa2V5X2NsaWVudElkJyxcclxuICAgIGNsaWVudFNlY3JldDogJ2FwaWtleV9jbGllbnRTZWNyZXQnLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFRva2VuU2VydmljZSBpbXBsZW1lbnRzIFRva2VuU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIHRva2VuOiBzdHJpbmc7XHJcbiAgICBkZWNvZGVkVG9rZW46IGFueTtcclxuICAgIHJlZnJlc2hUb2tlbjogc3RyaW5nO1xyXG4gICAgY2xpZW50SWQ6IHN0cmluZztcclxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0VG9rZW5zKGFjY2Vzc1Rva2VuOiBzdHJpbmcsIHJlZnJlc2hUb2tlbjogc3RyaW5nLCBjbGllbnRJZENsaWVudFNlY3JldDogW3N0cmluZywgc3RyaW5nXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRUb2tlbihhY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRSZWZyZXNoVG9rZW4ocmVmcmVzaFRva2VuKTtcclxuICAgICAgICBpZiAoY2xpZW50SWRDbGllbnRTZWNyZXQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNldENsaWVudElkKGNsaWVudElkQ2xpZW50U2VjcmV0WzBdKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRDbGllbnRTZWNyZXQoY2xpZW50SWRDbGllbnRTZWNyZXRbMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZXRDbGllbnRJZChjbGllbnRJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVUb2tlblZhbHVlKEtleXMuY2xpZW50SWQsIGNsaWVudElkKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRDbGllbnRJZCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGlmICh0aGlzLmNsaWVudElkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50SWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNsaWVudElkID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLmNsaWVudElkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRJZDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZXRDbGllbnRTZWNyZXQoY2xpZW50U2VjcmV0OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRoaXMuY2xpZW50U2VjcmV0ID0gY2xpZW50U2VjcmV0O1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlVG9rZW5WYWx1ZShLZXlzLmNsaWVudFNlY3JldCwgY2xpZW50U2VjcmV0KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRDbGllbnRTZWNyZXQoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBpZiAodGhpcy5jbGllbnRTZWNyZXQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRTZWNyZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oS2V5cy5jbGllbnRTZWNyZXQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFNlY3JldDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZXRUb2tlbih0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XHJcbiAgICAgICAgdGhpcy5kZWNvZGVkVG9rZW4gPSBudWxsO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlVG9rZW5WYWx1ZShLZXlzLmFjY2Vzc1Rva2VuLCB0b2tlbik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0VG9rZW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBpZiAodGhpcy50b2tlbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva2VuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50b2tlbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oS2V5cy5hY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW47XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0UmVmcmVzaFRva2VuKHJlZnJlc2hUb2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IHJlZnJlc2hUb2tlbjtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVRva2VuVmFsdWUoS2V5cy5yZWZyZXNoVG9rZW4sIHJlZnJlc2hUb2tlbik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0UmVmcmVzaFRva2VuKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVmcmVzaFRva2VuICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaFRva2VuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW4gPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KEtleXMucmVmcmVzaFRva2VuKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW47XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdG9nZ2xlVG9rZW5zKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLmdldFRva2VuKCk7XHJcbiAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuID0gYXdhaXQgdGhpcy5nZXRSZWZyZXNoVG9rZW4oKTtcclxuICAgICAgICBjb25zdCBjbGllbnRJZCA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50SWQoKTtcclxuICAgICAgICBjb25zdCBjbGllbnRTZWNyZXQgPSBhd2FpdCB0aGlzLmdldENsaWVudFNlY3JldCgpO1xyXG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldChDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEtleSk7XHJcbiAgICAgICAgY29uc3QgYWN0aW9uID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQoQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRBY3Rpb25LZXkpO1xyXG4gICAgICAgIGlmICgodGltZW91dCAhPSBudWxsIHx8IHRpbWVvdXQgPT09IDApICYmIGFjdGlvbiA9PT0gJ2xvZ091dCcpIHtcclxuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIHZhdWx0IHRpbWVvdXQgYW5kIHRoZSBhY3Rpb24gaXMgbG9nIG91dCwgcmVzZXQgdG9rZW5zXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xlYXJUb2tlbigpO1xyXG4gICAgICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuO1xyXG4gICAgICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpZW50U2VjcmV0ID0gY2xpZW50U2VjcmV0O1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnNldFRva2VuKHRva2VuKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnNldFJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW4pO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0Q2xpZW50SWQoY2xpZW50SWQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0Q2xpZW50U2VjcmV0KGNsaWVudFNlY3JldCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VHdvRmFjdG9yVG9rZW4odG9rZW46IHN0cmluZywgZW1haWw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnR3b0ZhY3RvclRva2VuUHJlZml4ICsgZW1haWwsIHRva2VuKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUd29GYWN0b3JUb2tlbihlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLnR3b0ZhY3RvclRva2VuUHJlZml4ICsgZW1haWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyVHdvRmFjdG9yVG9rZW4oZW1haWw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMudHdvRmFjdG9yVG9rZW5QcmVmaXggKyBlbWFpbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2xlYXJUb2tlbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRoaXMudG9rZW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGVjb2RlZFRva2VuID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBudWxsO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmFjY2Vzc1Rva2VuKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLnJlZnJlc2hUb2tlbik7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5jbGllbnRJZCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5jbGllbnRTZWNyZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGp3dGhlbHBlciBtZXRob2RzXHJcbiAgICAvLyByZWYgaHR0cHM6Ly9naXRodWIuY29tL2F1dGgwL2FuZ3VsYXItand0L2Jsb2IvbWFzdGVyL3NyYy9hbmd1bGFySnd0L3NlcnZpY2VzL2p3dC5qc1xyXG5cclxuICAgIGRlY29kZVRva2VuKCk6IGFueSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVjb2RlZFRva2VuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZWRUb2tlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRva2VuID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb2tlbiBub3QgZm91bmQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwYXJ0cyA9IHRoaXMudG9rZW4uc3BsaXQoJy4nKTtcclxuICAgICAgICBpZiAocGFydHMubGVuZ3RoICE9PSAzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSldUIG11c3QgaGF2ZSAzIHBhcnRzJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkZWNvZGVkID0gVXRpbHMuZnJvbVVybEI2NFRvVXRmOChwYXJ0c1sxXSk7XHJcbiAgICAgICAgaWYgKGRlY29kZWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZWNvZGUgdGhlIHRva2VuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRlY29kZWRUb2tlbiA9IEpTT04ucGFyc2UoZGVjb2RlZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlZFRva2VuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRva2VuRXhwaXJhdGlvbkRhdGUoKTogRGF0ZSB7XHJcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IHRoaXMuZGVjb2RlVG9rZW4oKTtcclxuICAgICAgICBpZiAodHlwZW9mIGRlY29kZWQuZXhwID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSgwKTsgLy8gVGhlIDAgaGVyZSBpcyB0aGUga2V5LCB3aGljaCBzZXRzIHRoZSBkYXRlIHRvIHRoZSBlcG9jaFxyXG4gICAgICAgIGQuc2V0VVRDU2Vjb25kcyhkZWNvZGVkLmV4cCk7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9XHJcblxyXG4gICAgdG9rZW5TZWNvbmRzUmVtYWluaW5nKG9mZnNldFNlY29uZHM6IG51bWJlciA9IDApOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLmdldFRva2VuRXhwaXJhdGlvbkRhdGUoKTtcclxuICAgICAgICBpZiAoZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbXNSZW1haW5pbmcgPSBkLnZhbHVlT2YoKSAtIChuZXcgRGF0ZSgpLnZhbHVlT2YoKSArIChvZmZzZXRTZWNvbmRzICogMTAwMCkpO1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG1zUmVtYWluaW5nIC8gMTAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9rZW5OZWVkc1JlZnJlc2gobWludXRlczogbnVtYmVyID0gNSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IHNSZW1haW5pbmcgPSB0aGlzLnRva2VuU2Vjb25kc1JlbWFpbmluZygpO1xyXG4gICAgICAgIHJldHVybiBzUmVtYWluaW5nIDwgKDYwICogbWludXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlcklkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IHRoaXMuZGVjb2RlVG9rZW4oKTtcclxuICAgICAgICBpZiAodHlwZW9mIGRlY29kZWQuc3ViID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHVzZXIgaWQgZm91bmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkZWNvZGVkLnN1YiBhcyBzdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RW1haWwoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy5kZWNvZGVUb2tlbigpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGVjb2RlZC5lbWFpbCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBlbWFpbCBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRlY29kZWQuZW1haWwgYXMgc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVtYWlsVmVyaWZpZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IHRoaXMuZGVjb2RlVG9rZW4oKTtcclxuICAgICAgICBpZiAodHlwZW9mIGRlY29kZWQuZW1haWxfdmVyaWZpZWQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZW1haWwgdmVyaWZpY2F0aW9uIGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGVjb2RlZC5lbWFpbF92ZXJpZmllZCBhcyBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy5kZWNvZGVUb2tlbigpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGVjb2RlZC5uYW1lID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkZWNvZGVkLm5hbWUgYXMgc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByZW1pdW0oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IHRoaXMuZGVjb2RlVG9rZW4oKTtcclxuICAgICAgICBpZiAodHlwZW9mIGRlY29kZWQucHJlbWl1bSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRlY29kZWQucHJlbWl1bSBhcyBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldElzc3VlcigpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSB0aGlzLmRlY29kZVRva2VuKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNvZGVkLmlzcyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpc3N1ZXIgZm91bmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkZWNvZGVkLmlzcyBhcyBzdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SXNFeHRlcm5hbCgpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy5kZWNvZGVUb2tlbigpO1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkZWNvZGVkLmFtcikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBhbXIgZm91bmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkZWNvZGVkLmFtci5pbmNsdWRlcygnZXh0ZXJuYWwnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHN0b3JlVG9rZW5WYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnNraXBUb2tlblN0b3JhZ2UoKSkge1xyXG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgdmF1bHQgdGltZW91dCBhbmQgdGhlIGFjdGlvbiBpcyBsb2cgb3V0LCBkb24ndCBzdG9yZSB0b2tlblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc2tpcFRva2VuU3RvcmFnZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICBjb25zdCB0aW1lb3V0ID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8bnVtYmVyPihDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEtleSk7XHJcbiAgICAgICAgY29uc3QgYWN0aW9uID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEFjdGlvbktleSk7XHJcbiAgICAgICAgcmV0dXJuIHRpbWVvdXQgIT0gbnVsbCAmJiBhY3Rpb24gPT09ICdsb2dPdXQnO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbnN0YW50c1NlcnZpY2UgfSBmcm9tICcuL2NvbnN0YW50cy5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IENyeXB0b0Z1bmN0aW9uU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFRvdHBTZXJ2aWNlIGFzIFRvdHBTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdG90cC5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XHJcblxyXG5jb25zdCBCMzJDaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2Nyc7XHJcbmNvbnN0IFN0ZWFtQ2hhcnMgPSAnMjM0NTY3ODlCQ0RGR0hKS01OUFFSVFZXWFknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvdHBTZXJ2aWNlIGltcGxlbWVudHMgVG90cFNlcnZpY2VBYnN0cmFjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSBjcnlwdG9GdW5jdGlvblNlcnZpY2U6IENyeXB0b0Z1bmN0aW9uU2VydmljZSxcclxuICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkgeyB9XHJcblxyXG4gICAgYXN5bmMgZ2V0Q29kZShrZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgaWYgKGtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcGVyaW9kID0gMzA7XHJcbiAgICAgICAgbGV0IGFsZzogJ3NoYTEnIHwgJ3NoYTI1NicgfCAnc2hhNTEyJyA9ICdzaGExJztcclxuICAgICAgICBsZXQgZGlnaXRzID0gNjtcclxuICAgICAgICBsZXQga2V5QjMyID0ga2V5O1xyXG4gICAgICAgIGNvbnN0IGlzT3RwQXV0aCA9IGtleS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ290cGF1dGg6Ly8nKSA9PT0gMDtcclxuICAgICAgICBjb25zdCBpc1N0ZWFtQXV0aCA9ICFpc090cEF1dGggJiYga2V5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignc3RlYW06Ly8nKSA9PT0gMDtcclxuICAgICAgICBpZiAoaXNPdHBBdXRoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IFV0aWxzLmdldFF1ZXJ5UGFyYW1zKGtleSk7XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzKCdkaWdpdHMnKSAmJiBwYXJhbXMuZ2V0KCdkaWdpdHMnKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZ2l0UGFyYW1zID0gcGFyc2VJbnQocGFyYW1zLmdldCgnZGlnaXRzJykudHJpbSgpLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlnaXRQYXJhbXMgPiAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpZ2l0UGFyYW1zID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBkaWdpdFBhcmFtcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoJ0ludmFsaWQgZGlnaXRzIHBhcmFtLicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzKCdwZXJpb2QnKSAmJiBwYXJhbXMuZ2V0KCdwZXJpb2QnKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlcmlvZFBhcmFtID0gcGFyc2VJbnQocGFyYW1zLmdldCgncGVyaW9kJykudHJpbSgpLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVyaW9kUGFyYW0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmlvZCA9IHBlcmlvZFBhcmFtO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignSW52YWxpZCBwZXJpb2QgcGFyYW0uJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhcmFtcy5oYXMoJ3NlY3JldCcpICYmIHBhcmFtcy5nZXQoJ3NlY3JldCcpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGtleUIzMiA9IHBhcmFtcy5nZXQoJ3NlY3JldCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzKCdhbGdvcml0aG0nKSAmJiBwYXJhbXMuZ2V0KCdhbGdvcml0aG0nKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbGdQYXJhbSA9IHBhcmFtcy5nZXQoJ2FsZ29yaXRobScpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWxnUGFyYW0gPT09ICdzaGExJyB8fCBhbGdQYXJhbSA9PT0gJ3NoYTI1NicgfHwgYWxnUGFyYW0gPT09ICdzaGE1MTInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxnID0gYWxnUGFyYW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGlzU3RlYW1BdXRoKSB7XHJcbiAgICAgICAgICAgIGtleUIzMiA9IGtleS5zdWJzdHIoJ3N0ZWFtOi8vJy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBkaWdpdHMgPSA1O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZXBvY2ggPSBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMC4wKTtcclxuICAgICAgICBjb25zdCB0aW1lSGV4ID0gdGhpcy5sZWZ0UGFkKHRoaXMuZGVjVG9IZXgoTWF0aC5mbG9vcihlcG9jaCAvIHBlcmlvZCkpLCAxNiwgJzAnKTtcclxuICAgICAgICBjb25zdCB0aW1lQnl0ZXMgPSBVdGlscy5mcm9tSGV4VG9BcnJheSh0aW1lSGV4KTtcclxuICAgICAgICBjb25zdCBrZXlCeXRlcyA9IHRoaXMuYjMyVG9CeXRlcyhrZXlCMzIpO1xyXG5cclxuICAgICAgICBpZiAoIWtleUJ5dGVzLmxlbmd0aCB8fCAhdGltZUJ5dGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhhc2ggPSBhd2FpdCB0aGlzLnNpZ24oa2V5Qnl0ZXMsIHRpbWVCeXRlcywgYWxnKTtcclxuICAgICAgICBpZiAoaGFzaC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IChoYXNoW2hhc2gubGVuZ3RoIC0gMV0gJiAweGYpO1xyXG4gICAgICAgIGNvbnN0IGJpbmFyeSA9ICgoaGFzaFtvZmZzZXRdICYgMHg3ZikgPDwgMjQpIHwgKChoYXNoW29mZnNldCArIDFdICYgMHhmZikgPDwgMTYpIHxcclxuICAgICAgICAgICAgKChoYXNoW29mZnNldCArIDJdICYgMHhmZikgPDwgOCkgfCAoaGFzaFtvZmZzZXQgKyAzXSAmIDB4ZmYpO1xyXG4gICAgICAgIC8qIHRzbGludDplbmFibGUgKi9cclxuXHJcbiAgICAgICAgbGV0IG90cCA9ICcnO1xyXG4gICAgICAgIGlmIChpc1N0ZWFtQXV0aCkge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICAgICAgbGV0IGZ1bGxDb2RlID0gYmluYXJ5ICYgMHg3ZmZmZmZmZjtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaWdpdHM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgb3RwICs9IFN0ZWFtQ2hhcnNbZnVsbENvZGUgJSBTdGVhbUNoYXJzLmxlbmd0aF07XHJcbiAgICAgICAgICAgICAgICBmdWxsQ29kZSA9IE1hdGgudHJ1bmMoZnVsbENvZGUgLyBTdGVhbUNoYXJzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvdHAgPSAoYmluYXJ5ICUgTWF0aC5wb3coMTAsIGRpZ2l0cykpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIG90cCA9IHRoaXMubGVmdFBhZChvdHAsIGRpZ2l0cywgJzAnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdHA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGltZUludGVydmFsKGtleTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgcGVyaW9kID0gMzA7XHJcbiAgICAgICAgaWYgKGtleSAhPSBudWxsICYmIGtleS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ290cGF1dGg6Ly8nKSA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBVdGlscy5nZXRRdWVyeVBhcmFtcyhrZXkpO1xyXG4gICAgICAgICAgICBpZiAocGFyYW1zLmhhcygncGVyaW9kJykgJiYgcGFyYW1zLmdldCgncGVyaW9kJykgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBwZXJpb2QgPSBwYXJzZUludChwYXJhbXMuZ2V0KCdwZXJpb2QnKS50cmltKCksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdJbnZhbGlkIHBlcmlvZCBwYXJhbS4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGVyaW9kO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGlzQXV0b0NvcHlFbmFibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiAhKGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGJvb2xlYW4+KENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUF1dG9Ub3RwQ29weUtleSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlcnNcclxuXHJcbiAgICBwcml2YXRlIGxlZnRQYWQoczogc3RyaW5nLCBsOiBudW1iZXIsIHA6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGwgKyAxID49IHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHMgPSBBcnJheShsICsgMSAtIHMubGVuZ3RoKS5qb2luKHApICsgcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkZWNUb0hleChkOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAoZCA8IDE1LjUgPyAnMCcgOiAnJykgKyBNYXRoLnJvdW5kKGQpLnRvU3RyaW5nKDE2KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGIzMlRvSGV4KHM6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcyA9IHMudG9VcHBlckNhc2UoKTtcclxuICAgICAgICBsZXQgY2xlYW5lZElucHV0ID0gJyc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoQjMyQ2hhcnMuaW5kZXhPZihzW2ldKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbGVhbmVkSW5wdXQgKz0gc1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcyA9IGNsZWFuZWRJbnB1dDtcclxuXHJcbiAgICAgICAgbGV0IGJpdHMgPSAnJztcclxuICAgICAgICBsZXQgaGV4ID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVJbmRleCA9IEIzMkNoYXJzLmluZGV4T2Yocy5jaGFyQXQoaSkpO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZUluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYml0cyArPSB0aGlzLmxlZnRQYWQoYnl0ZUluZGV4LnRvU3RyaW5nKDIpLCA1LCAnMCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSArIDQgPD0gYml0cy5sZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IGJpdHMuc3Vic3RyKGksIDQpO1xyXG4gICAgICAgICAgICBoZXggPSBoZXggKyBwYXJzZUludChjaHVuaywgMikudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYjMyVG9CeXRlcyhzOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcclxuICAgICAgICByZXR1cm4gVXRpbHMuZnJvbUhleFRvQXJyYXkodGhpcy5iMzJUb0hleChzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBzaWduKGtleUJ5dGVzOiBVaW50OEFycmF5LCB0aW1lQnl0ZXM6IFVpbnQ4QXJyYXksIGFsZzogJ3NoYTEnIHwgJ3NoYTI1NicgfCAnc2hhNTEyJykge1xyXG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmhtYWModGltZUJ5dGVzLmJ1ZmZlciwga2V5Qnl0ZXMuYnVmZmVyLCBhbGcpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShzaWduYXR1cmUpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbkRhdGEgfSBmcm9tICcuLi9kYXRhL29yZ2FuaXphdGlvbkRhdGEnO1xyXG5cclxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9vcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclR5cGUnO1xyXG5pbXBvcnQgeyBQcm9kdWN0VHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3Byb2R1Y3RUeXBlJztcclxuaW1wb3J0IHsgUGVybWlzc2lvbnNBcGkgfSBmcm9tICcuLi9hcGkvcGVybWlzc2lvbnNBcGknO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb24ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHN0YXR1czogT3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGU7XHJcbiAgICB0eXBlOiBPcmdhbml6YXRpb25Vc2VyVHlwZTtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICB1c2VQb2xpY2llczogYm9vbGVhbjtcclxuICAgIHVzZUdyb3VwczogYm9vbGVhbjtcclxuICAgIHVzZURpcmVjdG9yeTogYm9vbGVhbjtcclxuICAgIHVzZUV2ZW50czogYm9vbGVhbjtcclxuICAgIHVzZVRvdHA6IGJvb2xlYW47XHJcbiAgICB1c2UyZmE6IGJvb2xlYW47XHJcbiAgICB1c2VBcGk6IGJvb2xlYW47XHJcbiAgICB1c2VTc286IGJvb2xlYW47XHJcbiAgICB1c2VLZXlDb25uZWN0b3I6IGJvb2xlYW47XHJcbiAgICB1c2VSZXNldFBhc3N3b3JkOiBib29sZWFuO1xyXG4gICAgc2VsZkhvc3Q6IGJvb2xlYW47XHJcbiAgICB1c2Vyc0dldFByZW1pdW06IGJvb2xlYW47XHJcbiAgICBzZWF0czogbnVtYmVyO1xyXG4gICAgbWF4Q29sbGVjdGlvbnM6IG51bWJlcjtcclxuICAgIG1heFN0b3JhZ2VHYj86IG51bWJlcjtcclxuICAgIHNzb0JvdW5kOiBib29sZWFuO1xyXG4gICAgaWRlbnRpZmllcjogc3RyaW5nO1xyXG4gICAgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zQXBpO1xyXG4gICAgcmVzZXRQYXNzd29yZEVucm9sbGVkOiBib29sZWFuO1xyXG4gICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICBoYXNQdWJsaWNBbmRQcml2YXRlS2V5czogYm9vbGVhbjtcclxuICAgIHByb3ZpZGVySWQ6IHN0cmluZztcclxuICAgIHByb3ZpZGVyTmFtZTogc3RyaW5nO1xyXG4gICAgaXNQcm92aWRlclVzZXI6IGJvb2xlYW47XHJcbiAgICBmYW1pbHlTcG9uc29yc2hpcEZyaWVuZGx5TmFtZTogc3RyaW5nO1xyXG4gICAgZmFtaWx5U3BvbnNvcnNoaXBBdmFpbGFibGU6IGJvb2xlYW47XHJcbiAgICBwbGFuUHJvZHVjdFR5cGU6IFByb2R1Y3RUeXBlO1xyXG4gICAga2V5Q29ubmVjdG9yRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIGtleUNvbm5lY3RvclVybDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IE9yZ2FuaXphdGlvbkRhdGEpIHtcclxuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pZCA9IG9iai5pZDtcclxuICAgICAgICB0aGlzLm5hbWUgPSBvYmoubmFtZTtcclxuICAgICAgICB0aGlzLnN0YXR1cyA9IG9iai5zdGF0dXM7XHJcbiAgICAgICAgdGhpcy50eXBlID0gb2JqLnR5cGU7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gb2JqLmVuYWJsZWQ7XHJcbiAgICAgICAgdGhpcy51c2VQb2xpY2llcyA9IG9iai51c2VQb2xpY2llcztcclxuICAgICAgICB0aGlzLnVzZUdyb3VwcyA9IG9iai51c2VHcm91cHM7XHJcbiAgICAgICAgdGhpcy51c2VEaXJlY3RvcnkgPSBvYmoudXNlRGlyZWN0b3J5O1xyXG4gICAgICAgIHRoaXMudXNlRXZlbnRzID0gb2JqLnVzZUV2ZW50cztcclxuICAgICAgICB0aGlzLnVzZVRvdHAgPSBvYmoudXNlVG90cDtcclxuICAgICAgICB0aGlzLnVzZTJmYSA9IG9iai51c2UyZmE7XHJcbiAgICAgICAgdGhpcy51c2VBcGkgPSBvYmoudXNlQXBpO1xyXG4gICAgICAgIHRoaXMudXNlU3NvID0gb2JqLnVzZVNzbztcclxuICAgICAgICB0aGlzLnVzZUtleUNvbm5lY3RvciA9IG9iai51c2VLZXlDb25uZWN0b3I7XHJcbiAgICAgICAgdGhpcy51c2VSZXNldFBhc3N3b3JkID0gb2JqLnVzZVJlc2V0UGFzc3dvcmQ7XHJcbiAgICAgICAgdGhpcy5zZWxmSG9zdCA9IG9iai5zZWxmSG9zdDtcclxuICAgICAgICB0aGlzLnVzZXJzR2V0UHJlbWl1bSA9IG9iai51c2Vyc0dldFByZW1pdW07XHJcbiAgICAgICAgdGhpcy5zZWF0cyA9IG9iai5zZWF0cztcclxuICAgICAgICB0aGlzLm1heENvbGxlY3Rpb25zID0gb2JqLm1heENvbGxlY3Rpb25zO1xyXG4gICAgICAgIHRoaXMubWF4U3RvcmFnZUdiID0gb2JqLm1heFN0b3JhZ2VHYjtcclxuICAgICAgICB0aGlzLnNzb0JvdW5kID0gb2JqLnNzb0JvdW5kO1xyXG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IG9iai5pZGVudGlmaWVyO1xyXG4gICAgICAgIHRoaXMucGVybWlzc2lvbnMgPSBvYmoucGVybWlzc2lvbnM7XHJcbiAgICAgICAgdGhpcy5yZXNldFBhc3N3b3JkRW5yb2xsZWQgPSBvYmoucmVzZXRQYXNzd29yZEVucm9sbGVkO1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gb2JqLnVzZXJJZDtcclxuICAgICAgICB0aGlzLmhhc1B1YmxpY0FuZFByaXZhdGVLZXlzID0gb2JqLmhhc1B1YmxpY0FuZFByaXZhdGVLZXlzO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJJZCA9IG9iai5wcm92aWRlcklkO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJOYW1lID0gb2JqLnByb3ZpZGVyTmFtZTtcclxuICAgICAgICB0aGlzLmlzUHJvdmlkZXJVc2VyID0gb2JqLmlzUHJvdmlkZXJVc2VyO1xyXG4gICAgICAgIHRoaXMuZmFtaWx5U3BvbnNvcnNoaXBGcmllbmRseU5hbWUgPSBvYmouZmFtaWx5U3BvbnNvcnNoaXBGcmllbmRseU5hbWU7XHJcbiAgICAgICAgdGhpcy5mYW1pbHlTcG9uc29yc2hpcEF2YWlsYWJsZSA9IG9iai5mYW1pbHlTcG9uc29yc2hpcEF2YWlsYWJsZTtcclxuICAgICAgICB0aGlzLnBsYW5Qcm9kdWN0VHlwZSA9IG9iai5wbGFuUHJvZHVjdFR5cGU7XHJcbiAgICAgICAgdGhpcy5rZXlDb25uZWN0b3JFbmFibGVkID0gb2JqLmtleUNvbm5lY3RvckVuYWJsZWQ7XHJcbiAgICAgICAgdGhpcy5rZXlDb25uZWN0b3JVcmwgPSBvYmoua2V5Q29ubmVjdG9yVXJsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYW5BY2Nlc3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gT3JnYW5pemF0aW9uVXNlclR5cGUuT3duZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVuYWJsZWQgJiYgdGhpcy5zdGF0dXMgPT09IE9yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlLkNvbmZpcm1lZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNNYW5hZ2VyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IE9yZ2FuaXphdGlvblVzZXJUeXBlLk1hbmFnZXIgfHwgdGhpcy50eXBlID09PSBPcmdhbml6YXRpb25Vc2VyVHlwZS5Pd25lciB8fFxyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPT09IE9yZ2FuaXphdGlvblVzZXJUeXBlLkFkbWluO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc0FkbWluKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IE9yZ2FuaXphdGlvblVzZXJUeXBlLk93bmVyIHx8IHRoaXMudHlwZSA9PT0gT3JnYW5pemF0aW9uVXNlclR5cGUuQWRtaW47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzT3duZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gT3JnYW5pemF0aW9uVXNlclR5cGUuT3duZXIgfHwgdGhpcy5pc1Byb3ZpZGVyVXNlcjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2FuQWNjZXNzRXZlbnRMb2dzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQWRtaW4gfHwgdGhpcy5wZXJtaXNzaW9ucy5hY2Nlc3NFdmVudExvZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhbkFjY2Vzc0ltcG9ydEV4cG9ydCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0FkbWluIHx8IHRoaXMucGVybWlzc2lvbnMuYWNjZXNzSW1wb3J0RXhwb3J0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYW5BY2Nlc3NSZXBvcnRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQWRtaW4gfHwgdGhpcy5wZXJtaXNzaW9ucy5hY2Nlc3NSZXBvcnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYW5DcmVhdGVOZXdDb2xsZWN0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc01hbmFnZXIgfHwgKHRoaXMucGVybWlzc2lvbnMuY3JlYXRlTmV3Q29sbGVjdGlvbnMgPz8gdGhpcy5wZXJtaXNzaW9ucy5tYW5hZ2VBbGxDb2xsZWN0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhbkVkaXRBbnlDb2xsZWN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQWRtaW4gfHwgKHRoaXMucGVybWlzc2lvbnMuZWRpdEFueUNvbGxlY3Rpb24gPz8gdGhpcy5wZXJtaXNzaW9ucy5tYW5hZ2VBbGxDb2xsZWN0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhbkRlbGV0ZUFueUNvbGxlY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBZG1pbiB8fCAodGhpcy5wZXJtaXNzaW9ucy5kZWxldGVBbnlDb2xsZWN0aW9uID8/IHRoaXMucGVybWlzc2lvbnMubWFuYWdlQWxsQ29sbGVjdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYW5WaWV3QWxsQ29sbGVjdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuQ3JlYXRlTmV3Q29sbGVjdGlvbnMgfHwgdGhpcy5jYW5FZGl0QW55Q29sbGVjdGlvbiB8fCB0aGlzLmNhbkRlbGV0ZUFueUNvbGxlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhbkVkaXRBc3NpZ25lZENvbGxlY3Rpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzTWFuYWdlciB8fCAodGhpcy5wZXJtaXNzaW9ucy5lZGl0QXNzaWduZWRDb2xsZWN0aW9ucyA/PyB0aGlzLnBlcm1pc3Npb25zLm1hbmFnZUFzc2lnbmVkQ29sbGVjdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYW5EZWxldGVBc3NpZ25lZENvbGxlY3Rpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzTWFuYWdlciB8fCAodGhpcy5wZXJtaXNzaW9ucy5kZWxldGVBc3NpZ25lZENvbGxlY3Rpb25zID8/IHRoaXMucGVybWlzc2lvbnMubWFuYWdlQXNzaWduZWRDb2xsZWN0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhblZpZXdBc3NpZ25lZENvbGxlY3Rpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbkRlbGV0ZUFzc2lnbmVkQ29sbGVjdGlvbnMgfHwgdGhpcy5jYW5FZGl0QXNzaWduZWRDb2xsZWN0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2FuTWFuYWdlR3JvdXBzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQWRtaW4gfHwgdGhpcy5wZXJtaXNzaW9ucy5tYW5hZ2VHcm91cHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhbk1hbmFnZVNzbygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0FkbWluIHx8IHRoaXMucGVybWlzc2lvbnMubWFuYWdlU3NvO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYW5NYW5hZ2VQb2xpY2llcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0FkbWluIHx8IHRoaXMucGVybWlzc2lvbnMubWFuYWdlUG9saWNpZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhbk1hbmFnZVVzZXJzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQWRtaW4gfHwgdGhpcy5wZXJtaXNzaW9ucy5tYW5hZ2VVc2VycztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2FuTWFuYWdlVXNlcnNQYXNzd29yZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0FkbWluIHx8IHRoaXMucGVybWlzc2lvbnMubWFuYWdlUmVzZXRQYXNzd29yZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNFeGVtcHRGcm9tUG9saWNpZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuTWFuYWdlUG9saWNpZXM7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gUHJvdmlkZXJVc2VyU3RhdHVzVHlwZSB7XHJcbiAgICBJbnZpdGVkID0gMCxcclxuICAgIEFjY2VwdGVkID0gMSxcclxuICAgIENvbmZpcm1lZCA9IDIsXHJcbn1cclxuIiwiZXhwb3J0IGVudW0gUHJvdmlkZXJVc2VyVHlwZSB7XHJcbiAgICBQcm92aWRlckFkbWluID0gMCxcclxuICAgIFNlcnZpY2VVc2VyID0gMSxcclxufVxyXG4iLCJpbXBvcnQgeyBQcm92aWRlclVzZXJTdGF0dXNUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvcHJvdmlkZXJVc2VyU3RhdHVzVHlwZSc7XHJcbmltcG9ydCB7IFByb3ZpZGVyVXNlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wcm92aWRlclVzZXJUeXBlJztcclxuaW1wb3J0IHsgUHJvdmlkZXJEYXRhIH0gZnJvbSAnLi4vZGF0YS9wcm92aWRlckRhdGEnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBzdGF0dXM6IFByb3ZpZGVyVXNlclN0YXR1c1R5cGU7XHJcbiAgICB0eXBlOiBQcm92aWRlclVzZXJUeXBlO1xyXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgdXNlRXZlbnRzOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IFByb3ZpZGVyRGF0YSkge1xyXG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlkID0gb2JqLmlkO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG9iai5uYW1lO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gb2JqLnN0YXR1cztcclxuICAgICAgICB0aGlzLnR5cGUgPSBvYmoudHlwZTtcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSBvYmouZW5hYmxlZDtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IG9iai51c2VySWQ7XHJcbiAgICAgICAgdGhpcy51c2VFdmVudHMgPSBvYmoudXNlRXZlbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYW5BY2Nlc3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNQcm92aWRlckFkbWluKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVkICYmIHRoaXMuc3RhdHVzID09PSBQcm92aWRlclVzZXJTdGF0dXNUeXBlLkNvbmZpcm1lZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2FuQ3JlYXRlT3JnYW5pemF0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVkICYmIHRoaXMuaXNQcm92aWRlckFkbWluO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjYW5NYW5hZ2VVc2VycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc1Byb3ZpZGVyQWRtaW47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhbkFjY2Vzc0V2ZW50TG9ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc1Byb3ZpZGVyQWRtaW47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzUHJvdmlkZXJBZG1pbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBQcm92aWRlclVzZXJUeXBlLlByb3ZpZGVyQWRtaW47XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3Rva2VuLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSBhcyBVc2VyU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25EYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvb3JnYW5pemF0aW9uRGF0YSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvbiB9IGZyb20gJy4uL21vZGVscy9kb21haW4vb3JnYW5pemF0aW9uJztcclxuXHJcbmltcG9ydCB7IEtkZlR5cGUgfSBmcm9tICcuLi9lbnVtcy9rZGZUeXBlJztcclxuXHJcbmltcG9ydCB7IFByb3ZpZGVyRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL3Byb3ZpZGVyRGF0YSc7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9wcm92aWRlcic7XHJcblxyXG5jb25zdCBLZXlzID0ge1xyXG4gICAgdXNlcklkOiAndXNlcklkJyxcclxuICAgIHVzZXJFbWFpbDogJ3VzZXJFbWFpbCcsXHJcbiAgICBzdGFtcDogJ3NlY3VyaXR5U3RhbXAnLFxyXG4gICAga2RmOiAna2RmJyxcclxuICAgIGtkZkl0ZXJhdGlvbnM6ICdrZGZJdGVyYXRpb25zJyxcclxuICAgIG9yZ2FuaXphdGlvbnNQcmVmaXg6ICdvcmdhbml6YXRpb25zXycsXHJcbiAgICBwcm92aWRlcnNQcmVmaXg6ICdwcm92aWRlcnNfJyxcclxuICAgIGVtYWlsVmVyaWZpZWQ6ICdlbWFpbFZlcmlmaWVkJyxcclxuICAgIGZvcmNlUGFzc3dvcmRSZXNldDogJ2ZvcmNlUGFzc3dvcmRSZXNldCcsXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlclNlcnZpY2UgaW1wbGVtZW50cyBVc2VyU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIHByaXZhdGUgdXNlcklkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGVtYWlsOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHN0YW1wOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGtkZjogS2RmVHlwZTtcclxuICAgIHByaXZhdGUga2RmSXRlcmF0aW9uczogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBlbWFpbFZlcmlmaWVkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBmb3JjZVBhc3N3b3JkUmVzZXQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0b2tlblNlcnZpY2U6IFRva2VuU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHsgfVxyXG5cclxuICAgIGFzeW5jIHNldEluZm9ybWF0aW9uKHVzZXJJZDogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBrZGY6IEtkZlR5cGUsIGtkZkl0ZXJhdGlvbnM6IG51bWJlcik6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgdGhpcy5lbWFpbCA9IGVtYWlsO1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgIHRoaXMua2RmID0ga2RmO1xyXG4gICAgICAgIHRoaXMua2RmSXRlcmF0aW9ucyA9IGtkZkl0ZXJhdGlvbnM7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnVzZXJFbWFpbCwgZW1haWwpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnVzZXJJZCwgdXNlcklkKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5rZGYsIGtkZik7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMua2RmSXRlcmF0aW9ucywga2RmSXRlcmF0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U2VjdXJpdHlTdGFtcChzdGFtcDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICB0aGlzLnN0YW1wID0gc3RhbXA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnN0YW1wLCBzdGFtcCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RW1haWxWZXJpZmllZChlbWFpbFZlcmlmaWVkOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5lbWFpbFZlcmlmaWVkID0gZW1haWxWZXJpZmllZDtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuZW1haWxWZXJpZmllZCwgZW1haWxWZXJpZmllZCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Rm9yY2VQYXNzd29yZFJlc2V0KGZvcmNlUGFzc3dvcmRSZXNldDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZm9yY2VQYXNzd29yZFJlc2V0ID0gZm9yY2VQYXNzd29yZFJlc2V0O1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5mb3JjZVBhc3N3b3JkUmVzZXQsIGZvcmNlUGFzc3dvcmRSZXNldCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0VXNlcklkKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlcklkID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy51c2VySWQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KEtleXMudXNlcklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlcklkO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEVtYWlsKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZW1haWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmVtYWlsID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLnVzZXJFbWFpbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVtYWlsO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFNlY3VyaXR5U3RhbXAoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBpZiAodGhpcy5zdGFtcCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhbXAgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KEtleXMuc3RhbXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5zdGFtcDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRLZGYoKTogUHJvbWlzZTxLZGZUeXBlPiB7XHJcbiAgICAgICAgaWYgKHRoaXMua2RmID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5rZGYgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxLZGZUeXBlPihLZXlzLmtkZik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmtkZjtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRLZGZJdGVyYXRpb25zKCk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAgICAgaWYgKHRoaXMua2RmSXRlcmF0aW9ucyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMua2RmSXRlcmF0aW9ucyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oS2V5cy5rZGZJdGVyYXRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMua2RmSXRlcmF0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRFbWFpbFZlcmlmaWVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIGlmICh0aGlzLmVtYWlsVmVyaWZpZWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmVtYWlsVmVyaWZpZWQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihLZXlzLmVtYWlsVmVyaWZpZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbWFpbFZlcmlmaWVkO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEZvcmNlUGFzc3dvcmRSZXNldCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICBpZiAodGhpcy5mb3JjZVBhc3N3b3JkUmVzZXQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZvcmNlUGFzc3dvcmRSZXNldCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGJvb2xlYW4+KEtleXMuZm9yY2VQYXNzd29yZFJlc2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yY2VQYXNzd29yZFJlc2V0O1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNsZWFyKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy5nZXRVc2VySWQoKTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy51c2VySWQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMudXNlckVtYWlsKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLnN0YW1wKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmtkZik7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5rZGZJdGVyYXRpb25zKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmZvcmNlUGFzc3dvcmRSZXNldCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jbGVhck9yZ2FuaXphdGlvbnModXNlcklkKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNsZWFyUHJvdmlkZXJzKHVzZXJJZCk7XHJcblxyXG4gICAgICAgIHRoaXMudXNlcklkID0gdGhpcy5lbWFpbCA9IHRoaXMuc3RhbXAgPSBudWxsO1xyXG4gICAgICAgIHRoaXMua2RmID0gbnVsbDtcclxuICAgICAgICB0aGlzLmtkZkl0ZXJhdGlvbnMgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGlzQXV0aGVudGljYXRlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLmdldFRva2VuKCk7XHJcbiAgICAgICAgaWYgKHRva2VuID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy5nZXRVc2VySWQoKTtcclxuICAgICAgICByZXR1cm4gdXNlcklkICE9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2FuQWNjZXNzUHJlbWl1bSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICBjb25zdCBhdXRoZWQgPSBhd2FpdCB0aGlzLmlzQXV0aGVudGljYXRlZCgpO1xyXG4gICAgICAgIGlmICghYXV0aGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRva2VuUHJlbWl1bSA9IHRoaXMudG9rZW5TZXJ2aWNlLmdldFByZW1pdW0oKTtcclxuICAgICAgICBpZiAodG9rZW5QcmVtaXVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb3JncyA9IGF3YWl0IHRoaXMuZ2V0QWxsT3JnYW5pemF0aW9ucygpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3Jncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAob3Jnc1tpXS51c2Vyc0dldFByZW1pdW0gJiYgb3Jnc1tpXS5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2FuTWFuYWdlU3BvbnNvcnNoaXBzKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIGNvbnN0IG9yZ3MgPSBhd2FpdCB0aGlzLmdldEFsbE9yZ2FuaXphdGlvbnMoKTtcclxuICAgICAgICByZXR1cm4gb3Jncy5zb21lKG8gPT4gby5mYW1pbHlTcG9uc29yc2hpcEF2YWlsYWJsZSB8fCBvLmZhbWlseVNwb25zb3JzaGlwRnJpZW5kbHlOYW1lICE9PSBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRPcmdhbml6YXRpb24oaWQ6IHN0cmluZyk6IFByb21pc2U8T3JnYW5pemF0aW9uPiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IE9yZ2FuaXphdGlvbkRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLm9yZ2FuaXphdGlvbnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChvcmdhbml6YXRpb25zID09IG51bGwgfHwgIW9yZ2FuaXphdGlvbnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBPcmdhbml6YXRpb24ob3JnYW5pemF0aW9uc1tpZF0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvbkJ5SWRlbnRpZmllcihpZGVudGlmaWVyOiBzdHJpbmcpOiBQcm9taXNlPE9yZ2FuaXphdGlvbj4ge1xyXG4gICAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbnMgPSBhd2FpdCB0aGlzLmdldEFsbE9yZ2FuaXphdGlvbnMoKTtcclxuICAgICAgICBpZiAob3JnYW5pemF0aW9ucyA9PSBudWxsIHx8IG9yZ2FuaXphdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9yZ2FuaXphdGlvbnMuZmluZChvID0+IG8uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0QWxsT3JnYW5pemF0aW9ucygpOiBQcm9taXNlPE9yZ2FuaXphdGlvbltdPiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IE9yZ2FuaXphdGlvbkRhdGE7IH0+KFxyXG4gICAgICAgICAgICBLZXlzLm9yZ2FuaXphdGlvbnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBPcmdhbml6YXRpb25bXSA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gb3JnYW5pemF0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAob3JnYW5pemF0aW9ucy5oYXNPd25Qcm9wZXJ0eShpZCkgJiYgIW9yZ2FuaXphdGlvbnNbaWRdLmlzUHJvdmlkZXJVc2VyKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKG5ldyBPcmdhbml6YXRpb24ob3JnYW5pemF0aW9uc1tpZF0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVwbGFjZU9yZ2FuaXphdGlvbnMob3JnYW5pemF0aW9uczogeyBbaWQ6IHN0cmluZ106IE9yZ2FuaXphdGlvbkRhdGE7IH0pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMub3JnYW5pemF0aW9uc1ByZWZpeCArIHVzZXJJZCwgb3JnYW5pemF0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2xlYXJPcmdhbml6YXRpb25zKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLm9yZ2FuaXphdGlvbnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFByb3ZpZGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPFByb3ZpZGVyPiB7XHJcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy5nZXRVc2VySWQoKTtcclxuICAgICAgICBjb25zdCBwcm92aWRlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogUHJvdmlkZXJEYXRhOyB9PihcclxuICAgICAgICAgICAgS2V5cy5wcm92aWRlcnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgICAgIGlmIChwcm92aWRlcnMgPT0gbnVsbCB8fCAhcHJvdmlkZXJzLmhhc093blByb3BlcnR5KGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvdmlkZXIocHJvdmlkZXJzW2lkXSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0QWxsUHJvdmlkZXJzKCk6IFByb21pc2U8UHJvdmlkZXJbXT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMuZ2V0VXNlcklkKCk7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IFByb3ZpZGVyRGF0YTsgfT4oXHJcbiAgICAgICAgICAgIEtleXMucHJvdmlkZXJzUHJlZml4ICsgdXNlcklkKTtcclxuICAgICAgICBjb25zdCByZXNwb25zZTogUHJvdmlkZXJbXSA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gcHJvdmlkZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm92aWRlcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKG5ldyBQcm92aWRlcihwcm92aWRlcnNbaWRdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlcGxhY2VQcm92aWRlcnMocHJvdmlkZXJzOiB7IFtpZDogc3RyaW5nXTogUHJvdmlkZXJEYXRhOyB9KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLmdldFVzZXJJZCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnByb3ZpZGVyc1ByZWZpeCArIHVzZXJJZCwgcHJvdmlkZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhclByb3ZpZGVycyh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5wcm92aWRlcnNQcmVmaXggKyB1c2VySWQpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBWZXJpZnlPVFBSZXF1ZXN0IHtcclxuICAgIE9UUDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKE9UUDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5PVFAgPSBPVFA7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVXNlclZlcmlmaWNhdGlvblNlcnZpY2UgYXMgVXNlclZlcmlmaWNhdGlvblNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy91c2VyVmVyaWZpY2F0aW9uLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcGkuc2VydmljZSc7XHJcbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY3J5cHRvLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgVmVyaWZpY2F0aW9uVHlwZSB9IGZyb20gJy4uL2VudW1zL3ZlcmlmaWNhdGlvblR5cGUnO1xyXG5cclxuaW1wb3J0IHsgVmVyaWZ5T1RQUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2FjY291bnQvdmVyaWZ5T1RQUmVxdWVzdCc7XHJcbmltcG9ydCB7IFNlY3JldFZlcmlmaWNhdGlvblJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9zZWNyZXRWZXJpZmljYXRpb25SZXF1ZXN0JztcclxuXHJcbmltcG9ydCB7IFZlcmlmaWNhdGlvbiB9IGZyb20gJy4uL3R5cGVzL3ZlcmlmaWNhdGlvbic7XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlclZlcmlmaWNhdGlvblNlcnZpY2UgaW1wbGVtZW50cyBVc2VyVmVyaWZpY2F0aW9uU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZSwgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlKSB7IH1cclxuXHJcbiAgICBhc3luYyBidWlsZFJlcXVlc3Q8VCBleHRlbmRzIFNlY3JldFZlcmlmaWNhdGlvblJlcXVlc3Q+KHZlcmlmaWNhdGlvbjogVmVyaWZpY2F0aW9uLFxyXG4gICAgICAgIHJlcXVlc3RDbGFzcz86IG5ldyAoKSA9PiBULCBhbHJlYWR5SGFzaGVkPzogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVJbnB1dCh2ZXJpZmljYXRpb24pO1xyXG5cclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gcmVxdWVzdENsYXNzICE9IG51bGxcclxuICAgICAgICAgICAgPyBuZXcgcmVxdWVzdENsYXNzKClcclxuICAgICAgICAgICAgOiBuZXcgU2VjcmV0VmVyaWZpY2F0aW9uUmVxdWVzdCgpIGFzIFQ7XHJcblxyXG4gICAgICAgIGlmICh2ZXJpZmljYXRpb24udHlwZSA9PT0gVmVyaWZpY2F0aW9uVHlwZS5PVFApIHtcclxuICAgICAgICAgICAgcmVxdWVzdC5vdHAgPSB2ZXJpZmljYXRpb24uc2VjcmV0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QubWFzdGVyUGFzc3dvcmRIYXNoID0gYWxyZWFkeUhhc2hlZFxyXG4gICAgICAgICAgICAgICAgPyB2ZXJpZmljYXRpb24uc2VjcmV0XHJcbiAgICAgICAgICAgICAgICA6IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5oYXNoUGFzc3dvcmQodmVyaWZpY2F0aW9uLnNlY3JldCwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB2ZXJpZnlVc2VyKHZlcmlmaWNhdGlvbjogVmVyaWZpY2F0aW9uKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0ZUlucHV0KHZlcmlmaWNhdGlvbik7XHJcblxyXG4gICAgICAgIGlmICh2ZXJpZmljYXRpb24udHlwZSA9PT0gVmVyaWZpY2F0aW9uVHlwZS5PVFApIHtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBWZXJpZnlPVFBSZXF1ZXN0KHZlcmlmaWNhdGlvbi5zZWNyZXQpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RBY2NvdW50VmVyaWZ5T1RQKHJlcXVlc3QpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5pMThuU2VydmljZS50KCdpbnZhbGlkVmVyaWZpY2F0aW9uQ29kZScpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkVmFsaWQgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuY29tcGFyZUFuZFVwZGF0ZUtleUhhc2godmVyaWZpY2F0aW9uLnNlY3JldCwgbnVsbCk7XHJcbiAgICAgICAgICAgIGlmICghcGFzc3dvcmRWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuaTE4blNlcnZpY2UudCgnaW52YWxpZE1hc3RlclBhc3N3b3JkJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlcXVlc3RPVFAoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RBY2NvdW50UmVxdWVzdE9UUCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdmFsaWRhdGVJbnB1dCh2ZXJpZmljYXRpb246IFZlcmlmaWNhdGlvbikge1xyXG4gICAgICAgIGlmICh2ZXJpZmljYXRpb24/LnNlY3JldCA9PSBudWxsIHx8IHZlcmlmaWNhdGlvbi5zZWNyZXQgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIGlmICh2ZXJpZmljYXRpb24udHlwZSA9PT0gVmVyaWZpY2F0aW9uVHlwZS5PVFApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmkxOG5TZXJ2aWNlLnQoJ3ZlcmlmaWNhdGlvbkNvZGVSZXF1aXJlZCcpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmkxOG5TZXJ2aWNlLnQoJ21hc3RlclBhc3NSZXF1aXJlZCcpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRGVjcnlwdFBhcmFtZXRlcnM8VD4ge1xyXG4gICAgZW5jS2V5OiBUO1xyXG4gICAgZGF0YTogVDtcclxuICAgIGl2OiBUO1xyXG4gICAgbWFjS2V5OiBUO1xyXG4gICAgbWFjOiBUO1xyXG4gICAgbWFjRGF0YTogVDtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBmb3JnZSBmcm9tICdub2RlLWZvcmdlJztcclxuXHJcbmltcG9ydCB7IENyeXB0b0Z1bmN0aW9uU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XHJcblxyXG5pbXBvcnQgeyBEZWNyeXB0UGFyYW1ldGVycyB9IGZyb20gJy4uL21vZGVscy9kb21haW4vZGVjcnlwdFBhcmFtZXRlcnMnO1xyXG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3N5bW1ldHJpY0NyeXB0b0tleSc7XHJcblxyXG5leHBvcnQgY2xhc3MgV2ViQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlIGltcGxlbWVudHMgQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgY3J5cHRvOiBDcnlwdG87XHJcbiAgICBwcml2YXRlIHN1YnRsZTogU3VidGxlQ3J5cHRvO1xyXG4gICAgcHJpdmF0ZSBpc0lFOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBpc09sZFNhZmFyaTogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHdpbjogV2luZG93LCBwcml2YXRlIHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuY3J5cHRvID0gdHlwZW9mIHdpbi5jcnlwdG8gIT09ICd1bmRlZmluZWQnID8gd2luLmNyeXB0byA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdWJ0bGUgPSAoISF0aGlzLmNyeXB0byAmJiB0eXBlb2Ygd2luLmNyeXB0by5zdWJ0bGUgIT09ICd1bmRlZmluZWQnKSA/IHdpbi5jcnlwdG8uc3VidGxlIDogbnVsbDtcclxuICAgICAgICB0aGlzLmlzSUUgPSBwbGF0Zm9ybVV0aWxzU2VydmljZS5pc0lFKCk7XHJcbiAgICAgICAgY29uc3QgdWEgPSB3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICAgICAgICB0aGlzLmlzT2xkU2FmYXJpID0gcGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKSAmJlxyXG4gICAgICAgICAgICAodWEuaW5kZXhPZignIFZlcnNpb24vMTAuJykgPiAtMSB8fCB1YS5pbmRleE9mKCcgVmVyc2lvbi85LicpID4gLTEpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBia2RmMihwYXNzd29yZDogc3RyaW5nIHwgQXJyYXlCdWZmZXIsIHNhbHQ6IHN0cmluZyB8IEFycmF5QnVmZmVyLCBhbGdvcml0aG06ICdzaGEyNTYnIHwgJ3NoYTUxMicsXHJcbiAgICAgICAgaXRlcmF0aW9uczogbnVtYmVyKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzSUUgfHwgdGhpcy5pc09sZFNhZmFyaSkge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JnZUxlbiA9IGFsZ29yaXRobSA9PT0gJ3NoYTI1NicgPyAzMiA6IDY0O1xyXG4gICAgICAgICAgICBjb25zdCBwYXNzd29yZEJ5dGVzID0gdGhpcy50b0J5dGVTdHJpbmcocGFzc3dvcmQpO1xyXG4gICAgICAgICAgICBjb25zdCBzYWx0Qnl0ZXMgPSB0aGlzLnRvQnl0ZVN0cmluZyhzYWx0KTtcclxuICAgICAgICAgICAgY29uc3QgZGVyaXZlZEtleUJ5dGVzID0gKGZvcmdlIGFzIGFueSkucGJrZGYyKHBhc3N3b3JkQnl0ZXMsIHNhbHRCeXRlcywgaXRlcmF0aW9ucywgZm9yZ2VMZW4sIGFsZ29yaXRobSk7XHJcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5mcm9tQnl0ZVN0cmluZ1RvQXJyYXkoZGVyaXZlZEtleUJ5dGVzKS5idWZmZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB3Y0xlbiA9IGFsZ29yaXRobSA9PT0gJ3NoYTI1NicgPyAyNTYgOiA1MTI7XHJcbiAgICAgICAgY29uc3QgcGFzc3dvcmRCdWYgPSB0aGlzLnRvQnVmKHBhc3N3b3JkKTtcclxuICAgICAgICBjb25zdCBzYWx0QnVmID0gdGhpcy50b0J1ZihzYWx0KTtcclxuXHJcbiAgICAgICAgY29uc3QgcGJrZGYyUGFyYW1zOiBQYmtkZjJQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdQQktERjInLFxyXG4gICAgICAgICAgICBzYWx0OiBzYWx0QnVmLFxyXG4gICAgICAgICAgICBpdGVyYXRpb25zOiBpdGVyYXRpb25zLFxyXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6IHRoaXMudG9XZWJDcnlwdG9BbGdvcml0aG0oYWxnb3JpdGhtKSB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGltcEtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgncmF3JywgcGFzc3dvcmRCdWYsIHsgbmFtZTogJ1BCS0RGMicgfSBhcyBhbnksXHJcbiAgICAgICAgICAgIGZhbHNlLCBbJ2Rlcml2ZUJpdHMnXSk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3VidGxlLmRlcml2ZUJpdHMocGJrZGYyUGFyYW1zLCBpbXBLZXksIHdjTGVuKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBoa2RmKGlrbTogQXJyYXlCdWZmZXIsIHNhbHQ6IHN0cmluZyB8IEFycmF5QnVmZmVyLCBpbmZvOiBzdHJpbmcgfCBBcnJheUJ1ZmZlcixcclxuICAgICAgICBvdXRwdXRCeXRlU2l6ZTogbnVtYmVyLCBhbGdvcml0aG06ICdzaGEyNTYnIHwgJ3NoYTUxMicpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XHJcbiAgICAgICAgY29uc3Qgc2FsdEJ1ZiA9IHRoaXMudG9CdWYoc2FsdCk7XHJcbiAgICAgICAgY29uc3QgaW5mb0J1ZiA9IHRoaXMudG9CdWYoaW5mbyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGhrZGZQYXJhbXM6IEhrZGZQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdIS0RGJyxcclxuICAgICAgICAgICAgc2FsdDogc2FsdEJ1ZixcclxuICAgICAgICAgICAgaW5mbzogaW5mb0J1ZixcclxuICAgICAgICAgICAgaGFzaDogeyBuYW1lOiB0aGlzLnRvV2ViQ3J5cHRvQWxnb3JpdGhtKGFsZ29yaXRobSkgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBpbXBLZXkgPSBhd2FpdCB0aGlzLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGlrbSwgeyBuYW1lOiAnSEtERicgfSBhcyBhbnksXHJcbiAgICAgICAgICAgIGZhbHNlLCBbJ2Rlcml2ZUJpdHMnXSk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3VidGxlLmRlcml2ZUJpdHMoaGtkZlBhcmFtcyBhcyBhbnksIGltcEtleSwgb3V0cHV0Qnl0ZVNpemUgKiA4KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZWY6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1ODY5XHJcbiAgICBhc3luYyBoa2RmRXhwYW5kKHByazogQXJyYXlCdWZmZXIsIGluZm86IHN0cmluZyB8IEFycmF5QnVmZmVyLCBvdXRwdXRCeXRlU2l6ZTogbnVtYmVyLFxyXG4gICAgICAgIGFsZ29yaXRobTogJ3NoYTI1NicgfCAnc2hhNTEyJyk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuICAgICAgICBjb25zdCBoYXNoTGVuID0gYWxnb3JpdGhtID09PSAnc2hhMjU2JyA/IDMyIDogNjQ7XHJcbiAgICAgICAgaWYgKG91dHB1dEJ5dGVTaXplID4gMjU1ICogaGFzaExlbikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ291dHB1dEJ5dGVTaXplIGlzIHRvbyBsYXJnZS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJrQXJyID0gbmV3IFVpbnQ4QXJyYXkocHJrKTtcclxuICAgICAgICBpZiAocHJrQXJyLmxlbmd0aCA8IGhhc2hMZW4pIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmsgaXMgdG9vIHNtYWxsLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbmZvQnVmID0gdGhpcy50b0J1ZihpbmZvKTtcclxuICAgICAgICBjb25zdCBpbmZvQXJyID0gbmV3IFVpbnQ4QXJyYXkoaW5mb0J1Zik7XHJcbiAgICAgICAgbGV0IHJ1bm5pbmdPa21MZW5ndGggPSAwO1xyXG4gICAgICAgIGxldCBwcmV2aW91c1QgPSBuZXcgVWludDhBcnJheSgwKTtcclxuICAgICAgICBjb25zdCBuID0gTWF0aC5jZWlsKG91dHB1dEJ5dGVTaXplIC8gaGFzaExlbik7XHJcbiAgICAgICAgY29uc3Qgb2ttID0gbmV3IFVpbnQ4QXJyYXkobiAqIGhhc2hMZW4pO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgVWludDhBcnJheShwcmV2aW91c1QubGVuZ3RoICsgaW5mb0Fyci5sZW5ndGggKyAxKTtcclxuICAgICAgICAgICAgdC5zZXQocHJldmlvdXNUKTtcclxuICAgICAgICAgICAgdC5zZXQoaW5mb0FyciwgcHJldmlvdXNULmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHQuc2V0KFtpICsgMV0sIHQubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIHByZXZpb3VzVCA9IG5ldyBVaW50OEFycmF5KGF3YWl0IHRoaXMuaG1hYyh0LmJ1ZmZlciwgcHJrLCBhbGdvcml0aG0pKTtcclxuICAgICAgICAgICAgb2ttLnNldChwcmV2aW91c1QsIHJ1bm5pbmdPa21MZW5ndGgpO1xyXG4gICAgICAgICAgICBydW5uaW5nT2ttTGVuZ3RoICs9IHByZXZpb3VzVC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChydW5uaW5nT2ttTGVuZ3RoID49IG91dHB1dEJ5dGVTaXplKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2ttLnNsaWNlKDAsIG91dHB1dEJ5dGVTaXplKS5idWZmZXI7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaGFzaCh2YWx1ZTogc3RyaW5nIHwgQXJyYXlCdWZmZXIsIGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicgfCAnc2hhNTEyJyB8ICdtZDUnKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xyXG4gICAgICAgIGlmICgodGhpcy5pc0lFICYmIGFsZ29yaXRobSA9PT0gJ3NoYTEnKSB8fCBhbGdvcml0aG0gPT09ICdtZDUnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1kID0gYWxnb3JpdGhtID09PSAnbWQ1JyA/IGZvcmdlLm1kLm1kNS5jcmVhdGUoKSA6IGZvcmdlLm1kLnNoYTEuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlQnl0ZXMgPSB0aGlzLnRvQnl0ZVN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIG1kLnVwZGF0ZSh2YWx1ZUJ5dGVzLCAncmF3Jyk7XHJcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5mcm9tQnl0ZVN0cmluZ1RvQXJyYXkobWQuZGlnZXN0KCkuZGF0YSkuYnVmZmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdmFsdWVCdWYgPSB0aGlzLnRvQnVmKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuZGlnZXN0KHsgbmFtZTogdGhpcy50b1dlYkNyeXB0b0FsZ29yaXRobShhbGdvcml0aG0pIH0sIHZhbHVlQnVmKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBobWFjKHZhbHVlOiBBcnJheUJ1ZmZlciwga2V5OiBBcnJheUJ1ZmZlciwgYWxnb3JpdGhtOiAnc2hhMScgfCAnc2hhMjU2JyB8ICdzaGE1MTInKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzSUUgJiYgYWxnb3JpdGhtID09PSAnc2hhNTEyJykge1xyXG4gICAgICAgICAgICBjb25zdCBobWFjID0gKGZvcmdlIGFzIGFueSkuaG1hYy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgY29uc3Qga2V5Qnl0ZXMgPSB0aGlzLnRvQnl0ZVN0cmluZyhrZXkpO1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZUJ5dGVzID0gdGhpcy50b0J5dGVTdHJpbmcodmFsdWUpO1xyXG4gICAgICAgICAgICBobWFjLnN0YXJ0KGFsZ29yaXRobSwga2V5Qnl0ZXMpO1xyXG4gICAgICAgICAgICBobWFjLnVwZGF0ZSh2YWx1ZUJ5dGVzLCAncmF3Jyk7XHJcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5mcm9tQnl0ZVN0cmluZ1RvQXJyYXkoaG1hYy5kaWdlc3QoKS5kYXRhKS5idWZmZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzaWduaW5nQWxnb3JpdGhtID0ge1xyXG4gICAgICAgICAgICBuYW1lOiAnSE1BQycsXHJcbiAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogdGhpcy50b1dlYkNyeXB0b0FsZ29yaXRobShhbGdvcml0aG0pIH0sXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgaW1wS2V5ID0gYXdhaXQgdGhpcy5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBrZXksIHNpZ25pbmdBbGdvcml0aG0sIGZhbHNlLCBbJ3NpZ24nXSk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3VidGxlLnNpZ24oc2lnbmluZ0FsZ29yaXRobSwgaW1wS2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2FmZWx5IGNvbXBhcmUgdHdvIHZhbHVlcyBpbiBhIHdheSB0aGF0IHByb3RlY3RzIGFnYWluc3QgdGltaW5nIGF0dGFja3MgKERvdWJsZSBITUFDIFZlcmlmaWNhdGlvbikuXHJcbiAgICAvLyByZWY6IGh0dHBzOi8vd3d3Lm5jY2dyb3VwLnRydXN0L3VzL2Fib3V0LXVzL25ld3Nyb29tLWFuZC1ldmVudHMvYmxvZy8yMDExL2ZlYnJ1YXJ5L2RvdWJsZS1obWFjLXZlcmlmaWNhdGlvbi9cclxuICAgIC8vIHJlZjogaHR0cHM6Ly9wYXJhZ29uaWUuY29tL2Jsb2cvMjAxNS8xMS9wcmV2ZW50aW5nLXRpbWluZy1hdHRhY2tzLW9uLXN0cmluZy1jb21wYXJpc29uLXdpdGgtZG91YmxlLWhtYWMtc3RyYXRlZ3lcclxuICAgIGFzeW5jIGNvbXBhcmUoYTogQXJyYXlCdWZmZXIsIGI6IEFycmF5QnVmZmVyKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgY29uc3QgbWFjS2V5ID0gYXdhaXQgdGhpcy5yYW5kb21CeXRlcygzMik7XHJcbiAgICAgICAgY29uc3Qgc2lnbmluZ0FsZ29yaXRobSA9IHtcclxuICAgICAgICAgICAgbmFtZTogJ0hNQUMnLFxyXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgaW1wS2V5ID0gYXdhaXQgdGhpcy5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBtYWNLZXksIHNpZ25pbmdBbGdvcml0aG0sIGZhbHNlLCBbJ3NpZ24nXSk7XHJcbiAgICAgICAgY29uc3QgbWFjMSA9IGF3YWl0IHRoaXMuc3VidGxlLnNpZ24oc2lnbmluZ0FsZ29yaXRobSwgaW1wS2V5LCBhKTtcclxuICAgICAgICBjb25zdCBtYWMyID0gYXdhaXQgdGhpcy5zdWJ0bGUuc2lnbihzaWduaW5nQWxnb3JpdGhtLCBpbXBLZXksIGIpO1xyXG5cclxuICAgICAgICBpZiAobWFjMS5ieXRlTGVuZ3RoICE9PSBtYWMyLmJ5dGVMZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYXJyMSA9IG5ldyBVaW50OEFycmF5KG1hYzEpO1xyXG4gICAgICAgIGNvbnN0IGFycjIgPSBuZXcgVWludDhBcnJheShtYWMyKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaG1hY0Zhc3QodmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcsIGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicgfCAnc2hhNTEyJyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgaG1hYyA9IChmb3JnZSBhcyBhbnkpLmhtYWMuY3JlYXRlKCk7XHJcbiAgICAgICAgaG1hYy5zdGFydChhbGdvcml0aG0sIGtleSk7XHJcbiAgICAgICAgaG1hYy51cGRhdGUodmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IGJ5dGVzID0gaG1hYy5kaWdlc3QoKS5nZXRCeXRlcygpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYnl0ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNvbXBhcmVGYXN0KGE6IHN0cmluZywgYjogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgY29uc3QgcmFuZCA9IGF3YWl0IHRoaXMucmFuZG9tQnl0ZXMoMzIpO1xyXG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQzMkFycmF5KHJhbmQpO1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGZvcmdlLnV0aWwuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBidWZmZXIucHV0SW50MzIoYnl0ZXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtYWNLZXkgPSBidWZmZXIuZ2V0Qnl0ZXMoKTtcclxuXHJcbiAgICAgICAgY29uc3QgaG1hYyA9IChmb3JnZSBhcyBhbnkpLmhtYWMuY3JlYXRlKCk7XHJcbiAgICAgICAgaG1hYy5zdGFydCgnc2hhMjU2JywgbWFjS2V5KTtcclxuICAgICAgICBobWFjLnVwZGF0ZShhKTtcclxuICAgICAgICBjb25zdCBtYWMxID0gaG1hYy5kaWdlc3QoKS5nZXRCeXRlcygpO1xyXG5cclxuICAgICAgICBobWFjLnN0YXJ0KG51bGwsIG51bGwpO1xyXG4gICAgICAgIGhtYWMudXBkYXRlKGIpO1xyXG4gICAgICAgIGNvbnN0IG1hYzIgPSBobWFjLmRpZ2VzdCgpLmdldEJ5dGVzKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVxdWFscyA9IG1hYzEgPT09IG1hYzI7XHJcbiAgICAgICAgcmV0dXJuIGVxdWFscztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhZXNFbmNyeXB0KGRhdGE6IEFycmF5QnVmZmVyLCBpdjogQXJyYXlCdWZmZXIsIGtleTogQXJyYXlCdWZmZXIpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XHJcbiAgICAgICAgY29uc3QgaW1wS2V5ID0gYXdhaXQgdGhpcy5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBrZXksIHsgbmFtZTogJ0FFUy1DQkMnIH0gYXMgYW55LCBmYWxzZSwgWydlbmNyeXB0J10pO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN1YnRsZS5lbmNyeXB0KHsgbmFtZTogJ0FFUy1DQkMnLCBpdjogaXYgfSwgaW1wS2V5LCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBhZXNEZWNyeXB0RmFzdFBhcmFtZXRlcnMoZGF0YTogc3RyaW5nLCBpdjogc3RyaW5nLCBtYWM6IHN0cmluZywga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOlxyXG4gICAgICAgIERlY3J5cHRQYXJhbWV0ZXJzPHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IHAgPSBuZXcgRGVjcnlwdFBhcmFtZXRlcnM8c3RyaW5nPigpO1xyXG4gICAgICAgIGlmIChrZXkubWV0YSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHAuZW5jS2V5ID0ga2V5Lm1ldGEuZW5jS2V5Qnl0ZVN0cmluZztcclxuICAgICAgICAgICAgcC5tYWNLZXkgPSBrZXkubWV0YS5tYWNLZXlCeXRlU3RyaW5nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHAuZW5jS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgcC5lbmNLZXkgPSBmb3JnZS51dGlsLmRlY29kZTY0KGtleS5lbmNLZXlCNjQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwLmRhdGEgPSBmb3JnZS51dGlsLmRlY29kZTY0KGRhdGEpO1xyXG4gICAgICAgIHAuaXYgPSBmb3JnZS51dGlsLmRlY29kZTY0KGl2KTtcclxuICAgICAgICBwLm1hY0RhdGEgPSBwLml2ICsgcC5kYXRhO1xyXG4gICAgICAgIGlmIChwLm1hY0tleSA9PSBudWxsICYmIGtleS5tYWNLZXlCNjQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwLm1hY0tleSA9IGZvcmdlLnV0aWwuZGVjb2RlNjQoa2V5Lm1hY0tleUI2NCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtYWMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwLm1hYyA9IGZvcmdlLnV0aWwuZGVjb2RlNjQobWFjKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNhY2hlIGJ5dGUgc3RyaW5nIGtleXMgZm9yIGxhdGVyXHJcbiAgICAgICAgaWYgKGtleS5tZXRhID09IG51bGwpIHtcclxuICAgICAgICAgICAga2V5Lm1ldGEgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGtleS5tZXRhLmVuY0tleUJ5dGVTdHJpbmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBrZXkubWV0YS5lbmNLZXlCeXRlU3RyaW5nID0gcC5lbmNLZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwLm1hY0tleSAhPSBudWxsICYmIGtleS5tZXRhLm1hY0tleUJ5dGVTdHJpbmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBrZXkubWV0YS5tYWNLZXlCeXRlU3RyaW5nID0gcC5tYWNLZXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxuXHJcbiAgICBhZXNEZWNyeXB0RmFzdChwYXJhbWV0ZXJzOiBEZWNyeXB0UGFyYW1ldGVyczxzdHJpbmc+KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCBkYXRhQnVmZmVyID0gKGZvcmdlIGFzIGFueSkudXRpbC5jcmVhdGVCdWZmZXIocGFyYW1ldGVycy5kYXRhKTtcclxuICAgICAgICBjb25zdCBkZWNpcGhlciA9IChmb3JnZSBhcyBhbnkpLmNpcGhlci5jcmVhdGVEZWNpcGhlcignQUVTLUNCQycsIHBhcmFtZXRlcnMuZW5jS2V5KTtcclxuICAgICAgICBkZWNpcGhlci5zdGFydCh7IGl2OiBwYXJhbWV0ZXJzLml2IH0pO1xyXG4gICAgICAgIGRlY2lwaGVyLnVwZGF0ZShkYXRhQnVmZmVyKTtcclxuICAgICAgICBkZWNpcGhlci5maW5pc2goKTtcclxuICAgICAgICBjb25zdCB2YWwgPSBkZWNpcGhlci5vdXRwdXQudG9TdHJpbmcoJ3V0ZjgnKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYWVzRGVjcnlwdChkYXRhOiBBcnJheUJ1ZmZlciwgaXY6IEFycmF5QnVmZmVyLCBrZXk6IEFycmF5QnVmZmVyKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xyXG4gICAgICAgIGNvbnN0IGltcEtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgncmF3Jywga2V5LCB7IG5hbWU6ICdBRVMtQ0JDJyB9IGFzIGFueSwgZmFsc2UsIFsnZGVjcnlwdCddKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuZGVjcnlwdCh7IG5hbWU6ICdBRVMtQ0JDJywgaXY6IGl2IH0sIGltcEtleSwgZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcnNhRW5jcnlwdChkYXRhOiBBcnJheUJ1ZmZlciwgcHVibGljS2V5OiBBcnJheUJ1ZmZlciwgYWxnb3JpdGhtOiAnc2hhMScgfCAnc2hhMjU2Jyk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuICAgICAgICAvLyBOb3RlOiBFZGdlIGJyb3dzZXIgcmVxdWlyZXMgdGhhdCB3ZSBzcGVjaWZ5IG5hbWUgYW5kIGhhc2ggZm9yIGJvdGgga2V5IGltcG9ydCBhbmQgZGVjcnlwdC5cclxuICAgICAgICAvLyBXZSBjYW5ub3QgdXNlIHRoZSBwcm9wZXIgdHlwZXMgaGVyZS5cclxuICAgICAgICBjb25zdCByc2FQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXHJcbiAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogdGhpcy50b1dlYkNyeXB0b0FsZ29yaXRobShhbGdvcml0aG0pIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBpbXBLZXkgPSBhd2FpdCB0aGlzLnN1YnRsZS5pbXBvcnRLZXkoJ3Nwa2knLCBwdWJsaWNLZXksIHJzYVBhcmFtcywgZmFsc2UsIFsnZW5jcnlwdCddKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuZW5jcnlwdChyc2FQYXJhbXMsIGltcEtleSwgZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcnNhRGVjcnlwdChkYXRhOiBBcnJheUJ1ZmZlciwgcHJpdmF0ZUtleTogQXJyYXlCdWZmZXIsIGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XHJcbiAgICAgICAgLy8gTm90ZTogRWRnZSBicm93c2VyIHJlcXVpcmVzIHRoYXQgd2Ugc3BlY2lmeSBuYW1lIGFuZCBoYXNoIGZvciBib3RoIGtleSBpbXBvcnQgYW5kIGRlY3J5cHQuXHJcbiAgICAgICAgLy8gV2UgY2Fubm90IHVzZSB0aGUgcHJvcGVyIHR5cGVzIGhlcmUuXHJcbiAgICAgICAgY29uc3QgcnNhUGFyYW1zID0ge1xyXG4gICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnLFxyXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6IHRoaXMudG9XZWJDcnlwdG9BbGdvcml0aG0oYWxnb3JpdGhtKSB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgaW1wS2V5ID0gYXdhaXQgdGhpcy5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIHByaXZhdGVLZXksIHJzYVBhcmFtcywgZmFsc2UsIFsnZGVjcnlwdCddKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuZGVjcnlwdChyc2FQYXJhbXMsIGltcEtleSwgZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcnNhRXh0cmFjdFB1YmxpY0tleShwcml2YXRlS2V5OiBBcnJheUJ1ZmZlcik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuICAgICAgICBjb25zdCByc2FQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXHJcbiAgICAgICAgICAgIC8vIEhhdmUgdG8gc3BlY2lmeSBzb21lIGFsZ29yaXRobVxyXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6IHRoaXMudG9XZWJDcnlwdG9BbGdvcml0aG0oJ3NoYTEnKSB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgaW1wUHJpdmF0ZUtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgncGtjczgnLCBwcml2YXRlS2V5LCByc2FQYXJhbXMsIHRydWUsIFsnZGVjcnlwdCddKTtcclxuICAgICAgICBjb25zdCBqd2tQcml2YXRlS2V5ID0gYXdhaXQgdGhpcy5zdWJ0bGUuZXhwb3J0S2V5KCdqd2snLCBpbXBQcml2YXRlS2V5KTtcclxuICAgICAgICBjb25zdCBqd2tQdWJsaWNLZXlQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIGt0eTogJ1JTQScsXHJcbiAgICAgICAgICAgIGU6IGp3a1ByaXZhdGVLZXkuZSxcclxuICAgICAgICAgICAgbjogandrUHJpdmF0ZUtleS5uLFxyXG4gICAgICAgICAgICBhbGc6ICdSU0EtT0FFUCcsXHJcbiAgICAgICAgICAgIGV4dDogdHJ1ZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGltcFB1YmxpY0tleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgnandrJywgandrUHVibGljS2V5UGFyYW1zLCByc2FQYXJhbXMsIHRydWUsIFsnZW5jcnlwdCddKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuZXhwb3J0S2V5KCdzcGtpJywgaW1wUHVibGljS2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByc2FHZW5lcmF0ZUtleVBhaXIobGVuZ3RoOiAxMDI0IHwgMjA0OCB8IDQwOTYpOiBQcm9taXNlPFtBcnJheUJ1ZmZlciwgQXJyYXlCdWZmZXJdPiB7XHJcbiAgICAgICAgY29uc3QgcnNhUGFyYW1zID0ge1xyXG4gICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnLFxyXG4gICAgICAgICAgICBtb2R1bHVzTGVuZ3RoOiBsZW5ndGgsXHJcbiAgICAgICAgICAgIHB1YmxpY0V4cG9uZW50OiBuZXcgVWludDhBcnJheShbMHgwMSwgMHgwMCwgMHgwMV0pLCAvLyA2NTUzN1xyXG4gICAgICAgICAgICAvLyBIYXZlIHRvIHNwZWNpZnkgc29tZSBhbGdvcml0aG1cclxuICAgICAgICAgICAgaGFzaDogeyBuYW1lOiB0aGlzLnRvV2ViQ3J5cHRvQWxnb3JpdGhtKCdzaGExJykgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGtleVBhaXIgPSAoYXdhaXQgdGhpcy5zdWJ0bGUuZ2VuZXJhdGVLZXkocnNhUGFyYW1zLCB0cnVlLCBbJ2VuY3J5cHQnLCAnZGVjcnlwdCddKSkgYXMgQ3J5cHRvS2V5UGFpcjtcclxuICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSBhd2FpdCB0aGlzLnN1YnRsZS5leHBvcnRLZXkoJ3Nwa2knLCBrZXlQYWlyLnB1YmxpY0tleSk7XHJcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmV4cG9ydEtleSgncGtjczgnLCBrZXlQYWlyLnByaXZhdGVLZXkpO1xyXG4gICAgICAgIHJldHVybiBbcHVibGljS2V5LCBwcml2YXRlS2V5XTtcclxuICAgIH1cclxuXHJcbiAgICByYW5kb21CeXRlcyhsZW5ndGg6IG51bWJlcik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYXJyLmJ1ZmZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0b0J1Zih2YWx1ZTogc3RyaW5nIHwgQXJyYXlCdWZmZXIpOiBBcnJheUJ1ZmZlciB7XHJcbiAgICAgICAgbGV0IGJ1ZjogQXJyYXlCdWZmZXI7XHJcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBidWYgPSBVdGlscy5mcm9tVXRmOFRvQXJyYXkodmFsdWUpLmJ1ZmZlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidWYgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ1ZjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRvQnl0ZVN0cmluZyh2YWx1ZTogc3RyaW5nIHwgQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBieXRlczogc3RyaW5nO1xyXG4gICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYnl0ZXMgPSBmb3JnZS51dGlsLmVuY29kZVV0ZjgodmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ5dGVzID0gVXRpbHMuZnJvbUJ1ZmZlclRvQnl0ZVN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBieXRlcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRvV2ViQ3J5cHRvQWxnb3JpdGhtKGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicgfCAnc2hhNTEyJyB8ICdtZDUnKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoYWxnb3JpdGhtID09PSAnbWQ1Jykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ENSBpcyBub3Qgc3VwcG9ydGVkIGluIFdlYkNyeXB0by4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFsZ29yaXRobSA9PT0gJ3NoYTEnID8gJ1NIQS0xJyA6IGFsZ29yaXRobSA9PT0gJ3NoYTI1NicgPyAnU0hBLTI1NicgOiAnU0hBLTUxMic7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XHJcblxyXG5pbXBvcnQgTWFpbkJhY2tncm91bmQgZnJvbSAnLi9tYWluLmJhY2tncm91bmQnO1xyXG5cclxuaW1wb3J0IHsgUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvcGFzc3dvcmRHZW5lcmF0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWxzU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5pbXBvcnQgTG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9uc0l0ZW0gZnJvbSAnLi9tb2RlbHMvbG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9uc0l0ZW0nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbWFuZHNCYWNrZ3JvdW5kIHtcclxuICAgIHByaXZhdGUgaXNTYWZhcmk6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIGlzVml2YWxkaTogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1haW46IE1haW5CYWNrZ3JvdW5kLCBwcml2YXRlIHBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2U6IFBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UsIHByaXZhdGUgdmF1bHRUaW1lb3V0U2VydmljZTogVmF1bHRUaW1lb3V0U2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuaXNTYWZhcmkgPSB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzU2FmYXJpKCk7XHJcbiAgICAgICAgdGhpcy5pc1ZpdmFsZGkgPSB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzVml2YWxkaSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGluaXQoKSB7XHJcbiAgICAgICAgQnJvd3NlckFwaS5tZXNzYWdlTGlzdGVuZXIoJ2NvbW1hbmRzLmJhY2tncm91bmQnLCBhc3luYyAobXNnOiBhbnksIHNlbmRlcjogY2hyb21lLnJ1bnRpbWUuTWVzc2FnZVNlbmRlciwgc2VuZFJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKG1zZy5jb21tYW5kID09PSAndW5sb2NrQ29tcGxldGVkJyAmJiBtc2cuZGF0YS50YXJnZXQgPT09ICdjb21tYW5kcy5iYWNrZ3JvdW5kJykge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzQ29tbWFuZChtc2cuZGF0YS5jb21tYW5kVG9SZXRyeS5tc2cuY29tbWFuZCwgbXNnLmRhdGEuY29tbWFuZFRvUmV0cnkuc2VuZGVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNWaXZhbGRpICYmIG1zZy5jb21tYW5kID09PSAna2V5Ym9hcmRTaG9ydGN1dFRyaWdnZXJlZCcgJiYgbXNnLnNob3J0Y3V0KSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NDb21tYW5kKG1zZy5zaG9ydGN1dCwgc2VuZGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaXNWaXZhbGRpICYmIGNocm9tZSAmJiBjaHJvbWUuY29tbWFuZHMpIHtcclxuICAgICAgICAgICAgY2hyb21lLmNvbW1hbmRzLm9uQ29tbWFuZC5hZGRMaXN0ZW5lcihhc3luYyAoY29tbWFuZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NDb21tYW5kKGNvbW1hbmQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBwcm9jZXNzQ29tbWFuZChjb21tYW5kOiBzdHJpbmcsIHNlbmRlcj86IGNocm9tZS5ydW50aW1lLk1lc3NhZ2VTZW5kZXIpIHtcclxuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgY2FzZSAnZ2VuZXJhdGVfcGFzc3dvcmQnOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5nZW5lcmF0ZVBhc3N3b3JkVG9DbGlwYm9hcmQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhdXRvZmlsbF9sb2dpbic6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmF1dG9GaWxsTG9naW4oc2VuZGVyID8gc2VuZGVyLnRhYiA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ29wZW5fcG9wdXAnOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5vcGVuUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdsb2NrX3ZhdWx0JzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5sb2NrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZVBhc3N3b3JkVG9DbGlwYm9hcmQoKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IChhd2FpdCB0aGlzLnBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UuZ2V0T3B0aW9ucygpKVswXTtcclxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IGF3YWl0IHRoaXMucGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZS5nZW5lcmF0ZVBhc3N3b3JkKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKHBhc3N3b3JkLCB7IHdpbmRvdzogd2luZG93IH0pO1xyXG4gICAgICAgIHRoaXMucGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZS5hZGRIaXN0b3J5KHBhc3N3b3JkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGF1dG9GaWxsTG9naW4odGFiPzogY2hyb21lLnRhYnMuVGFiKSB7XHJcbiAgICAgICAgaWYgKCF0YWIpIHtcclxuICAgICAgICAgICAgdGFiID0gYXdhaXQgQnJvd3NlckFwaS5nZXRUYWJGcm9tQ3VycmVudFdpbmRvd0lkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFiID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5pc0xvY2tlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5TWVzc2FnZTogTG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9uc0l0ZW0gPSB7XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kVG9SZXRyeToge1xyXG4gICAgICAgICAgICAgICAgICAgIG1zZzogeyBjb21tYW5kOiAnYXV0b2ZpbGxfbG9naW4nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyOiB7IHRhYjogdGFiIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiAnY29tbWFuZHMuYmFja2dyb3VuZCcsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGF3YWl0IEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2VEYXRhKHRhYiwgJ2FkZFRvTG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9ucycsIHJldHJ5TWVzc2FnZSk7XHJcblxyXG4gICAgICAgICAgICBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlRGF0YSh0YWIsICdwcm9tcHRGb3JMb2dpbicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLm1haW4uY29sbGVjdFBhZ2VEZXRhaWxzRm9yQ29udGVudFNjcmlwdCh0YWIsICdhdXRvZmlsbF9jbWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIG9wZW5Qb3B1cCgpIHtcclxuICAgICAgICAvLyBDaHJvbWUgQVBJcyBjYW5ub3Qgb3BlbiBwb3B1cFxyXG4gICAgICAgIGlmICghdGhpcy5pc1NhZmFyaSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm1haW4ub3BlblBvcHVwKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XHJcblxyXG5pbXBvcnQgTWFpbkJhY2tncm91bmQgZnJvbSAnLi9tYWluLmJhY2tncm91bmQnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvY2lwaGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2V2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9wYXNzd29yZEdlbmVyYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IFBsYXRmb3JtVXRpbHNTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUb3RwU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdG90cC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyUmVwcm9tcHRUeXBlIH0gZnJvbSAnanNsaWItY29tbW9uL2VudW1zL2NpcGhlclJlcHJvbXB0VHlwZSc7XHJcbmltcG9ydCB7IEV2ZW50VHlwZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9lbnVtcy9ldmVudFR5cGUnO1xyXG5pbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnanNsaWItY29tbW9uL21vZGVscy92aWV3L2NpcGhlclZpZXcnO1xyXG5pbXBvcnQgTG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9uc0l0ZW0gZnJvbSAnLi9tb2RlbHMvbG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9uc0l0ZW0nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGV4dE1lbnVzQmFja2dyb3VuZCB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5vb3BDb21tYW5kU3VmZml4ID0gJ25vb3AnO1xyXG4gICAgcHJpdmF0ZSBjb250ZXh0TWVudXM6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1haW46IE1haW5CYWNrZ3JvdW5kLCBwcml2YXRlIGNpcGhlclNlcnZpY2U6IENpcGhlclNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBwYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlOiBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgcGxhdGZvcm1VdGlsc1NlcnZpY2U6IFBsYXRmb3JtVXRpbHNTZXJ2aWNlLCBwcml2YXRlIHZhdWx0VGltZW91dFNlcnZpY2U6IFZhdWx0VGltZW91dFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZSwgcHJpdmF0ZSB0b3RwU2VydmljZTogVG90cFNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHRNZW51cyA9IGNocm9tZS5jb250ZXh0TWVudXM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY29udGV4dE1lbnVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dE1lbnVzLm9uQ2xpY2tlZC5hZGRMaXN0ZW5lcihhc3luYyAoaW5mbzogY2hyb21lLmNvbnRleHRNZW51cy5PbkNsaWNrRGF0YSwgdGFiOiBjaHJvbWUudGFicy5UYWIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGluZm8ubWVudUl0ZW1JZCA9PT0gJ2dlbmVyYXRlLXBhc3N3b3JkJykge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5nZW5lcmF0ZVBhc3N3b3JkVG9DbGlwYm9hcmQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbmZvLm1lbnVJdGVtSWQgPT09ICdjb3B5LWlkZW50aWZpZXInKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdldENsaWNrZWRFbGVtZW50KHRhYiwgaW5mby5mcmFtZUlkKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbmZvLnBhcmVudE1lbnVJdGVtSWQgPT09ICdhdXRvZmlsbCcgfHxcclxuICAgICAgICAgICAgICAgIGluZm8ucGFyZW50TWVudUl0ZW1JZCA9PT0gJ2NvcHktdXNlcm5hbWUnIHx8XHJcbiAgICAgICAgICAgICAgICBpbmZvLnBhcmVudE1lbnVJdGVtSWQgPT09ICdjb3B5LXBhc3N3b3JkJyB8fFxyXG4gICAgICAgICAgICAgICAgaW5mby5wYXJlbnRNZW51SXRlbUlkID09PSAnY29weS10b3RwJykge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaXBoZXJBY3Rpb24odGFiLCBpbmZvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBCcm93c2VyQXBpLm1lc3NhZ2VMaXN0ZW5lcignY29udGV4dG1lbnVzLmJhY2tncm91bmQnLCBhc3luYyAobXNnOiBhbnksIHNlbmRlcjogY2hyb21lLnJ1bnRpbWUuTWVzc2FnZVNlbmRlciwgc2VuZFJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKG1zZy5jb21tYW5kID09PSAndW5sb2NrQ29tcGxldGVkJyAmJiBtc2cuZGF0YS50YXJnZXQgPT09ICdjb250ZXh0bWVudXMuYmFja2dyb3VuZCcpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2lwaGVyQWN0aW9uKG1zZy5kYXRhLmNvbW1hbmRUb1JldHJ5LnNlbmRlci50YWIsIG1zZy5kYXRhLmNvbW1hbmRUb1JldHJ5Lm1zZy5kYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVQYXNzd29yZFRvQ2xpcGJvYXJkKCkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSAoYXdhaXQgdGhpcy5wYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLmdldE9wdGlvbnMoKSlbMF07XHJcbiAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBhd2FpdCB0aGlzLnBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UuZ2VuZXJhdGVQYXNzd29yZChvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmNvcHlUb0NsaXBib2FyZChwYXNzd29yZCwgeyB3aW5kb3c6IHdpbmRvdyB9KTtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UuYWRkSGlzdG9yeShwYXNzd29yZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRDbGlja2VkRWxlbWVudCh0YWI6IGNocm9tZS50YWJzLlRhYiwgZnJhbWVJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRhYiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2UodGFiLCB7IGNvbW1hbmQ6ICdnZXRDbGlja2VkRWxlbWVudCcgfSwgeyBmcmFtZUlkOiBmcmFtZUlkIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgY2lwaGVyQWN0aW9uKHRhYjogY2hyb21lLnRhYnMuVGFiLCBpbmZvOiBjaHJvbWUuY29udGV4dE1lbnVzLk9uQ2xpY2tEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBpbmZvLm1lbnVJdGVtSWQuc3BsaXQoJ18nKVsxXTtcclxuXHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5pc0xvY2tlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5TWVzc2FnZTogTG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9uc0l0ZW0gPSB7XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kVG9SZXRyeToge1xyXG4gICAgICAgICAgICAgICAgICAgIG1zZzogeyBjb21tYW5kOiB0aGlzLm5vb3BDb21tYW5kU3VmZml4LCBkYXRhOiBpbmZvIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyOiB7IHRhYjogdGFiIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiAnY29udGV4dG1lbnVzLmJhY2tncm91bmQnLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhd2FpdCBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlRGF0YSh0YWIsICdhZGRUb0xvY2tlZFZhdWx0UGVuZGluZ05vdGlmaWNhdGlvbnMnLCByZXRyeU1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEodGFiLCAncHJvbXB0Rm9yTG9naW4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNpcGhlcjogQ2lwaGVyVmlldztcclxuICAgICAgICBpZiAoaWQgPT09IHRoaXMubm9vcENvbW1hbmRTdWZmaXgpIHtcclxuICAgICAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWRGb3JVcmwodGFiLnVybCk7XHJcbiAgICAgICAgICAgIGNpcGhlciA9IGNpcGhlcnMuZmluZChjID0+IGMucmVwcm9tcHQgPT09IENpcGhlclJlcHJvbXB0VHlwZS5Ob25lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmdldEFsbERlY3J5cHRlZCgpO1xyXG4gICAgICAgICAgICBjaXBoZXIgPSBjaXBoZXJzLmZpbmQoYyA9PiBjLmlkID09PSBpZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2lwaGVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluZm8ucGFyZW50TWVudUl0ZW1JZCA9PT0gJ2F1dG9maWxsJykge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0QXV0b2ZpbGxQYWdlKHRhYiwgY2lwaGVyKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGluZm8ucGFyZW50TWVudUl0ZW1JZCA9PT0gJ2NvcHktdXNlcm5hbWUnKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKGNpcGhlci5sb2dpbi51c2VybmFtZSwgeyB3aW5kb3c6IHdpbmRvdyB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGluZm8ucGFyZW50TWVudUl0ZW1JZCA9PT0gJ2NvcHktcGFzc3dvcmQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKGNpcGhlci5sb2dpbi5wYXNzd29yZCwgeyB3aW5kb3c6IHdpbmRvdyB9KTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UuY29sbGVjdChFdmVudFR5cGUuQ2lwaGVyX0NsaWVudENvcGllZFBhc3N3b3JkLCBjaXBoZXIuaWQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5mby5wYXJlbnRNZW51SXRlbUlkID09PSAnY29weS10b3RwJykge1xyXG4gICAgICAgICAgICBjb25zdCB0b3RwVmFsdWUgPSBhd2FpdCB0aGlzLnRvdHBTZXJ2aWNlLmdldENvZGUoY2lwaGVyLmxvZ2luLnRvdHApO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmNvcHlUb0NsaXBib2FyZCh0b3RwVmFsdWUsIHsgd2luZG93OiB3aW5kb3cgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc3RhcnRBdXRvZmlsbFBhZ2UodGFiOiBjaHJvbWUudGFicy5UYWIsIGNpcGhlcjogQ2lwaGVyVmlldykge1xyXG4gICAgICAgIHRoaXMubWFpbi5sb2dpblRvQXV0b0ZpbGwgPSBjaXBoZXI7XHJcbiAgICAgICAgaWYgKHRhYiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2UodGFiLCB7XHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdjb2xsZWN0UGFnZURldGFpbHMnLFxyXG4gICAgICAgICAgICB0YWI6IHRhYixcclxuICAgICAgICAgICAgc2VuZGVyOiAnY29udGV4dE1lbnUnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IE5vdGlmaWNhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9ub3RpZmljYXRpb25zLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgQ29uc3RhbnRzU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9jb25zdGFudHMuc2VydmljZSc7XHJcblxyXG5jb25zdCBJZGxlSW50ZXJ2YWwgPSA2MCAqIDU7IC8vIDUgbWludXRlc1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRsZUJhY2tncm91bmQge1xyXG4gICAgcHJpdmF0ZSBpZGxlOiBhbnk7XHJcbiAgICBwcml2YXRlIGlkbGVUaW1lcjogbnVtYmVyID0gbnVsbDtcclxuICAgIHByaXZhdGUgaWRsZVN0YXRlID0gJ2FjdGl2ZSc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2YXVsdFRpbWVvdXRTZXJ2aWNlOiBWYXVsdFRpbWVvdXRTZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIG5vdGlmaWNhdGlvbnNTZXJ2aWNlOiBOb3RpZmljYXRpb25zU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuaWRsZSA9IGNocm9tZS5pZGxlIHx8IChicm93c2VyICE9IG51bGwgPyBicm93c2VyLmlkbGUgOiBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pZGxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGlkbGVIYW5kbGVyID0gKG5ld1N0YXRlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYgKG5ld1N0YXRlID09PSAnYWN0aXZlJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zU2VydmljZS5yZWNvbm5lY3RGcm9tQWN0aXZpdHkoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UuZGlzY29ubmVjdEZyb21JbmFjdGl2aXR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0aGlzLmlkbGUub25TdGF0ZUNoYW5nZWQgJiYgdGhpcy5pZGxlLnNldERldGVjdGlvbkludGVydmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaWRsZS5zZXREZXRlY3Rpb25JbnRlcnZhbChJZGxlSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB0aGlzLmlkbGUub25TdGF0ZUNoYW5nZWQuYWRkTGlzdGVuZXIoaWRsZUhhbmRsZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9sbElkbGUoaWRsZUhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaWRsZS5vblN0YXRlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlkbGUub25TdGF0ZUNoYW5nZWQuYWRkTGlzdGVuZXIoYXN5bmMgKG5ld1N0YXRlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdTdGF0ZSA9PT0gJ2xvY2tlZCcpIHsgLy8gSWYgdGhlIHNjcmVlbiBpcyBsb2NrZWQgb3IgdGhlIHNjcmVlbnNhdmVyIGFjdGl2YXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxudW1iZXI+KENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCA9PT0gLTIpIHsgLy8gT24gU3lzdGVtIExvY2sgdmF1bHQgdGltZW91dCBvcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEFjdGlvbktleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdsb2dPdXQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UubG9nT3V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UubG9jayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcG9sbElkbGUoaGFuZGxlcjogKG5ld1N0YXRlOiBzdHJpbmcpID0+IHZvaWQpIHtcclxuICAgICAgICBpZiAodGhpcy5pZGxlVGltZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuaWRsZVRpbWVyKTtcclxuICAgICAgICAgICAgdGhpcy5pZGxlVGltZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlkbGUucXVlcnlTdGF0ZShJZGxlSW50ZXJ2YWwsIChzdGF0ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSAhPT0gdGhpcy5pZGxlU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWRsZVN0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKHN0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmlkbGVUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMucG9sbElkbGUoaGFuZGxlciksIDUwMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEFwcElkU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvYXBwSWQuc2VydmljZSc7XHJcbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9jcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2kxOG4uc2VydmljZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2luZ1NlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL21lc3NhZ2luZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3BsYXRmb3JtVXRpbHMuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdXNlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL2NvbnN0YW50cy5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnanNsaWItY29tbW9uL21pc2MvdXRpbHMnO1xyXG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICdqc2xpYi1jb21tb24vbW9kZWxzL2RvbWFpbi9zeW1tZXRyaWNDcnlwdG9LZXknO1xyXG5cclxuaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XHJcbmltcG9ydCBSdW50aW1lQmFja2dyb3VuZCBmcm9tICcuL3J1bnRpbWUuYmFja2dyb3VuZCc7XHJcblxyXG5jb25zdCBNZXNzYWdlVmFsaWRUaW1lb3V0ID0gMTAgKiAxMDAwO1xyXG5jb25zdCBFbmNyeXB0aW9uQWxnb3JpdGhtID0gJ3NoYTEnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5hdGl2ZU1lc3NhZ2luZ0JhY2tncm91bmQge1xyXG4gICAgcHJpdmF0ZSBjb25uZWN0ZWQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgY29ubmVjdGluZzogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgcG9ydDogYnJvd3Nlci5ydW50aW1lLlBvcnQgfCBjaHJvbWUucnVudGltZS5Qb3J0O1xyXG5cclxuICAgIHByaXZhdGUgcmVzb2x2ZXI6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIHByaXZhdGVLZXk6IEFycmF5QnVmZmVyID0gbnVsbDtcclxuICAgIHByaXZhdGUgcHVibGljS2V5OiBBcnJheUJ1ZmZlciA9IG51bGw7XHJcbiAgICBwcml2YXRlIHNlY3VyZVNldHVwUmVzb2x2ZTogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgc2hhcmVkU2VjcmV0OiBTeW1tZXRyaWNDcnlwdG9LZXk7XHJcbiAgICBwcml2YXRlIGFwcElkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHZhbGlkYXRpbmdGaW5nZXJwcmludDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY3J5cHRvRnVuY3Rpb25TZXJ2aWNlOiBDcnlwdG9GdW5jdGlvblNlcnZpY2UsIHByaXZhdGUgdmF1bHRUaW1lb3V0U2VydmljZTogVmF1bHRUaW1lb3V0U2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHJ1bnRpbWVCYWNrZ3JvdW5kOiBSdW50aW1lQmFja2dyb3VuZCwgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UsIHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgbWVzc2FnaW5nU2VydmljZTogTWVzc2FnaW5nU2VydmljZSwgcHJpdmF0ZSBhcHBJZFNlcnZpY2U6IEFwcElkU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNGaW5nZXJwcmludFZhbGlkYXRlZCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNocm9tZT8ucGVybWlzc2lvbnM/Lm9uQWRkZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJlbG9hZCBleHRlbnNpb24gdG8gYWN0aXZhdGUgbmF0aXZlTWVzc2FnaW5nXHJcbiAgICAgICAgICAgICAgICBjaHJvbWUucGVybWlzc2lvbnMub25BZGRlZC5hZGRMaXN0ZW5lcihwZXJtaXNzaW9ucyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgQnJvd3NlckFwaS5yZWxvYWRFeHRlbnNpb24obnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICBhc3luYyBjb25uZWN0KCkge1xyXG4gICAgICAgIHRoaXMuYXBwSWQgPSBhd2FpdCB0aGlzLmFwcElkU2VydmljZS5nZXRBcHBJZCgpO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShDb25zdGFudHNTZXJ2aWNlLmJpb21ldHJpY0ZpbmdlcnByaW50VmFsaWRhdGVkLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucG9ydCA9IEJyb3dzZXJBcGkuY29ubmVjdE5hdGl2ZSgnY29tLjhiaXQuYml0d2FyZGVuJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29ubmVjdGVkQ2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNhZmFyaSBoYXMgYSBidW5kbGVkIG5hdGl2ZSBjb21wb25lbnQgd2hpY2ggaXMgYWx3YXlzIGF2YWlsYWJsZSwgbm8gbmVlZCB0b1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgZGVza3RvcCBhcHAgaXMgcnVubmluZy5cclxuICAgICAgICAgICAgaWYgKHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKSkge1xyXG4gICAgICAgICAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wb3J0Lm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihhc3luYyAobWVzc2FnZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UuY29tbWFuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Rpc2Nvbm5lY3RlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzaG93RGlhbG9nJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnc3RhcnREZXNrdG9wRGVzYycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ3N0YXJ0RGVza3RvcFRpdGxlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybVRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnb2snKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcnQuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzZXR1cEVuY3J5cHRpb24nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgc2luY2UgaXQgYmVsb25ncyB0byBhbm90aGVyIGRldmljZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5hcHBJZCAhPT0gdGhpcy5hcHBJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmNyeXB0ZWQgPSBVdGlscy5mcm9tQjY0VG9BcnJheShtZXNzYWdlLnNoYXJlZFNlY3JldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlY3J5cHRlZCA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJzYURlY3J5cHQoZW5jcnlwdGVkLmJ1ZmZlciwgdGhpcy5wcml2YXRlS2V5LCBFbmNyeXB0aW9uQWxnb3JpdGhtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbGlkYXRpbmdGaW5nZXJwcmludCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0aW5nRmluZ2VycHJpbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShDb25zdGFudHNTZXJ2aWNlLmJpb21ldHJpY0ZpbmdlcnByaW50VmFsaWRhdGVkLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYXJlZFNlY3JldCA9IG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoZGVjcnlwdGVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWN1cmVTZXR1cFJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW52YWxpZGF0ZUVuY3J5cHRpb24nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgc2luY2UgaXQgYmVsb25ncyB0byBhbm90aGVyIGRldmljZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5hcHBJZCAhPT0gdGhpcy5hcHBJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYXJlZFNlY3JldCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdmF0ZUtleSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc2hvd0RpYWxvZycsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnbmF0aXZlTWVzc2FnaW5nSW52YWxpZEVuY3J5cHRpb25EZXNjJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5pMThuU2VydmljZS50KCduYXRpdmVNZXNzYWdpbmdJbnZhbGlkRW5jcnlwdGlvblRpdGxlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtVGV4dDogdGhpcy5pMThuU2VydmljZS50KCdvaycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZlcmlmeUZpbmdlcnByaW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zaGFyZWRTZWNyZXQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0aW5nRmluZ2VycHJpbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RmluZ2VycHJpbnREaWFsb2coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnd3JvbmdVc2VySWQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dXcm9uZ1VzZXJEaWFsb2coKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgc2luY2UgaXQgYmVsb25ncyB0byBhbm90aGVyIGRldmljZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKSAmJiBtZXNzYWdlLmFwcElkICE9PSB0aGlzLmFwcElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25NZXNzYWdlKG1lc3NhZ2UubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wb3J0Lm9uRGlzY29ubmVjdC5hZGRMaXN0ZW5lcigocDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3I7XHJcbiAgICAgICAgICAgICAgICBpZiAoQnJvd3NlckFwaS5pc1dlYkV4dGVuc2lvbnNBcGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHAuZXJyb3IubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzaG93RGlhbG9nJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2Rlc2t0b3BJbnRlZ3JhdGlvbkRpc2FibGVkRGVzYycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5pMThuU2VydmljZS50KCdkZXNrdG9wSW50ZWdyYXRpb25EaXNhYmxlZFRpdGxlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1UZXh0OiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ29rJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXJlZFNlY3JldCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZhdGVLZXkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93V3JvbmdVc2VyRGlhbG9nKCkge1xyXG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzaG93RGlhbG9nJywge1xyXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ25hdGl2ZU1lc3NhZ2luZ1dyb25nVXNlckRlc2MnKSxcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnbmF0aXZlTWVzc2FnaW5nV3JvbmdVc2VyVGl0bGUnKSxcclxuICAgICAgICAgICAgY29uZmlybVRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnb2snKSxcclxuICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZW5kKG1lc3NhZ2U6IGFueSkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb25uZWN0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5pc1NhZmFyaSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wb3N0TWVzc2FnZSh7YXBwSWQ6IHRoaXMuYXBwSWQsIG1lc3NhZ2U6IGF3YWl0IHRoaXMuZW5jcnlwdE1lc3NhZ2UobWVzc2FnZSl9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZW5jcnlwdE1lc3NhZ2UobWVzc2FnZTogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hhcmVkU2VjcmV0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZWN1cmVDb21tdW5pY2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcblxyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgdGhpcy5zaGFyZWRTZWNyZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJlc3BvbnNlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlciA9IHJlc29sdmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwb3N0TWVzc2FnZShtZXNzYWdlOiBhbnkpIHtcclxuICAgICAgICAvLyBXcmFwIGluIHRyeS1jYXRjaCB0byB3aGVuIHRoZSBwb3J0IGRpc2Nvbm5lY3RlZCB3aXRob3V0IHRyaWdnZXJpbmcgYG9uRGlzY29ubmVjdGAuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5wb3J0LnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJOYXRpdmVNZXNzYWdpbmcgcG9ydCBkaXNjb25uZWN0ZWQsIGRpc2Nvbm5lY3RpbmcuXCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zaGFyZWRTZWNyZXQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnByaXZhdGVLZXkgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3Nob3dEaWFsb2cnLCB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ25hdGl2ZU1lc3NhZ2luZ0ludmFsaWRFbmNyeXB0aW9uRGVzYycpLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnbmF0aXZlTWVzc2FnaW5nSW52YWxpZEVuY3J5cHRpb25UaXRsZScpLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybVRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnb2snKSxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIG9uTWVzc2FnZShyYXdNZXNzYWdlOiBhbnkpIHtcclxuICAgICAgICBsZXQgbWVzc2FnZSA9IHJhd01lc3NhZ2U7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzU2FmYXJpKCkpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IEpTT04ucGFyc2UoYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmRlY3J5cHRUb1V0ZjgocmF3TWVzc2FnZSwgdGhpcy5zaGFyZWRTZWNyZXQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChNYXRoLmFicyhtZXNzYWdlLnRpbWVzdGFtcCAtIERhdGUubm93KCkpID4gTWVzc2FnZVZhbGlkVGltZW91dCkge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTmF0aXZlTWVzc2FnZSBpcyB0byBvbGQsIGlnbm9yaW5nLicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UuY29tbWFuZCkge1xyXG4gICAgICAgICAgICBjYXNlICdiaW9tZXRyaWNVbmxvY2snOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNBd2FpdGluZ0FjY2VwdGFuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlc3BvbnNlID09PSAnbm90IGVuYWJsZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3Nob3dEaWFsb2cnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnYmlvbWV0cmljc05vdEVuYWJsZWREZXNjJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2Jpb21ldHJpY3NOb3RFbmFibGVkVGl0bGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybVRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnb2snKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5yZXNwb25zZSA9PT0gJ25vdCBzdXBwb3J0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3Nob3dEaWFsb2cnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnYmlvbWV0cmljc05vdFN1cHBvcnRlZERlc2MnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnYmlvbWV0cmljc05vdFN1cHBvcnRlZFRpdGxlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1UZXh0OiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ29rJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZW5hYmxlZCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0KENvbnN0YW50c1NlcnZpY2UuYmlvbWV0cmljVW5sb2NrS2V5KTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmFibGVkID09PSBudWxsIHx8IGVuYWJsZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzcG9uc2UgPT09ICd1bmxvY2tlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKENvbnN0YW50c1NlcnZpY2UuYmlvbWV0cmljVW5sb2NrS2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHVubG9jayBpZiBhbHJlYWR5IHVubG9ja2VkZWRcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmJpb21ldHJpY0xvY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlc3BvbnNlID09PSAndW5sb2NrZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldEtleShuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KFV0aWxzLmZyb21CNjRUb0FycmF5KG1lc3NhZ2Uua2V5QjY0KS5idWZmZXIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZ5IGtleSBpcyBjb3JyZWN0IGJ5IGF0dGVtcHRpbmcgdG8gZGVjcnlwdCBhIHNlY3JldFxyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5nZXRGaW5nZXJwcmludChhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gdmVyaWZ5IGtleTonLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmNsZWFyS2V5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1dyb25nVXNlckRpYWxvZygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5iaW9tZXRyaWNMb2NrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bnRpbWVCYWNrZ3JvdW5kLnByb2Nlc3NNZXNzYWdlKHtjb21tYW5kOiAndW5sb2NrZWQnfSwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTmF0aXZlTWVzc2FnZSwgZ290IHVua25vd24gY29tbWFuZDogJywgbWVzc2FnZS5jb21tYW5kKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJlc29sdmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZXIobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc2VjdXJlQ29tbXVuaWNhdGlvbigpIHtcclxuICAgICAgICBjb25zdCBbcHVibGljS2V5LCBwcml2YXRlS2V5XSA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJzYUdlbmVyYXRlS2V5UGFpcigyMDQ4KTtcclxuICAgICAgICB0aGlzLnB1YmxpY0tleSA9IHB1YmxpY0tleTtcclxuICAgICAgICB0aGlzLnByaXZhdGVLZXkgPSBwcml2YXRlS2V5O1xyXG5cclxuICAgICAgICB0aGlzLnNlbmRVbmVuY3J5cHRlZCh7XHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdzZXR1cEVuY3J5cHRpb24nLFxyXG4gICAgICAgICAgICBwdWJsaWNLZXk6IFV0aWxzLmZyb21CdWZmZXJUb0I2NChwdWJsaWNLZXkpLFxyXG4gICAgICAgICAgICB1c2VySWQ6IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB0aGlzLnNlY3VyZVNldHVwUmVzb2x2ZSA9IHJlc29sdmUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc2VuZFVuZW5jcnlwdGVkKG1lc3NhZ2U6IGFueSkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb25uZWN0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcblxyXG4gICAgICAgIHRoaXMucG9zdE1lc3NhZ2Uoe2FwcElkOiB0aGlzLmFwcElkLCBtZXNzYWdlOiBtZXNzYWdlfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBzaG93RmluZ2VycHJpbnREaWFsb2coKSB7XHJcbiAgICAgICAgY29uc3QgZmluZ2VycHJpbnQgPSAoYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmdldEZpbmdlcnByaW50KGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCksIHRoaXMucHVibGljS2V5KSkuam9pbignICcpO1xyXG5cclxuICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc2hvd0RpYWxvZycsIHtcclxuICAgICAgICAgICAgaHRtbDogYCR7dGhpcy5pMThuU2VydmljZS50KCdkZXNrdG9wSW50ZWdyYXRpb25WZXJpZmljYXRpb25UZXh0Jyl9PGJyPjxicj48c3Ryb25nPiR7ZmluZ2VycHJpbnR9PC9zdHJvbmc+YCxcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnZGVza3RvcFN5bmNWZXJpZmljYXRpb25UaXRsZScpLFxyXG4gICAgICAgICAgICBjb25maXJtVGV4dDogdGhpcy5pMThuU2VydmljZS50KCdvaycpLFxyXG4gICAgICAgICAgICB0eXBlOiAnd2FybmluZycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gTm90aWZpY2F0aW9uUXVldWVNZXNzYWdlVHlwZSB7XHJcbiAgICBhZGRMb2dpbiA9ICdhZGRMb2dpbicsXHJcbiAgICBjaGFuZ2VQYXNzd29yZCA9ICdjaGFuZ2VQYXNzd29yZCcsXHJcbn1cclxuIiwiaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9lbnVtcy9jaXBoZXJUeXBlJztcclxuXHJcbmltcG9ydCB7IENpcGhlclZpZXcgfSBmcm9tICdqc2xpYi1jb21tb24vbW9kZWxzL3ZpZXcvY2lwaGVyVmlldyc7XHJcbmltcG9ydCB7IExvZ2luVXJpVmlldyB9IGZyb20gJ2pzbGliLWNvbW1vbi9tb2RlbHMvdmlldy9sb2dpblVyaVZpZXcnO1xyXG5pbXBvcnQgeyBMb2dpblZpZXcgfSBmcm9tICdqc2xpYi1jb21tb24vbW9kZWxzL3ZpZXcvbG9naW5WaWV3JztcclxuXHJcbmltcG9ydCB7IENpcGhlclNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9sZGVyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvZm9sZGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb2xpY3lTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9wb2xpY3kuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdXNlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgQ29uc3RhbnRzU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9jb25zdGFudHMuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBBdXRvZmlsbFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hYnN0cmFjdGlvbnMvYXV0b2ZpbGwuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBCcm93c2VyQXBpIH0gZnJvbSAnLi4vYnJvd3Nlci9icm93c2VyQXBpJztcclxuXHJcbmltcG9ydCBNYWluQmFja2dyb3VuZCBmcm9tICcuL21haW4uYmFja2dyb3VuZCc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJ2pzbGliLWNvbW1vbi9taXNjL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IFBvbGljeVR5cGUgfSBmcm9tICdqc2xpYi1jb21tb24vZW51bXMvcG9saWN5VHlwZSc7XHJcblxyXG5pbXBvcnQgQWRkQ2hhbmdlUGFzc3dvcmRRdWV1ZU1lc3NhZ2UgZnJvbSAnLi9tb2RlbHMvYWRkQ2hhbmdlUGFzc3dvcmRRdWV1ZU1lc3NhZ2UnO1xyXG5pbXBvcnQgQWRkTG9naW5RdWV1ZU1lc3NhZ2UgZnJvbSAnLi9tb2RlbHMvYWRkTG9naW5RdWV1ZU1lc3NhZ2UnO1xyXG5pbXBvcnQgQWRkTG9naW5SdW50aW1lTWVzc2FnZSBmcm9tICcuL21vZGVscy9hZGRMb2dpblJ1bnRpbWVNZXNzYWdlJztcclxuaW1wb3J0IENoYW5nZVBhc3N3b3JkUnVudGltZU1lc3NhZ2UgZnJvbSAnLi9tb2RlbHMvY2hhbmdlUGFzc3dvcmRSdW50aW1lTWVzc2FnZSc7XHJcbmltcG9ydCBMb2NrZWRWYXVsdFBlbmRpbmdOb3RpZmljYXRpb25zSXRlbSBmcm9tICcuL21vZGVscy9sb2NrZWRWYXVsdFBlbmRpbmdOb3RpZmljYXRpb25zSXRlbSc7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvblF1ZXVlTWVzc2FnZVR5cGUgfSBmcm9tICcuL21vZGVscy9ub3RpZmljYXRpb25RdWV1ZU1lc3NhZ2VUeXBlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGlmaWNhdGlvbkJhY2tncm91bmQge1xyXG5cclxuICAgIHByaXZhdGUgbm90aWZpY2F0aW9uUXVldWU6IChBZGRMb2dpblF1ZXVlTWVzc2FnZSB8IEFkZENoYW5nZVBhc3N3b3JkUXVldWVNZXNzYWdlKVtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtYWluOiBNYWluQmFja2dyb3VuZCwgcHJpdmF0ZSBhdXRvZmlsbFNlcnZpY2U6IEF1dG9maWxsU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNpcGhlclNlcnZpY2U6IENpcGhlclNlcnZpY2UsIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgdmF1bHRUaW1lb3V0U2VydmljZTogVmF1bHRUaW1lb3V0U2VydmljZSwgcHJpdmF0ZSBwb2xpY3lTZXJ2aWNlOiBQb2xpY3lTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgZm9sZGVyU2VydmljZTogRm9sZGVyU2VydmljZSwgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIGlmIChjaHJvbWUucnVudGltZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEJyb3dzZXJBcGkubWVzc2FnZUxpc3RlbmVyKCdub3RpZmljYXRpb24uYmFja2dyb3VuZCcsIGFzeW5jIChtc2c6IGFueSwgc2VuZGVyOiBjaHJvbWUucnVudGltZS5NZXNzYWdlU2VuZGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc01lc3NhZ2UobXNnLCBzZW5kZXIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFudXBOb3RpZmljYXRpb25RdWV1ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHByb2Nlc3NNZXNzYWdlKG1zZzogYW55LCBzZW5kZXI6IGNocm9tZS5ydW50aW1lLk1lc3NhZ2VTZW5kZXIpIHtcclxuICAgICAgICBzd2l0Y2ggKG1zZy5jb21tYW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3VubG9ja0NvbXBsZXRlZCc6XHJcbiAgICAgICAgICAgICAgICBpZiAobXNnLmRhdGEudGFyZ2V0ICE9PSAnbm90aWZpY2F0aW9uLmJhY2tncm91bmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzTWVzc2FnZShtc2cuZGF0YS5jb21tYW5kVG9SZXRyeS5tc2csIG1zZy5kYXRhLmNvbW1hbmRUb1JldHJ5LnNlbmRlcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYmdHZXREYXRhRm9yVGFiJzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0RGF0YUZvclRhYihzZW5kZXIudGFiLCBtc2cucmVzcG9uc2VDb21tYW5kKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdiZ0Nsb3NlTm90aWZpY2F0aW9uQmFyJzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2VEYXRhKHNlbmRlci50YWIsICdjbG9zZU5vdGlmaWNhdGlvbkJhcicpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2JnQWRqdXN0Tm90aWZpY2F0aW9uQmFyJzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2VEYXRhKHNlbmRlci50YWIsICdhZGp1c3ROb3RpZmljYXRpb25CYXInLCBtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYmdBZGRMb2dpbic6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZExvZ2luKG1zZy5sb2dpbiwgc2VuZGVyLnRhYik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYmdDaGFuZ2VkUGFzc3dvcmQnOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGFuZ2VkUGFzc3dvcmQobXNnLmRhdGEsIHNlbmRlci50YWIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2JnQWRkQ2xvc2UnOlxyXG4gICAgICAgICAgICBjYXNlICdiZ0NoYW5nZUNsb3NlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlVGFiRnJvbU5vdGlmaWNhdGlvblF1ZXVlKHNlbmRlci50YWIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2JnQWRkU2F2ZSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2JnQ2hhbmdlU2F2ZSc6XHJcbiAgICAgICAgICAgICAgICBpZiAoYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmlzTG9ja2VkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXRyeU1lc3NhZ2U6IExvY2tlZFZhdWx0UGVuZGluZ05vdGlmaWNhdGlvbnNJdGVtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kVG9SZXRyeToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBtc2csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXI6IHNlbmRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAnbm90aWZpY2F0aW9uLmJhY2tncm91bmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEoc2VuZGVyLnRhYiwgJ2FkZFRvTG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9ucycsIHJldHJ5TWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEoc2VuZGVyLnRhYiwgJ3Byb21wdEZvckxvZ2luJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zYXZlT3JVcGRhdGVDcmVkZW50aWFscyhzZW5kZXIudGFiLCBtc2cuZm9sZGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdiZ05ldmVyU2F2ZSc6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVOZXZlcihzZW5kZXIudGFiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdjb2xsZWN0UGFnZURldGFpbHNSZXNwb25zZSc6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1zZy5zZW5kZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdub3RpZmljYXRpb25CYXInOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtcyA9IHRoaXMuYXV0b2ZpbGxTZXJ2aWNlLmdldEZvcm1zV2l0aFBhc3N3b3JkRmllbGRzKG1zZy5kZXRhaWxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEobXNnLnRhYiwgJ25vdGlmaWNhdGlvbkJhclBhZ2VEZXRhaWxzJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogbXNnLmRldGFpbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtczogZm9ybXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNoZWNrTm90aWZpY2F0aW9uUXVldWUodGFiOiBjaHJvbWUudGFicy5UYWIgPSBudWxsKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgaWYgKHRoaXMubm90aWZpY2F0aW9uUXVldWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YWIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRvTm90aWZpY2F0aW9uUXVldWVDaGVjayh0YWIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gYXdhaXQgQnJvd3NlckFwaS5nZXRUYWJGcm9tQ3VycmVudFdpbmRvdygpO1xyXG4gICAgICAgIGlmIChjdXJyZW50VGFiICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5kb05vdGlmaWNhdGlvblF1ZXVlQ2hlY2soY3VycmVudFRhYik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xlYW51cE5vdGlmaWNhdGlvblF1ZXVlKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vdGlmaWNhdGlvblF1ZXVlW2ldLmV4cGlyZXMgPCBuZXcgRGF0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2xlYW51cE5vdGlmaWNhdGlvblF1ZXVlKCksIDIgKiA2MCAqIDEwMDApOyAvLyBjaGVjayBldmVyeSAyIG1pbnV0ZXNcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRvTm90aWZpY2F0aW9uUXVldWVDaGVjayh0YWI6IGNocm9tZS50YWJzLlRhYik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0YWIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0YWJEb21haW4gPSBVdGlscy5nZXREb21haW4odGFiLnVybCk7XHJcbiAgICAgICAgaWYgKHRhYkRvbWFpbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ub3RpZmljYXRpb25RdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25RdWV1ZVtpXS50YWJJZCAhPT0gdGFiLmlkIHx8IHRoaXMubm90aWZpY2F0aW9uUXVldWVbaV0uZG9tYWluICE9PSB0YWJEb21haW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25RdWV1ZVtpXS50eXBlID09PSBOb3RpZmljYXRpb25RdWV1ZU1lc3NhZ2VUeXBlLmFkZExvZ2luKSB7XHJcbiAgICAgICAgICAgICAgICBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlRGF0YSh0YWIsICdvcGVuTm90aWZpY2F0aW9uQmFyJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhZGQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVEYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmF1bHRMb2NrZWQ6IHRoaXMubm90aWZpY2F0aW9uUXVldWVbaV0ud2FzVmF1bHRMb2NrZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubm90aWZpY2F0aW9uUXVldWVbaV0udHlwZSA9PT0gTm90aWZpY2F0aW9uUXVldWVNZXNzYWdlVHlwZS5jaGFuZ2VQYXNzd29yZCkge1xyXG4gICAgICAgICAgICAgICAgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEodGFiLCAnb3Blbk5vdGlmaWNhdGlvbkJhcicsIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hhbmdlJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlRGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZhdWx0TG9ja2VkOiB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlW2ldLndhc1ZhdWx0TG9ja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW1vdmVUYWJGcm9tTm90aWZpY2F0aW9uUXVldWUodGFiOiBjaHJvbWUudGFicy5UYWIpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5ub3RpZmljYXRpb25RdWV1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25RdWV1ZVtpXS50YWJJZCA9PT0gdGFiLmlkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGFkZExvZ2luKGxvZ2luSW5mbzogQWRkTG9naW5SdW50aW1lTWVzc2FnZSwgdGFiOiBjaHJvbWUudGFicy5UYWIpIHtcclxuICAgICAgICBpZiAoIWF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbG9naW5Eb21haW4gPSBVdGlscy5nZXREb21haW4obG9naW5JbmZvLnVybCk7XHJcbiAgICAgICAgaWYgKGxvZ2luRG9tYWluID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRVc2VybmFtZSA9IGxvZ2luSW5mby51c2VybmFtZTtcclxuICAgICAgICBpZiAobm9ybWFsaXplZFVzZXJuYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplZFVzZXJuYW1lID0gbm9ybWFsaXplZFVzZXJuYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmlzTG9ja2VkKCkpIHtcclxuICAgICAgICAgICAgaWYgKCFhd2FpdCB0aGlzLmFsbG93UGVyc29uYWxPd25lcnNoaXAoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnB1c2hBZGRMb2dpblRvUXVldWUobG9naW5Eb21haW4sIGxvZ2luSW5mbywgdGFiLCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWRGb3JVcmwobG9naW5JbmZvLnVybCk7XHJcbiAgICAgICAgY29uc3QgdXNlcm5hbWVNYXRjaGVzID0gY2lwaGVycy5maWx0ZXIoYyA9PlxyXG4gICAgICAgICAgICBjLmxvZ2luLnVzZXJuYW1lICE9IG51bGwgJiYgYy5sb2dpbi51c2VybmFtZS50b0xvd2VyQ2FzZSgpID09PSBub3JtYWxpemVkVXNlcm5hbWUpO1xyXG4gICAgICAgIGlmICh1c2VybmFtZU1hdGNoZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc2FibGVkQWRkTG9naW4gPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihcclxuICAgICAgICAgICAgICAgIENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUFkZExvZ2luTm90aWZpY2F0aW9uS2V5KTtcclxuICAgICAgICAgICAgaWYgKGRpc2FibGVkQWRkTG9naW4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFhd2FpdCB0aGlzLmFsbG93UGVyc29uYWxPd25lcnNoaXAoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnB1c2hBZGRMb2dpblRvUXVldWUobG9naW5Eb21haW4sIGxvZ2luSW5mbywgdGFiKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICh1c2VybmFtZU1hdGNoZXMubGVuZ3RoID09PSAxICYmIHVzZXJuYW1lTWF0Y2hlc1swXS5sb2dpbi5wYXNzd29yZCAhPT0gbG9naW5JbmZvLnBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc2FibGVkQ2hhbmdlUGFzc3dvcmQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihcclxuICAgICAgICAgICAgICAgIENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUNoYW5nZWRQYXNzd29yZE5vdGlmaWNhdGlvbktleSk7XHJcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZENoYW5nZVBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wdXNoQ2hhbmdlUGFzc3dvcmRUb1F1ZXVlKHVzZXJuYW1lTWF0Y2hlc1swXS5pZCwgbG9naW5Eb21haW4sIGxvZ2luSW5mby5wYXNzd29yZCwgdGFiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBwdXNoQWRkTG9naW5Ub1F1ZXVlKGxvZ2luRG9tYWluOiBzdHJpbmcsIGxvZ2luSW5mbzogQWRkTG9naW5SdW50aW1lTWVzc2FnZSwgdGFiOiBjaHJvbWUudGFicy5UYWIsIGlzVmF1bHRMb2NrZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIC8vIHJlbW92ZSBhbnkgb2xkIG1lc3NhZ2VzIGZvciB0aGlzIHRhYlxyXG4gICAgICAgIHRoaXMucmVtb3ZlVGFiRnJvbU5vdGlmaWNhdGlvblF1ZXVlKHRhYik7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogQWRkTG9naW5RdWV1ZU1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IE5vdGlmaWNhdGlvblF1ZXVlTWVzc2FnZVR5cGUuYWRkTG9naW4sXHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiBsb2dpbkluZm8udXNlcm5hbWUsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiBsb2dpbkluZm8ucGFzc3dvcmQsXHJcbiAgICAgICAgICAgIGRvbWFpbjogbG9naW5Eb21haW4sXHJcbiAgICAgICAgICAgIHVyaTogbG9naW5JbmZvLnVybCxcclxuICAgICAgICAgICAgdGFiSWQ6IHRhYi5pZCxcclxuICAgICAgICAgICAgZXhwaXJlczogbmV3IERhdGUoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSArIDUgKiA2MDAwMCksIC8vIDUgbWludXRlc1xyXG4gICAgICAgICAgICB3YXNWYXVsdExvY2tlZDogaXNWYXVsdExvY2tlZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uUXVldWUucHVzaChtZXNzYWdlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNoZWNrTm90aWZpY2F0aW9uUXVldWUodGFiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGNoYW5nZWRQYXNzd29yZChjaGFuZ2VEYXRhOiBDaGFuZ2VQYXNzd29yZFJ1bnRpbWVNZXNzYWdlLCB0YWI6IGNocm9tZS50YWJzLlRhYikge1xyXG4gICAgICAgIGNvbnN0IGxvZ2luRG9tYWluID0gVXRpbHMuZ2V0RG9tYWluKGNoYW5nZURhdGEudXJsKTtcclxuICAgICAgICBpZiAobG9naW5Eb21haW4gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmlzTG9ja2VkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoQ2hhbmdlUGFzc3dvcmRUb1F1ZXVlKG51bGwsIGxvZ2luRG9tYWluLCBjaGFuZ2VEYXRhLm5ld1Bhc3N3b3JkLCB0YWIsIHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaWQ6IHN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWRGb3JVcmwoY2hhbmdlRGF0YS51cmwpO1xyXG4gICAgICAgIGlmIChjaGFuZ2VEYXRhLmN1cnJlbnRQYXNzd29yZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkTWF0Y2hlcyA9IGNpcGhlcnMuZmlsdGVyKGMgPT4gYy5sb2dpbi5wYXNzd29yZCA9PT0gY2hhbmdlRGF0YS5jdXJyZW50UGFzc3dvcmQpO1xyXG4gICAgICAgICAgICBpZiAocGFzc3dvcmRNYXRjaGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWQgPSBwYXNzd29yZE1hdGNoZXNbMF0uaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGNpcGhlcnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGlkID0gY2lwaGVyc1swXS5pZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5wdXNoQ2hhbmdlUGFzc3dvcmRUb1F1ZXVlKGlkLCBsb2dpbkRvbWFpbiwgY2hhbmdlRGF0YS5uZXdQYXNzd29yZCwgdGFiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBwdXNoQ2hhbmdlUGFzc3dvcmRUb1F1ZXVlKGNpcGhlcklkOiBzdHJpbmcsIGxvZ2luRG9tYWluOiBzdHJpbmcsIG5ld1Bhc3N3b3JkOiBzdHJpbmcsIHRhYjogY2hyb21lLnRhYnMuVGFiLCBpc1ZhdWx0TG9ja2VkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICAvLyByZW1vdmUgYW55IG9sZCBtZXNzYWdlcyBmb3IgdGhpcyB0YWJcclxuICAgICAgICB0aGlzLnJlbW92ZVRhYkZyb21Ob3RpZmljYXRpb25RdWV1ZSh0YWIpO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IEFkZENoYW5nZVBhc3N3b3JkUXVldWVNZXNzYWdlID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBOb3RpZmljYXRpb25RdWV1ZU1lc3NhZ2VUeXBlLmNoYW5nZVBhc3N3b3JkLFxyXG4gICAgICAgICAgICBjaXBoZXJJZDogY2lwaGVySWQsXHJcbiAgICAgICAgICAgIG5ld1Bhc3N3b3JkOiBuZXdQYXNzd29yZCxcclxuICAgICAgICAgICAgZG9tYWluOiBsb2dpbkRvbWFpbixcclxuICAgICAgICAgICAgdGFiSWQ6IHRhYi5pZCxcclxuICAgICAgICAgICAgZXhwaXJlczogbmV3IERhdGUoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSArIDUgKiA2MDAwMCksIC8vIDUgbWludXRlc1xyXG4gICAgICAgICAgICB3YXNWYXVsdExvY2tlZDogaXNWYXVsdExvY2tlZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uUXVldWUucHVzaChtZXNzYWdlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNoZWNrTm90aWZpY2F0aW9uUXVldWUodGFiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHNhdmVPclVwZGF0ZUNyZWRlbnRpYWxzKHRhYjogY2hyb21lLnRhYnMuVGFiLCBmb2xkZXJJZD86IHN0cmluZykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXVlTWVzc2FnZSA9IHRoaXMubm90aWZpY2F0aW9uUXVldWVbaV07XHJcbiAgICAgICAgICAgIGlmIChxdWV1ZU1lc3NhZ2UudGFiSWQgIT09IHRhYi5pZCB8fFxyXG4gICAgICAgICAgICAgICAgKHF1ZXVlTWVzc2FnZS50eXBlICE9PSBOb3RpZmljYXRpb25RdWV1ZU1lc3NhZ2VUeXBlLmFkZExvZ2luICYmIHF1ZXVlTWVzc2FnZS50eXBlICE9PSBOb3RpZmljYXRpb25RdWV1ZU1lc3NhZ2VUeXBlLmNoYW5nZVBhc3N3b3JkKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYkRvbWFpbiA9IFV0aWxzLmdldERvbWFpbih0YWIudXJsKTtcclxuICAgICAgICAgICAgaWYgKHRhYkRvbWFpbiAhPSBudWxsICYmIHRhYkRvbWFpbiAhPT0gcXVldWVNZXNzYWdlLmRvbWFpbikge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uUXVldWUuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlRGF0YSh0YWIsICdjbG9zZU5vdGlmaWNhdGlvbkJhcicpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHF1ZXVlTWVzc2FnZS50eXBlID09PSBOb3RpZmljYXRpb25RdWV1ZU1lc3NhZ2VUeXBlLmNoYW5nZVBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gKHF1ZXVlTWVzc2FnZSBhcyBBZGRDaGFuZ2VQYXNzd29yZFF1ZXVlTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBhd2FpdCB0aGlzLmdldERlY3J5cHRlZENpcGhlckJ5SWQobWVzc2FnZS5jaXBoZXJJZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2lwaGVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUNpcGhlcihjaXBoZXIsIG1lc3NhZ2UubmV3UGFzc3dvcmQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXF1ZXVlTWVzc2FnZS53YXNWYXVsdExvY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVOZXdDaXBoZXIocXVldWVNZXNzYWdlIGFzIEFkZExvZ2luUXVldWVNZXNzYWdlLCBmb2xkZXJJZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHRoZSB2YXVsdCB3YXMgbG9ja2VkLCBjaGVjayBpZiBhIGNpcGhlciBuZWVkcyB1cGRhdGluZyBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9uZVxyXG4gICAgICAgICAgICBpZiAocXVldWVNZXNzYWdlLnR5cGUgPT09IE5vdGlmaWNhdGlvblF1ZXVlTWVzc2FnZVR5cGUuYWRkTG9naW4gJiYgcXVldWVNZXNzYWdlLndhc1ZhdWx0TG9ja2VkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gKHF1ZXVlTWVzc2FnZSBhcyBBZGRMb2dpblF1ZXVlTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmdldEFsbERlY3J5cHRlZEZvclVybChtZXNzYWdlLnVyaSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VybmFtZU1hdGNoZXMgPSBjaXBoZXJzLmZpbHRlcihjID0+IGMubG9naW4udXNlcm5hbWUgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGMubG9naW4udXNlcm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbWVzc2FnZS51c2VybmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXJuYW1lTWF0Y2hlcy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQ2lwaGVyKHVzZXJuYW1lTWF0Y2hlc1swXSwgbWVzc2FnZS5wYXNzd29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlTmV3Q2lwaGVyKG1lc3NhZ2UsIGZvbGRlcklkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGNyZWF0ZU5ld0NpcGhlcihxdWV1ZU1lc3NhZ2U6IEFkZExvZ2luUXVldWVNZXNzYWdlLCBmb2xkZXJJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgbG9naW5Nb2RlbCA9IG5ldyBMb2dpblZpZXcoKTtcclxuICAgICAgICBjb25zdCBsb2dpblVyaSA9IG5ldyBMb2dpblVyaVZpZXcoKTtcclxuICAgICAgICBsb2dpblVyaS51cmkgPSBxdWV1ZU1lc3NhZ2UudXJpO1xyXG4gICAgICAgIGxvZ2luTW9kZWwudXJpcyA9IFtsb2dpblVyaV07XHJcbiAgICAgICAgbG9naW5Nb2RlbC51c2VybmFtZSA9IHF1ZXVlTWVzc2FnZS51c2VybmFtZTtcclxuICAgICAgICBsb2dpbk1vZGVsLnBhc3N3b3JkID0gcXVldWVNZXNzYWdlLnBhc3N3b3JkO1xyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IENpcGhlclZpZXcoKTtcclxuICAgICAgICBtb2RlbC5uYW1lID0gVXRpbHMuZ2V0SG9zdG5hbWUocXVldWVNZXNzYWdlLnVyaSkgfHwgcXVldWVNZXNzYWdlLmRvbWFpbjtcclxuICAgICAgICBtb2RlbC5uYW1lID0gbW9kZWwubmFtZS5yZXBsYWNlKC9ed3d3XFwuLywgJycpO1xyXG4gICAgICAgIG1vZGVsLnR5cGUgPSBDaXBoZXJUeXBlLkxvZ2luO1xyXG4gICAgICAgIG1vZGVsLmxvZ2luID0gbG9naW5Nb2RlbDtcclxuXHJcbiAgICAgICAgaWYgKCFVdGlscy5pc051bGxPcldoaXRlc3BhY2UoZm9sZGVySWQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvbGRlcnMgPSBhd2FpdCB0aGlzLmZvbGRlclNlcnZpY2UuZ2V0QWxsRGVjcnlwdGVkKCk7XHJcbiAgICAgICAgICAgIGlmIChmb2xkZXJzLnNvbWUoeCA9PiB4LmlkID09PSBmb2xkZXJJZCkpIHtcclxuICAgICAgICAgICAgICAgIG1vZGVsLmZvbGRlcklkID0gZm9sZGVySWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNpcGhlciA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5lbmNyeXB0KG1vZGVsKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2Uuc2F2ZVdpdGhTZXJ2ZXIoY2lwaGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldERlY3J5cHRlZENpcGhlckJ5SWQoY2lwaGVySWQ6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGNpcGhlciA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXQoY2lwaGVySWQpO1xyXG4gICAgICAgIGlmIChjaXBoZXIgIT0gbnVsbCAmJiBjaXBoZXIudHlwZSA9PT0gQ2lwaGVyVHlwZS5Mb2dpbikge1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY2lwaGVyLmRlY3J5cHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVDaXBoZXIoY2lwaGVyOiBDaXBoZXJWaWV3LCBuZXdQYXNzd29yZDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKGNpcGhlciAhPSBudWxsICYmIGNpcGhlci50eXBlID09PSBDaXBoZXJUeXBlLkxvZ2luKSB7XHJcbiAgICAgICAgICAgIGNpcGhlci5sb2dpbi5wYXNzd29yZCA9IG5ld1Bhc3N3b3JkO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdDaXBoZXIgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZW5jcnlwdChjaXBoZXIpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2Uuc2F2ZVdpdGhTZXJ2ZXIobmV3Q2lwaGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBzYXZlTmV2ZXIodGFiOiBjaHJvbWUudGFicy5UYWIpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5ub3RpZmljYXRpb25RdWV1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBjb25zdCBxdWV1ZU1lc3NhZ2UgPSB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlW2ldO1xyXG4gICAgICAgICAgICBpZiAocXVldWVNZXNzYWdlLnRhYklkICE9PSB0YWIuaWQgfHwgcXVldWVNZXNzYWdlLnR5cGUgIT09IE5vdGlmaWNhdGlvblF1ZXVlTWVzc2FnZVR5cGUuYWRkTG9naW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0YWJEb21haW4gPSBVdGlscy5nZXREb21haW4odGFiLnVybCk7XHJcbiAgICAgICAgICAgIGlmICh0YWJEb21haW4gIT0gbnVsbCAmJiB0YWJEb21haW4gIT09IHF1ZXVlTWVzc2FnZS5kb21haW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEodGFiLCAnY2xvc2VOb3RpZmljYXRpb25CYXInKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGhvc3RuYW1lID0gVXRpbHMuZ2V0SG9zdG5hbWUodGFiLnVybCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5zYXZlTmV2ZXJEb21haW4oaG9zdG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldERhdGFGb3JUYWIodGFiOiBjaHJvbWUudGFicy5UYWIsIHJlc3BvbnNlQ29tbWFuZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhOiBhbnkgPSB7fTtcclxuICAgICAgICBpZiAocmVzcG9uc2VDb21tYW5kID09PSAnbm90aWZpY2F0aW9uQmFyR2V0Rm9sZGVyc0xpc3QnKSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YS5mb2xkZXJzID0gYXdhaXQgdGhpcy5mb2xkZXJTZXJ2aWNlLmdldEFsbERlY3J5cHRlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEodGFiLCByZXNwb25zZUNvbW1hbmQsIHJlc3BvbnNlRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBhbGxvd1BlcnNvbmFsT3duZXJzaGlwKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiAhYXdhaXQgdGhpcy5wb2xpY3lTZXJ2aWNlLnBvbGljeUFwcGxpZXNUb1VzZXIoUG9saWN5VHlwZS5QZXJzb25hbE93bmVyc2hpcCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRW52aXJvbm1lbnRTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9lbnZpcm9ubWVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2kxOG4uc2VydmljZSc7XHJcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2xvZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTWVzc2FnaW5nU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvbWVzc2FnaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvbm90aWZpY2F0aW9ucy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFN5c3RlbVNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3N5c3RlbS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29uc3RhbnRzU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9jb25zdGFudHMuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBBdXRvZmlsbFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hYnN0cmFjdGlvbnMvYXV0b2ZpbGwuc2VydmljZSc7XHJcbmltcG9ydCBCcm93c2VyUGxhdGZvcm1VdGlsc1NlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvYnJvd3NlclBsYXRmb3JtVXRpbHMuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBCcm93c2VyQXBpIH0gZnJvbSAnLi4vYnJvd3Nlci9icm93c2VyQXBpJztcclxuXHJcbmltcG9ydCBNYWluQmFja2dyb3VuZCBmcm9tICcuL21haW4uYmFja2dyb3VuZCc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJ2pzbGliLWNvbW1vbi9taXNjL3V0aWxzJztcclxuaW1wb3J0IExvY2tlZFZhdWx0UGVuZGluZ05vdGlmaWNhdGlvbnNJdGVtIGZyb20gJy4vbW9kZWxzL2xvY2tlZFZhdWx0UGVuZGluZ05vdGlmaWNhdGlvbnNJdGVtJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJ1bnRpbWVCYWNrZ3JvdW5kIHtcclxuICAgIHByaXZhdGUgYXV0b2ZpbGxUaW1lb3V0OiBhbnk7XHJcbiAgICBwcml2YXRlIHBhZ2VEZXRhaWxzVG9BdXRvRmlsbDogYW55W10gPSBbXTtcclxuICAgIHByaXZhdGUgb25JbnN0YWxsZWRSZWFzb246IHN0cmluZyA9IG51bGw7XHJcbiAgICBwcml2YXRlIGxvY2tlZFZhdWx0UGVuZGluZ05vdGlmaWNhdGlvbnM6IExvY2tlZFZhdWx0UGVuZGluZ05vdGlmaWNhdGlvbnNJdGVtW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1haW46IE1haW5CYWNrZ3JvdW5kLCBwcml2YXRlIGF1dG9maWxsU2VydmljZTogQXV0b2ZpbGxTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgcGxhdGZvcm1VdGlsc1NlcnZpY2U6IEJyb3dzZXJQbGF0Zm9ybVV0aWxzU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBub3RpZmljYXRpb25zU2VydmljZTogTm90aWZpY2F0aW9uc1NlcnZpY2UsIHByaXZhdGUgc3lzdGVtU2VydmljZTogU3lzdGVtU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGVudmlyb25tZW50U2VydmljZTogRW52aXJvbm1lbnRTZXJ2aWNlLCBwcml2YXRlIG1lc3NhZ2luZ1NlcnZpY2U6IE1lc3NhZ2luZ1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XHJcblxyXG4gICAgICAgIC8vIG9uSW5zdGFsbGVkIGxpc3RlbmVyIG11c3QgYmUgd2lyZWQgdXAgYmVmb3JlIGFueXRoaW5nIGVsc2UsIHNvIHdlIGRvIGl0IGluIHRoZSBjdG9yXHJcbiAgICAgICAgY2hyb21lLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoKGRldGFpbHM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uSW5zdGFsbGVkUmVhc29uID0gZGV0YWlscy5yZWFzb247XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICBpZiAoIWNocm9tZS5ydW50aW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuY2hlY2tPbkluc3RhbGxlZCgpO1xyXG4gICAgICAgIEJyb3dzZXJBcGkubWVzc2FnZUxpc3RlbmVyKCdydW50aW1lLmJhY2tncm91bmQnLCBhc3luYyAobXNnOiBhbnksIHNlbmRlcjogY2hyb21lLnJ1bnRpbWUuTWVzc2FnZVNlbmRlciwgc2VuZFJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzTWVzc2FnZShtc2csIHNlbmRlciwgc2VuZFJlc3BvbnNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwcm9jZXNzTWVzc2FnZShtc2c6IGFueSwgc2VuZGVyOiBhbnksIHNlbmRSZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgc3dpdGNoIChtc2cuY29tbWFuZCkge1xyXG4gICAgICAgICAgICBjYXNlICdsb2dnZWRJbic6XHJcbiAgICAgICAgICAgIGNhc2UgJ3VubG9ja2VkJzpcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtOiBMb2NrZWRWYXVsdFBlbmRpbmdOb3RpZmljYXRpb25zSXRlbTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sb2NrZWRWYXVsdFBlbmRpbmdOb3RpZmljYXRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBCcm93c2VyQXBpLmNsb3NlTG9naW5UYWIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IHRoaXMubG9ja2VkVmF1bHRQZW5kaW5nTm90aWZpY2F0aW9ucy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb21tYW5kVG9SZXRyeS5zZW5kZXI/LnRhYj8uaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgQnJvd3NlckFwaS5mb2N1c1NwZWNpZmllZFRhYihpdGVtLmNvbW1hbmRUb1JldHJ5LnNlbmRlci50YWIuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1haW4uc2V0SWNvbigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLnJlZnJlc2hCYWRnZUFuZE1lbnUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zU2VydmljZS51cGRhdGVDb25uZWN0aW9uKG1zZy5jb21tYW5kID09PSAndW5sb2NrZWQnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3lzdGVtU2VydmljZS5jYW5jZWxQcm9jZXNzUmVsb2FkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlRGF0YShpdGVtLmNvbW1hbmRUb1JldHJ5LnNlbmRlci50YWIsICd1bmxvY2tDb21wbGV0ZWQnLCBpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhZGRUb0xvY2tlZFZhdWx0UGVuZGluZ05vdGlmaWNhdGlvbnMnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NrZWRWYXVsdFBlbmRpbmdOb3RpZmljYXRpb25zLnB1c2gobXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xvZ291dCc6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1haW4ubG9nb3V0KG1zZy5leHBpcmVkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdzeW5jQ29tcGxldGVkJzpcclxuICAgICAgICAgICAgICAgIGlmIChtc2cuc3VjY2Vzc2Z1bGx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiBhd2FpdCB0aGlzLm1haW4ucmVmcmVzaEJhZGdlQW5kTWVudSgpLCAyMDAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdvcGVuUG9wdXAnOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLm9wZW5Qb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3Byb21wdEZvckxvZ2luJzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IEJyb3dzZXJBcGkuY3JlYXRlTmV3VGFiKCdwb3B1cC9pbmRleC5odG1sP3VpbG9jYXRpb249cG9wb3V0JywgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc2hvd0RpYWxvZ1Jlc29sdmUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5yZXNvbHZlRGlhbG9nUHJvbWlzZShtc2cuZGlhbG9nSWQsIG1zZy5jb25maXJtZWQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2JnQ29sbGVjdFBhZ2VEZXRhaWxzJzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5jb2xsZWN0UGFnZURldGFpbHNGb3JDb250ZW50U2NyaXB0KHNlbmRlci50YWIsIG1zZy5zZW5kZXIsIHNlbmRlci5mcmFtZUlkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdiZ1VwZGF0ZUNvbnRleHRNZW51JzpcclxuICAgICAgICAgICAgY2FzZSAnZWRpdGVkQ2lwaGVyJzpcclxuICAgICAgICAgICAgY2FzZSAnYWRkZWRDaXBoZXInOlxyXG4gICAgICAgICAgICBjYXNlICdkZWxldGVkQ2lwaGVyJzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZWZyZXNoQmFkZ2VBbmRNZW51KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYmdSZXNlZWRTdG9yYWdlJzpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZXNlZWRTdG9yYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY29sbGVjdFBhZ2VEZXRhaWxzUmVzcG9uc2UnOlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChtc2cuc2VuZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXV0b2ZpbGxlcic6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXV0b2ZpbGxfY21kJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90cENvZGUgPSBhd2FpdCB0aGlzLmF1dG9maWxsU2VydmljZS5kb0F1dG9GaWxsQWN0aXZlVGFiKFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUlkOiBzZW5kZXIuZnJhbWVJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYjogbXNnLnRhYixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IG1zZy5kZXRhaWxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSwgbXNnLnNlbmRlciA9PT0gJ2F1dG9maWxsX2NtZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG90cENvZGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5jb3B5VG9DbGlwYm9hcmQodG90cENvZGUsIHsgd2luZG93OiB3aW5kb3cgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29udGV4dE1lbnUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5hdXRvZmlsbFRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VEZXRhaWxzVG9BdXRvRmlsbC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSWQ6IHNlbmRlci5mcmFtZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiOiBtc2cudGFiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogbXNnLmRldGFpbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dG9maWxsVGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5hdXRvZmlsbFBhZ2UoKSwgMzAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYXV0aFJlc3VsdCc6XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YXVsdFVybCA9IHRoaXMuZW52aXJvbm1lbnRTZXJ2aWNlLmdldFdlYlZhdWx0VXJsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1zZy5yZWZlcnJlciA9PSBudWxsIHx8IFV0aWxzLmdldEhvc3RuYW1lKHZhdWx0VXJsKSAhPT0gbXNnLnJlZmVycmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQnJvd3NlckFwaS5jcmVhdGVOZXdUYWIoJ3BvcHVwL2luZGV4Lmh0bWw/dWlsb2NhdGlvbj1wb3BvdXQjL3Nzbz9jb2RlPScgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQobXNnLmNvZGUpICsgJyZzdGF0ZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG1zZy5zdGF0ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2gge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignVW5hYmxlIHRvIG9wZW4gc3NvIHBvcG91dCB0YWInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd3ZWJBdXRoblJlc3VsdCc6XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YXVsdFVybDIgPSB0aGlzLmVudmlyb25tZW50U2VydmljZS5nZXRXZWJWYXVsdFVybCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtc2cucmVmZXJyZXIgPT0gbnVsbCB8fCBVdGlscy5nZXRIb3N0bmFtZSh2YXVsdFVybDIpICE9PSBtc2cucmVmZXJyZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gYHdlYkF1dGhuUmVzcG9uc2U9JHtlbmNvZGVVUklDb21wb25lbnQobXNnLmRhdGEpfTtgICtcclxuICAgICAgICAgICAgICAgICAgICBgcmVtZW1iZXI9JHtlbmNvZGVVUklDb21wb25lbnQobXNnLnJlbWVtYmVyKX1gO1xyXG4gICAgICAgICAgICAgICAgQnJvd3NlckFwaS5jcmVhdGVOZXdUYWIoYHBvcHVwL2luZGV4Lmh0bWw/dWlsb2NhdGlvbj1wb3BvdXQjLzJmYTske3BhcmFtc31gLCB1bmRlZmluZWQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdyZWxvYWRQb3B1cCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgncmVsb2FkUG9wdXAnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdlbWFpbFZlcmlmaWNhdGlvblJlcXVpcmVkJzpcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzaG93RGlhbG9nJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ0lkOiAnZW1haWxWZXJpZmljYXRpb25SZXF1aXJlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnZW1haWxWZXJpZmljYXRpb25SZXF1aXJlZCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuaTE4blNlcnZpY2UudCgnZW1haWxWZXJpZmljYXRpb25SZXF1aXJlZERlc2MnKSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maXJtVGV4dDogdGhpcy5pMThuU2VydmljZS50KCdvaycpLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbmZvJyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2dldENsaWNrZWRFbGVtZW50UmVzcG9uc2UnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5jb3B5VG9DbGlwYm9hcmQobXNnLmlkZW50aWZpZXIsIHsgd2luZG93OiB3aW5kb3cgfSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBhdXRvZmlsbFBhZ2UoKSB7XHJcbiAgICAgICAgY29uc3QgdG90cENvZGUgPSBhd2FpdCB0aGlzLmF1dG9maWxsU2VydmljZS5kb0F1dG9GaWxsKHtcclxuICAgICAgICAgICAgY2lwaGVyOiB0aGlzLm1haW4ubG9naW5Ub0F1dG9GaWxsLFxyXG4gICAgICAgICAgICBwYWdlRGV0YWlsczogdGhpcy5wYWdlRGV0YWlsc1RvQXV0b0ZpbGwsXHJcbiAgICAgICAgICAgIGZpbGxOZXdQYXNzd29yZDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRvdHBDb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5jb3B5VG9DbGlwYm9hcmQodG90cENvZGUsIHsgd2luZG93OiB3aW5kb3cgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZXNldFxyXG4gICAgICAgIHRoaXMubWFpbi5sb2dpblRvQXV0b0ZpbGwgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucGFnZURldGFpbHNUb0F1dG9GaWxsID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBjaGVja09uSW5zdGFsbGVkKCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbkluc3RhbGxlZFJlYXNvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkluc3RhbGxlZFJlYXNvbiA9PT0gJ2luc3RhbGwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQnJvd3NlckFwaS5jcmVhdGVOZXdUYWIoJ2h0dHBzOi8vYml0d2FyZGVuLmNvbS9icm93c2VyLXN0YXJ0LycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0RGVmYXVsdFNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkluc3RhbGxlZFJlYXNvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAxMDApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc2V0RGVmYXVsdFNldHRpbmdzKCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgdGltZW91dCBvcHRpb24gdG8gXCJvbiByZXN0YXJ0XCIuXHJcbiAgICAgICAgY29uc3QgY3VycmVudFZhdWx0VGltZW91dCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRLZXkpO1xyXG4gICAgICAgIGlmIChjdXJyZW50VmF1bHRUaW1lb3V0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5LCAtMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEZWZhdWx0IGFjdGlvbiB0byBcImxvY2tcIi5cclxuICAgICAgICBjb25zdCBjdXJyZW50VmF1bHRUaW1lb3V0QWN0aW9uID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEFjdGlvbktleSk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRWYXVsdFRpbWVvdXRBY3Rpb24gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRBY3Rpb25LZXksICdsb2NrJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBNYWluQmFja2dyb3VuZCBmcm9tICcuL21haW4uYmFja2dyb3VuZCc7XHJcbmltcG9ydCBOb3RpZmljYXRpb25CYWNrZ3JvdW5kIGZyb20gJy4vbm90aWZpY2F0aW9uLmJhY2tncm91bmQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFic0JhY2tncm91bmQge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtYWluOiBNYWluQmFja2dyb3VuZCwgcHJpdmF0ZSBub3RpZmljYXRpb25CYWNrZ3JvdW5kOiBOb3RpZmljYXRpb25CYWNrZ3JvdW5kKSB7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICBpZiAoIWNocm9tZS50YWJzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNocm9tZS50YWJzLm9uQWN0aXZhdGVkLmFkZExpc3RlbmVyKGFzeW5jIChhY3RpdmVJbmZvOiBjaHJvbWUudGFicy5UYWJBY3RpdmVJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZWZyZXNoQmFkZ2VBbmRNZW51KCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFpbi5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3RhYkFjdGl2YXRlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd0YWJDaGFuZ2VkJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNocm9tZS50YWJzLm9uUmVwbGFjZWQuYWRkTGlzdGVuZXIoYXN5bmMgKGFkZGVkVGFiSWQ6IG51bWJlciwgcmVtb3ZlZFRhYklkOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFpbi5vblJlcGxhY2VkUmFuKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tYWluLm9uUmVwbGFjZWRSYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLm5vdGlmaWNhdGlvbkJhY2tncm91bmQuY2hlY2tOb3RpZmljYXRpb25RdWV1ZSgpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1haW4ucmVmcmVzaEJhZGdlQW5kTWVudSgpO1xyXG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd0YWJSZXBsYWNlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd0YWJDaGFuZ2VkJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNocm9tZS50YWJzLm9uVXBkYXRlZC5hZGRMaXN0ZW5lcihhc3luYyAodGFiSWQ6IG51bWJlciwgY2hhbmdlSW5mbzogY2hyb21lLnRhYnMuVGFiQ2hhbmdlSW5mbywgdGFiOiBjaHJvbWUudGFicy5UYWIpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFpbi5vblVwZGF0ZWRSYW4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1haW4ub25VcGRhdGVkUmFuID0gdHJ1ZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5ub3RpZmljYXRpb25CYWNrZ3JvdW5kLmNoZWNrTm90aWZpY2F0aW9uUXVldWUodGFiKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLnJlZnJlc2hCYWRnZUFuZE1lbnUoKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgndGFiVXBkYXRlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd0YWJDaGFuZ2VkJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2lwaGVyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvY2lwaGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWxzU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgVXJpTWF0Y2hUeXBlIH0gZnJvbSAnanNsaWItY29tbW9uL2VudW1zL3VyaU1hdGNoVHlwZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJSZXF1ZXN0QmFja2dyb3VuZCB7XHJcbiAgICBwcml2YXRlIHBlbmRpbmdBdXRoUmVxdWVzdHM6IGFueVtdID0gW107XHJcbiAgICBwcml2YXRlIHdlYlJlcXVlc3Q6IGFueTtcclxuICAgIHByaXZhdGUgaXNGaXJlZm94OiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSwgcHJpdmF0ZSBjaXBoZXJTZXJ2aWNlOiBDaXBoZXJTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgdmF1bHRUaW1lb3V0U2VydmljZTogVmF1bHRUaW1lb3V0U2VydmljZSkge1xyXG4gICAgICAgIHRoaXMud2ViUmVxdWVzdCA9ICh3aW5kb3cgYXMgYW55KS5jaHJvbWUud2ViUmVxdWVzdDtcclxuICAgICAgICB0aGlzLmlzRmlyZWZveCA9IHBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzRmlyZWZveCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGluaXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLndlYlJlcXVlc3QgfHwgIXRoaXMud2ViUmVxdWVzdC5vbkF1dGhSZXF1aXJlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLndlYlJlcXVlc3Qub25BdXRoUmVxdWlyZWQuYWRkTGlzdGVuZXIoYXN5bmMgKGRldGFpbHM6IGFueSwgY2FsbGJhY2s6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWRldGFpbHMudXJsIHx8IHRoaXMucGVuZGluZ0F1dGhSZXF1ZXN0cy5pbmRleE9mKGRldGFpbHMucmVxdWVzdElkKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0F1dGhSZXF1ZXN0cy5wdXNoKGRldGFpbHMucmVxdWVzdElkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRmlyZWZveCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlc29sdmVBdXRoQ3JlZGVudGlhbHMoZGV0YWlscy51cmwsIHJlc29sdmUsIHJlamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVzb2x2ZUF1dGhDcmVkZW50aWFscyhkZXRhaWxzLnVybCwgY2FsbGJhY2ssIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHsgdXJsczogWydodHRwOi8vKi8qJywgJ2h0dHBzOi8vKi8qJ10gfSwgW3RoaXMuaXNGaXJlZm94ID8gJ2Jsb2NraW5nJyA6ICdhc3luY0Jsb2NraW5nJ10pO1xyXG5cclxuICAgICAgICB0aGlzLndlYlJlcXVlc3Qub25Db21wbGV0ZWQuYWRkTGlzdGVuZXIoXHJcbiAgICAgICAgICAgIChkZXRhaWxzOiBhbnkpID0+IHRoaXMuY29tcGxldGVBdXRoUmVxdWVzdChkZXRhaWxzKSwgeyB1cmxzOiBbJ2h0dHA6Ly8qLyonXSB9KTtcclxuICAgICAgICB0aGlzLndlYlJlcXVlc3Qub25FcnJvck9jY3VycmVkLmFkZExpc3RlbmVyKFxyXG4gICAgICAgICAgICAoZGV0YWlsczogYW55KSA9PiB0aGlzLmNvbXBsZXRlQXV0aFJlcXVlc3QoZGV0YWlscyksIHsgdXJsczogWydodHRwOi8vKi8qJ10gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyByZXNvbHZlQXV0aENyZWRlbnRpYWxzKGRvbWFpbjogc3RyaW5nLCBzdWNjZXNzOiBGdW5jdGlvbiwgZXJyb3I6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5pc0xvY2tlZCgpKSB7XHJcbiAgICAgICAgICAgIGVycm9yKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0QWxsRGVjcnlwdGVkRm9yVXJsKGRvbWFpbiwgbnVsbCwgVXJpTWF0Y2hUeXBlLkhvc3QpO1xyXG4gICAgICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsIHx8IGNpcGhlcnMubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgIGF1dGhDcmVkZW50aWFsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBjaXBoZXJzWzBdLmxvZ2luLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBjaXBoZXJzWzBdLmxvZ2luLnBhc3N3b3JkLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgIGVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29tcGxldGVBdXRoUmVxdWVzdChkZXRhaWxzOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBpID0gdGhpcy5wZW5kaW5nQXV0aFJlcXVlc3RzLmluZGV4T2YoZGV0YWlscy5yZXF1ZXN0SWQpO1xyXG4gICAgICAgIGlmIChpID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nQXV0aFJlcXVlc3RzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IE1haW5CYWNrZ3JvdW5kIGZyb20gJy4vbWFpbi5iYWNrZ3JvdW5kJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdpbmRvd3NCYWNrZ3JvdW5kIHtcclxuICAgIHByaXZhdGUgd2luZG93czogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWFpbjogTWFpbkJhY2tncm91bmQpIHtcclxuICAgICAgICB0aGlzLndpbmRvd3MgPSBjaHJvbWUud2luZG93cztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy53aW5kb3dzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMud2luZG93cy5vbkZvY3VzQ2hhbmdlZC5hZGRMaXN0ZW5lcihhc3luYyAod2luZG93SWQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAod2luZG93SWQgPT09IG51bGwgfHwgd2luZG93SWQgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZWZyZXNoQmFkZ2VBbmRNZW51KCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFpbi5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3dpbmRvd0ZvY3VzZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnd2luZG93Q2hhbmdlZCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9maWxsU2NyaXB0IHtcclxuICAgIHNjcmlwdDogc3RyaW5nW11bXSA9IFtdO1xyXG4gICAgZG9jdW1lbnRVVUlEOiBhbnkgPSB7fTtcclxuICAgIHByb3BlcnRpZXM6IGFueSA9IHt9O1xyXG4gICAgb3B0aW9uczogYW55ID0ge307XHJcbiAgICBtZXRhZGF0YTogYW55ID0ge307XHJcbiAgICBhdXRvc3VibWl0OiBhbnkgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50VVVJRDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudFVVSUQgPSBkb2N1bWVudFVVSUQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2lwaGVyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvY2lwaGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2V2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcbmltcG9ydCB7IFRvdHBTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy90b3RwLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdXNlci5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IEF1dG9maWxsU2VydmljZSBhcyBBdXRvZmlsbFNlcnZpY2VJbnRlcmZhY2UgfSBmcm9tICcuL2Fic3RyYWN0aW9ucy9hdXRvZmlsbC5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IENpcGhlclJlcHJvbXB0VHlwZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9lbnVtcy9jaXBoZXJSZXByb21wdFR5cGUnO1xyXG5pbXBvcnQgeyBDaXBoZXJUeXBlIH0gZnJvbSAnanNsaWItY29tbW9uL2VudW1zL2NpcGhlclR5cGUnO1xyXG5pbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tICdqc2xpYi1jb21tb24vZW51bXMvZXZlbnRUeXBlJztcclxuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnanNsaWItY29tbW9uL2VudW1zL2ZpZWxkVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnanNsaWItY29tbW9uL21vZGVscy92aWV3L2NpcGhlclZpZXcnO1xyXG5pbXBvcnQgeyBGaWVsZFZpZXcgfSBmcm9tICdqc2xpYi1jb21tb24vbW9kZWxzL3ZpZXcvZmllbGRWaWV3JztcclxuXHJcbmltcG9ydCBBdXRvZmlsbEZpZWxkIGZyb20gJy4uL21vZGVscy9hdXRvZmlsbEZpZWxkJztcclxuaW1wb3J0IEF1dG9maWxsUGFnZURldGFpbHMgZnJvbSAnLi4vbW9kZWxzL2F1dG9maWxsUGFnZURldGFpbHMnO1xyXG5pbXBvcnQgQXV0b2ZpbGxTY3JpcHQgZnJvbSAnLi4vbW9kZWxzL2F1dG9maWxsU2NyaXB0JztcclxuXHJcbmltcG9ydCB7IEJyb3dzZXJBcGkgfSBmcm9tICcuLi9icm93c2VyL2Jyb3dzZXJBcGknO1xyXG5cclxuY29uc3QgQ2FyZEF0dHJpYnV0ZXM6IHN0cmluZ1tdID0gWydhdXRvQ29tcGxldGVUeXBlJywgJ2RhdGEtc3RyaXBlJywgJ2h0bWxOYW1lJywgJ2h0bWxJRCcsICdsYWJlbC10YWcnLFxyXG4gICAgJ3BsYWNlaG9sZGVyJywgJ2xhYmVsLWxlZnQnLCAnbGFiZWwtdG9wJywgJ2RhdGEtcmVjdXJseSddO1xyXG5cclxuY29uc3QgQ2FyZEF0dHJpYnV0ZXNFeHRlbmRlZDogc3RyaW5nW10gPSBbLi4uQ2FyZEF0dHJpYnV0ZXMsICdsYWJlbC1yaWdodCddO1xyXG5cclxuY29uc3QgSWRlbnRpdHlBdHRyaWJ1dGVzOiBzdHJpbmdbXSA9IFsnYXV0b0NvbXBsZXRlVHlwZScsICdkYXRhLXN0cmlwZScsICdodG1sTmFtZScsICdodG1sSUQnLCAnbGFiZWwtdGFnJyxcclxuICAgICdwbGFjZWhvbGRlcicsICdsYWJlbC1sZWZ0JywgJ2xhYmVsLXRvcCcsICdkYXRhLXJlY3VybHknXTtcclxuXHJcbmNvbnN0IFVzZXJuYW1lRmllbGROYW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAvLyBFbmdsaXNoXHJcbiAgICAndXNlcm5hbWUnLCAndXNlciBuYW1lJywgJ2VtYWlsJywgJ2VtYWlsIGFkZHJlc3MnLCAnZS1tYWlsJywgJ2UtbWFpbCBhZGRyZXNzJywgJ3VzZXJpZCcsICd1c2VyIGlkJyxcclxuICAgICdjdXN0b21lciBpZCcsICdsb2dpbiBpZCcsXHJcbiAgICAvLyBHZXJtYW5cclxuICAgICdiZW51dHplcm5hbWUnLCAnYmVudXR6ZXIgbmFtZScsICdlbWFpbCBhZHJlc3NlJywgJ2UtbWFpbCBhZHJlc3NlJywgJ2JlbnV0emVyaWQnLCAnYmVudXR6ZXIgaWQnXTtcclxuXHJcbmNvbnN0IEZpcnN0bmFtZUZpZWxkTmFtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgLy8gRW5nbGlzaFxyXG4gICAgJ2YtbmFtZScsICdmaXJzdC1uYW1lJywgJ2dpdmVuLW5hbWUnLCAnZmlyc3QtbicsXHJcbiAgICAvLyBHZXJtYW5cclxuICAgICd2b3JuYW1lJyxcclxuXTtcclxuXHJcbmNvbnN0IExhc3RuYW1lRmllbGROYW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAvLyBFbmdsaXNoXHJcbiAgICAnbC1uYW1lJywgJ2xhc3QtbmFtZScsICdzLW5hbWUnLCAnc3VybmFtZScsICdmYW1pbHktbmFtZScsICdmYW1pbHktbicsICdsYXN0LW4nLFxyXG4gICAgLy8gR2VybWFuXHJcbiAgICAnbmFjaG5hbWUnLCAnZmFtaWxpZW5uYW1lJyxcclxuXTtcclxuXHJcbmNvbnN0IEV4Y2x1ZGVkQXV0b2ZpbGxUeXBlczogc3RyaW5nW10gPSBbJ3JhZGlvJywgJ2NoZWNrYm94JywgJ2hpZGRlbicsICdmaWxlJywgJ2J1dHRvbicsICdpbWFnZScsICdyZXNldCcsICdzZWFyY2gnXTtcclxuXHJcbi8vIEVhY2ggaW5kZXggcmVwcmVzZW50cyBhIGxhbmd1YWdlLiBUaGVzZSB0aHJlZSBhcnJheXMgc2hvdWxkIGFsbCBiZSB0aGUgc2FtZSBsZW5ndGguXHJcbi8vIDA6IEVuZ2xpc2gsIDE6IERhbmlzaCwgMjogR2VybWFuL0R1dGNoLCAzOiBGcmVuY2gvU3BhbmlzaC9JdGFsaWFuLCA0OiBSdXNzaWFuLCA1OiBQb3J0dWd1ZXNlXHJcbmNvbnN0IE1vbnRoQWJiciA9IFsnbW0nLCAnbW0nLCAnbW0nLCAnbW0nLCAnbW0nLCAnbW0nXTtcclxuY29uc3QgWWVhckFiYnJTaG9ydCA9IFsneXknLCAnw6XDpScsICdqaicsICdhYScsICfQs9CzJywgJ3JyJ107XHJcbmNvbnN0IFllYXJBYmJyTG9uZyA9IFsneXl5eScsICfDpcOlw6XDpScsICdqampqJywgJ2FhJywgJ9Cz0LPQs9CzJywgJ3JycnInXTtcclxuXHJcbmNvbnN0IE9wZXJhdGlvbkRlbGF5cyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KFtcclxuICAgIFsnYnV6enNwcm91dC5jb20nLCAxMDBdLFxyXG5dKTtcclxuXHJcbi8qIHRzbGludDpkaXNhYmxlICovXHJcbmNvbnN0IElzb0NvdW50cmllczogeyBbaWQ6IHN0cmluZ106IHN0cmluZzsgfSA9IHtcclxuICAgIGFmZ2hhbmlzdGFuOiBcIkFGXCIsIFwiYWxhbmQgaXNsYW5kc1wiOiBcIkFYXCIsIGFsYmFuaWE6IFwiQUxcIiwgYWxnZXJpYTogXCJEWlwiLCBcImFtZXJpY2FuIHNhbW9hXCI6IFwiQVNcIiwgYW5kb3JyYTogXCJBRFwiLFxyXG4gICAgYW5nb2xhOiBcIkFPXCIsIGFuZ3VpbGxhOiBcIkFJXCIsIGFudGFyY3RpY2E6IFwiQVFcIiwgXCJhbnRpZ3VhIGFuZCBiYXJidWRhXCI6IFwiQUdcIiwgYXJnZW50aW5hOiBcIkFSXCIsIGFybWVuaWE6IFwiQU1cIixcclxuICAgIGFydWJhOiBcIkFXXCIsIGF1c3RyYWxpYTogXCJBVVwiLCBhdXN0cmlhOiBcIkFUXCIsIGF6ZXJiYWlqYW46IFwiQVpcIiwgYmFoYW1hczogXCJCU1wiLCBiYWhyYWluOiBcIkJIXCIsIGJhbmdsYWRlc2g6IFwiQkRcIixcclxuICAgIGJhcmJhZG9zOiBcIkJCXCIsIGJlbGFydXM6IFwiQllcIiwgYmVsZ2l1bTogXCJCRVwiLCBiZWxpemU6IFwiQlpcIiwgYmVuaW46IFwiQkpcIiwgYmVybXVkYTogXCJCTVwiLCBiaHV0YW46IFwiQlRcIixcclxuICAgIGJvbGl2aWE6IFwiQk9cIiwgXCJib3NuaWEgYW5kIGhlcnplZ292aW5hXCI6IFwiQkFcIiwgYm90c3dhbmE6IFwiQldcIiwgXCJib3V2ZXQgaXNsYW5kXCI6IFwiQlZcIiwgYnJhemlsOiBcIkJSXCIsXHJcbiAgICBcImJyaXRpc2ggaW5kaWFuIG9jZWFuIHRlcnJpdG9yeVwiOiBcIklPXCIsIFwiYnJ1bmVpIGRhcnVzc2FsYW1cIjogXCJCTlwiLCBidWxnYXJpYTogXCJCR1wiLCBcImJ1cmtpbmEgZmFzb1wiOiBcIkJGXCIsXHJcbiAgICBidXJ1bmRpOiBcIkJJXCIsIGNhbWJvZGlhOiBcIktIXCIsIGNhbWVyb29uOiBcIkNNXCIsIGNhbmFkYTogXCJDQVwiLCBcImNhcGUgdmVyZGVcIjogXCJDVlwiLCBcImNheW1hbiBpc2xhbmRzXCI6IFwiS1lcIixcclxuICAgIFwiY2VudHJhbCBhZnJpY2FuIHJlcHVibGljXCI6IFwiQ0ZcIiwgY2hhZDogXCJURFwiLCBjaGlsZTogXCJDTFwiLCBjaGluYTogXCJDTlwiLCBcImNocmlzdG1hcyBpc2xhbmRcIjogXCJDWFwiLFxyXG4gICAgXCJjb2NvcyAoa2VlbGluZykgaXNsYW5kc1wiOiBcIkNDXCIsIGNvbG9tYmlhOiBcIkNPXCIsIGNvbW9yb3M6IFwiS01cIiwgY29uZ286IFwiQ0dcIiwgXCJjb25nbywgZGVtb2NyYXRpYyByZXB1YmxpY1wiOiBcIkNEXCIsXHJcbiAgICBcImNvb2sgaXNsYW5kc1wiOiBcIkNLXCIsIFwiY29zdGEgcmljYVwiOiBcIkNSXCIsIFwiY290ZSBkJ2l2b2lyZVwiOiBcIkNJXCIsIGNyb2F0aWE6IFwiSFJcIiwgY3ViYTogXCJDVVwiLCBjeXBydXM6IFwiQ1lcIixcclxuICAgIFwiY3plY2ggcmVwdWJsaWNcIjogXCJDWlwiLCBkZW5tYXJrOiBcIkRLXCIsIGRqaWJvdXRpOiBcIkRKXCIsIGRvbWluaWNhOiBcIkRNXCIsIFwiZG9taW5pY2FuIHJlcHVibGljXCI6IFwiRE9cIiwgZWN1YWRvcjogXCJFQ1wiLFxyXG4gICAgZWd5cHQ6IFwiRUdcIiwgXCJlbCBzYWx2YWRvclwiOiBcIlNWXCIsIFwiZXF1YXRvcmlhbCBndWluZWFcIjogXCJHUVwiLCBlcml0cmVhOiBcIkVSXCIsIGVzdG9uaWE6IFwiRUVcIiwgZXRoaW9waWE6IFwiRVRcIixcclxuICAgIFwiZmFsa2xhbmQgaXNsYW5kc1wiOiBcIkZLXCIsIFwiZmFyb2UgaXNsYW5kc1wiOiBcIkZPXCIsIGZpamk6IFwiRkpcIiwgZmlubGFuZDogXCJGSVwiLCBmcmFuY2U6IFwiRlJcIiwgXCJmcmVuY2ggZ3VpYW5hXCI6IFwiR0ZcIixcclxuICAgIFwiZnJlbmNoIHBvbHluZXNpYVwiOiBcIlBGXCIsIFwiZnJlbmNoIHNvdXRoZXJuIHRlcnJpdG9yaWVzXCI6IFwiVEZcIiwgZ2Fib246IFwiR0FcIiwgZ2FtYmlhOiBcIkdNXCIsIGdlb3JnaWE6IFwiR0VcIixcclxuICAgIGdlcm1hbnk6IFwiREVcIiwgZ2hhbmE6IFwiR0hcIiwgZ2licmFsdGFyOiBcIkdJXCIsIGdyZWVjZTogXCJHUlwiLCBncmVlbmxhbmQ6IFwiR0xcIiwgZ3JlbmFkYTogXCJHRFwiLCBndWFkZWxvdXBlOiBcIkdQXCIsXHJcbiAgICBndWFtOiBcIkdVXCIsIGd1YXRlbWFsYTogXCJHVFwiLCBndWVybnNleTogXCJHR1wiLCBndWluZWE6IFwiR05cIiwgXCJndWluZWEtYmlzc2F1XCI6IFwiR1dcIiwgZ3V5YW5hOiBcIkdZXCIsIGhhaXRpOiBcIkhUXCIsXHJcbiAgICBcImhlYXJkIGlzbGFuZCAmIG1jZG9uYWxkIGlzbGFuZHNcIjogXCJITVwiLCBcImhvbHkgc2VlICh2YXRpY2FuIGNpdHkgc3RhdGUpXCI6IFwiVkFcIiwgaG9uZHVyYXM6IFwiSE5cIiwgXCJob25nIGtvbmdcIjogXCJIS1wiLFxyXG4gICAgaHVuZ2FyeTogXCJIVVwiLCBpY2VsYW5kOiBcIklTXCIsIGluZGlhOiBcIklOXCIsIGluZG9uZXNpYTogXCJJRFwiLCBcImlyYW4sIGlzbGFtaWMgcmVwdWJsaWMgb2ZcIjogXCJJUlwiLCBpcmFxOiBcIklRXCIsXHJcbiAgICBpcmVsYW5kOiBcIklFXCIsIFwiaXNsZSBvZiBtYW5cIjogXCJJTVwiLCBpc3JhZWw6IFwiSUxcIiwgaXRhbHk6IFwiSVRcIiwgamFtYWljYTogXCJKTVwiLCBqYXBhbjogXCJKUFwiLCBqZXJzZXk6IFwiSkVcIixcclxuICAgIGpvcmRhbjogXCJKT1wiLCBrYXpha2hzdGFuOiBcIktaXCIsIGtlbnlhOiBcIktFXCIsIGtpcmliYXRpOiBcIktJXCIsIFwicmVwdWJsaWMgb2Yga29yZWFcIjogXCJLUlwiLCBcInNvdXRoIGtvcmVhXCI6IFwiS1JcIixcclxuICAgIFwiZGVtb2NyYXRpYyBwZW9wbGUncyByZXB1YmxpYyBvZiBrb3JlYVwiOiBcIktQXCIsIFwibm9ydGgga29yZWFcIjogXCJLUFwiLCBrdXdhaXQ6IFwiS1dcIiwga3lyZ3l6c3RhbjogXCJLR1wiLFxyXG4gICAgXCJsYW8gcGVvcGxlJ3MgZGVtb2NyYXRpYyByZXB1YmxpY1wiOiBcIkxBXCIsIGxhdHZpYTogXCJMVlwiLCBsZWJhbm9uOiBcIkxCXCIsIGxlc290aG86IFwiTFNcIiwgbGliZXJpYTogXCJMUlwiLFxyXG4gICAgXCJsaWJ5YW4gYXJhYiBqYW1haGlyaXlhXCI6IFwiTFlcIiwgbGllY2h0ZW5zdGVpbjogXCJMSVwiLCBsaXRodWFuaWE6IFwiTFRcIiwgbHV4ZW1ib3VyZzogXCJMVVwiLCBtYWNhbzogXCJNT1wiLFxyXG4gICAgbWFjZWRvbmlhOiBcIk1LXCIsIG1hZGFnYXNjYXI6IFwiTUdcIiwgbWFsYXdpOiBcIk1XXCIsIG1hbGF5c2lhOiBcIk1ZXCIsIG1hbGRpdmVzOiBcIk1WXCIsIG1hbGk6IFwiTUxcIiwgbWFsdGE6IFwiTVRcIixcclxuICAgIFwibWFyc2hhbGwgaXNsYW5kc1wiOiBcIk1IXCIsIG1hcnRpbmlxdWU6IFwiTVFcIiwgbWF1cml0YW5pYTogXCJNUlwiLCBtYXVyaXRpdXM6IFwiTVVcIiwgbWF5b3R0ZTogXCJZVFwiLCBtZXhpY286IFwiTVhcIixcclxuICAgIFwibWljcm9uZXNpYSwgZmVkZXJhdGVkIHN0YXRlcyBvZlwiOiBcIkZNXCIsIG1vbGRvdmE6IFwiTURcIiwgbW9uYWNvOiBcIk1DXCIsIG1vbmdvbGlhOiBcIk1OXCIsIG1vbnRlbmVncm86IFwiTUVcIixcclxuICAgIG1vbnRzZXJyYXQ6IFwiTVNcIiwgbW9yb2NjbzogXCJNQVwiLCBtb3phbWJpcXVlOiBcIk1aXCIsIG15YW5tYXI6IFwiTU1cIiwgbmFtaWJpYTogXCJOQVwiLCBuYXVydTogXCJOUlwiLCBuZXBhbDogXCJOUFwiLFxyXG4gICAgbmV0aGVybGFuZHM6IFwiTkxcIiwgXCJuZXRoZXJsYW5kcyBhbnRpbGxlc1wiOiBcIkFOXCIsIFwibmV3IGNhbGVkb25pYVwiOiBcIk5DXCIsIFwibmV3IHplYWxhbmRcIjogXCJOWlwiLCBuaWNhcmFndWE6IFwiTklcIixcclxuICAgIG5pZ2VyOiBcIk5FXCIsIG5pZ2VyaWE6IFwiTkdcIiwgbml1ZTogXCJOVVwiLCBcIm5vcmZvbGsgaXNsYW5kXCI6IFwiTkZcIiwgXCJub3J0aGVybiBtYXJpYW5hIGlzbGFuZHNcIjogXCJNUFwiLCBub3J3YXk6IFwiTk9cIixcclxuICAgIG9tYW46IFwiT01cIiwgcGFraXN0YW46IFwiUEtcIiwgcGFsYXU6IFwiUFdcIiwgXCJwYWxlc3RpbmlhbiB0ZXJyaXRvcnksIG9jY3VwaWVkXCI6IFwiUFNcIiwgcGFuYW1hOiBcIlBBXCIsXHJcbiAgICBcInBhcHVhIG5ldyBndWluZWFcIjogXCJQR1wiLCBwYXJhZ3VheTogXCJQWVwiLCBwZXJ1OiBcIlBFXCIsIHBoaWxpcHBpbmVzOiBcIlBIXCIsIHBpdGNhaXJuOiBcIlBOXCIsIHBvbGFuZDogXCJQTFwiLFxyXG4gICAgcG9ydHVnYWw6IFwiUFRcIiwgXCJwdWVydG8gcmljb1wiOiBcIlBSXCIsIHFhdGFyOiBcIlFBXCIsIHJldW5pb246IFwiUkVcIiwgcm9tYW5pYTogXCJST1wiLCBcInJ1c3NpYW4gZmVkZXJhdGlvblwiOiBcIlJVXCIsXHJcbiAgICByd2FuZGE6IFwiUldcIiwgXCJzYWludCBiYXJ0aGVsZW15XCI6IFwiQkxcIiwgXCJzYWludCBoZWxlbmFcIjogXCJTSFwiLCBcInNhaW50IGtpdHRzIGFuZCBuZXZpc1wiOiBcIktOXCIsIFwic2FpbnQgbHVjaWFcIjogXCJMQ1wiLFxyXG4gICAgXCJzYWludCBtYXJ0aW5cIjogXCJNRlwiLCBcInNhaW50IHBpZXJyZSBhbmQgbWlxdWVsb25cIjogXCJQTVwiLCBcInNhaW50IHZpbmNlbnQgYW5kIGdyZW5hZGluZXNcIjogXCJWQ1wiLCBzYW1vYTogXCJXU1wiLFxyXG4gICAgXCJzYW4gbWFyaW5vXCI6IFwiU01cIiwgXCJzYW8gdG9tZSBhbmQgcHJpbmNpcGVcIjogXCJTVFwiLCBcInNhdWRpIGFyYWJpYVwiOiBcIlNBXCIsIHNlbmVnYWw6IFwiU05cIiwgc2VyYmlhOiBcIlJTXCIsXHJcbiAgICBzZXljaGVsbGVzOiBcIlNDXCIsIFwic2llcnJhIGxlb25lXCI6IFwiU0xcIiwgc2luZ2Fwb3JlOiBcIlNHXCIsIHNsb3Zha2lhOiBcIlNLXCIsIHNsb3ZlbmlhOiBcIlNJXCIsIFwic29sb21vbiBpc2xhbmRzXCI6IFwiU0JcIixcclxuICAgIHNvbWFsaWE6IFwiU09cIiwgXCJzb3V0aCBhZnJpY2FcIjogXCJaQVwiLCBcInNvdXRoIGdlb3JnaWEgYW5kIHNhbmR3aWNoIGlzbC5cIjogXCJHU1wiLCBzcGFpbjogXCJFU1wiLCBcInNyaSBsYW5rYVwiOiBcIkxLXCIsXHJcbiAgICBzdWRhbjogXCJTRFwiLCBzdXJpbmFtZTogXCJTUlwiLCBcInN2YWxiYXJkIGFuZCBqYW4gbWF5ZW5cIjogXCJTSlwiLCBzd2F6aWxhbmQ6IFwiU1pcIiwgc3dlZGVuOiBcIlNFXCIsIHN3aXR6ZXJsYW5kOiBcIkNIXCIsXHJcbiAgICBcInN5cmlhbiBhcmFiIHJlcHVibGljXCI6IFwiU1lcIiwgdGFpd2FuOiBcIlRXXCIsIHRhamlraXN0YW46IFwiVEpcIiwgdGFuemFuaWE6IFwiVFpcIiwgdGhhaWxhbmQ6IFwiVEhcIiwgXCJ0aW1vci1sZXN0ZVwiOiBcIlRMXCIsXHJcbiAgICB0b2dvOiBcIlRHXCIsIHRva2VsYXU6IFwiVEtcIiwgdG9uZ2E6IFwiVE9cIiwgXCJ0cmluaWRhZCBhbmQgdG9iYWdvXCI6IFwiVFRcIiwgdHVuaXNpYTogXCJUTlwiLCB0dXJrZXk6IFwiVFJcIixcclxuICAgIHR1cmttZW5pc3RhbjogXCJUTVwiLCBcInR1cmtzIGFuZCBjYWljb3MgaXNsYW5kc1wiOiBcIlRDXCIsIHR1dmFsdTogXCJUVlwiLCB1Z2FuZGE6IFwiVUdcIiwgdWtyYWluZTogXCJVQVwiLFxyXG4gICAgXCJ1bml0ZWQgYXJhYiBlbWlyYXRlc1wiOiBcIkFFXCIsIFwidW5pdGVkIGtpbmdkb21cIjogXCJHQlwiLCBcInVuaXRlZCBzdGF0ZXNcIjogXCJVU1wiLFxyXG4gICAgXCJ1bml0ZWQgc3RhdGVzIG91dGx5aW5nIGlzbGFuZHNcIjogXCJVTVwiLCB1cnVndWF5OiBcIlVZXCIsIHV6YmVraXN0YW46IFwiVVpcIiwgdmFudWF0dTogXCJWVVwiLCB2ZW5lenVlbGE6IFwiVkVcIixcclxuICAgIHZpZXRuYW06IFwiVk5cIiwgXCJ2aXJnaW4gaXNsYW5kcywgYnJpdGlzaFwiOiBcIlZHXCIsIFwidmlyZ2luIGlzbGFuZHMsIHUucy5cIjogXCJWSVwiLCBcIndhbGxpcyBhbmQgZnV0dW5hXCI6IFwiV0ZcIixcclxuICAgIFwid2VzdGVybiBzYWhhcmFcIjogXCJFSFwiLCB5ZW1lbjogXCJZRVwiLCB6YW1iaWE6IFwiWk1cIiwgemltYmFid2U6IFwiWldcIixcclxufTtcclxuXHJcbmNvbnN0IElzb1N0YXRlczogeyBbaWQ6IHN0cmluZ106IHN0cmluZzsgfSA9IHtcclxuICAgIGFsYWJhbWE6ICdBTCcsIGFsYXNrYTogJ0FLJywgJ2FtZXJpY2FuIHNhbW9hJzogJ0FTJywgYXJpem9uYTogJ0FaJywgYXJrYW5zYXM6ICdBUicsIGNhbGlmb3JuaWE6ICdDQScsXHJcbiAgICBjb2xvcmFkbzogJ0NPJywgY29ubmVjdGljdXQ6ICdDVCcsIGRlbGF3YXJlOiAnREUnLCAnZGlzdHJpY3Qgb2YgY29sdW1iaWEnOiAnREMnLFxyXG4gICAgJ2ZlZGVyYXRlZCBzdGF0ZXMgb2YgbWljcm9uZXNpYSc6ICdGTScsIGZsb3JpZGE6ICdGTCcsIGdlb3JnaWE6ICdHQScsIGd1YW06ICdHVScsIGhhd2FpaTogJ0hJJywgaWRhaG86ICdJRCcsXHJcbiAgICBpbGxpbm9pczogJ0lMJywgaW5kaWFuYTogJ0lOJywgaW93YTogJ0lBJywga2Fuc2FzOiAnS1MnLCBrZW50dWNreTogJ0tZJywgbG91aXNpYW5hOiAnTEEnLCBtYWluZTogJ01FJyxcclxuICAgICdtYXJzaGFsbCBpc2xhbmRzJzogJ01IJywgbWFyeWxhbmQ6ICdNRCcsIG1hc3NhY2h1c2V0dHM6ICdNQScsIG1pY2hpZ2FuOiAnTUknLCBtaW5uZXNvdGE6ICdNTicsIG1pc3Npc3NpcHBpOiAnTVMnLFxyXG4gICAgbWlzc291cmk6ICdNTycsIG1vbnRhbmE6ICdNVCcsIG5lYnJhc2thOiAnTkUnLCBuZXZhZGE6ICdOVicsICduZXcgaGFtcHNoaXJlJzogJ05IJywgJ25ldyBqZXJzZXknOiAnTkonLFxyXG4gICAgJ25ldyBtZXhpY28nOiAnTk0nLCAnbmV3IHlvcmsnOiAnTlknLCAnbm9ydGggY2Fyb2xpbmEnOiAnTkMnLCAnbm9ydGggZGFrb3RhJzogJ05EJyxcclxuICAgICdub3J0aGVybiBtYXJpYW5hIGlzbGFuZHMnOiAnTVAnLCBvaGlvOiAnT0gnLCBva2xhaG9tYTogJ09LJywgb3JlZ29uOiAnT1InLCBwYWxhdTogJ1BXJywgcGVubnN5bHZhbmlhOiAnUEEnLFxyXG4gICAgJ3B1ZXJ0byByaWNvJzogJ1BSJywgJ3Job2RlIGlzbGFuZCc6ICdSSScsICdzb3V0aCBjYXJvbGluYSc6ICdTQycsICdzb3V0aCBkYWtvdGEnOiAnU0QnLCB0ZW5uZXNzZWU6ICdUTicsXHJcbiAgICB0ZXhhczogJ1RYJywgdXRhaDogJ1VUJywgdmVybW9udDogJ1ZUJywgJ3ZpcmdpbiBpc2xhbmRzJzogJ1ZJJywgdmlyZ2luaWE6ICdWQScsIHdhc2hpbmd0b246ICdXQScsXHJcbiAgICAnd2VzdCB2aXJnaW5pYSc6ICdXVicsIHdpc2NvbnNpbjogJ1dJJywgd3lvbWluZzogJ1dZJyxcclxufTtcclxuXHJcbnZhciBJc29Qcm92aW5jZXM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmc7IH0gPSB7XHJcbiAgICBhbGJlcnRhOiAnQUInLCAnYnJpdGlzaCBjb2x1bWJpYSc6ICdCQycsIG1hbml0b2JhOiAnTUInLCAnbmV3IGJydW5zd2ljayc6ICdOQicsICduZXdmb3VuZGxhbmQgYW5kIGxhYnJhZG9yJzogJ05MJyxcclxuICAgICdub3ZhIHNjb3RpYSc6ICdOUycsIG9udGFyaW86ICdPTicsICdwcmluY2UgZWR3YXJkIGlzbGFuZCc6ICdQRScsIHF1ZWJlYzogJ1FDJywgc2Fza2F0Y2hld2FuOiAnU0snLFxyXG59O1xyXG4vKiB0c2xpbnQ6ZW5hYmxlICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvZmlsbFNlcnZpY2UgaW1wbGVtZW50cyBBdXRvZmlsbFNlcnZpY2VJbnRlcmZhY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2lwaGVyU2VydmljZTogQ2lwaGVyU2VydmljZSwgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB0b3RwU2VydmljZTogVG90cFNlcnZpY2UsIHByaXZhdGUgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7IH1cclxuXHJcbiAgICBnZXRGb3Jtc1dpdGhQYXNzd29yZEZpZWxkcyhwYWdlRGV0YWlsczogQXV0b2ZpbGxQYWdlRGV0YWlscyk6IGFueVtdIHtcclxuICAgICAgICBjb25zdCBmb3JtRGF0YTogYW55W10gPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgcGFzc3dvcmRGaWVsZHMgPSB0aGlzLmxvYWRQYXNzd29yZEZpZWxkcyhwYWdlRGV0YWlscywgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICBpZiAocGFzc3dvcmRGaWVsZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmb3JtRGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZm9ybUtleSBpbiBwYWdlRGV0YWlscy5mb3Jtcykge1xyXG4gICAgICAgICAgICBpZiAoIXBhZ2VEZXRhaWxzLmZvcm1zLmhhc093blByb3BlcnR5KGZvcm1LZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZm9ybVBhc3N3b3JkRmllbGRzID0gcGFzc3dvcmRGaWVsZHMuZmlsdGVyKHBmID0+IGZvcm1LZXkgPT09IHBmLmZvcm0pO1xyXG4gICAgICAgICAgICBpZiAoZm9ybVBhc3N3b3JkRmllbGRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCB1ZiA9IHRoaXMuZmluZFVzZXJuYW1lRmllbGQocGFnZURldGFpbHMsIGZvcm1QYXNzd29yZEZpZWxkc1swXSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodWYgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBhYmxlIHRvIGZpbmQgYW55IHZpZXdhYmxlIHVzZXJuYW1lIGZpZWxkcy4gbWF5YmUgdGhlcmUgYXJlIHNvbWUgXCJoaWRkZW5cIiBvbmVzP1xyXG4gICAgICAgICAgICAgICAgICAgIHVmID0gdGhpcy5maW5kVXNlcm5hbWVGaWVsZChwYWdlRGV0YWlscywgZm9ybVBhc3N3b3JkRmllbGRzWzBdLCB0cnVlLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtOiBwYWdlRGV0YWlscy5mb3Jtc1tmb3JtS2V5XSxcclxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogZm9ybVBhc3N3b3JkRmllbGRzWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1ZixcclxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZHM6IGZvcm1QYXNzd29yZEZpZWxkcyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZm9ybURhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZG9BdXRvRmlsbChvcHRpb25zOiBhbnkpIHtcclxuICAgICAgICBsZXQgdG90cFByb21pc2U6IFByb21pc2U8c3RyaW5nPiA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgdGFiID0gYXdhaXQgdGhpcy5nZXRBY3RpdmVUYWIoKTtcclxuICAgICAgICBpZiAoIXRhYiB8fCAhb3B0aW9ucy5jaXBoZXIgfHwgIW9wdGlvbnMucGFnZURldGFpbHMgfHwgIW9wdGlvbnMucGFnZURldGFpbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90aGluZyB0byBhdXRvLWZpbGwuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjYW5BY2Nlc3NQcmVtaXVtID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5jYW5BY2Nlc3NQcmVtaXVtKCk7XHJcbiAgICAgICAgbGV0IGRpZEF1dG9maWxsID0gZmFsc2U7XHJcbiAgICAgICAgb3B0aW9ucy5wYWdlRGV0YWlscy5mb3JFYWNoKChwZDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSdyZSBzdGlsbCBvbiBjb3JyZWN0IHRhYlxyXG4gICAgICAgICAgICBpZiAocGQudGFiLmlkICE9PSB0YWIuaWQgfHwgcGQudGFiLnVybCAhPT0gdGFiLnVybCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWxsU2NyaXB0ID0gdGhpcy5nZW5lcmF0ZUZpbGxTY3JpcHQocGQuZGV0YWlscywge1xyXG4gICAgICAgICAgICAgICAgc2tpcFVzZXJuYW1lT25seUZpbGw6IG9wdGlvbnMuc2tpcFVzZXJuYW1lT25seUZpbGwgfHwgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBvbmx5RW1wdHlGaWVsZHM6IG9wdGlvbnMub25seUVtcHR5RmllbGRzIHx8IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgb25seVZpc2libGVGaWVsZHM6IG9wdGlvbnMub25seVZpc2libGVGaWVsZHMgfHwgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBmaWxsTmV3UGFzc3dvcmQ6IG9wdGlvbnMuZmlsbE5ld1Bhc3N3b3JkIHx8IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY2lwaGVyOiBvcHRpb25zLmNpcGhlcixcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWZpbGxTY3JpcHQgfHwgIWZpbGxTY3JpcHQuc2NyaXB0IHx8ICFmaWxsU2NyaXB0LnNjcmlwdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGEgc21hbGwgZGVsYXkgYmV0d2VlbiBvcGVyYXRpb25zXHJcbiAgICAgICAgICAgIGZpbGxTY3JpcHQucHJvcGVydGllcy5kZWxheV9iZXR3ZWVuX29wZXJhdGlvbnMgPSAyMDtcclxuXHJcbiAgICAgICAgICAgIGRpZEF1dG9maWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnNraXBMYXN0VXNlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaXBoZXJTZXJ2aWNlLnVwZGF0ZUxhc3RVc2VkRGF0ZShvcHRpb25zLmNpcGhlci5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2UodGFiLCB7XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAnZmlsbEZvcm0nLFxyXG4gICAgICAgICAgICAgICAgZmlsbFNjcmlwdDogZmlsbFNjcmlwdCxcclxuICAgICAgICAgICAgICAgIHVybDogdGFiLnVybCxcclxuICAgICAgICAgICAgfSwgeyBmcmFtZUlkOiBwZC5mcmFtZUlkIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2lwaGVyLnR5cGUgIT09IENpcGhlclR5cGUuTG9naW4gfHwgdG90cFByb21pc2UgfHwgIW9wdGlvbnMuY2lwaGVyLmxvZ2luLnRvdHAgfHxcclxuICAgICAgICAgICAgICAgICghY2FuQWNjZXNzUHJlbWl1bSAmJiAhb3B0aW9ucy5jaXBoZXIub3JnYW5pemF0aW9uVXNlVG90cCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG90cFByb21pc2UgPSB0aGlzLnRvdHBTZXJ2aWNlLmlzQXV0b0NvcHlFbmFibGVkKCkudGhlbihlbmFibGVkID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG90cFNlcnZpY2UuZ2V0Q29kZShvcHRpb25zLmNpcGhlci5sb2dpbi50b3RwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGRpZEF1dG9maWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLmNvbGxlY3QoRXZlbnRUeXBlLkNpcGhlcl9DbGllbnRBdXRvZmlsbGVkLCBvcHRpb25zLmNpcGhlci5pZCk7XHJcbiAgICAgICAgICAgIGlmICh0b3RwUHJvbWlzZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdG90cFByb21pc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGlkIG5vdCBhdXRvLWZpbGwuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGRvQXV0b0ZpbGxBY3RpdmVUYWIocGFnZURldGFpbHM6IGFueSwgZnJvbUNvbW1hbmQ6IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCB0YWIgPSBhd2FpdCB0aGlzLmdldEFjdGl2ZVRhYigpO1xyXG4gICAgICAgIGlmICghdGFiIHx8ICF0YWIudXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjaXBoZXI6IENpcGhlclZpZXc7XHJcbiAgICAgICAgaWYgKGZyb21Db21tYW5kKSB7XHJcbiAgICAgICAgICAgIGNpcGhlciA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXROZXh0Q2lwaGVyRm9yVXJsKHRhYi51cmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RMYXVuY2hlZENpcGhlciA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRMYXN0TGF1bmNoZWRGb3JVcmwodGFiLnVybCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmIChsYXN0TGF1bmNoZWRDaXBoZXIgJiYgRGF0ZS5ub3coKS52YWx1ZU9mKCkgLSBsYXN0TGF1bmNoZWRDaXBoZXIubG9jYWxEYXRhPy5sYXN0TGF1bmNoZWQ/LnZhbHVlT2YoKSA8IDMwMDAwKSB7XHJcbiAgICAgICAgICAgICAgICBjaXBoZXIgPSBsYXN0TGF1bmNoZWRDaXBoZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjaXBoZXIgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0TGFzdFVzZWRGb3JVcmwodGFiLnVybCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjaXBoZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaXBoZXIucmVwcm9tcHQgIT09IENpcGhlclJlcHJvbXB0VHlwZS5Ob25lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRvdHBDb2RlID0gYXdhaXQgdGhpcy5kb0F1dG9GaWxsKHtcclxuICAgICAgICAgICAgY2lwaGVyOiBjaXBoZXIsXHJcbiAgICAgICAgICAgIHBhZ2VEZXRhaWxzOiBwYWdlRGV0YWlscyxcclxuICAgICAgICAgICAgc2tpcExhc3RVc2VkOiAhZnJvbUNvbW1hbmQsXHJcbiAgICAgICAgICAgIHNraXBVc2VybmFtZU9ubHlGaWxsOiAhZnJvbUNvbW1hbmQsXHJcbiAgICAgICAgICAgIG9ubHlFbXB0eUZpZWxkczogIWZyb21Db21tYW5kLFxyXG4gICAgICAgICAgICBvbmx5VmlzaWJsZUZpZWxkczogIWZyb21Db21tYW5kLFxyXG4gICAgICAgICAgICBmaWxsTmV3UGFzc3dvcmQ6IGZyb21Db21tYW5kLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgbGFzdCB1c2VkIGluZGV4IGFzIGF1dG9maWxsIGhhcyBzdWNjZWVkXHJcbiAgICAgICAgaWYgKGZyb21Db21tYW5kKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2lwaGVyU2VydmljZS51cGRhdGVMYXN0VXNlZEluZGV4Rm9yVXJsKHRhYi51cmwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRvdHBDb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlcnNcclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldEFjdGl2ZVRhYigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHRhYiA9IGF3YWl0IEJyb3dzZXJBcGkuZ2V0VGFiRnJvbUN1cnJlbnRXaW5kb3coKTtcclxuICAgICAgICBpZiAoIXRhYikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRhYiBmb3VuZC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0YWI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUZpbGxTY3JpcHQocGFnZURldGFpbHM6IEF1dG9maWxsUGFnZURldGFpbHMsIG9wdGlvbnM6IGFueSk6IEF1dG9maWxsU2NyaXB0IHtcclxuICAgICAgICBpZiAoIXBhZ2VEZXRhaWxzIHx8ICFvcHRpb25zLmNpcGhlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmaWxsU2NyaXB0ID0gbmV3IEF1dG9maWxsU2NyaXB0KHBhZ2VEZXRhaWxzLmRvY3VtZW50VVVJRCk7XHJcbiAgICAgICAgY29uc3QgZmlsbGVkRmllbGRzOiB7IFtpZDogc3RyaW5nXTogQXV0b2ZpbGxGaWVsZDsgfSA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IG9wdGlvbnMuY2lwaGVyLmZpZWxkcztcclxuXHJcbiAgICAgICAgaWYgKGZpZWxkcyAmJiBmaWVsZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZXM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgICAgICBmaWVsZHMuZm9yRWFjaCgoZjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZShmLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lcy5wdXNoKGYubmFtZS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBwYWdlRGV0YWlscy5maWVsZHMuZm9yRWFjaCgoZmllbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGxlZEZpZWxkcy5oYXNPd25Qcm9wZXJ0eShmaWVsZC5vcGlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkLnZpZXdhYmxlICYmIGZpZWxkLnRhZ05hbWUgIT09ICdzcGFuJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGluZ0luZGV4ID0gdGhpcy5maW5kTWF0Y2hpbmdGaWVsZEluZGV4KGZpZWxkLCBmaWVsZE5hbWVzKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGluZ0luZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGluZ0ZpZWxkOiBGaWVsZFZpZXcgPSBmaWVsZHNbbWF0Y2hpbmdJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hpbmdGaWVsZC50eXBlID09PSBGaWVsZFR5cGUuTGlua2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtcHRpb246IExpbmtlZCBGaWVsZCBpcyBub3QgYmVpbmcgdXNlZCB0byBhdXRvZmlsbCBhIGJvb2xlYW4gdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5jaXBoZXIubGlua2VkRmllbGRWYWx1ZShtYXRjaGluZ0ZpZWxkLmxpbmtlZElkKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBtYXRjaGluZ0ZpZWxkLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsID09IG51bGwgJiYgbWF0Y2hpbmdGaWVsZC50eXBlID09PSBGaWVsZFR5cGUuQm9vbGVhbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gJ2ZhbHNlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbGVkRmllbGRzW2ZpZWxkLm9waWRdID0gZmllbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsQnlPcGlkKGZpbGxTY3JpcHQsIGZpZWxkLCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAob3B0aW9ucy5jaXBoZXIudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuTG9naW46XHJcbiAgICAgICAgICAgICAgICBmaWxsU2NyaXB0ID0gdGhpcy5nZW5lcmF0ZUxvZ2luRmlsbFNjcmlwdChmaWxsU2NyaXB0LCBwYWdlRGV0YWlscywgZmlsbGVkRmllbGRzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuQ2FyZDpcclxuICAgICAgICAgICAgICAgIGZpbGxTY3JpcHQgPSB0aGlzLmdlbmVyYXRlQ2FyZEZpbGxTY3JpcHQoZmlsbFNjcmlwdCwgcGFnZURldGFpbHMsIGZpbGxlZEZpZWxkcywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLklkZW50aXR5OlxyXG4gICAgICAgICAgICAgICAgZmlsbFNjcmlwdCA9IHRoaXMuZ2VuZXJhdGVJZGVudGl0eUZpbGxTY3JpcHQoZmlsbFNjcmlwdCwgcGFnZURldGFpbHMsIGZpbGxlZEZpZWxkcywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbGxTY3JpcHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUxvZ2luRmlsbFNjcmlwdChmaWxsU2NyaXB0OiBBdXRvZmlsbFNjcmlwdCwgcGFnZURldGFpbHM6IGFueSxcclxuICAgICAgICBmaWxsZWRGaWVsZHM6IHsgW2lkOiBzdHJpbmddOiBBdXRvZmlsbEZpZWxkOyB9LCBvcHRpb25zOiBhbnkpOiBBdXRvZmlsbFNjcmlwdCB7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmNpcGhlci5sb2dpbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkczogQXV0b2ZpbGxGaWVsZFtdID0gW107XHJcbiAgICAgICAgY29uc3QgdXNlcm5hbWVzOiBBdXRvZmlsbEZpZWxkW10gPSBbXTtcclxuICAgICAgICBsZXQgcGY6IEF1dG9maWxsRmllbGQgPSBudWxsO1xyXG4gICAgICAgIGxldCB1c2VybmFtZTogQXV0b2ZpbGxGaWVsZCA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgbG9naW4gPSBvcHRpb25zLmNpcGhlci5sb2dpbjtcclxuXHJcbiAgICAgICAgaWYgKCFsb2dpbi5wYXNzd29yZCB8fCBsb2dpbi5wYXNzd29yZCA9PT0gJycpIHtcclxuICAgICAgICAgICAgLy8gTm8gcGFzc3dvcmQgZm9yIHRoaXMgbG9naW4uIE1heWJlIHRoZXkganVzdCB3YW50ZWQgdG8gYXV0by1maWxsIHNvbWUgY3VzdG9tIGZpZWxkcz9cclxuICAgICAgICAgICAgZmlsbFNjcmlwdCA9IHRoaXMuc2V0RmlsbFNjcmlwdEZvckZvY3VzKGZpbGxlZEZpZWxkcywgZmlsbFNjcmlwdCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWxsU2NyaXB0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBhc3N3b3JkRmllbGRzID0gdGhpcy5sb2FkUGFzc3dvcmRGaWVsZHMocGFnZURldGFpbHMsIGZhbHNlLCBmYWxzZSwgb3B0aW9ucy5vbmx5RW1wdHlGaWVsZHMsXHJcbiAgICAgICAgICAgIG9wdGlvbnMuZmlsbE5ld1Bhc3N3b3JkKTtcclxuICAgICAgICBpZiAoIXBhc3N3b3JkRmllbGRzLmxlbmd0aCAmJiAhb3B0aW9ucy5vbmx5VmlzaWJsZUZpZWxkcykge1xyXG4gICAgICAgICAgICAvLyBub3QgYWJsZSB0byBmaW5kIGFueSB2aWV3YWJsZSBwYXNzd29yZCBmaWVsZHMuIG1heWJlIHRoZXJlIGFyZSBzb21lIFwiaGlkZGVuXCIgb25lcz9cclxuICAgICAgICAgICAgcGFzc3dvcmRGaWVsZHMgPSB0aGlzLmxvYWRQYXNzd29yZEZpZWxkcyhwYWdlRGV0YWlscywgdHJ1ZSwgdHJ1ZSwgb3B0aW9ucy5vbmx5RW1wdHlGaWVsZHMsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpbGxOZXdQYXNzd29yZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGZvcm1LZXkgaW4gcGFnZURldGFpbHMuZm9ybXMpIHtcclxuICAgICAgICAgICAgaWYgKCFwYWdlRGV0YWlscy5mb3Jtcy5oYXNPd25Qcm9wZXJ0eShmb3JtS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkRmllbGRzRm9yRm9ybTogQXV0b2ZpbGxGaWVsZFtdID0gW107XHJcbiAgICAgICAgICAgIHBhc3N3b3JkRmllbGRzLmZvckVhY2gocGFzc0ZpZWxkID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtS2V5ID09PSBwYXNzRmllbGQuZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkRmllbGRzRm9yRm9ybS5wdXNoKHBhc3NGaWVsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcGFzc3dvcmRGaWVsZHMuZm9yRWFjaChwYXNzRmllbGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGYgPSBwYXNzRmllbGQ7XHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZHMucHVzaChwZik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGxvZ2luLnVzZXJuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB0aGlzLmZpbmRVc2VybmFtZUZpZWxkKHBhZ2VEZXRhaWxzLCBwZiwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXNlcm5hbWUgJiYgIW9wdGlvbnMub25seVZpc2libGVGaWVsZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90IGFibGUgdG8gZmluZCBhbnkgdmlld2FibGUgdXNlcm5hbWUgZmllbGRzLiBtYXliZSB0aGVyZSBhcmUgc29tZSBcImhpZGRlblwiIG9uZXM/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdGhpcy5maW5kVXNlcm5hbWVGaWVsZChwYWdlRGV0YWlscywgcGYsIHRydWUsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VybmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZXMucHVzaCh1c2VybmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXNzd29yZEZpZWxkcy5sZW5ndGggJiYgIXBhc3N3b3Jkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gVGhlIHBhZ2UgZG9lcyBub3QgaGF2ZSBhbnkgZm9ybXMgd2l0aCBwYXNzd29yZCBmaWVsZHMuIFVzZSB0aGUgZmlyc3QgcGFzc3dvcmQgZmllbGQgb24gdGhlIHBhZ2UgYW5kIHRoZVxyXG4gICAgICAgICAgICAvLyBpbnB1dCBmaWVsZCBqdXN0IGJlZm9yZSBpdCBhcyB0aGUgdXNlcm5hbWUuXHJcblxyXG4gICAgICAgICAgICBwZiA9IHBhc3N3b3JkRmllbGRzWzBdO1xyXG4gICAgICAgICAgICBwYXNzd29yZHMucHVzaChwZik7XHJcblxyXG4gICAgICAgICAgICBpZiAobG9naW4udXNlcm5hbWUgJiYgcGYuZWxlbWVudE51bWJlciA+IDApIHtcclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdGhpcy5maW5kVXNlcm5hbWVGaWVsZChwYWdlRGV0YWlscywgcGYsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF1c2VybmFtZSAmJiAhb3B0aW9ucy5vbmx5VmlzaWJsZUZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBhYmxlIHRvIGZpbmQgYW55IHZpZXdhYmxlIHVzZXJuYW1lIGZpZWxkcy4gbWF5YmUgdGhlcmUgYXJlIHNvbWUgXCJoaWRkZW5cIiBvbmVzP1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdGhpcy5maW5kVXNlcm5hbWVGaWVsZChwYWdlRGV0YWlscywgcGYsIHRydWUsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh1c2VybmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lcy5wdXNoKHVzZXJuYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFwYXNzd29yZEZpZWxkcy5sZW5ndGggJiYgIW9wdGlvbnMuc2tpcFVzZXJuYW1lT25seUZpbGwpIHtcclxuICAgICAgICAgICAgLy8gTm8gcGFzc3dvcmQgZmllbGRzIG9uIHRoaXMgcGFnZS4gTGV0J3MgdHJ5IHRvIGp1c3QgZnV6enkgZmlsbCB0aGUgdXNlcm5hbWUuXHJcbiAgICAgICAgICAgIHBhZ2VEZXRhaWxzLmZpZWxkcy5mb3JFYWNoKChmOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChmLnZpZXdhYmxlICYmIChmLnR5cGUgPT09ICd0ZXh0JyB8fCBmLnR5cGUgPT09ICdlbWFpbCcgfHwgZi50eXBlID09PSAndGVsJykgJiZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkSXNGdXp6eU1hdGNoKGYsIFVzZXJuYW1lRmllbGROYW1lcykpIHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZXMucHVzaChmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1c2VybmFtZXMuZm9yRWFjaCh1ID0+IHtcclxuICAgICAgICAgICAgaWYgKGZpbGxlZEZpZWxkcy5oYXNPd25Qcm9wZXJ0eSh1Lm9waWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZpbGxlZEZpZWxkc1t1Lm9waWRdID0gdTtcclxuICAgICAgICAgICAgdGhpcy5maWxsQnlPcGlkKGZpbGxTY3JpcHQsIHUsIGxvZ2luLnVzZXJuYW1lKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFzc3dvcmRzLmZvckVhY2gocCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmaWxsZWRGaWVsZHMuaGFzT3duUHJvcGVydHkocC5vcGlkKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmaWxsZWRGaWVsZHNbcC5vcGlkXSA9IHA7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsbEJ5T3BpZChmaWxsU2NyaXB0LCBwLCBsb2dpbi5wYXNzd29yZCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZpbGxTY3JpcHQgPSB0aGlzLnNldEZpbGxTY3JpcHRGb3JGb2N1cyhmaWxsZWRGaWVsZHMsIGZpbGxTY3JpcHQpO1xyXG4gICAgICAgIHJldHVybiBmaWxsU2NyaXB0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVDYXJkRmlsbFNjcmlwdChmaWxsU2NyaXB0OiBBdXRvZmlsbFNjcmlwdCwgcGFnZURldGFpbHM6IGFueSxcclxuICAgICAgICBmaWxsZWRGaWVsZHM6IHsgW2lkOiBzdHJpbmddOiBBdXRvZmlsbEZpZWxkOyB9LCBvcHRpb25zOiBhbnkpOiBBdXRvZmlsbFNjcmlwdCB7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmNpcGhlci5jYXJkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZmlsbEZpZWxkczogeyBbaWQ6IHN0cmluZ106IEF1dG9maWxsRmllbGQ7IH0gPSB7fTtcclxuXHJcbiAgICAgICAgcGFnZURldGFpbHMuZmllbGRzLmZvckVhY2goKGY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mb3JDdXN0b21GaWVsZHNPbmx5KGYpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRXhjbHVkZWRUeXBlKGYudHlwZSwgRXhjbHVkZWRBdXRvZmlsbFR5cGVzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IENhcmRBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gQ2FyZEF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWYuaGFzT3duUHJvcGVydHkoYXR0cikgfHwgIWZbYXR0cl0gfHwgIWYudmlld2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZWYgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGxcclxuICAgICAgICAgICAgICAgIC8vIHJlZiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvZnVuZGFtZW50YWxzL2Rlc2lnbi1hbmQtdXgvaW5wdXQvZm9ybXMvXHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGxGaWVsZHMuY2FyZGhvbGRlck5hbWUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcclxuICAgICAgICAgICAgICAgICAgICBbJ2NjLW5hbWUnLCAnY2FyZC1uYW1lJywgJ2NhcmRob2xkZXItbmFtZScsICdjYXJkaG9sZGVyJywgJ25hbWUnLCAnbm9tJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgWydjYy1uYW1lJywgJ2NhcmQtbmFtZScsICdjYXJkaG9sZGVyLW5hbWUnLCAnY2FyZGhvbGRlcicsICd0Yk5hbWUnXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmNhcmRob2xkZXJOYW1lID0gZjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMubnVtYmVyICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXHJcbiAgICAgICAgICAgICAgICAgICAgWydjYy1udW1iZXInLCAnY2MtbnVtJywgJ2NhcmQtbnVtYmVyJywgJ2NhcmQtbnVtJywgJ251bWJlcicsICdjYycsICdjYy1ubycsICdjYXJkLW5vJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWRpdC1jYXJkJywgJ251bWVyby1jYXJ0ZScsICdjYXJ0ZScsICdjYXJ0ZS1jcmVkaXQnLCAnbnVtLWNhcnRlJywgJ2NiLW51bSddLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnY2MtbnVtYmVyJywgJ2NjLW51bScsICdjYXJkLW51bWJlcicsICdjYXJkLW51bScsICdjYy1ubycsICdjYXJkLW5vJywgJ251bWVyby1jYXJ0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudW0tY2FydGUnLCAnY2ItbnVtJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5udW1iZXIgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5leHAgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcclxuICAgICAgICAgICAgICAgICAgICBbJ2NjLWV4cCcsICdjYXJkLWV4cCcsICdjYy1leHBpcmF0aW9uJywgJ2NhcmQtZXhwaXJhdGlvbicsICdjYy1leCcsICdjYXJkLWV4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcmQtZXhwaXJlJywgJ2NhcmQtZXhwaXJ5JywgJ3ZhbGlkaXRlJywgJ2V4cGlyYXRpb24nLCAnZXhwaXJ5JywgJ21tLXl5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ21tLXl5eXknLCAneXktbW0nLCAneXl5eS1tbScsICdleHBpcmF0aW9uLWRhdGUnLCAncGF5bWVudC1jYXJkLWV4cGlyYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAncGF5bWVudC1jYy1kYXRlJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgWydtbS15eScsICdtbS15eXl5JywgJ3l5LW1tJywgJ3l5eXktbW0nLCAnZXhwaXJhdGlvbi1kYXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BheW1lbnQtY2FyZC1leHBpcmF0aW9uJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5leHAgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5leHBNb250aCAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnZXhwLW1vbnRoJywgJ2NjLWV4cC1tb250aCcsICdjYy1tb250aCcsICdjYXJkLW1vbnRoJywgJ2NjLW1vJywgJ2NhcmQtbW8nLCAnZXhwLW1vJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcmQtZXhwLW1vJywgJ2NjLWV4cC1tbycsICdjYXJkLWV4cGlyYXRpb24tbW9udGgnLCAnZXhwaXJhdGlvbi1tb250aCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYy1tbScsICdjYy1tJywgJ2NhcmQtbW0nLCAnY2FyZC1tJywgJ2NhcmQtZXhwLW1tJywgJ2NjLWV4cC1tbScsICdleHAtbW0nLCAnZXhwLW0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXhwaXJlLW1vbnRoJywgJ2V4cGlyZS1tbycsICdleHBpcnktbW9udGgnLCAnZXhwaXJ5LW1vJywgJ2NhcmQtZXhwaXJlLW1vbnRoJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcmQtZXhwaXJlLW1vJywgJ2NhcmQtZXhwaXJ5LW1vbnRoJywgJ2NhcmQtZXhwaXJ5LW1vJywgJ21vaXMtdmFsaWRpdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbW9pcy1leHBpcmF0aW9uJywgJ20tdmFsaWRpdGUnLCAnbS1leHBpcmF0aW9uJywgJ2V4cGlyeS1kYXRlLWZpZWxkLW1vbnRoJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V4cGlyYXRpb24tZGF0ZS1tb250aCcsICdleHBpcmF0aW9uLWRhdGUtbW0nLCAnZXhwLW1vbicsICd2YWxpZGl0eS1tbycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdleHAtZGF0ZS1tbycsICdjYi1kYXRlLW1vaXMnLCAnZGF0ZS1tJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5leHBNb250aCA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLmV4cFllYXIgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcclxuICAgICAgICAgICAgICAgICAgICBbJ2V4cC15ZWFyJywgJ2NjLWV4cC15ZWFyJywgJ2NjLXllYXInLCAnY2FyZC15ZWFyJywgJ2NjLXlyJywgJ2NhcmQteXInLCAnZXhwLXlyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcmQtZXhwLXlyJywgJ2NjLWV4cC15cicsICdjYXJkLWV4cGlyYXRpb24teWVhcicsICdleHBpcmF0aW9uLXllYXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2MteXknLCAnY2MteScsICdjYXJkLXl5JywgJ2NhcmQteScsICdjYXJkLWV4cC15eScsICdjYy1leHAteXknLCAnZXhwLXl5JywgJ2V4cC15JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NjLXl5eXknLCAnY2FyZC15eXl5JywgJ2NhcmQtZXhwLXl5eXknLCAnY2MtZXhwLXl5eXknLCAnZXhwaXJlLXllYXInLCAnZXhwaXJlLXlyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V4cGlyeS15ZWFyJywgJ2V4cGlyeS15cicsICdjYXJkLWV4cGlyZS15ZWFyJywgJ2NhcmQtZXhwaXJlLXlyJywgJ2NhcmQtZXhwaXJ5LXllYXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2FyZC1leHBpcnkteXInLCAnYW4tdmFsaWRpdGUnLCAnYW4tZXhwaXJhdGlvbicsICdhbm5lZS12YWxpZGl0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbm5lZS1leHBpcmF0aW9uJywgJ2V4cGlyeS1kYXRlLWZpZWxkLXllYXInLCAnZXhwaXJhdGlvbi1kYXRlLXllYXInLCAnY2ItZGF0ZS1hbm4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXhwaXJhdGlvbi1kYXRlLXl5JywgJ2V4cGlyYXRpb24tZGF0ZS15eXl5JywgJ3ZhbGlkaXR5LXllYXInLCAnZXhwLWRhdGUteWVhcicsICdkYXRlLXknXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmV4cFllYXIgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5jb2RlICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXHJcbiAgICAgICAgICAgICAgICAgICAgWydjdnYnLCAnY3ZjJywgJ2N2djInLCAnY2MtY3NjJywgJ2NjLWN2dicsICdjYXJkLWNzYycsICdjYXJkLWN2dicsICdjdmQnLCAnY2lkJywgJ2N2YzInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY252JywgJ2N2bjInLCAnY2MtY29kZScsICdjYXJkLWNvZGUnLCAnY29kZS1zZWN1cml0ZScsICdzZWN1cml0eS1jb2RlJywgJ2NyeXB0bycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYXJkLXZlcmlmJywgJ3ZlcmlmaWNhdGlvbi1jb2RlJywgJ2NzYycsICdjY3YnXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmNvZGUgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5icmFuZCAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnY2MtdHlwZScsICdjYXJkLXR5cGUnLCAnY2FyZC1icmFuZCcsICdjYy1icmFuZCcsICdjYi10eXBlJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5icmFuZCA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgY2FyZCA9IG9wdGlvbnMuY2lwaGVyLmNhcmQ7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGNhcmQsIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2NhcmRob2xkZXJOYW1lJyk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGNhcmQsIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ251bWJlcicpO1xyXG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBjYXJkLCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdjb2RlJyk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGNhcmQsIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2JyYW5kJyk7XHJcblxyXG4gICAgICAgIGlmIChmaWxsRmllbGRzLmV4cE1vbnRoICYmIHRoaXMuaGFzVmFsdWUoY2FyZC5leHBNb250aCkpIHtcclxuICAgICAgICAgICAgbGV0IGV4cE1vbnRoOiBzdHJpbmcgPSBjYXJkLmV4cE1vbnRoO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbGxGaWVsZHMuZXhwTW9udGguc2VsZWN0SW5mbyAmJiBmaWxsRmllbGRzLmV4cE1vbnRoLnNlbGVjdEluZm8ub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2lPcHRpb25zID0gZmlsbEZpZWxkcy5leHBNb250aC5zZWxlY3RJbmZvLm9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2lPcHRpb25zLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KGNhcmQuZXhwTW9udGgsIG51bGwpIC0gMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2lPcHRpb25zLmxlbmd0aCA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2lPcHRpb25zWzBdWzBdICE9IG51bGwgJiYgc2lPcHRpb25zWzBdWzBdICE9PSAnJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2lPcHRpb25zWzEyXVswXSA9PSBudWxsIHx8IHNpT3B0aW9uc1sxMl1bMF0gPT09ICcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KGNhcmQuZXhwTW9udGgsIG51bGwpIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KGNhcmQuZXhwTW9udGgsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHNpT3B0aW9uc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cE1vbnRoID0gb3B0aW9uWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICgodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cE1vbnRoLCAnbW0nKSB8fCBmaWxsRmllbGRzLmV4cE1vbnRoLm1heExlbmd0aCA9PT0gMilcclxuICAgICAgICAgICAgICAgICYmIGV4cE1vbnRoLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgZXhwTW9udGggPSAnMCcgKyBleHBNb250aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmlsbGVkRmllbGRzW2ZpbGxGaWVsZHMuZXhwTW9udGgub3BpZF0gPSBmaWxsRmllbGRzLmV4cE1vbnRoO1xyXG4gICAgICAgICAgICB0aGlzLmZpbGxCeU9waWQoZmlsbFNjcmlwdCwgZmlsbEZpZWxkcy5leHBNb250aCwgZXhwTW9udGgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZpbGxGaWVsZHMuZXhwWWVhciAmJiB0aGlzLmhhc1ZhbHVlKGNhcmQuZXhwWWVhcikpIHtcclxuICAgICAgICAgICAgbGV0IGV4cFllYXI6IHN0cmluZyA9IGNhcmQuZXhwWWVhcjtcclxuICAgICAgICAgICAgaWYgKGZpbGxGaWVsZHMuZXhwWWVhci5zZWxlY3RJbmZvICYmIGZpbGxGaWVsZHMuZXhwWWVhci5zZWxlY3RJbmZvLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsbEZpZWxkcy5leHBZZWFyLnNlbGVjdEluZm8ub3B0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG86IFtzdHJpbmcsIHN0cmluZ10gPSBmaWxsRmllbGRzLmV4cFllYXIuc2VsZWN0SW5mby5vcHRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvWzBdID09PSBjYXJkLmV4cFllYXIgfHwgb1sxXSA9PT0gY2FyZC5leHBZZWFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cFllYXIgPSBvWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9bMV0ubGVuZ3RoID09PSAyICYmIGNhcmQuZXhwWWVhci5sZW5ndGggPT09IDQgJiYgb1sxXSA9PT0gY2FyZC5leHBZZWFyLnN1YnN0cmluZygyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBZZWFyID0gb1sxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9uSW5kZXggPSBvWzFdLmluZGV4T2YoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb25JbmRleCA+IC0xICYmIG9bMV0ubGVuZ3RoID4gY29sb25JbmRleCArIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gb1sxXS5zdWJzdHJpbmcoY29sb25JbmRleCArIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsICE9IG51bGwgJiYgdmFsLnRyaW0oKSAhPT0gJycgJiYgdmFsID09PSBjYXJkLmV4cFllYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cFllYXIgPSBvWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cFllYXIsICd5eXl5JykgfHwgZmlsbEZpZWxkcy5leHBZZWFyLm1heExlbmd0aCA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4cFllYXIubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwWWVhciA9ICcyMCcgKyBleHBZZWFyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmllbGRBdHRyc0NvbnRhaW4oZmlsbEZpZWxkcy5leHBZZWFyLCAneXknKSB8fCBmaWxsRmllbGRzLmV4cFllYXIubWF4TGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhwWWVhci5sZW5ndGggPT09IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHBZZWFyID0gZXhwWWVhci5zdWJzdHIoMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZpbGxlZEZpZWxkc1tmaWxsRmllbGRzLmV4cFllYXIub3BpZF0gPSBmaWxsRmllbGRzLmV4cFllYXI7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsbEJ5T3BpZChmaWxsU2NyaXB0LCBmaWxsRmllbGRzLmV4cFllYXIsIGV4cFllYXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZpbGxGaWVsZHMuZXhwICYmIHRoaXMuaGFzVmFsdWUoY2FyZC5leHBNb250aCkgJiYgdGhpcy5oYXNWYWx1ZShjYXJkLmV4cFllYXIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxNb250aCA9ICgnMCcgKyBjYXJkLmV4cE1vbnRoKS5zbGljZSgtMik7XHJcblxyXG4gICAgICAgICAgICBsZXQgZnVsbFllYXI6IHN0cmluZyA9IGNhcmQuZXhwWWVhcjtcclxuICAgICAgICAgICAgbGV0IHBhcnRZZWFyOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoZnVsbFllYXIubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0WWVhciA9IGZ1bGxZZWFyO1xyXG4gICAgICAgICAgICAgICAgZnVsbFllYXIgPSAnMjAnICsgZnVsbFllYXI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnVsbFllYXIubGVuZ3RoID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0WWVhciA9IGZ1bGxZZWFyLnN1YnN0cigyLCAyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGV4cDogc3RyaW5nID0gbnVsbDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNb250aEFiYnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBNb250aEFiYnJbaV0gKyAnLycgKyBZZWFyQWJiclNob3J0W2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRZZWFyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHAgPSBmdWxsTW9udGggKyAnLycgKyBwYXJ0WWVhcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgTW9udGhBYmJyW2ldICsgJy8nICsgWWVhckFiYnJMb25nW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxNb250aCArICcvJyArIGZ1bGxZZWFyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBZZWFyQWJiclNob3J0W2ldICsgJy8nICsgTW9udGhBYmJyW2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRZZWFyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHAgPSBwYXJ0WWVhciArICcvJyArIGZ1bGxNb250aDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgWWVhckFiYnJMb25nW2ldICsgJy8nICsgTW9udGhBYmJyW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxZZWFyICsgJy8nICsgZnVsbE1vbnRoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBNb250aEFiYnJbaV0gKyAnLScgKyBZZWFyQWJiclNob3J0W2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRZZWFyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHAgPSBmdWxsTW9udGggKyAnLScgKyBwYXJ0WWVhcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgTW9udGhBYmJyW2ldICsgJy0nICsgWWVhckFiYnJMb25nW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxNb250aCArICctJyArIGZ1bGxZZWFyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBZZWFyQWJiclNob3J0W2ldICsgJy0nICsgTW9udGhBYmJyW2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRZZWFyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHAgPSBwYXJ0WWVhciArICctJyArIGZ1bGxNb250aDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgWWVhckFiYnJMb25nW2ldICsgJy0nICsgTW9udGhBYmJyW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxZZWFyICsgJy0nICsgZnVsbE1vbnRoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBZZWFyQWJiclNob3J0W2ldICsgTW9udGhBYmJyW2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRZZWFyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHAgPSBwYXJ0WWVhciArIGZ1bGxNb250aDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgWWVhckFiYnJMb25nW2ldICsgTW9udGhBYmJyW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxZZWFyICsgZnVsbE1vbnRoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBNb250aEFiYnJbaV0gKyBZZWFyQWJiclNob3J0W2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRZZWFyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHAgPSBmdWxsTW9udGggKyBwYXJ0WWVhcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgTW9udGhBYmJyW2ldICsgWWVhckFiYnJMb25nW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxNb250aCArIGZ1bGxZZWFyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChleHAgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZXhwID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxZZWFyICsgJy0nICsgZnVsbE1vbnRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb25XaXRoVmFsdWUoZmlsbFNjcmlwdCwgZXhwLCBmaWxsRmllbGRzLmV4cCwgZmlsbGVkRmllbGRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWxsU2NyaXB0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmllbGRBdHRyc0NvbnRhaW4oZmllbGQ6IGFueSwgY29udGFpbnNWYWw6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghZmllbGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGRvZXNDb250YWluID0gZmFsc2U7XHJcbiAgICAgICAgQ2FyZEF0dHJpYnV0ZXNFeHRlbmRlZC5mb3JFYWNoKGF0dHIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZG9lc0NvbnRhaW4gfHwgIWZpZWxkLmhhc093blByb3BlcnR5KGF0dHIpIHx8ICFmaWVsZFthdHRyXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgdmFsID0gZmllbGRbYXR0cl07XHJcbiAgICAgICAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKC8gL2csICcnKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBkb2VzQ29udGFpbiA9IHZhbC5pbmRleE9mKGNvbnRhaW5zVmFsKSA+IC0xO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZG9lc0NvbnRhaW47XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUlkZW50aXR5RmlsbFNjcmlwdChmaWxsU2NyaXB0OiBBdXRvZmlsbFNjcmlwdCwgcGFnZURldGFpbHM6IGFueSxcclxuICAgICAgICBmaWxsZWRGaWVsZHM6IHsgW2lkOiBzdHJpbmddOiBBdXRvZmlsbEZpZWxkOyB9LCBvcHRpb25zOiBhbnkpOiBBdXRvZmlsbFNjcmlwdCB7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmNpcGhlci5pZGVudGl0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGZpbGxGaWVsZHM6IHsgW2lkOiBzdHJpbmddOiBBdXRvZmlsbEZpZWxkOyB9ID0ge307XHJcblxyXG4gICAgICAgIHBhZ2VEZXRhaWxzLmZpZWxkcy5mb3JFYWNoKChmOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9yQ3VzdG9tRmllbGRzT25seShmKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0V4Y2x1ZGVkVHlwZShmLnR5cGUsIEV4Y2x1ZGVkQXV0b2ZpbGxUeXBlcykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBJZGVudGl0eUF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHIgPSBJZGVudGl0eUF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWYuaGFzT3duUHJvcGVydHkoYXR0cikgfHwgIWZbYXR0cl0gfHwgIWYudmlld2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZWYgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGxcclxuICAgICAgICAgICAgICAgIC8vIHJlZiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvZnVuZGFtZW50YWxzL2Rlc2lnbi1hbmQtdXgvaW5wdXQvZm9ybXMvXHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGxGaWVsZHMubmFtZSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnbmFtZScsICdmdWxsLW5hbWUnLCAneW91ci1uYW1lJ10sIFsnZnVsbC1uYW1lJywgJ3lvdXItbmFtZSddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMubmFtZSA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLmZpcnN0TmFtZSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIEZpcnN0bmFtZUZpZWxkTmFtZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5maXJzdE5hbWUgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5taWRkbGVOYW1lICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXHJcbiAgICAgICAgICAgICAgICAgICAgWydtLW5hbWUnLCAnbWlkZGxlLW5hbWUnLCAnYWRkaXRpb25hbC1uYW1lJywgJ21pZGRsZS1pbml0aWFsJywgJ21pZGRsZS1uJywgJ21pZGRsZS1pJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5taWRkbGVOYW1lID0gZjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMubGFzdE5hbWUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcclxuICAgICAgICAgICAgICAgICAgICBMYXN0bmFtZUZpZWxkTmFtZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5sYXN0TmFtZSA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLnRpdGxlICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXHJcbiAgICAgICAgICAgICAgICAgICAgWydob25vcmlmaWMtcHJlZml4JywgJ3ByZWZpeCcsICd0aXRsZSddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMudGl0bGUgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5lbWFpbCAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnZS1tYWlsJywgJ2VtYWlsLWFkZHJlc3MnXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmVtYWlsID0gZjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMuYWRkcmVzcyAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnYWRkcmVzcycsICdzdHJlZXQtYWRkcmVzcycsICdhZGRyJywgJ3N0cmVldCcsICdtYWlsaW5nLWFkZHInLCAnYmlsbGluZy1hZGRyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ21haWwtYWRkcicsICdiaWxsLWFkZHInXSwgWydtYWlsaW5nLWFkZHInLCAnYmlsbGluZy1hZGRyJywgJ21haWwtYWRkcicsICdiaWxsLWFkZHInXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmFkZHJlc3MgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5hZGRyZXNzMSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnYWRkcmVzcy0xJywgJ2FkZHJlc3MtbGluZS0xJywgJ2FkZHItMScsICdzdHJlZXQtMSddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMuYWRkcmVzczEgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5hZGRyZXNzMiAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnYWRkcmVzcy0yJywgJ2FkZHJlc3MtbGluZS0yJywgJ2FkZHItMicsICdzdHJlZXQtMiddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMuYWRkcmVzczIgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5hZGRyZXNzMyAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnYWRkcmVzcy0zJywgJ2FkZHJlc3MtbGluZS0zJywgJ2FkZHItMycsICdzdHJlZXQtMyddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMuYWRkcmVzczMgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5wb3N0YWxDb2RlICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXHJcbiAgICAgICAgICAgICAgICAgICAgWydwb3N0YWwnLCAnemlwJywgJ3ppcDInLCAnemlwLWNvZGUnLCAncG9zdGFsLWNvZGUnLCAncG9zdC1jb2RlJywgJ2FkZHJlc3MtemlwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZHJlc3MtcG9zdGFsJywgJ2FkZHJlc3MtY29kZScsICdhZGRyZXNzLXBvc3RhbC1jb2RlJywgJ2FkZHJlc3MtemlwLWNvZGUnXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLnBvc3RhbENvZGUgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5jaXR5ICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXHJcbiAgICAgICAgICAgICAgICAgICAgWydjaXR5JywgJ3Rvd24nLCAnYWRkcmVzcy1sZXZlbC0yJywgJ2FkZHJlc3MtY2l0eScsICdhZGRyZXNzLXRvd24nXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmNpdHkgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5zdGF0ZSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RhdGUnLCAncHJvdmluY2UnLCAncHJvdmVuY2UnLCAnYWRkcmVzcy1sZXZlbC0xJywgJ2FkZHJlc3Mtc3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYWRkcmVzcy1wcm92aW5jZSddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMuc3RhdGUgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5jb3VudHJ5ICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXHJcbiAgICAgICAgICAgICAgICAgICAgWydjb3VudHJ5JywgJ2NvdW50cnktY29kZScsICdjb3VudHJ5LW5hbWUnLCAnYWRkcmVzcy1jb3VudHJ5JywgJ2FkZHJlc3MtY291bnRyeS1uYW1lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZHJlc3MtY291bnRyeS1jb2RlJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5jb3VudHJ5ID0gZjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMucGhvbmUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcclxuICAgICAgICAgICAgICAgICAgICBbJ3Bob25lJywgJ21vYmlsZScsICdtb2JpbGUtcGhvbmUnLCAndGVsJywgJ3RlbGVwaG9uZScsICdwaG9uZS1udW1iZXInXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLnBob25lID0gZjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMudXNlcm5hbWUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcclxuICAgICAgICAgICAgICAgICAgICBbJ3VzZXItbmFtZScsICd1c2VyLWlkJywgJ3NjcmVlbi1uYW1lJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy51c2VybmFtZSA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLmNvbXBhbnkgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcclxuICAgICAgICAgICAgICAgICAgICBbJ2NvbXBhbnknLCAnY29tcGFueS1uYW1lJywgJ29yZ2FuaXphdGlvbicsICdvcmdhbml6YXRpb24tbmFtZSddKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMuY29tcGFueSA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgaWRlbnRpdHkgPSBvcHRpb25zLmNpcGhlci5pZGVudGl0eTtcclxuICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ3RpdGxlJyk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdmaXJzdE5hbWUnKTtcclxuICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ21pZGRsZU5hbWUnKTtcclxuICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2xhc3ROYW1lJyk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdhZGRyZXNzMScpO1xyXG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBpZGVudGl0eSwgZmlsbEZpZWxkcywgZmlsbGVkRmllbGRzLCAnYWRkcmVzczInKTtcclxuICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2FkZHJlc3MzJyk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdjaXR5Jyk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdwb3N0YWxDb2RlJyk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdjb21wYW55Jyk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdlbWFpbCcpO1xyXG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBpZGVudGl0eSwgZmlsbEZpZWxkcywgZmlsbGVkRmllbGRzLCAncGhvbmUnKTtcclxuICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ3VzZXJuYW1lJyk7XHJcblxyXG4gICAgICAgIGxldCBmaWxsZWRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChmaWxsRmllbGRzLnN0YXRlICYmIGlkZW50aXR5LnN0YXRlICYmIGlkZW50aXR5LnN0YXRlLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdGVMb3dlciA9IGlkZW50aXR5LnN0YXRlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzb1N0YXRlID0gSXNvU3RhdGVzW3N0YXRlTG93ZXJdIHx8IElzb1Byb3ZpbmNlc1tzdGF0ZUxvd2VyXTtcclxuICAgICAgICAgICAgaWYgKGlzb1N0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxsZWRTdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb25XaXRoVmFsdWUoZmlsbFNjcmlwdCwgaXNvU3RhdGUsIGZpbGxGaWVsZHMuc3RhdGUsIGZpbGxlZEZpZWxkcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghZmlsbGVkU3RhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdzdGF0ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGZpbGxlZENvdW50cnkgPSBmYWxzZTtcclxuICAgICAgICBpZiAoZmlsbEZpZWxkcy5jb3VudHJ5ICYmIGlkZW50aXR5LmNvdW50cnkgJiYgaWRlbnRpdHkuY291bnRyeS5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50cnlMb3dlciA9IGlkZW50aXR5LmNvdW50cnkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgY29uc3QgaXNvQ291bnRyeSA9IElzb0NvdW50cmllc1tjb3VudHJ5TG93ZXJdO1xyXG4gICAgICAgICAgICBpZiAoaXNvQ291bnRyeSkge1xyXG4gICAgICAgICAgICAgICAgZmlsbGVkQ291bnRyeSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb25XaXRoVmFsdWUoZmlsbFNjcmlwdCwgaXNvQ291bnRyeSwgZmlsbEZpZWxkcy5jb3VudHJ5LCBmaWxsZWRGaWVsZHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWZpbGxlZENvdW50cnkpIHtcclxuICAgICAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdjb3VudHJ5Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmlsbEZpZWxkcy5uYW1lICYmIChpZGVudGl0eS5maXJzdE5hbWUgfHwgaWRlbnRpdHkubGFzdE5hbWUpKSB7XHJcbiAgICAgICAgICAgIGxldCBmdWxsTmFtZSA9ICcnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZShpZGVudGl0eS5maXJzdE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBmdWxsTmFtZSA9IGlkZW50aXR5LmZpcnN0TmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZShpZGVudGl0eS5taWRkbGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZ1bGxOYW1lICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxOYW1lICs9ICcgJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZ1bGxOYW1lICs9IGlkZW50aXR5Lm1pZGRsZU5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoaWRlbnRpdHkubGFzdE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnVsbE5hbWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVsbE5hbWUgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVsbE5hbWUgKz0gaWRlbnRpdHkubGFzdE5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbldpdGhWYWx1ZShmaWxsU2NyaXB0LCBmdWxsTmFtZSwgZmlsbEZpZWxkcy5uYW1lLCBmaWxsZWRGaWVsZHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZpbGxGaWVsZHMuYWRkcmVzcyAmJiB0aGlzLmhhc1ZhbHVlKGlkZW50aXR5LmFkZHJlc3MxKSkge1xyXG4gICAgICAgICAgICBsZXQgYWRkcmVzcyA9ICcnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZShpZGVudGl0eS5hZGRyZXNzMSkpIHtcclxuICAgICAgICAgICAgICAgIGFkZHJlc3MgPSBpZGVudGl0eS5hZGRyZXNzMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZShpZGVudGl0eS5hZGRyZXNzMikpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgKz0gJywgJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFkZHJlc3MgKz0gaWRlbnRpdHkuYWRkcmVzczI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoaWRlbnRpdHkuYWRkcmVzczMpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWRkcmVzcyAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzICs9ICcsICc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzICs9IGlkZW50aXR5LmFkZHJlc3MzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb25XaXRoVmFsdWUoZmlsbFNjcmlwdCwgYWRkcmVzcywgZmlsbEZpZWxkcy5hZGRyZXNzLCBmaWxsZWRGaWVsZHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbGxTY3JpcHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0V4Y2x1ZGVkVHlwZSh0eXBlOiBzdHJpbmcsIGV4Y2x1ZGVkVHlwZXM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4Y2x1ZGVkVHlwZXMuaW5kZXhPZih0eXBlKSA+IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNGaWVsZE1hdGNoKHZhbHVlOiBzdHJpbmcsIG9wdGlvbnM6IHN0cmluZ1tdLCBjb250YWluc09wdGlvbnM/OiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUudHJpbSgpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXpBLVowLTldKy9nLCAnJyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBvcHRpb24gPSBvcHRpb25zW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBjaGVja1ZhbHVlQ29udGFpbnMgPSBjb250YWluc09wdGlvbnMgPT0gbnVsbCB8fCBjb250YWluc09wdGlvbnMuaW5kZXhPZihvcHRpb24pID4gLTE7XHJcbiAgICAgICAgICAgIG9wdGlvbiA9IG9wdGlvbi50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0vZywgJycpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG9wdGlvbiB8fCAoY2hlY2tWYWx1ZUNvbnRhaW5zICYmIHZhbHVlLmluZGV4T2Yob3B0aW9uKSA+IC0xKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdDogQXV0b2ZpbGxTY3JpcHQsIGNpcGhlckRhdGE6IGFueSwgZmlsbEZpZWxkczogeyBbaWQ6IHN0cmluZ106IEF1dG9maWxsRmllbGQ7IH0sXHJcbiAgICAgICAgZmlsbGVkRmllbGRzOiB7IFtpZDogc3RyaW5nXTogQXV0b2ZpbGxGaWVsZDsgfSwgZGF0YVByb3A6IHN0cmluZywgZmllbGRQcm9wPzogc3RyaW5nKSB7XHJcbiAgICAgICAgZmllbGRQcm9wID0gZmllbGRQcm9wIHx8IGRhdGFQcm9wO1xyXG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbldpdGhWYWx1ZShmaWxsU2NyaXB0LCBjaXBoZXJEYXRhW2RhdGFQcm9wXSwgZmlsbEZpZWxkc1tmaWVsZFByb3BdLCBmaWxsZWRGaWVsZHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZVNjcmlwdEFjdGlvbldpdGhWYWx1ZShmaWxsU2NyaXB0OiBBdXRvZmlsbFNjcmlwdCwgZGF0YVZhbHVlOiBhbnksIGZpZWxkOiBBdXRvZmlsbEZpZWxkLFxyXG4gICAgICAgIGZpbGxlZEZpZWxkczogeyBbaWQ6IHN0cmluZ106IEF1dG9maWxsRmllbGQ7IH0pIHtcclxuXHJcbiAgICAgICAgbGV0IGRvRmlsbCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGRhdGFWYWx1ZSkgJiYgZmllbGQpIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdzZWxlY3Qtb25lJyAmJiBmaWVsZC5zZWxlY3RJbmZvICYmIGZpZWxkLnNlbGVjdEluZm8ub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZC5zZWxlY3RJbmZvLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBmaWVsZC5zZWxlY3RJbmZvLm9wdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvcHRpb24ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUob3B0aW9uW2pdKSAmJiBvcHRpb25bal0udG9Mb3dlckNhc2UoKSA9PT0gZGF0YVZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvRmlsbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmFsdWUgPSBvcHRpb25bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvRmlsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb0ZpbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZG9GaWxsKSB7XHJcbiAgICAgICAgICAgIGZpbGxlZEZpZWxkc1tmaWVsZC5vcGlkXSA9IGZpZWxkO1xyXG4gICAgICAgICAgICB0aGlzLmZpbGxCeU9waWQoZmlsbFNjcmlwdCwgZmllbGQsIGRhdGFWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbG9hZFBhc3N3b3JkRmllbGRzKHBhZ2VEZXRhaWxzOiBBdXRvZmlsbFBhZ2VEZXRhaWxzLCBjYW5CZUhpZGRlbjogYm9vbGVhbiwgY2FuQmVSZWFkT25seTogYm9vbGVhbixcclxuICAgICAgICBtdXN0QmVFbXB0eTogYm9vbGVhbiwgZmlsbE5ld1Bhc3N3b3JkOiBib29sZWFuKSB7XHJcbiAgICAgICAgY29uc3QgYXJyOiBBdXRvZmlsbEZpZWxkW10gPSBbXTtcclxuICAgICAgICBwYWdlRGV0YWlscy5maWVsZHMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9yQ3VzdG9tRmllbGRzT25seShmKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc1Bhc3N3b3JkID0gZi50eXBlID09PSAncGFzc3dvcmQnO1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZUlzTGlrZVBhc3N3b3JkID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlcyBhbGwgd2hpdGVzcGFjZSwgXyBhbmQgLSBjaGFyYWN0ZXJzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGVhbmVkVmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1tcXHNfXFwtXS9nLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNsZWFuZWRWYWx1ZS5pbmRleE9mKCdwYXNzd29yZCcpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZ25vcmVMaXN0ID0gWydvbmV0aW1lcGFzc3dvcmQnLCAnY2FwdGNoYScsICdmaW5kYW55dGhpbmcnLCAnZm9yZ290J107XHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlTGlzdC5zb21lKGkgPT4gY2xlYW5lZFZhbHVlLmluZGV4T2YoaSkgPiAtMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTGlrZVBhc3N3b3JkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGYudHlwZSAhPT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlSXNMaWtlUGFzc3dvcmQoZi5odG1sSUQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVJc0xpa2VQYXNzd29yZChmLmh0bWxOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlSXNMaWtlUGFzc3dvcmQoZi5wbGFjZWhvbGRlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKCFmLmRpc2FibGVkICYmIChjYW5CZVJlYWRPbmx5IHx8ICFmLnJlYWRvbmx5KSAmJiAoaXNQYXNzd29yZCB8fCBpc0xpa2VQYXNzd29yZCgpKVxyXG4gICAgICAgICAgICAgICAgJiYgKGNhbkJlSGlkZGVuIHx8IGYudmlld2FibGUpICYmICghbXVzdEJlRW1wdHkgfHwgZi52YWx1ZSA9PSBudWxsIHx8IGYudmFsdWUudHJpbSgpID09PSAnJylcclxuICAgICAgICAgICAgICAgICYmIChmaWxsTmV3UGFzc3dvcmQgfHwgZi5hdXRvQ29tcGxldGVUeXBlICE9PSAnbmV3LXBhc3N3b3JkJykpIHtcclxuICAgICAgICAgICAgICAgIGFyci5wdXNoKGYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZpbmRVc2VybmFtZUZpZWxkKHBhZ2VEZXRhaWxzOiBBdXRvZmlsbFBhZ2VEZXRhaWxzLCBwYXNzd29yZEZpZWxkOiBBdXRvZmlsbEZpZWxkLCBjYW5CZUhpZGRlbjogYm9vbGVhbixcclxuICAgICAgICBjYW5CZVJlYWRPbmx5OiBib29sZWFuLCB3aXRob3V0Rm9ybTogYm9vbGVhbikge1xyXG4gICAgICAgIGxldCB1c2VybmFtZUZpZWxkOiBBdXRvZmlsbEZpZWxkID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2VEZXRhaWxzLmZpZWxkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBmID0gcGFnZURldGFpbHMuZmllbGRzW2ldO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mb3JDdXN0b21GaWVsZHNPbmx5KGYpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGYuZWxlbWVudE51bWJlciA+PSBwYXNzd29yZEZpZWxkLmVsZW1lbnROdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWYuZGlzYWJsZWQgJiYgKGNhbkJlUmVhZE9ubHkgfHwgIWYucmVhZG9ubHkpICYmXHJcbiAgICAgICAgICAgICAgICAod2l0aG91dEZvcm0gfHwgZi5mb3JtID09PSBwYXNzd29yZEZpZWxkLmZvcm0pICYmIChjYW5CZUhpZGRlbiB8fCBmLnZpZXdhYmxlKSAmJlxyXG4gICAgICAgICAgICAgICAgKGYudHlwZSA9PT0gJ3RleHQnIHx8IGYudHlwZSA9PT0gJ2VtYWlsJyB8fCBmLnR5cGUgPT09ICd0ZWwnKSkge1xyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWVGaWVsZCA9IGY7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmluZE1hdGNoaW5nRmllbGRJbmRleChmLCBVc2VybmFtZUZpZWxkTmFtZXMpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBhbiBleGFjdCBtYXRjaC4gTm8gbmVlZCB0byBrZWVwIGxvb2tpbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB1c2VybmFtZUZpZWxkO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmluZE1hdGNoaW5nRmllbGRJbmRleChmaWVsZDogQXV0b2ZpbGxGaWVsZCwgbmFtZXM6IHN0cmluZ1tdKTogbnVtYmVyIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lc1tpXS5pbmRleE9mKCc9JykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzUHJlZml4TWF0Y2goZmllbGQsICdodG1sSUQnLCBuYW1lc1tpXSwgJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkUHJvcGVydHlJc1ByZWZpeE1hdGNoKGZpZWxkLCAnaHRtbE5hbWUnLCBuYW1lc1tpXSwgJ25hbWUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzUHJlZml4TWF0Y2goZmllbGQsICdsYWJlbC10YWcnLCBuYW1lc1tpXSwgJ2xhYmVsJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkUHJvcGVydHlJc1ByZWZpeE1hdGNoKGZpZWxkLCAnbGFiZWwtYXJpYScsIG5hbWVzW2ldLCAnbGFiZWwnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzUHJlZml4TWF0Y2goZmllbGQsICdwbGFjZWhvbGRlcicsIG5hbWVzW2ldLCAncGxhY2Vob2xkZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZFByb3BlcnR5SXNNYXRjaChmaWVsZCwgJ2h0bWxJRCcsIG5hbWVzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzTWF0Y2goZmllbGQsICdodG1sTmFtZScsIG5hbWVzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzTWF0Y2goZmllbGQsICdsYWJlbC10YWcnLCBuYW1lc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkUHJvcGVydHlJc01hdGNoKGZpZWxkLCAnbGFiZWwtYXJpYScsIG5hbWVzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzTWF0Y2goZmllbGQsICdwbGFjZWhvbGRlcicsIG5hbWVzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZpZWxkUHJvcGVydHlJc1ByZWZpeE1hdGNoKGZpZWxkOiBhbnksIHByb3BlcnR5OiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcHJlZml4OiBzdHJpbmcsXHJcbiAgICAgICAgc2VwYXJhdG9yID0gJz0nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKG5hbWUuaW5kZXhPZihwcmVmaXggKyBzZXBhcmF0b3IpID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcEluZGV4ID0gbmFtZS5pbmRleE9mKHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IG5hbWUuc3Vic3RyaW5nKHNlcEluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWwgIT0gbnVsbCAmJiB0aGlzLmZpZWxkUHJvcGVydHlJc01hdGNoKGZpZWxkLCBwcm9wZXJ0eSwgdmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmllbGRQcm9wZXJ0eUlzTWF0Y2goZmllbGQ6IGFueSwgcHJvcGVydHk6IHN0cmluZywgbmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGZpZWxkVmFsID0gZmllbGRbcHJvcGVydHldIGFzIHN0cmluZztcclxuICAgICAgICBpZiAoIXRoaXMuaGFzVmFsdWUoZmllbGRWYWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpZWxkVmFsID0gZmllbGRWYWwudHJpbSgpLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCAnJyk7XHJcbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgncmVnZXg9JykpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4UGFydHMgPSBuYW1lLnNwbGl0KCc9JywgMik7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhQYXJ0cy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhQYXJ0c1sxXSwgJ2knKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZXgudGVzdChmaWVsZFZhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCdjc3Y9JykpIHtcclxuICAgICAgICAgICAgY29uc3QgY3N2UGFydHMgPSBuYW1lLnNwbGl0KCc9JywgMik7XHJcbiAgICAgICAgICAgIGlmIChjc3ZQYXJ0cy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNzdlZhbHMgPSBjc3ZQYXJ0c1sxXS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjc3ZWYWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gY3N2VmFsc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsICE9IG51bGwgJiYgdmFsLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBmaWVsZFZhbC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsLnRvTG93ZXJDYXNlKCkgPT09IG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaWVsZElzRnV6enlNYXRjaChmaWVsZDogQXV0b2ZpbGxGaWVsZCwgbmFtZXM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoZmllbGQuaHRtbElEKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkLmh0bWxJRCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGZpZWxkLmh0bWxOYW1lKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkLmh0bWxOYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoZmllbGRbJ2xhYmVsLXRhZyddKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkWydsYWJlbC10YWcnXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGZpZWxkLnBsYWNlaG9sZGVyKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkLnBsYWNlaG9sZGVyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoZmllbGRbJ2xhYmVsLWxlZnQnXSkgJiYgdGhpcy5mdXp6eU1hdGNoKG5hbWVzLCBmaWVsZFsnbGFiZWwtbGVmdCddKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoZmllbGRbJ2xhYmVsLXRvcCddKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkWydsYWJlbC10b3AnXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGZpZWxkWydsYWJlbC1hcmlhJ10pICYmIHRoaXMuZnV6enlNYXRjaChuYW1lcywgZmllbGRbJ2xhYmVsLWFyaWEnXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmdXp6eU1hdGNoKG9wdGlvbnM6IHN0cmluZ1tdLCB2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCB8fCBvcHRpb25zLmxlbmd0aCA9PT0gMCB8fCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCAnJykudHJpbSgpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuaW5kZXhPZihvcHRpb25zW2ldKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFzVmFsdWUoc3RyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gc3RyICYmIHN0ciAhPT0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRGaWxsU2NyaXB0Rm9yRm9jdXMoZmlsbGVkRmllbGRzOiB7IFtpZDogc3RyaW5nXTogQXV0b2ZpbGxGaWVsZDsgfSxcclxuICAgICAgICBmaWxsU2NyaXB0OiBBdXRvZmlsbFNjcmlwdCk6IEF1dG9maWxsU2NyaXB0IHtcclxuICAgICAgICBsZXQgbGFzdEZpZWxkOiBBdXRvZmlsbEZpZWxkID0gbnVsbDtcclxuICAgICAgICBsZXQgbGFzdFBhc3N3b3JkRmllbGQ6IEF1dG9maWxsRmllbGQgPSBudWxsO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG9waWQgaW4gZmlsbGVkRmllbGRzKSB7XHJcbiAgICAgICAgICAgIGlmIChmaWxsZWRGaWVsZHMuaGFzT3duUHJvcGVydHkob3BpZCkgJiYgZmlsbGVkRmllbGRzW29waWRdLnZpZXdhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0RmllbGQgPSBmaWxsZWRGaWVsZHNbb3BpZF07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGxlZEZpZWxkc1tvcGlkXS50eXBlID09PSAncGFzc3dvcmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFBhc3N3b3JkRmllbGQgPSBmaWxsZWRGaWVsZHNbb3BpZF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFByaW9yaXRpemUgcGFzc3dvcmQgZmllbGQgb3ZlciBvdGhlcnMuXHJcbiAgICAgICAgaWYgKGxhc3RQYXNzd29yZEZpZWxkKSB7XHJcbiAgICAgICAgICAgIGZpbGxTY3JpcHQuc2NyaXB0LnB1c2goWydmb2N1c19ieV9vcGlkJywgbGFzdFBhc3N3b3JkRmllbGQub3BpZF0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGFzdEZpZWxkKSB7XHJcbiAgICAgICAgICAgIGZpbGxTY3JpcHQuc2NyaXB0LnB1c2goWydmb2N1c19ieV9vcGlkJywgbGFzdEZpZWxkLm9waWRdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWxsU2NyaXB0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmlsbEJ5T3BpZChmaWxsU2NyaXB0OiBBdXRvZmlsbFNjcmlwdCwgZmllbGQ6IEF1dG9maWxsRmllbGQsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAoZmllbGQubWF4TGVuZ3RoICYmIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IGZpZWxkLm1heExlbmd0aCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigwLCB2YWx1ZS5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmllbGQudGFnTmFtZSAhPT0gJ3NwYW4nKSB7XHJcbiAgICAgICAgICAgIGZpbGxTY3JpcHQuc2NyaXB0LnB1c2goWydjbGlja19vbl9vcGlkJywgZmllbGQub3BpZF0pO1xyXG4gICAgICAgICAgICBmaWxsU2NyaXB0LnNjcmlwdC5wdXNoKFsnZm9jdXNfYnlfb3BpZCcsIGZpZWxkLm9waWRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmlsbFNjcmlwdC5zY3JpcHQucHVzaChbJ2ZpbGxfYnlfb3BpZCcsIGZpZWxkLm9waWQsIHZhbHVlXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmb3JDdXN0b21GaWVsZHNPbmx5KGZpZWxkOiBBdXRvZmlsbEZpZWxkKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkLnRhZ05hbWUgPT09ICdzcGFuJztcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRW5jQXJyYXlCdWZmZXIge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHsgfVxyXG59XHJcbiIsImltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBFbmNyeXB0ZWRPYmplY3Qge1xyXG4gICAgaXY6IEFycmF5QnVmZmVyO1xyXG4gICAgZGF0YTogQXJyYXlCdWZmZXI7XHJcbiAgICBtYWM6IEFycmF5QnVmZmVyO1xyXG4gICAga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgYmlnSW50IGZyb20gJ2JpZy1pbnRlZ2VyJztcclxuXHJcbmltcG9ydCB7IEVuY3J5cHRpb25UeXBlIH0gZnJvbSAnLi4vZW51bXMvZW5jcnlwdGlvblR5cGUnO1xyXG5pbXBvcnQgeyBIYXNoUHVycG9zZSB9IGZyb20gJy4uL2VudW1zL2hhc2hQdXJwb3NlJztcclxuaW1wb3J0IHsgS2RmVHlwZSB9IGZyb20gJy4uL2VudW1zL2tkZlR5cGUnO1xyXG5cclxuaW1wb3J0IHsgRW5jQXJyYXlCdWZmZXIgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2VuY0FycmF5QnVmZmVyJztcclxuaW1wb3J0IHsgRW5jcnlwdGVkT2JqZWN0IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9lbmNyeXB0ZWRPYmplY3QnO1xyXG5pbXBvcnQgeyBFbmNTdHJpbmcgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2VuY1N0cmluZyc7XHJcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc3ltbWV0cmljQ3J5cHRvS2V5JztcclxuaW1wb3J0IHsgUHJvZmlsZU9yZ2FuaXphdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSc7XHJcblxyXG5pbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIGFzIENyeXB0b1NlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XHJcbmltcG9ydCB7IENyeXB0b0Z1bmN0aW9uU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9sb2cuc2VydmljZSc7XHJcbmltcG9ydCB7IFBsYXRmb3JtVXRpbHNTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3BsYXRmb3JtVXRpbHMuc2VydmljZSc7XHJcbmltcG9ydCB7XHJcbiAgICBLZXlTdWZmaXhPcHRpb25zLFxyXG4gICAgU3RvcmFnZVNlcnZpY2UsXHJcbn0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnLi9jb25zdGFudHMuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBzZXF1ZW50aWFsaXplIH0gZnJvbSAnLi4vbWlzYy9zZXF1ZW50aWFsaXplJztcclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcclxuaW1wb3J0IHsgRUVGTG9uZ1dvcmRMaXN0IH0gZnJvbSAnLi4vbWlzYy93b3JkbGlzdCc7XHJcbmltcG9ydCB7IFByb2ZpbGVQcm92aWRlck9yZ2FuaXphdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb2ZpbGVQcm92aWRlck9yZ2FuaXphdGlvblJlc3BvbnNlJztcclxuaW1wb3J0IHsgUHJvZmlsZVByb3ZpZGVyUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvcHJvZmlsZVByb3ZpZGVyUmVzcG9uc2UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEtleXMgPSB7XHJcbiAgICBrZXk6ICdrZXknLCAvLyBNYXN0ZXIgS2V5XHJcbiAgICBlbmNPcmdLZXlzOiAnZW5jT3JnS2V5cycsXHJcbiAgICBlbmNQcm92aWRlcktleXM6ICdlbmNQcm92aWRlcktleXMnLFxyXG4gICAgZW5jUHJpdmF0ZUtleTogJ2VuY1ByaXZhdGVLZXknLFxyXG4gICAgZW5jS2V5OiAnZW5jS2V5JywgLy8gR2VuZXJhdGVkIFN5bW1ldHJpYyBLZXlcclxuICAgIGtleUhhc2g6ICdrZXlIYXNoJyxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDcnlwdG9TZXJ2aWNlIGltcGxlbWVudHMgQ3J5cHRvU2VydmljZUFic3RyYWN0aW9uIHtcclxuICAgIHByaXZhdGUga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXk7XHJcbiAgICBwcml2YXRlIGVuY0tleTogU3ltbWV0cmljQ3J5cHRvS2V5O1xyXG4gICAgcHJpdmF0ZSBsZWdhY3lFdG1LZXk6IFN5bW1ldHJpY0NyeXB0b0tleTtcclxuICAgIHByaXZhdGUga2V5SGFzaDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBwdWJsaWNLZXk6IEFycmF5QnVmZmVyO1xyXG4gICAgcHJpdmF0ZSBwcml2YXRlS2V5OiBBcnJheUJ1ZmZlcjtcclxuICAgIHByaXZhdGUgb3JnS2V5czogTWFwPHN0cmluZywgU3ltbWV0cmljQ3J5cHRvS2V5PjtcclxuICAgIHByaXZhdGUgcHJvdmlkZXJLZXlzOiBNYXA8c3RyaW5nLCBTeW1tZXRyaWNDcnlwdG9LZXk+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLCBwcm90ZWN0ZWQgc2VjdXJlU3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY3J5cHRvRnVuY3Rpb25TZXJ2aWNlOiBDcnlwdG9GdW5jdGlvblNlcnZpY2UsIHByb3RlY3RlZCBwbGF0Zm9ybVV0aWxTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSxcclxuICAgICAgICBwcm90ZWN0ZWQgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNldEtleShrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmVLZXkoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRLZXlIYXNoKGtleUhhc2g6IHN0cmluZyk6IFByb21pc2U8e30+IHtcclxuICAgICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5rZXlIYXNoLCBrZXlIYXNoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZXRFbmNLZXkoZW5jS2V5OiBzdHJpbmcpOiBQcm9taXNlPHt9PiB7XHJcbiAgICAgICAgaWYgKGVuY0tleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmVuY0tleSwgZW5jS2V5KTtcclxuICAgICAgICB0aGlzLmVuY0tleSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0RW5jUHJpdmF0ZUtleShlbmNQcml2YXRlS2V5OiBzdHJpbmcpOiBQcm9taXNlPHt9PiB7XHJcbiAgICAgICAgaWYgKGVuY1ByaXZhdGVLZXkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5lbmNQcml2YXRlS2V5LCBlbmNQcml2YXRlS2V5KTtcclxuICAgICAgICB0aGlzLnByaXZhdGVLZXkgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNldE9yZ0tleXMob3JnczogUHJvZmlsZU9yZ2FuaXphdGlvblJlc3BvbnNlW10sIHByb3ZpZGVyT3JnczogUHJvZmlsZVByb3ZpZGVyT3JnYW5pemF0aW9uUmVzcG9uc2VbXSk6IFByb21pc2U8e30+IHtcclxuICAgICAgICBjb25zdCBvcmdLZXlzOiBhbnkgPSB7fTtcclxuICAgICAgICBvcmdzLmZvckVhY2gob3JnID0+IHtcclxuICAgICAgICAgICAgb3JnS2V5c1tvcmcuaWRdID0gb3JnLmtleTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBwcm92aWRlck9yZyBvZiBwcm92aWRlck9yZ3MpIHtcclxuICAgICAgICAgICAgLy8gQ29udmVydCBwcm92aWRlciBlbmNyeXB0ZWQga2V5cyB0byB1c2VyIGVuY3J5cHRlZC5cclxuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJLZXkgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyS2V5KHByb3ZpZGVyT3JnLnByb3ZpZGVySWQpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWNWYWx1ZSA9IGF3YWl0IHRoaXMuZGVjcnlwdFRvQnl0ZXMobmV3IEVuY1N0cmluZyhwcm92aWRlck9yZy5rZXkpLCBwcm92aWRlcktleSk7XHJcbiAgICAgICAgICAgIG9yZ0tleXNbcHJvdmlkZXJPcmcuaWRdID0gYXdhaXQgKGF3YWl0IHRoaXMucnNhRW5jcnlwdChkZWNWYWx1ZSkpLmVuY3J5cHRlZFN0cmluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub3JnS2V5cyA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmVuY09yZ0tleXMsIG9yZ0tleXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFByb3ZpZGVyS2V5cyhwcm92aWRlcnM6IFByb2ZpbGVQcm92aWRlclJlc3BvbnNlW10pOiBQcm9taXNlPHt9PiB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXJLZXlzOiBhbnkgPSB7fTtcclxuICAgICAgICBwcm92aWRlcnMuZm9yRWFjaChwcm92aWRlciA9PiB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyS2V5c1twcm92aWRlci5pZF0gPSBwcm92aWRlci5rZXk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucHJvdmlkZXJLZXlzID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuZW5jUHJvdmlkZXJLZXlzLCBwcm92aWRlcktleXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEtleShrZXlTdWZmaXg/OiBLZXlTdWZmaXhPcHRpb25zKTogUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcclxuICAgICAgICBpZiAodGhpcy5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5rZXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBrZXlTdWZmaXggfHw9ICdhdXRvJztcclxuICAgICAgICBjb25zdCBzeW1tZXRyaWNLZXkgPSBhd2FpdCB0aGlzLmdldEtleUZyb21TdG9yYWdlKGtleVN1ZmZpeCk7XHJcblxyXG4gICAgICAgIGlmIChzeW1tZXRyaWNLZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEtleShzeW1tZXRyaWNLZXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN5bW1ldHJpY0tleTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRLZXlGcm9tU3RvcmFnZShrZXlTdWZmaXg6IEtleVN1ZmZpeE9wdGlvbnMpOiBQcm9taXNlPFN5bW1ldHJpY0NyeXB0b0tleT4ge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHRoaXMucmV0cmlldmVLZXlGcm9tU3RvcmFnZShrZXlTdWZmaXgpO1xyXG4gICAgICAgIGlmIChrZXkgIT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3ltbWV0cmljS2V5ID0gbmV3IFN5bW1ldHJpY0NyeXB0b0tleShVdGlscy5mcm9tQjY0VG9BcnJheShrZXkpLmJ1ZmZlcik7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWF3YWl0IHRoaXMudmFsaWRhdGVLZXkoc3ltbWV0cmljS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLndhcm5pbmcoJ1dyb25nIGtleSwgdGhyb3dpbmcgYXdheSBzdG9yZWQga2V5Jyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3VyZVN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmtleSwgeyBrZXlTdWZmaXg6IGtleVN1ZmZpeCB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3ltbWV0cmljS2V5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRLZXlIYXNoKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgaWYgKHRoaXMua2V5SGFzaCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleUhhc2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBrZXlIYXNoID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLmtleUhhc2gpO1xyXG4gICAgICAgIGlmIChrZXlIYXNoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBrZXlIYXNoID09IG51bGwgPyBudWxsIDogdGhpcy5rZXlIYXNoO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNvbXBhcmVBbmRVcGRhdGVLZXlIYXNoKG1hc3RlclBhc3N3b3JkOiBzdHJpbmcsIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgY29uc3Qgc3RvcmVkS2V5SGFzaCA9IGF3YWl0IHRoaXMuZ2V0S2V5SGFzaCgpO1xyXG4gICAgICAgIGlmIChtYXN0ZXJQYXNzd29yZCAhPSBudWxsICYmIHN0b3JlZEtleUhhc2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhbEtleUhhc2ggPSBhd2FpdCB0aGlzLmhhc2hQYXNzd29yZChtYXN0ZXJQYXNzd29yZCwga2V5LCBIYXNoUHVycG9zZS5Mb2NhbEF1dGhvcml6YXRpb24pO1xyXG4gICAgICAgICAgICBpZiAobG9jYWxLZXlIYXNoICE9IG51bGwgJiYgc3RvcmVkS2V5SGFzaCA9PT0gbG9jYWxLZXlIYXNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHNlcnZlcktleUhhc2ggY2hlY2sgaW4gMS0yIHJlbGVhc2VzIGFmdGVyIGV2ZXJ5b25lJ3Mga2V5SGFzaCBoYXMgYmVlbiB1cGRhdGVkXHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlcktleUhhc2ggPSBhd2FpdCB0aGlzLmhhc2hQYXNzd29yZChtYXN0ZXJQYXNzd29yZCwga2V5LCBIYXNoUHVycG9zZS5TZXJ2ZXJBdXRob3JpemF0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHNlcnZlcktleUhhc2ggIT0gbnVsbCAmJiBzdG9yZWRLZXlIYXNoID09PSBzZXJ2ZXJLZXlIYXNoKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldEtleUhhc2gobG9jYWxLZXlIYXNoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgQHNlcXVlbnRpYWxpemUoKCkgPT4gJ2dldEVuY0tleScpXHJcbiAgICBhc3luYyBnZXRFbmNLZXkoa2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkgPSBudWxsKTogUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcclxuICAgICAgICBpZiAodGhpcy5lbmNLZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNLZXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmNLZXkgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KEtleXMuZW5jS2V5KTtcclxuICAgICAgICBpZiAoZW5jS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAga2V5ID0gYXdhaXQgdGhpcy5nZXRLZXkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGRlY0VuY0tleTogQXJyYXlCdWZmZXI7XHJcbiAgICAgICAgY29uc3QgZW5jS2V5Q2lwaGVyID0gbmV3IEVuY1N0cmluZyhlbmNLZXkpO1xyXG4gICAgICAgIGlmIChlbmNLZXlDaXBoZXIuZW5jcnlwdGlvblR5cGUgPT09IEVuY3J5cHRpb25UeXBlLkFlc0NiYzI1Nl9CNjQpIHtcclxuICAgICAgICAgICAgZGVjRW5jS2V5ID0gYXdhaXQgdGhpcy5kZWNyeXB0VG9CeXRlcyhlbmNLZXlDaXBoZXIsIGtleSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbmNLZXlDaXBoZXIuZW5jcnlwdGlvblR5cGUgPT09IEVuY3J5cHRpb25UeXBlLkFlc0NiYzI1Nl9IbWFjU2hhMjU2X0I2NCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdLZXkgPSBhd2FpdCB0aGlzLnN0cmV0Y2hLZXkoa2V5KTtcclxuICAgICAgICAgICAgZGVjRW5jS2V5ID0gYXdhaXQgdGhpcy5kZWNyeXB0VG9CeXRlcyhlbmNLZXlDaXBoZXIsIG5ld0tleSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBlbmNLZXkgdHlwZS4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZWNFbmNLZXkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbmNLZXkgPSBuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KGRlY0VuY0tleSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jS2V5O1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFB1YmxpY0tleSgpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHVibGljS2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVibGljS2V5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IGF3YWl0IHRoaXMuZ2V0UHJpdmF0ZUtleSgpO1xyXG4gICAgICAgIGlmIChwcml2YXRlS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnB1YmxpY0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJzYUV4dHJhY3RQdWJsaWNLZXkocHJpdmF0ZUtleSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHVibGljS2V5O1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFByaXZhdGVLZXkoKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByaXZhdGVLZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlS2V5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZW5jUHJpdmF0ZUtleSA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oS2V5cy5lbmNQcml2YXRlS2V5KTtcclxuICAgICAgICBpZiAoZW5jUHJpdmF0ZUtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcml2YXRlS2V5ID0gYXdhaXQgdGhpcy5kZWNyeXB0VG9CeXRlcyhuZXcgRW5jU3RyaW5nKGVuY1ByaXZhdGVLZXkpLCBudWxsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlS2V5O1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEZpbmdlcnByaW50KHVzZXJJZDogc3RyaW5nLCBwdWJsaWNLZXk/OiBBcnJheUJ1ZmZlcik6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgICAgICBpZiAocHVibGljS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgcHVibGljS2V5ID0gYXdhaXQgdGhpcy5nZXRQdWJsaWNLZXkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHB1YmxpY0tleSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHB1YmxpYyBrZXkgYXZhaWxhYmxlLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBrZXlGaW5nZXJwcmludCA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmhhc2gocHVibGljS2V5LCAnc2hhMjU2Jyk7XHJcbiAgICAgICAgY29uc3QgdXNlckZpbmdlcnByaW50ID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuaGtkZkV4cGFuZChrZXlGaW5nZXJwcmludCwgdXNlcklkLCAzMiwgJ3NoYTI1NicpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hQaHJhc2UodXNlckZpbmdlcnByaW50KTtcclxuICAgIH1cclxuXHJcbiAgICBAc2VxdWVudGlhbGl6ZSgoKSA9PiAnZ2V0T3JnS2V5cycpXHJcbiAgICBhc3luYyBnZXRPcmdLZXlzKCk6IFByb21pc2U8TWFwPHN0cmluZywgU3ltbWV0cmljQ3J5cHRvS2V5Pj4ge1xyXG4gICAgICAgIGlmICh0aGlzLm9yZ0tleXMgIT0gbnVsbCAmJiB0aGlzLm9yZ0tleXMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3JnS2V5cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVuY09yZ0tleXMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxhbnk+KEtleXMuZW5jT3JnS2V5cyk7XHJcbiAgICAgICAgaWYgKGVuY09yZ0tleXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG9yZ0tleXM6IE1hcDxzdHJpbmcsIFN5bW1ldHJpY0NyeXB0b0tleT4gPSBuZXcgTWFwPHN0cmluZywgU3ltbWV0cmljQ3J5cHRvS2V5PigpO1xyXG4gICAgICAgIGxldCBzZXRLZXkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBvcmdJZCBpbiBlbmNPcmdLZXlzKSB7XHJcbiAgICAgICAgICAgIGlmICghZW5jT3JnS2V5cy5oYXNPd25Qcm9wZXJ0eShvcmdJZCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkZWNWYWx1ZSA9IGF3YWl0IHRoaXMucnNhRGVjcnlwdChlbmNPcmdLZXlzW29yZ0lkXSk7XHJcbiAgICAgICAgICAgIG9yZ0tleXMuc2V0KG9yZ0lkLCBuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KGRlY1ZhbHVlKSk7XHJcbiAgICAgICAgICAgIHNldEtleSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2V0S2V5KSB7XHJcbiAgICAgICAgICAgIHRoaXMub3JnS2V5cyA9IG9yZ0tleXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5vcmdLZXlzO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE9yZ0tleShvcmdJZDogc3RyaW5nKTogUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcclxuICAgICAgICBpZiAob3JnSWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG9yZ0tleXMgPSBhd2FpdCB0aGlzLmdldE9yZ0tleXMoKTtcclxuICAgICAgICBpZiAob3JnS2V5cyA9PSBudWxsIHx8ICFvcmdLZXlzLmhhcyhvcmdJZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3JnS2V5cy5nZXQob3JnSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIEBzZXF1ZW50aWFsaXplKCgpID0+ICdnZXRQcm92aWRlcktleXMnKVxyXG4gICAgYXN5bmMgZ2V0UHJvdmlkZXJLZXlzKCk6IFByb21pc2U8TWFwPHN0cmluZywgU3ltbWV0cmljQ3J5cHRvS2V5Pj4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVyS2V5cyAhPSBudWxsICYmIHRoaXMucHJvdmlkZXJLZXlzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyS2V5cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVuY1Byb3ZpZGVyS2V5cyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGFueT4oS2V5cy5lbmNQcm92aWRlcktleXMpO1xyXG4gICAgICAgIGlmIChlbmNQcm92aWRlcktleXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyS2V5czogTWFwPHN0cmluZywgU3ltbWV0cmljQ3J5cHRvS2V5PiA9IG5ldyBNYXA8c3RyaW5nLCBTeW1tZXRyaWNDcnlwdG9LZXk+KCk7XHJcbiAgICAgICAgbGV0IHNldEtleSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG9yZ0lkIGluIGVuY1Byb3ZpZGVyS2V5cykge1xyXG4gICAgICAgICAgICBpZiAoIWVuY1Byb3ZpZGVyS2V5cy5oYXNPd25Qcm9wZXJ0eShvcmdJZCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkZWNWYWx1ZSA9IGF3YWl0IHRoaXMucnNhRGVjcnlwdChlbmNQcm92aWRlcktleXNbb3JnSWRdKTtcclxuICAgICAgICAgICAgcHJvdmlkZXJLZXlzLnNldChvcmdJZCwgbmV3IFN5bW1ldHJpY0NyeXB0b0tleShkZWNWYWx1ZSkpO1xyXG4gICAgICAgICAgICBzZXRLZXkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNldEtleSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyS2V5cyA9IHByb3ZpZGVyS2V5cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyS2V5cztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRQcm92aWRlcktleShwcm92aWRlcklkOiBzdHJpbmcpOiBQcm9taXNlPFN5bW1ldHJpY0NyeXB0b0tleT4ge1xyXG4gICAgICAgIGlmIChwcm92aWRlcklkID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwcm92aWRlcktleXMgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyS2V5cygpO1xyXG4gICAgICAgIGlmIChwcm92aWRlcktleXMgPT0gbnVsbCB8fCAhcHJvdmlkZXJLZXlzLmhhcyhwcm92aWRlcklkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwcm92aWRlcktleXMuZ2V0KHByb3ZpZGVySWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGhhc0tleSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oYXNLZXlJbk1lbW9yeSgpIHx8IGF3YWl0IHRoaXMuaGFzS2V5U3RvcmVkKCdhdXRvJykgfHwgYXdhaXQgdGhpcy5oYXNLZXlTdG9yZWQoJ2Jpb21ldHJpYycpO1xyXG4gICAgfVxyXG5cclxuICAgIGhhc0tleUluTWVtb3J5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmtleSAhPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGhhc0tleVN0b3JlZChrZXlTdWZmaXg6IEtleVN1ZmZpeE9wdGlvbnMpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZWN1cmVTdG9yYWdlU2VydmljZS5oYXMoS2V5cy5rZXksIHsga2V5U3VmZml4OiBrZXlTdWZmaXggfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaGFzRW5jS2V5KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIGNvbnN0IGVuY0tleSA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oS2V5cy5lbmNLZXkpO1xyXG4gICAgICAgIHJldHVybiBlbmNLZXkgIT0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhcktleShjbGVhclNlY3JldFN0b3JhZ2U6IGJvb2xlYW4gPSB0cnVlKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICB0aGlzLmtleSA9IHRoaXMubGVnYWN5RXRtS2V5ID0gbnVsbDtcclxuICAgICAgICBpZiAoY2xlYXJTZWNyZXRTdG9yYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTdG9yZWRLZXkoJ2F1dG8nKTtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclN0b3JlZEtleSgnYmlvbWV0cmljJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNsZWFyU3RvcmVkS2V5KGtleVN1ZmZpeDogS2V5U3VmZml4T3B0aW9ucykge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2VjdXJlU3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMua2V5LCB7IGtleVN1ZmZpeDoga2V5U3VmZml4IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyS2V5SGFzaCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRoaXMua2V5SGFzaCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMua2V5SGFzaCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJFbmNLZXkobWVtb3J5T25seT86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRoaXMuZW5jS2V5ID0gbnVsbDtcclxuICAgICAgICBpZiAobWVtb3J5T25seSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmVuY0tleSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJLZXlQYWlyKG1lbW9yeU9ubHk/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICB0aGlzLnByaXZhdGVLZXkgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHVibGljS2V5ID0gbnVsbDtcclxuICAgICAgICBpZiAobWVtb3J5T25seSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmVuY1ByaXZhdGVLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyT3JnS2V5cyhtZW1vcnlPbmx5PzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgdGhpcy5vcmdLZXlzID0gbnVsbDtcclxuICAgICAgICBpZiAobWVtb3J5T25seSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmVuY09yZ0tleXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyUHJvdmlkZXJLZXlzKG1lbW9yeU9ubHk/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyS2V5cyA9IG51bGw7XHJcbiAgICAgICAgaWYgKG1lbW9yeU9ubHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5lbmNPcmdLZXlzKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclBpblByb3RlY3RlZEtleSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShDb25zdGFudHNTZXJ2aWNlLnBpblByb3RlY3RlZEtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2xlYXJLZXlzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jbGVhcktleSgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY2xlYXJLZXlIYXNoKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jbGVhck9yZ0tleXMoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNsZWFyUHJvdmlkZXJLZXlzKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jbGVhckVuY0tleSgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY2xlYXJLZXlQYWlyKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jbGVhclBpblByb3RlY3RlZEtleSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHRvZ2dsZUtleSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHRoaXMuZ2V0S2V5KCk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0S2V5KGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbWFrZUtleShwYXNzd29yZDogc3RyaW5nLCBzYWx0OiBzdHJpbmcsIGtkZjogS2RmVHlwZSwga2RmSXRlcmF0aW9uczogbnVtYmVyKTpcclxuICAgICAgICBQcm9taXNlPFN5bW1ldHJpY0NyeXB0b0tleT4ge1xyXG4gICAgICAgIGxldCBrZXk6IEFycmF5QnVmZmVyID0gbnVsbDtcclxuICAgICAgICBpZiAoa2RmID09IG51bGwgfHwga2RmID09PSBLZGZUeXBlLlBCS0RGMl9TSEEyNTYpIHtcclxuICAgICAgICAgICAgaWYgKGtkZkl0ZXJhdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAga2RmSXRlcmF0aW9ucyA9IDUwMDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2RmSXRlcmF0aW9ucyA8IDUwMDApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUEJLREYyIGl0ZXJhdGlvbiBtaW5pbXVtIGlzIDUwMDAuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAga2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UucGJrZGYyKHBhc3N3b3JkLCBzYWx0LCAnc2hhMjU2Jywga2RmSXRlcmF0aW9ucyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIEtkZi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBtYWtlS2V5RnJvbVBpbihwaW46IHN0cmluZywgc2FsdDogc3RyaW5nLCBrZGY6IEtkZlR5cGUsIGtkZkl0ZXJhdGlvbnM6IG51bWJlcixcclxuICAgICAgICBwcm90ZWN0ZWRLZXlDczogRW5jU3RyaW5nID0gbnVsbCk6XHJcbiAgICAgICAgUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcclxuICAgICAgICBpZiAocHJvdGVjdGVkS2V5Q3MgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBwaW5Qcm90ZWN0ZWRLZXkgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KENvbnN0YW50c1NlcnZpY2UucGluUHJvdGVjdGVkS2V5KTtcclxuICAgICAgICAgICAgaWYgKHBpblByb3RlY3RlZEtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFBJTiBwcm90ZWN0ZWQga2V5IGZvdW5kLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb3RlY3RlZEtleUNzID0gbmV3IEVuY1N0cmluZyhwaW5Qcm90ZWN0ZWRLZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwaW5LZXkgPSBhd2FpdCB0aGlzLm1ha2VQaW5LZXkocGluLCBzYWx0LCBrZGYsIGtkZkl0ZXJhdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IGRlY0tleSA9IGF3YWl0IHRoaXMuZGVjcnlwdFRvQnl0ZXMocHJvdGVjdGVkS2V5Q3MsIHBpbktleSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoZGVjS2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBtYWtlU2hhcmVLZXkoKTogUHJvbWlzZTxbRW5jU3RyaW5nLCBTeW1tZXRyaWNDcnlwdG9LZXldPiB7XHJcbiAgICAgICAgY29uc3Qgc2hhcmVLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yYW5kb21CeXRlcyg2NCk7XHJcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gYXdhaXQgdGhpcy5nZXRQdWJsaWNLZXkoKTtcclxuICAgICAgICBjb25zdCBlbmNTaGFyZUtleSA9IGF3YWl0IHRoaXMucnNhRW5jcnlwdChzaGFyZUtleSwgcHVibGljS2V5KTtcclxuICAgICAgICByZXR1cm4gW2VuY1NoYXJlS2V5LCBuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KHNoYXJlS2V5KV07XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbWFrZUtleVBhaXIoa2V5PzogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxbc3RyaW5nLCBFbmNTdHJpbmddPiB7XHJcbiAgICAgICAgY29uc3Qga2V5UGFpciA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJzYUdlbmVyYXRlS2V5UGFpcigyMDQ4KTtcclxuICAgICAgICBjb25zdCBwdWJsaWNCNjQgPSBVdGlscy5mcm9tQnVmZmVyVG9CNjQoa2V5UGFpclswXSk7XHJcbiAgICAgICAgY29uc3QgcHJpdmF0ZUVuYyA9IGF3YWl0IHRoaXMuZW5jcnlwdChrZXlQYWlyWzFdLCBrZXkpO1xyXG4gICAgICAgIHJldHVybiBbcHVibGljQjY0LCBwcml2YXRlRW5jXTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBtYWtlUGluS2V5KHBpbjogc3RyaW5nLCBzYWx0OiBzdHJpbmcsIGtkZjogS2RmVHlwZSwga2RmSXRlcmF0aW9uczogbnVtYmVyKTogUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcclxuICAgICAgICBjb25zdCBwaW5LZXkgPSBhd2FpdCB0aGlzLm1ha2VLZXkocGluLCBzYWx0LCBrZGYsIGtkZkl0ZXJhdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN0cmV0Y2hLZXkocGluS2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBtYWtlU2VuZEtleShrZXlNYXRlcmlhbDogQXJyYXlCdWZmZXIpOiBQcm9taXNlPFN5bW1ldHJpY0NyeXB0b0tleT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbmRLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5oa2RmKGtleU1hdGVyaWFsLCAnYml0d2FyZGVuLXNlbmQnLCAnc2VuZCcsIDY0LCAnc2hhMjU2Jyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoc2VuZEtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaGFzaFBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcsIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5LCBoYXNoUHVycG9zZT86IEhhc2hQdXJwb3NlKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAga2V5ID0gYXdhaXQgdGhpcy5nZXRLZXkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhc3N3b3JkID09IG51bGwgfHwga2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBhcmFtZXRlcnMuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpdGVyYXRpb25zID0gaGFzaFB1cnBvc2UgPT09IEhhc2hQdXJwb3NlLkxvY2FsQXV0aG9yaXphdGlvbiA/IDIgOiAxO1xyXG4gICAgICAgIGNvbnN0IGhhc2ggPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5wYmtkZjIoa2V5LmtleSwgcGFzc3dvcmQsICdzaGEyNTYnLCBpdGVyYXRpb25zKTtcclxuICAgICAgICByZXR1cm4gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGhhc2gpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG1ha2VFbmNLZXkoa2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFtTeW1tZXRyaWNDcnlwdG9LZXksIEVuY1N0cmluZ10+IHtcclxuICAgICAgICBjb25zdCB0aGVLZXkgPSBhd2FpdCB0aGlzLmdldEtleUZvckVuY3J5cHRpb24oa2V5KTtcclxuICAgICAgICBjb25zdCBlbmNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yYW5kb21CeXRlcyg2NCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRFbmNLZXkodGhlS2V5LCBlbmNLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlbWFrZUVuY0tleShrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSwgZW5jS2V5PzogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxbU3ltbWV0cmljQ3J5cHRvS2V5LCBFbmNTdHJpbmddPiB7XHJcbiAgICAgICAgaWYgKGVuY0tleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVuY0tleSA9IGF3YWl0IHRoaXMuZ2V0RW5jS2V5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkRW5jS2V5KGtleSwgZW5jS2V5LmtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZW5jcnlwdChwbGFpblZhbHVlOiBzdHJpbmcgfCBBcnJheUJ1ZmZlciwga2V5PzogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxFbmNTdHJpbmc+IHtcclxuICAgICAgICBpZiAocGxhaW5WYWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcGxhaW5CdWY6IEFycmF5QnVmZmVyO1xyXG4gICAgICAgIGlmICh0eXBlb2YgKHBsYWluVmFsdWUpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBwbGFpbkJ1ZiA9IFV0aWxzLmZyb21VdGY4VG9BcnJheShwbGFpblZhbHVlKS5idWZmZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGxhaW5CdWYgPSBwbGFpblZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZW5jT2JqID0gYXdhaXQgdGhpcy5hZXNFbmNyeXB0KHBsYWluQnVmLCBrZXkpO1xyXG4gICAgICAgIGNvbnN0IGl2ID0gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGVuY09iai5pdik7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IFV0aWxzLmZyb21CdWZmZXJUb0I2NChlbmNPYmouZGF0YSk7XHJcbiAgICAgICAgY29uc3QgbWFjID0gZW5jT2JqLm1hYyAhPSBudWxsID8gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGVuY09iai5tYWMpIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gbmV3IEVuY1N0cmluZyhlbmNPYmoua2V5LmVuY1R5cGUsIGRhdGEsIGl2LCBtYWMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGVuY3J5cHRUb0J5dGVzKHBsYWluVmFsdWU6IEFycmF5QnVmZmVyLCBrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEVuY0FycmF5QnVmZmVyPiB7XHJcbiAgICAgICAgY29uc3QgZW5jVmFsdWUgPSBhd2FpdCB0aGlzLmFlc0VuY3J5cHQocGxhaW5WYWx1ZSwga2V5KTtcclxuICAgICAgICBsZXQgbWFjTGVuID0gMDtcclxuICAgICAgICBpZiAoZW5jVmFsdWUubWFjICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbWFjTGVuID0gZW5jVmFsdWUubWFjLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmNCeXRlcyA9IG5ldyBVaW50OEFycmF5KDEgKyBlbmNWYWx1ZS5pdi5ieXRlTGVuZ3RoICsgbWFjTGVuICsgZW5jVmFsdWUuZGF0YS5ieXRlTGVuZ3RoKTtcclxuICAgICAgICBlbmNCeXRlcy5zZXQoW2VuY1ZhbHVlLmtleS5lbmNUeXBlXSk7XHJcbiAgICAgICAgZW5jQnl0ZXMuc2V0KG5ldyBVaW50OEFycmF5KGVuY1ZhbHVlLml2KSwgMSk7XHJcbiAgICAgICAgaWYgKGVuY1ZhbHVlLm1hYyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVuY0J5dGVzLnNldChuZXcgVWludDhBcnJheShlbmNWYWx1ZS5tYWMpLCAxICsgZW5jVmFsdWUuaXYuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbmNCeXRlcy5zZXQobmV3IFVpbnQ4QXJyYXkoZW5jVmFsdWUuZGF0YSksIDEgKyBlbmNWYWx1ZS5pdi5ieXRlTGVuZ3RoICsgbWFjTGVuKTtcclxuICAgICAgICByZXR1cm4gbmV3IEVuY0FycmF5QnVmZmVyKGVuY0J5dGVzLmJ1ZmZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcnNhRW5jcnlwdChkYXRhOiBBcnJheUJ1ZmZlciwgcHVibGljS2V5PzogQXJyYXlCdWZmZXIpOiBQcm9taXNlPEVuY1N0cmluZz4ge1xyXG4gICAgICAgIGlmIChwdWJsaWNLZXkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwdWJsaWNLZXkgPSBhd2FpdCB0aGlzLmdldFB1YmxpY0tleSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHVibGljS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQdWJsaWMga2V5IHVuYXZhaWxhYmxlLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZW5jQnl0ZXMgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yc2FFbmNyeXB0KGRhdGEsIHB1YmxpY0tleSwgJ3NoYTEnKTtcclxuICAgICAgICByZXR1cm4gbmV3IEVuY1N0cmluZyhFbmNyeXB0aW9uVHlwZS5Sc2EyMDQ4X09hZXBTaGExX0I2NCwgVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGVuY0J5dGVzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcnNhRGVjcnlwdChlbmNWYWx1ZTogc3RyaW5nLCBwcml2YXRlS2V5VmFsdWU/OiBBcnJheUJ1ZmZlcik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuICAgICAgICBjb25zdCBoZWFkZXJQaWVjZXMgPSBlbmNWYWx1ZS5zcGxpdCgnLicpO1xyXG4gICAgICAgIGxldCBlbmNUeXBlOiBFbmNyeXB0aW9uVHlwZSA9IG51bGw7XHJcbiAgICAgICAgbGV0IGVuY1BpZWNlczogc3RyaW5nW107XHJcblxyXG4gICAgICAgIGlmIChoZWFkZXJQaWVjZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGVuY1R5cGUgPSBFbmNyeXB0aW9uVHlwZS5Sc2EyMDQ4X09hZXBTaGEyNTZfQjY0O1xyXG4gICAgICAgICAgICBlbmNQaWVjZXMgPSBbaGVhZGVyUGllY2VzWzBdXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGhlYWRlclBpZWNlcy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGVuY1R5cGUgPSBwYXJzZUludChoZWFkZXJQaWVjZXNbMF0sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZW5jUGllY2VzID0gaGVhZGVyUGllY2VzWzFdLnNwbGl0KCd8Jyk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoIChlbmNUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuUnNhMjA0OF9PYWVwU2hhMjU2X0I2NDpcclxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5Sc2EyMDQ4X09hZXBTaGExX0I2NDpcclxuICAgICAgICAgICAgLy8gSG1hY1NoYTI1NiB0eXBlcyBhcmUgZGVwcmVjYXRlZFxyXG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTI1Nl9IbWFjU2hhMjU2X0I2NDpcclxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5Sc2EyMDQ4X09hZXBTaGExX0htYWNTaGEyNTZfQjY0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VuY1R5cGUgdW5hdmFpbGFibGUuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZW5jUGllY2VzID09IG51bGwgfHwgZW5jUGllY2VzLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW5jUGllY2VzIHVuYXZhaWxhYmxlLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IFV0aWxzLmZyb21CNjRUb0FycmF5KGVuY1BpZWNlc1swXSkuYnVmZmVyO1xyXG4gICAgICAgIGNvbnN0IHByaXZhdGVLZXkgPSBwcml2YXRlS2V5VmFsdWUgPz8gYXdhaXQgdGhpcy5nZXRQcml2YXRlS2V5KCk7XHJcbiAgICAgICAgaWYgKHByaXZhdGVLZXkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHByaXZhdGUga2V5LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGFsZzogJ3NoYTEnIHwgJ3NoYTI1NicgPSAnc2hhMSc7XHJcbiAgICAgICAgc3dpdGNoIChlbmNUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuUnNhMjA0OF9PYWVwU2hhMjU2X0I2NDpcclxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5Sc2EyMDQ4X09hZXBTaGEyNTZfSG1hY1NoYTI1Nl9CNjQ6XHJcbiAgICAgICAgICAgICAgICBhbGcgPSAnc2hhMjU2JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTFfQjY0OlxyXG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTFfSG1hY1NoYTI1Nl9CNjQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW5jVHlwZSB1bmF2YWlsYWJsZS4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yc2FEZWNyeXB0KGRhdGEsIHByaXZhdGVLZXksIGFsZyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVjcnlwdFRvQnl0ZXMoZW5jU3RyaW5nOiBFbmNTdHJpbmcsIGtleT86IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuICAgICAgICBjb25zdCBpdiA9IFV0aWxzLmZyb21CNjRUb0FycmF5KGVuY1N0cmluZy5pdikuYnVmZmVyO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBVdGlscy5mcm9tQjY0VG9BcnJheShlbmNTdHJpbmcuZGF0YSkuYnVmZmVyO1xyXG4gICAgICAgIGNvbnN0IG1hYyA9IGVuY1N0cmluZy5tYWMgPyBVdGlscy5mcm9tQjY0VG9BcnJheShlbmNTdHJpbmcubWFjKS5idWZmZXIgOiBudWxsO1xyXG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gYXdhaXQgdGhpcy5hZXNEZWNyeXB0VG9CeXRlcyhlbmNTdHJpbmcuZW5jcnlwdGlvblR5cGUsIGRhdGEsIGl2LCBtYWMsIGtleSk7XHJcbiAgICAgICAgaWYgKGRlY2lwaGVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGVjaXBoZXI7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVjcnlwdFRvVXRmOChlbmNTdHJpbmc6IEVuY1N0cmluZywga2V5PzogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5hZXNEZWNyeXB0VG9VdGY4KGVuY1N0cmluZy5lbmNyeXB0aW9uVHlwZSwgZW5jU3RyaW5nLmRhdGEsXHJcbiAgICAgICAgICAgIGVuY1N0cmluZy5pdiwgZW5jU3RyaW5nLm1hYywga2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWNyeXB0RnJvbUJ5dGVzKGVuY0J1ZjogQXJyYXlCdWZmZXIsIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xyXG4gICAgICAgIGlmIChlbmNCdWYgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGVuY0J1Zi4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVuY0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoZW5jQnVmKTtcclxuICAgICAgICBjb25zdCBlbmNUeXBlID0gZW5jQnl0ZXNbMF07XHJcbiAgICAgICAgbGV0IGN0Qnl0ZXM6IFVpbnQ4QXJyYXkgPSBudWxsO1xyXG4gICAgICAgIGxldCBpdkJ5dGVzOiBVaW50OEFycmF5ID0gbnVsbDtcclxuICAgICAgICBsZXQgbWFjQnl0ZXM6IFVpbnQ4QXJyYXkgPSBudWxsO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGVuY1R5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMxMjhfSG1hY1NoYTI1Nl9CNjQ6XHJcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0htYWNTaGEyNTZfQjY0OlxyXG4gICAgICAgICAgICAgICAgaWYgKGVuY0J5dGVzLmxlbmd0aCA8PSA0OSkgeyAvLyAxICsgMTYgKyAzMiArIGN0TGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaXZCeXRlcyA9IGVuY0J5dGVzLnNsaWNlKDEsIDE3KTtcclxuICAgICAgICAgICAgICAgIG1hY0J5dGVzID0gZW5jQnl0ZXMuc2xpY2UoMTcsIDQ5KTtcclxuICAgICAgICAgICAgICAgIGN0Qnl0ZXMgPSBlbmNCeXRlcy5zbGljZSg0OSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMyNTZfQjY0OlxyXG4gICAgICAgICAgICAgICAgaWYgKGVuY0J5dGVzLmxlbmd0aCA8PSAxNykgeyAvLyAxICsgMTYgKyBjdExlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGl2Qnl0ZXMgPSBlbmNCeXRlcy5zbGljZSgxLCAxNyk7XHJcbiAgICAgICAgICAgICAgICBjdEJ5dGVzID0gZW5jQnl0ZXMuc2xpY2UoMTcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFlc0RlY3J5cHRUb0J5dGVzKGVuY1R5cGUsIGN0Qnl0ZXMuYnVmZmVyLCBpdkJ5dGVzLmJ1ZmZlcixcclxuICAgICAgICAgICAgbWFjQnl0ZXMgIT0gbnVsbCA/IG1hY0J5dGVzLmJ1ZmZlciA6IG51bGwsIGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRUZGb3JnL09wZW5XaXJlbGVzc1xyXG4gICAgLy8gcmVmIGh0dHBzOi8vZ2l0aHViLmNvbS9FRkZvcmcvT3BlbldpcmVsZXNzL2Jsb2IvbWFzdGVyL2FwcC9qcy9kaWNld2FyZS5qc1xyXG4gICAgYXN5bmMgcmFuZG9tTnVtYmVyKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAgICAgbGV0IHJ2YWwgPSAwO1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0gbWF4IC0gbWluICsgMTtcclxuICAgICAgICBjb25zdCBiaXRzTmVlZGVkID0gTWF0aC5jZWlsKE1hdGgubG9nMihyYW5nZSkpO1xyXG4gICAgICAgIGlmIChiaXRzTmVlZGVkID4gNTMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZSBjYW5ub3QgZ2VuZXJhdGUgbnVtYmVycyBsYXJnZXIgdGhhbiA1MyBiaXRzLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwoYml0c05lZWRlZCAvIDgpO1xyXG4gICAgICAgIGNvbnN0IG1hc2sgPSBNYXRoLnBvdygyLCBiaXRzTmVlZGVkKSAtIDE7XHJcbiAgICAgICAgLy8gNzc3NiAtPiAoMl4xMyA9IDgxOTIpIC0xID09IDgxOTEgb3IgMHgwMDAwMTExMSAxMTExMTExMVxyXG5cclxuICAgICAgICAvLyBGaWxsIGEgYnl0ZSBhcnJheSB3aXRoIE4gcmFuZG9tIG51bWJlcnNcclxuICAgICAgICBjb25zdCBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheShhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yYW5kb21CeXRlcyhieXRlc05lZWRlZCkpO1xyXG5cclxuICAgICAgICBsZXQgcCA9IChieXRlc05lZWRlZCAtIDEpICogODtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcclxuICAgICAgICAgICAgcnZhbCArPSBieXRlQXJyYXlbaV0gKiBNYXRoLnBvdygyLCBwKTtcclxuICAgICAgICAgICAgcCAtPSA4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVXNlICYgdG8gYXBwbHkgdGhlIG1hc2sgYW5kIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHJlY3Vyc2l2ZSBsb29rdXBzXHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgcnZhbCA9IHJ2YWwgJiBtYXNrO1xyXG5cclxuICAgICAgICBpZiAocnZhbCA+PSByYW5nZSkge1xyXG4gICAgICAgICAgICAvLyBJbnRlZ2VyIG91dCBvZiBhY2NlcHRhYmxlIHJhbmdlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJhbmRvbU51bWJlcihtaW4sIG1heCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gYW4gaW50ZWdlciB0aGF0IGZhbGxzIHdpdGhpbiB0aGUgcmFuZ2VcclxuICAgICAgICByZXR1cm4gbWluICsgcnZhbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB2YWxpZGF0ZUtleShrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY1ByaXZhdGVLZXkgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KEtleXMuZW5jUHJpdmF0ZUtleSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY0tleSA9IGF3YWl0IHRoaXMuZ2V0RW5jS2V5KGtleSk7XHJcbiAgICAgICAgICAgIGlmIChlbmNQcml2YXRlS2V5ID09IG51bGwgfHwgZW5jS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IGF3YWl0IHRoaXMuZGVjcnlwdFRvQnl0ZXMobmV3IEVuY1N0cmluZyhlbmNQcml2YXRlS2V5KSwgZW5jS2V5KTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UucnNhRXh0cmFjdFB1YmxpY0tleShwcml2YXRlS2V5KTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlcnNcclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgc3RvcmVLZXkoa2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpIHtcclxuICAgICAgICBpZiAoYXdhaXQgdGhpcy5zaG91bGRTdG9yZUtleSgnYXV0bycpIHx8IGF3YWl0IHRoaXMuc2hvdWxkU3RvcmVLZXkoJ2Jpb21ldHJpYycpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VjdXJlU3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmtleSwga2V5LmtleUI2NCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZWN1cmVTdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5rZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgc2hvdWxkU3RvcmVLZXkoa2V5U3VmZml4OiBLZXlTdWZmaXhPcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IHNob3VsZFN0b3JlS2V5ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGtleVN1ZmZpeCA9PT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhdWx0VGltZW91dCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRLZXkpO1xyXG4gICAgICAgICAgICBzaG91bGRTdG9yZUtleSA9IHZhdWx0VGltZW91dCA9PSBudWxsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5U3VmZml4ID09PSAnYmlvbWV0cmljJykge1xyXG4gICAgICAgICAgICBjb25zdCBiaW9tZXRyaWNVbmxvY2sgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihDb25zdGFudHNTZXJ2aWNlLmJpb21ldHJpY1VubG9ja0tleSk7XHJcbiAgICAgICAgICAgIHNob3VsZFN0b3JlS2V5ID0gYmlvbWV0cmljVW5sb2NrICYmIHRoaXMucGxhdGZvcm1VdGlsU2VydmljZS5zdXBwb3J0c1NlY3VyZVN0b3JhZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNob3VsZFN0b3JlS2V5O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCByZXRyaWV2ZUtleUZyb21TdG9yYWdlKGtleVN1ZmZpeDogS2V5U3VmZml4T3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlY3VyZVN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KEtleXMua2V5LCB7IGtleVN1ZmZpeDoga2V5U3VmZml4IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgYWVzRW5jcnlwdChkYXRhOiBBcnJheUJ1ZmZlciwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEVuY3J5cHRlZE9iamVjdD4ge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IG5ldyBFbmNyeXB0ZWRPYmplY3QoKTtcclxuICAgICAgICBvYmoua2V5ID0gYXdhaXQgdGhpcy5nZXRLZXlGb3JFbmNyeXB0aW9uKGtleSk7XHJcbiAgICAgICAgb2JqLml2ID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UucmFuZG9tQnl0ZXMoMTYpO1xyXG4gICAgICAgIG9iai5kYXRhID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuYWVzRW5jcnlwdChkYXRhLCBvYmouaXYsIG9iai5rZXkuZW5jS2V5KTtcclxuXHJcbiAgICAgICAgaWYgKG9iai5rZXkubWFjS2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgbWFjRGF0YSA9IG5ldyBVaW50OEFycmF5KG9iai5pdi5ieXRlTGVuZ3RoICsgb2JqLmRhdGEuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIG1hY0RhdGEuc2V0KG5ldyBVaW50OEFycmF5KG9iai5pdiksIDApO1xyXG4gICAgICAgICAgICBtYWNEYXRhLnNldChuZXcgVWludDhBcnJheShvYmouZGF0YSksIG9iai5pdi5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgb2JqLm1hYyA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmhtYWMobWFjRGF0YS5idWZmZXIsIG9iai5rZXkubWFjS2V5LCAnc2hhMjU2Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgYWVzRGVjcnlwdFRvVXRmOChlbmNUeXBlOiBFbmNyeXB0aW9uVHlwZSwgZGF0YTogc3RyaW5nLCBpdjogc3RyaW5nLCBtYWM6IHN0cmluZyxcclxuICAgICAgICBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3Qga2V5Rm9yRW5jID0gYXdhaXQgdGhpcy5nZXRLZXlGb3JFbmNyeXB0aW9uKGtleSk7XHJcbiAgICAgICAgY29uc3QgdGhlS2V5ID0gdGhpcy5yZXNvbHZlTGVnYWN5S2V5KGVuY1R5cGUsIGtleUZvckVuYyk7XHJcblxyXG4gICAgICAgIGlmICh0aGVLZXkubWFjS2V5ICE9IG51bGwgJiYgbWFjID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdtYWMgcmVxdWlyZWQuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoZUtleS5lbmNUeXBlICE9PSBlbmNUeXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignZW5jVHlwZSB1bmF2YWlsYWJsZS4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBmYXN0UGFyYW1zID0gdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuYWVzRGVjcnlwdEZhc3RQYXJhbWV0ZXJzKGRhdGEsIGl2LCBtYWMsIHRoZUtleSk7XHJcbiAgICAgICAgaWYgKGZhc3RQYXJhbXMubWFjS2V5ICE9IG51bGwgJiYgZmFzdFBhcmFtcy5tYWMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb21wdXRlZE1hYyA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmhtYWNGYXN0KGZhc3RQYXJhbXMubWFjRGF0YSxcclxuICAgICAgICAgICAgICAgIGZhc3RQYXJhbXMubWFjS2V5LCAnc2hhMjU2Jyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hY3NFcXVhbCA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmNvbXBhcmVGYXN0KGZhc3RQYXJhbXMubWFjLCBjb21wdXRlZE1hYyk7XHJcbiAgICAgICAgICAgIGlmICghbWFjc0VxdWFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoJ21hYyBmYWlsZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmFlc0RlY3J5cHRGYXN0KGZhc3RQYXJhbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgYWVzRGVjcnlwdFRvQnl0ZXMoZW5jVHlwZTogRW5jcnlwdGlvblR5cGUsIGRhdGE6IEFycmF5QnVmZmVyLCBpdjogQXJyYXlCdWZmZXIsXHJcbiAgICAgICAgbWFjOiBBcnJheUJ1ZmZlciwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XHJcbiAgICAgICAgY29uc3Qga2V5Rm9yRW5jID0gYXdhaXQgdGhpcy5nZXRLZXlGb3JFbmNyeXB0aW9uKGtleSk7XHJcbiAgICAgICAgY29uc3QgdGhlS2V5ID0gdGhpcy5yZXNvbHZlTGVnYWN5S2V5KGVuY1R5cGUsIGtleUZvckVuYyk7XHJcblxyXG4gICAgICAgIGlmICh0aGVLZXkubWFjS2V5ICE9IG51bGwgJiYgbWFjID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhlS2V5LmVuY1R5cGUgIT09IGVuY1R5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhlS2V5Lm1hY0tleSAhPSBudWxsICYmIG1hYyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hY0RhdGEgPSBuZXcgVWludDhBcnJheShpdi5ieXRlTGVuZ3RoICsgZGF0YS5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgbWFjRGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkoaXYpLCAwKTtcclxuICAgICAgICAgICAgbWFjRGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkoZGF0YSksIGl2LmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICBjb25zdCBjb21wdXRlZE1hYyA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmhtYWMobWFjRGF0YS5idWZmZXIsIHRoZUtleS5tYWNLZXksICdzaGEyNTYnKTtcclxuICAgICAgICAgICAgaWYgKGNvbXB1dGVkTWFjID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgbWFjc01hdGNoID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuY29tcGFyZShtYWMsIGNvbXB1dGVkTWFjKTtcclxuICAgICAgICAgICAgaWYgKCFtYWNzTWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignbWFjIGZhaWxlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuYWVzRGVjcnlwdChkYXRhLCBpdiwgdGhlS2V5LmVuY0tleSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRLZXlGb3JFbmNyeXB0aW9uKGtleT86IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8U3ltbWV0cmljQ3J5cHRvS2V5PiB7XHJcbiAgICAgICAgaWYgKGtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmNLZXkgPSBhd2FpdCB0aGlzLmdldEVuY0tleSgpO1xyXG4gICAgICAgIGlmIChlbmNLZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZW5jS2V5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0S2V5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZXNvbHZlTGVnYWN5S2V5KGVuY1R5cGU6IEVuY3J5cHRpb25UeXBlLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFN5bW1ldHJpY0NyeXB0b0tleSB7XHJcbiAgICAgICAgaWYgKGVuY1R5cGUgPT09IEVuY3J5cHRpb25UeXBlLkFlc0NiYzEyOF9IbWFjU2hhMjU2X0I2NCAmJlxyXG4gICAgICAgICAgICBrZXkuZW5jVHlwZSA9PT0gRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0I2NCkge1xyXG4gICAgICAgICAgICAvLyBPbGQgZW5jcnlwdC10aGVuLW1hYyBzY2hlbWUsIG1ha2UgYSBuZXcga2V5XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZ2FjeUV0bUtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZ2FjeUV0bUtleSA9IG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoa2V5LmtleSwgRW5jcnlwdGlvblR5cGUuQWVzQ2JjMTI4X0htYWNTaGEyNTZfQjY0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZWdhY3lFdG1LZXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc3RyZXRjaEtleShrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8U3ltbWV0cmljQ3J5cHRvS2V5PiB7XHJcbiAgICAgICAgY29uc3QgbmV3S2V5ID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xyXG4gICAgICAgIGNvbnN0IGVuY0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmhrZGZFeHBhbmQoa2V5LmtleSwgJ2VuYycsIDMyLCAnc2hhMjU2Jyk7XHJcbiAgICAgICAgY29uc3QgbWFjS2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuaGtkZkV4cGFuZChrZXkua2V5LCAnbWFjJywgMzIsICdzaGEyNTYnKTtcclxuICAgICAgICBuZXdLZXkuc2V0KG5ldyBVaW50OEFycmF5KGVuY0tleSkpO1xyXG4gICAgICAgIG5ld0tleS5zZXQobmV3IFVpbnQ4QXJyYXkobWFjS2V5KSwgMzIpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KG5ld0tleS5idWZmZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgaGFzaFBocmFzZShoYXNoOiBBcnJheUJ1ZmZlciwgbWluaW11bUVudHJvcHk6IG51bWJlciA9IDY0KSB7XHJcbiAgICAgICAgY29uc3QgZW50cm9weVBlcldvcmQgPSBNYXRoLmxvZyhFRUZMb25nV29yZExpc3QubGVuZ3RoKSAvIE1hdGgubG9nKDIpO1xyXG4gICAgICAgIGxldCBudW1Xb3JkcyA9IE1hdGguY2VpbChtaW5pbXVtRW50cm9weSAvIGVudHJvcHlQZXJXb3JkKTtcclxuXHJcbiAgICAgICAgY29uc3QgaGFzaEFyciA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaCkpO1xyXG4gICAgICAgIGNvbnN0IGVudHJvcHlBdmFpbGFibGUgPSBoYXNoQXJyLmxlbmd0aCAqIDQ7XHJcbiAgICAgICAgaWYgKG51bVdvcmRzICogZW50cm9weVBlcldvcmQgPiBlbnRyb3B5QXZhaWxhYmxlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3V0cHV0IGVudHJvcHkgb2YgaGFzaCBmdW5jdGlvbiBpcyB0b28gc21hbGwnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBocmFzZTogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBsZXQgaGFzaE51bWJlciA9IGJpZ0ludC5mcm9tQXJyYXkoaGFzaEFyciwgMjU2KTtcclxuICAgICAgICB3aGlsZSAobnVtV29yZHMtLSkge1xyXG4gICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBoYXNoTnVtYmVyLm1vZChFRUZMb25nV29yZExpc3QubGVuZ3RoKTtcclxuICAgICAgICAgICAgaGFzaE51bWJlciA9IGhhc2hOdW1iZXIuZGl2aWRlKEVFRkxvbmdXb3JkTGlzdC5sZW5ndGgpO1xyXG4gICAgICAgICAgICBwaHJhc2UucHVzaChFRUZMb25nV29yZExpc3RbcmVtYWluZGVyIGFzIGFueV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGhyYXNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgYnVpbGRFbmNLZXkoa2V5OiBTeW1tZXRyaWNDcnlwdG9LZXksIGVuY0tleTogQXJyYXlCdWZmZXIpXHJcbiAgICAgICAgOiBQcm9taXNlPFtTeW1tZXRyaWNDcnlwdG9LZXksIEVuY1N0cmluZ10+IHtcclxuICAgICAgICBsZXQgZW5jS2V5RW5jOiBFbmNTdHJpbmcgPSBudWxsO1xyXG4gICAgICAgIGlmIChrZXkua2V5LmJ5dGVMZW5ndGggPT09IDMyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0tleSA9IGF3YWl0IHRoaXMuc3RyZXRjaEtleShrZXkpO1xyXG4gICAgICAgICAgICBlbmNLZXlFbmMgPSBhd2FpdCB0aGlzLmVuY3J5cHQoZW5jS2V5LCBuZXdLZXkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5LmtleS5ieXRlTGVuZ3RoID09PSA2NCkge1xyXG4gICAgICAgICAgICBlbmNLZXlFbmMgPSBhd2FpdCB0aGlzLmVuY3J5cHQoZW5jS2V5LCBrZXkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBrZXkgc2l6ZS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KGVuY0tleSksIGVuY0tleUVuY107XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgS2V5U3VmZml4T3B0aW9ucyB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9jcnlwdG8uc2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQnJvd3NlckNyeXB0b1NlcnZpY2UgZXh0ZW5kcyBDcnlwdG9TZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCBhc3luYyByZXRyaWV2ZUtleUZyb21TdG9yYWdlKGtleVN1ZmZpeDogS2V5U3VmZml4T3B0aW9ucykge1xyXG4gICAgICAgIGlmIChrZXlTdWZmaXggPT09ICdiaW9tZXRyaWMnKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGxhdGZvcm1VdGlsU2VydmljZS5hdXRoZW50aWNhdGVCaW9tZXRyaWMoKTtcclxuICAgICAgICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldEtleSgpKT8ua2V5QjY0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLnJldHJpZXZlS2V5RnJvbVN0b3JhZ2Uoa2V5U3VmZml4KTtcclxuICAgIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XHJcbmltcG9ydCB7IFNhZmFyaUFwcCB9IGZyb20gJy4uL2Jyb3dzZXIvc2FmYXJpQXBwJztcclxuXHJcbmltcG9ydCB7IERldmljZVR5cGUgfSBmcm9tICdqc2xpYi1jb21tb24vZW51bXMvZGV2aWNlVHlwZSc7XHJcbmltcG9ydCB7IFRoZW1lVHlwZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9lbnVtcy90aGVtZVR5cGUnO1xyXG5cclxuaW1wb3J0IHsgTWVzc2FnaW5nU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvbWVzc2FnaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWxzU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL2NvbnN0YW50cy5zZXJ2aWNlJztcclxuXHJcbmNvbnN0IERpYWxvZ1Byb21pc2VFeHBpcmF0aW9uID0gNjAwMDAwOyAvLyAxMCBtaW51dGVzXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcm93c2VyUGxhdGZvcm1VdGlsc1NlcnZpY2UgaW1wbGVtZW50cyBQbGF0Zm9ybVV0aWxzU2VydmljZSB7XHJcbiAgICBpZGVudGl0eUNsaWVudElkOiBzdHJpbmcgPSAnYnJvd3Nlcic7XHJcblxyXG4gICAgcHJpdmF0ZSBzaG93RGlhbG9nUmVzb2x2ZXMgPSBuZXcgTWFwPG51bWJlciwgeyByZXNvbHZlOiAodmFsdWU6IGJvb2xlYW4pID0+IHZvaWQsIGRhdGU6IERhdGUgfT4oKTtcclxuICAgIHByaXZhdGUgcGFzc3dvcmREaWFsb2dSZXNvbHZlcyA9IG5ldyBNYXA8bnVtYmVyLCB7IHRyeVJlc29sdmU6IChjYW5jZWxlZDogYm9vbGVhbiwgcGFzc3dvcmQ6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPiwgZGF0ZTogRGF0ZSB9PigpO1xyXG4gICAgcHJpdmF0ZSBkZXZpY2VDYWNoZTogRGV2aWNlVHlwZSA9IG51bGw7XHJcbiAgICBwcml2YXRlIHByZWZlcnNDb2xvclNjaGVtZURhcmsgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWVzc2FnaW5nU2VydmljZTogTWVzc2FnaW5nU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBjbGlwYm9hcmRXcml0ZUNhbGxiYWNrOiAoY2xpcGJvYXJkVmFsdWU6IHN0cmluZywgY2xlYXJNczogbnVtYmVyKSA9PiB2b2lkLFxyXG4gICAgICAgIHByaXZhdGUgYmlvbWV0cmljQ2FsbGJhY2s6ICgpID0+IFByb21pc2U8Ym9vbGVhbj4pIHsgfVxyXG5cclxuICAgIGdldERldmljZSgpOiBEZXZpY2VUeXBlIHtcclxuICAgICAgICBpZiAodGhpcy5kZXZpY2VDYWNoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZXZpY2VDYWNoZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJyBGaXJlZm94LycpICE9PSAtMSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJyBHZWNrby8nKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXZpY2VDYWNoZSA9IERldmljZVR5cGUuRmlyZWZveEV4dGVuc2lvbjtcclxuICAgICAgICB9IGVsc2UgaWYgKCghISh3aW5kb3cgYXMgYW55KS5vcHIgJiYgISFvcHIuYWRkb25zKSB8fCAhISh3aW5kb3cgYXMgYW55KS5vcGVyYSB8fFxyXG4gICAgICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJyBPUFIvJykgPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmRldmljZUNhY2hlID0gRGV2aWNlVHlwZS5PcGVyYUV4dGVuc2lvbjtcclxuICAgICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIEVkZy8nKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXZpY2VDYWNoZSA9IERldmljZVR5cGUuRWRnZUV4dGVuc2lvbjtcclxuICAgICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIFZpdmFsZGkvJykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlQ2FjaGUgPSBEZXZpY2VUeXBlLlZpdmFsZGlFeHRlbnNpb247XHJcbiAgICAgICAgfSBlbHNlIGlmICgod2luZG93IGFzIGFueSkuY2hyb21lICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIENocm9tZS8nKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXZpY2VDYWNoZSA9IERldmljZVR5cGUuQ2hyb21lRXh0ZW5zaW9uO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCcgU2FmYXJpLycpICE9PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLmRldmljZUNhY2hlID0gRGV2aWNlVHlwZS5TYWZhcmlFeHRlbnNpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5kZXZpY2VDYWNoZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREZXZpY2VTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBkZXZpY2UgPSBEZXZpY2VUeXBlW3RoaXMuZ2V0RGV2aWNlKCldLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgcmV0dXJuIGRldmljZS5yZXBsYWNlKCdleHRlbnNpb24nLCAnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNGaXJlZm94KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldERldmljZSgpID09PSBEZXZpY2VUeXBlLkZpcmVmb3hFeHRlbnNpb247XHJcbiAgICB9XHJcblxyXG4gICAgaXNDaHJvbWUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGV2aWNlKCkgPT09IERldmljZVR5cGUuQ2hyb21lRXh0ZW5zaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRWRnZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXREZXZpY2UoKSA9PT0gRGV2aWNlVHlwZS5FZGdlRXh0ZW5zaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGlzT3BlcmEoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGV2aWNlKCkgPT09IERldmljZVR5cGUuT3BlcmFFeHRlbnNpb247XHJcbiAgICB9XHJcblxyXG4gICAgaXNWaXZhbGRpKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldERldmljZSgpID09PSBEZXZpY2VUeXBlLlZpdmFsZGlFeHRlbnNpb247XHJcbiAgICB9XHJcblxyXG4gICAgaXNTYWZhcmkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGV2aWNlKCkgPT09IERldmljZVR5cGUuU2FmYXJpRXh0ZW5zaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGlzSUUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzTWFjQXBwU3RvcmUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGlzVmlld09wZW4oKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgaWYgKGF3YWl0IEJyb3dzZXJBcGkuaXNQb3B1cE9wZW4oKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzU2FmYXJpKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2lkZWJhclZpZXcgPSB0aGlzLnNpZGViYXJWaWV3TmFtZSgpO1xyXG4gICAgICAgIGNvbnN0IHNpZGViYXJPcGVuID0gc2lkZWJhclZpZXcgIT0gbnVsbCAmJiBjaHJvbWUuZXh0ZW5zaW9uLmdldFZpZXdzKHsgdHlwZTogc2lkZWJhclZpZXcgfSkubGVuZ3RoID4gMDtcclxuICAgICAgICBpZiAoc2lkZWJhck9wZW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0YWJPcGVuID0gY2hyb21lLmV4dGVuc2lvbi5nZXRWaWV3cyh7IHR5cGU6ICd0YWInIH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgcmV0dXJuIHRhYk9wZW47XHJcbiAgICB9XHJcblxyXG4gICAgbG9ja1RpbWVvdXQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsYXVuY2hVcmkodXJpOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBCcm93c2VyQXBpLmNyZWF0ZU5ld1RhYih1cmksIG9wdGlvbnMgJiYgb3B0aW9ucy5leHRlbnNpb25QYWdlID09PSB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlRmlsZSh3aW46IFdpbmRvdywgYmxvYkRhdGE6IGFueSwgYmxvYk9wdGlvbnM6IGFueSwgZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIEJyb3dzZXJBcGkuZG93bmxvYWRGaWxlKHdpbiwgYmxvYkRhdGEsIGJsb2JPcHRpb25zLCBmaWxlTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXBwbGljYXRpb25WZXJzaW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShCcm93c2VyQXBpLmdldEFwcGxpY2F0aW9uVmVyc2lvbigpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBwb3J0c1dlYkF1dGhuKHdpbjogV2luZG93KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICh0eXBlb2YoUHVibGljS2V5Q3JlZGVudGlhbCkgIT09ICd1bmRlZmluZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBwb3J0c0R1bygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93VG9hc3QodHlwZTogJ2Vycm9yJyB8ICdzdWNjZXNzJyB8ICd3YXJuaW5nJyB8ICdpbmZvJywgdGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nIHwgc3RyaW5nW10sXHJcbiAgICAgICAgb3B0aW9ucz86IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzaG93VG9hc3QnLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93RGlhbG9nKGJvZHk6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGNvbmZpcm1UZXh0Pzogc3RyaW5nLCBjYW5jZWxUZXh0Pzogc3RyaW5nLCB0eXBlPzogc3RyaW5nLFxyXG4gICAgICAgIGJvZHlJc0h0bWw6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IGRpYWxvZ0lkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xyXG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzaG93RGlhbG9nJywge1xyXG4gICAgICAgICAgICB0ZXh0OiBib2R5SXNIdG1sID8gbnVsbCA6IGJvZHksXHJcbiAgICAgICAgICAgIGh0bWw6IGJvZHlJc0h0bWwgPyBib2R5IDogbnVsbCxcclxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICBjb25maXJtVGV4dDogY29uZmlybVRleHQsXHJcbiAgICAgICAgICAgIGNhbmNlbFRleHQ6IGNhbmNlbFRleHQsXHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgIGRpYWxvZ0lkOiBkaWFsb2dJZCxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4ocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0RpYWxvZ1Jlc29sdmVzLnNldChkaWFsb2dJZCwgeyByZXNvbHZlOiByZXNvbHZlLCBkYXRlOiBuZXcgRGF0ZSgpIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRGV2KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBwcm9jZXNzLmVudi5FTlYgPT09ICdkZXZlbG9wbWVudCc7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTZWxmSG9zdCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29weVRvQ2xpcGJvYXJkKHRleHQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGxldCB3aW4gPSB3aW5kb3c7XHJcbiAgICAgICAgbGV0IGRvYyA9IHdpbmRvdy5kb2N1bWVudDtcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiAob3B0aW9ucy53aW5kb3cgfHwgb3B0aW9ucy53aW4pKSB7XHJcbiAgICAgICAgICAgIHdpbiA9IG9wdGlvbnMud2luZG93IHx8IG9wdGlvbnMud2luO1xyXG4gICAgICAgICAgICBkb2MgPSB3aW4uZG9jdW1lbnQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZG9jKSB7XHJcbiAgICAgICAgICAgIGRvYyA9IG9wdGlvbnMuZG9jO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjbGVhcmluZyA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuY2xlYXJpbmcgOiBmYWxzZTtcclxuICAgICAgICBjb25zdCBjbGVhck1zOiBudW1iZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuY2xlYXJNcyA/IG9wdGlvbnMuY2xlYXJNcyA6IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzU2FmYXJpKCkpIHtcclxuICAgICAgICAgICAgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ2NvcHlUb0NsaXBib2FyZCcsIHRleHQpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjbGVhcmluZyAmJiB0aGlzLmNsaXBib2FyZFdyaXRlQ2FsbGJhY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkV3JpdGVDYWxsYmFjayh0ZXh0LCBjbGVhck1zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRmlyZWZveCgpICYmICh3aW4gYXMgYW55KS5uYXZpZ2F0b3IuY2xpcGJvYXJkICYmICh3aW4gYXMgYW55KS5uYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCkge1xyXG4gICAgICAgICAgICAod2luIGFzIGFueSkubmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNsZWFyaW5nICYmIHRoaXMuY2xpcGJvYXJkV3JpdGVDYWxsYmFjayAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRXcml0ZUNhbGxiYWNrKHRleHQsIGNsZWFyTXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKCh3aW4gYXMgYW55KS5jbGlwYm9hcmREYXRhICYmICh3aW4gYXMgYW55KS5jbGlwYm9hcmREYXRhLnNldERhdGEpIHtcclxuICAgICAgICAgICAgLy8gSUUgc3BlY2lmaWMgY29kZSBwYXRoIHRvIHByZXZlbnQgdGV4dGFyZWEgYmVpbmcgc2hvd24gd2hpbGUgZGlhbG9nIGlzIHZpc2libGUuXHJcbiAgICAgICAgICAgICh3aW4gYXMgYW55KS5jbGlwYm9hcmREYXRhLnNldERhdGEoJ1RleHQnLCB0ZXh0KTtcclxuICAgICAgICAgICAgaWYgKCFjbGVhcmluZyAmJiB0aGlzLmNsaXBib2FyZFdyaXRlQ2FsbGJhY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRXcml0ZUNhbGxiYWNrKHRleHQsIGNsZWFyTXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChkb2MucXVlcnlDb21tYW5kU3VwcG9ydGVkICYmIGRvYy5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQoJ2NvcHknKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Nocm9tZSgpICYmIHRleHQgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0ID0gJ1xcdTAwMDAnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xyXG4gICAgICAgICAgICB0ZXh0YXJlYS50ZXh0Q29udGVudCA9IHRleHQgPT0gbnVsbCB8fCB0ZXh0ID09PSAnJyA/ICcgJyA6IHRleHQ7XHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgc2Nyb2xsaW5nIHRvIGJvdHRvbSBvZiBwYWdlIGluIE1TIEVkZ2UuXHJcbiAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuICAgICAgICAgICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQodGV4dGFyZWEpO1xyXG4gICAgICAgICAgICB0ZXh0YXJlYS5zZWxlY3QoKTtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTZWN1cml0eSBleGNlcHRpb24gbWF5IGJlIHRocm93biBieSBzb21lIGJyb3dzZXJzLlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvYy5leGVjQ29tbWFuZCgnY29weScpICYmICFjbGVhcmluZyAmJiB0aGlzLmNsaXBib2FyZFdyaXRlQ2FsbGJhY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkV3JpdGVDYWxsYmFjayh0ZXh0LCBjbGVhck1zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvcHkgdG8gY2xpcGJvYXJkIGZhaWxlZC4nLCBlKTtcclxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIGRvYy5ib2R5LnJlbW92ZUNoaWxkKHRleHRhcmVhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZWFkRnJvbUNsaXBib2FyZChvcHRpb25zPzogYW55KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBsZXQgd2luID0gd2luZG93O1xyXG4gICAgICAgIGxldCBkb2MgPSB3aW5kb3cuZG9jdW1lbnQ7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgKG9wdGlvbnMud2luZG93IHx8IG9wdGlvbnMud2luKSkge1xyXG4gICAgICAgICAgICB3aW4gPSBvcHRpb25zLndpbmRvdyB8fCBvcHRpb25zLndpbjtcclxuICAgICAgICAgICAgZG9jID0gd2luLmRvY3VtZW50O1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRvYykge1xyXG4gICAgICAgICAgICBkb2MgPSBvcHRpb25zLmRvYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzU2FmYXJpKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IFNhZmFyaUFwcC5zZW5kTWVzc2FnZVRvQXBwKCdyZWFkRnJvbUNsaXBib2FyZCcpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0ZpcmVmb3goKSAmJiAod2luIGFzIGFueSkubmF2aWdhdG9yLmNsaXBib2FyZCAmJiAod2luIGFzIGFueSkubmF2aWdhdG9yLmNsaXBib2FyZC5yZWFkVGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgKHdpbiBhcyBhbnkpLm5hdmlnYXRvci5jbGlwYm9hcmQucmVhZFRleHQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRvYy5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQgJiYgZG9jLnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZCgncGFzdGUnKSkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xyXG4gICAgICAgICAgICAvLyBQcmV2ZW50IHNjcm9sbGluZyB0byBib3R0b20gb2YgcGFnZSBpbiBNUyBFZGdlLlxyXG4gICAgICAgICAgICB0ZXh0YXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHRleHRhcmVhKTtcclxuICAgICAgICAgICAgdGV4dGFyZWEuZm9jdXMoKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIFNlY3VyaXR5IGV4Y2VwdGlvbiBtYXkgYmUgdGhyb3duIGJ5IHNvbWUgYnJvd3NlcnMuXHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jLmV4ZWNDb21tYW5kKCdwYXN0ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHRhcmVhLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUmVhZCBmcm9tIGNsaXBib2FyZCBmYWlsZWQuJywgZSk7XHJcbiAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICBkb2MuYm9keS5yZW1vdmVDaGlsZCh0ZXh0YXJlYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzb2x2ZURpYWxvZ1Byb21pc2UoZGlhbG9nSWQ6IG51bWJlciwgY29uZmlybWVkOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0RpYWxvZ1Jlc29sdmVzLmhhcyhkaWFsb2dJZCkpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZU9iaiA9IHRoaXMuc2hvd0RpYWxvZ1Jlc29sdmVzLmdldChkaWFsb2dJZCk7XHJcbiAgICAgICAgICAgIHJlc29sdmVPYmoucmVzb2x2ZShjb25maXJtZWQpO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dEaWFsb2dSZXNvbHZlcy5kZWxldGUoZGlhbG9nSWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2xlYW4gdXAgb2xkIHByb21pc2VzXHJcbiAgICAgICAgdGhpcy5zaG93RGlhbG9nUmVzb2x2ZXMuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYWdlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB2YWwuZGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIGlmIChhZ2UgPiBEaWFsb2dQcm9taXNlRXhwaXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93RGlhbG9nUmVzb2x2ZXMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZXNvbHZlUGFzc3dvcmREaWFsb2dQcm9taXNlKGRpYWxvZ0lkOiBudW1iZXIsIGNhbmNlbGVkOiBib29sZWFuLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnBhc3N3b3JkRGlhbG9nUmVzb2x2ZXMuaGFzKGRpYWxvZ0lkKSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlT2JqID0gdGhpcy5wYXNzd29yZERpYWxvZ1Jlc29sdmVzLmdldChkaWFsb2dJZCk7XHJcbiAgICAgICAgICAgIGlmIChhd2FpdCByZXNvbHZlT2JqLnRyeVJlc29sdmUoY2FuY2VsZWQsIHBhc3N3b3JkKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXNzd29yZERpYWxvZ1Jlc29sdmVzLmRlbGV0ZShkaWFsb2dJZCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDbGVhbiB1cCBvbGQgcHJvbWlzZXNcclxuICAgICAgICB0aGlzLnBhc3N3b3JkRGlhbG9nUmVzb2x2ZXMuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYWdlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB2YWwuZGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIGlmIChhZ2UgPiBEaWFsb2dQcm9taXNlRXhwaXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXNzd29yZERpYWxvZ1Jlc29sdmVzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc3VwcG9ydHNCaW9tZXRyaWMoKSB7XHJcbiAgICAgICAgY29uc3QgcGxhdGZvcm1JbmZvID0gYXdhaXQgQnJvd3NlckFwaS5nZXRQbGF0Zm9ybUluZm8oKTtcclxuICAgICAgICBpZiAocGxhdGZvcm1JbmZvLm9zID09PSAnYW5kcm9pZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGaXJlZm94KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KChhd2FpdCBicm93c2VyLnJ1bnRpbWUuZ2V0QnJvd3NlckluZm8oKSkudmVyc2lvbi5zcGxpdCgnLicpWzBdLCAxMCkgPj0gODc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBhdXRoZW50aWNhdGVCaW9tZXRyaWMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmlvbWV0cmljQ2FsbGJhY2soKTtcclxuICAgIH1cclxuXHJcbiAgICBzaWRlYmFyVmlld05hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoKHdpbmRvdyBhcyBhbnkpLmNocm9tZS5zaWRlYmFyQWN0aW9uICYmIHRoaXMuaXNGaXJlZm94KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdzaWRlYmFyJztcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNPcGVyYSgpICYmICh0eXBlb2Ygb3ByICE9PSAndW5kZWZpbmVkJykgJiYgb3ByLnNpZGViYXJBY3Rpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuICdzaWRlYmFyX3BhbmVsJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHN1cHBvcnRzU2VjdXJlU3RvcmFnZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGVmYXVsdFN5c3RlbVRoZW1lKCk6IFByb21pc2U8VGhlbWVUeXBlLkxpZ2h0IHwgVGhlbWVUeXBlLkRhcms+IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMucHJlZmVyc0NvbG9yU2NoZW1lRGFyay5tYXRjaGVzID8gVGhlbWVUeXBlLkRhcmsgOiBUaGVtZVR5cGUuTGlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGVmYXVsdFN5c3RlbVRoZW1lQ2hhbmdlKGNhbGxiYWNrOiAoKHRoZW1lOiBUaGVtZVR5cGUuTGlnaHQgfCBUaGVtZVR5cGUuRGFyaykgPT4gdW5rbm93bikpIHtcclxuICAgICAgICB0aGlzLnByZWZlcnNDb2xvclNjaGVtZURhcmsuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKHsgbWF0Y2hlcyB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG1hdGNoZXMgPyBUaGVtZVR5cGUuRGFyayA6IFRoZW1lVHlwZS5MaWdodCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0RWZmZWN0aXZlVGhlbWUoKSB7XHJcbiAgICAgICAgY29uc3QgdGhlbWUgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxUaGVtZVR5cGU+KENvbnN0YW50c1NlcnZpY2UudGhlbWVLZXkpO1xyXG4gICAgICAgIGlmICh0aGVtZSA9PSBudWxsIHx8IHRoZW1lID09PSBUaGVtZVR5cGUuU3lzdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERlZmF1bHRTeXN0ZW1UaGVtZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGVtZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcm93c2VyU3RvcmFnZVNlcnZpY2UgaW1wbGVtZW50cyBTdG9yYWdlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGNocm9tZVN0b3JhZ2VBcGk6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNocm9tZVN0b3JhZ2VBcGkgPSBjaHJvbWUuc3RvcmFnZS5sb2NhbDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXQ8VD4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hyb21lU3RvcmFnZUFwaS5nZXQoa2V5LCAob2JqOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmogIT0gbnVsbCAmJiBvYmpba2V5XSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvYmpba2V5XSBhcyBUKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBoYXMoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXQoa2V5KSAhPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmUoa2V5OiBzdHJpbmcsIG9iajogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gRml4IHNhZmFyaSBub3QgbGlraW5nIG51bGwgaW4gc2V0XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hyb21lU3RvcmFnZUFwaS5yZW1vdmUoa2V5LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIFNldCkge1xyXG4gICAgICAgICAgICBvYmogPSBBcnJheS5mcm9tKG9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBrZXllZE9iaiA9IHsgW2tleV06IG9iaiB9O1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jaHJvbWVTdG9yYWdlQXBpLnNldChrZXllZE9iaiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jaHJvbWVTdG9yYWdlQXBpLnJlbW92ZShrZXksICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSTE4blNlcnZpY2UgYXMgSTE4blNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEkxOG5TZXJ2aWNlIGltcGxlbWVudHMgSTE4blNlcnZpY2VBYnN0cmFjdGlvbiB7XHJcbiAgICBsb2NhbGU6IHN0cmluZztcclxuICAgIC8vIEZpcnN0IGxvY2FsZSBpcyB0aGUgZGVmYXVsdCAoRW5nbGlzaClcclxuICAgIHN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlczogc3RyaW5nW10gPSBbJ2VuJ107XHJcbiAgICB0cmFuc2xhdGlvbkxvY2FsZTogc3RyaW5nO1xyXG4gICAgY29sbGF0b3I6IEludGwuQ29sbGF0b3I7XHJcbiAgICBsb2NhbGVOYW1lcyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KFtcclxuICAgICAgICBbJ2FmJywgJ0FmcmlrYWFucyddLFxyXG4gICAgICAgIFsnYXonLCAnQXrJmXJiYXljYW5jYSddLFxyXG4gICAgICAgIFsnYmUnLCAn0JHQtdC70LDRgNGD0YHQutCw0Y8nXSxcclxuICAgICAgICBbJ2JnJywgJ9Cx0YrQu9Cz0LDRgNGB0LrQuCddLFxyXG4gICAgICAgIFsnY2EnLCAnY2F0YWzDoCddLFxyXG4gICAgICAgIFsnY3MnLCAnxI1lxaF0aW5hJ10sXHJcbiAgICAgICAgWydkYScsICdkYW5zayddLFxyXG4gICAgICAgIFsnZGUnLCAnRGV1dHNjaCddLFxyXG4gICAgICAgIFsnZWwnLCAnzpXOu867zrfOvc65zrrOrCddLFxyXG4gICAgICAgIFsnZW4nLCAnRW5nbGlzaCddLFxyXG4gICAgICAgIFsnZW4tR0InLCAnRW5nbGlzaCAoQnJpdGlzaCknXSxcclxuICAgICAgICBbJ2VvJywgJ0VzcGVyYW50byddLFxyXG4gICAgICAgIFsnZXMnLCAnZXNwYcOxb2wnXSxcclxuICAgICAgICBbJ2V0JywgJ2Vlc3RpJ10sXHJcbiAgICAgICAgWydmYScsICfZgdin2LHYs9uMJ10sXHJcbiAgICAgICAgWydmaScsICdzdW9taSddLFxyXG4gICAgICAgIFsnZnInLCAnZnJhbsOnYWlzJ10sXHJcbiAgICAgICAgWydoZScsICfXoteR16jXmdeqJ10sXHJcbiAgICAgICAgWydoaScsICfgpLngpL/gpKjgpY3gpKbgpYAnXSxcclxuICAgICAgICBbJ2hyJywgJ2hydmF0c2tpJ10sXHJcbiAgICAgICAgWydodScsICdtYWd5YXInXSxcclxuICAgICAgICBbJ2lkJywgJ0JhaGFzYSBJbmRvbmVzaWEnXSxcclxuICAgICAgICBbJ2l0JywgJ2l0YWxpYW5vJ10sXHJcbiAgICAgICAgWydqYScsICfml6XmnKzoqp4nXSxcclxuICAgICAgICBbJ2tvJywgJ+2VnOq1reyWtCddLFxyXG4gICAgICAgIFsnbHYnLCAnTGF0dmlldGlzJ10sXHJcbiAgICAgICAgWydtbCcsICfgtK7gtLLgtK/gtL7gtLPgtIInXSxcclxuICAgICAgICBbJ25iJywgJ25vcnNrIChib2ttw6VsKSddLFxyXG4gICAgICAgIFsnbmwnLCAnTmVkZXJsYW5kcyddLFxyXG4gICAgICAgIFsncGwnLCAncG9sc2tpJ10sXHJcbiAgICAgICAgWydwdC1CUicsICdwb3J0dWd1w6pzIGRvIEJyYXNpbCddLFxyXG4gICAgICAgIFsncHQtUFQnLCAncG9ydHVndcOqcyddLFxyXG4gICAgICAgIFsncm8nLCAncm9tw6JuxIMnXSxcclxuICAgICAgICBbJ3J1JywgJ9GA0YPRgdGB0LrQuNC5J10sXHJcbiAgICAgICAgWydzaycsICdzbG92ZW7EjWluYSddLFxyXG4gICAgICAgIFsnc3InLCAn0KHRgNC/0YHQutC4J10sXHJcbiAgICAgICAgWydzdicsICdzdmVuc2thJ10sXHJcbiAgICAgICAgWyd0aCcsICfguYTguJfguKInXSxcclxuICAgICAgICBbJ3RyJywgJ1TDvHJrw6dlJ10sXHJcbiAgICAgICAgWyd1aycsICfRg9C60YDQsNGX0L3RgdGM0LrQsCddLFxyXG4gICAgICAgIFsndmknLCAnVGnhur9uZyBWaeG7h3QnXSxcclxuICAgICAgICBbJ3poLUNOJywgJ+S4reaWh++8iOS4reWbveWkp+mZhu+8iSddLFxyXG4gICAgICAgIFsnemgtVFcnLCAn5Lit5paH77yI5Y+w54Gj77yJJ10sXHJcbiAgICBdKTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgaW5pdGVkOiBib29sZWFuO1xyXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRNZXNzYWdlczogYW55ID0ge307XHJcbiAgICBwcm90ZWN0ZWQgbG9jYWxlTWVzc2FnZXM6IGFueSA9IHt9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzeXN0ZW1MYW5ndWFnZTogc3RyaW5nLCBwcm90ZWN0ZWQgbG9jYWxlc0RpcmVjdG9yeTogc3RyaW5nLFxyXG4gICAgICAgIHByb3RlY3RlZCBnZXRMb2NhbGVzSnNvbjogKGZvcm1hdHRlZExvY2FsZTogc3RyaW5nKSA9PiBQcm9taXNlPGFueT4pIHtcclxuICAgICAgICB0aGlzLnN5c3RlbUxhbmd1YWdlID0gc3lzdGVtTGFuZ3VhZ2UucmVwbGFjZSgnXycsICctJyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaW5pdChsb2NhbGU/OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5pbml0ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpMThuIGFscmVhZHkgaW5pdGlhbGl6ZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlcyA9PSBudWxsIHx8IHRoaXMuc3VwcG9ydGVkVHJhbnNsYXRpb25Mb2NhbGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlcyBub3Qgc2V0LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubG9jYWxlID0gdGhpcy50cmFuc2xhdGlvbkxvY2FsZSA9IGxvY2FsZSAhPSBudWxsID8gbG9jYWxlIDogdGhpcy5zeXN0ZW1MYW5ndWFnZTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsYXRvciA9IG5ldyBJbnRsLkNvbGxhdG9yKHRoaXMubG9jYWxlLCB7IG51bWVyaWM6IHRydWUsIHNlbnNpdGl2aXR5OiAnYmFzZScgfSk7XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGF0b3IgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydGVkVHJhbnNsYXRpb25Mb2NhbGVzLmluZGV4T2YodGhpcy50cmFuc2xhdGlvbkxvY2FsZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb25Mb2NhbGUgPSB0aGlzLnRyYW5zbGF0aW9uTG9jYWxlLnNsaWNlKDAsIDIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3VwcG9ydGVkVHJhbnNsYXRpb25Mb2NhbGVzLmluZGV4T2YodGhpcy50cmFuc2xhdGlvbkxvY2FsZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uTG9jYWxlID0gdGhpcy5zdXBwb3J0ZWRUcmFuc2xhdGlvbkxvY2FsZXNbMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsZXNEaXJlY3RvcnkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRNZXNzYWdlcyh0aGlzLnRyYW5zbGF0aW9uTG9jYWxlLCB0aGlzLmxvY2FsZU1lc3NhZ2VzKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNsYXRpb25Mb2NhbGUgIT09IHRoaXMuc3VwcG9ydGVkVHJhbnNsYXRpb25Mb2NhbGVzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRNZXNzYWdlcyh0aGlzLnN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlc1swXSwgdGhpcy5kZWZhdWx0TWVzc2FnZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHQoaWQ6IHN0cmluZywgcDE/OiBzdHJpbmcsIHAyPzogc3RyaW5nLCBwMz86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlKGlkLCBwMSwgcDIsIHAzKTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2xhdGUoaWQ6IHN0cmluZywgcDE/OiBzdHJpbmcsIHAyPzogc3RyaW5nLCBwMz86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogc3RyaW5nO1xyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsZU1lc3NhZ2VzLmhhc093blByb3BlcnR5KGlkKSAmJiB0aGlzLmxvY2FsZU1lc3NhZ2VzW2lkXSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmxvY2FsZU1lc3NhZ2VzW2lkXTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdE1lc3NhZ2VzLmhhc093blByb3BlcnR5KGlkKSAmJiB0aGlzLmRlZmF1bHRNZXNzYWdlc1tpZF0pIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5kZWZhdWx0TWVzc2FnZXNbaWRdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gJycpIHtcclxuICAgICAgICAgICAgaWYgKHAxICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zcGxpdCgnX18kMV9fJykuam9pbihwMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHAyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zcGxpdCgnX18kMl9fJykuam9pbihwMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHAzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zcGxpdCgnX18kM19fJykuam9pbihwMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkTWVzc2FnZXMobG9jYWxlOiBzdHJpbmcsIG1lc3NhZ2VzT2JqOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZExvY2FsZSA9IGxvY2FsZS5yZXBsYWNlKCctJywgJ18nKTtcclxuICAgICAgICBjb25zdCBsb2NhbGVzID0gYXdhaXQgdGhpcy5nZXRMb2NhbGVzSnNvbihmb3JtYXR0ZWRMb2NhbGUpO1xyXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBsb2NhbGVzKSB7XHJcbiAgICAgICAgICAgIGlmICghbG9jYWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWVzc2FnZXNPYmpbcHJvcF0gPSBsb2NhbGVzW3Byb3BdLm1lc3NhZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAobG9jYWxlc1twcm9wXS5wbGFjZWhvbGRlcnMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGxhY2VQcm9wIGluIGxvY2FsZXNbcHJvcF0ucGxhY2Vob2xkZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVzW3Byb3BdLnBsYWNlaG9sZGVycy5oYXNPd25Qcm9wZXJ0eShwbGFjZVByb3ApIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICFsb2NhbGVzW3Byb3BdLnBsYWNlaG9sZGVyc1twbGFjZVByb3BdLmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlVG9rZW4gPSAnXFxcXCQnICsgcGxhY2VQcm9wLnRvVXBwZXJDYXNlKCkgKyAnXFxcXCQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXBsYWNlQ29udGVudCA9IGxvY2FsZXNbcHJvcF0ucGxhY2Vob2xkZXJzW3BsYWNlUHJvcF0uY29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVwbGFjZUNvbnRlbnQgPT09ICckMScgfHwgcmVwbGFjZUNvbnRlbnQgPT09ICckMicgfHwgcmVwbGFjZUNvbnRlbnQgPT09ICckMycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSAnX18kJyArIHJlcGxhY2VDb250ZW50ICsgJ19fJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNPYmpbcHJvcF0gPSBtZXNzYWdlc09ialtwcm9wXS5yZXBsYWNlKG5ldyBSZWdFeHAocmVwbGFjZVRva2VuLCAnZycpLCByZXBsYWNlQ29udGVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCB7IEkxOG5TZXJ2aWNlIGFzIEJhc2VJMThuU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9pMThuLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSTE4blNlcnZpY2UgZXh0ZW5kcyBCYXNlSTE4blNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3Ioc3lzdGVtTGFuZ3VhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKHN5c3RlbUxhbmd1YWdlLCBudWxsLCBhc3luYyAoZm9ybWF0dGVkTG9jYWxlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgLy8gRGVwcmVjYXRlZFxyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXdhaXQgZmV0Y2godGhpcy5sb2NhbGVzRGlyZWN0b3J5ICsgZm9ybWF0dGVkTG9jYWxlICsgJy9tZXNzYWdlcy5qc29uJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBmaWxlLmpzb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUGxlYXNlIGxlYXZlICdlbicgd2hlcmUgaXQgaXMsIGFzIGl0J3Mgb3VyIGZhbGxiYWNrIGxhbmd1YWdlIGluIGNhc2Ugbm8gdHJhbnNsYXRpb24gY2FuIGJlIGZvdW5kXHJcbiAgICAgICAgdGhpcy5zdXBwb3J0ZWRUcmFuc2xhdGlvbkxvY2FsZXMgPSBbXHJcbiAgICAgICAgICAgICdlbicsICdheicsICdiZScsICdiZycsICdibicsICdjYScsICdjcycsICdkYScsICdkZScsICdlbCcsICdlbi1HQicsICdlbi1JTicsICdlcycsICdldCcsICdmYScsICdmaScsICdmcicsICdoZScsICdocicsICdodScsXHJcbiAgICAgICAgICAgICdpZCcsICdpdCcsICdqYScsICdrbicsICdrbycsICdsdicsICdtbCcsICduYicsICdubCcsICdwbCcsICdwdC1CUicsICdwdC1QVCcsICdybycsICdydScsICdzaycsICdzcicsICdzdicsICd0aCcsICd0cicsICd1aycsXHJcbiAgICAgICAgICAgICd2aScsICd6aC1DTicsICd6aC1UVycsXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICB0KGlkOiBzdHJpbmcsIHAxPzogc3RyaW5nLCBwMj86IHN0cmluZywgcDM/OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZShpZCwgcDEsIHAyLCBwMyk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNsYXRlKGlkOiBzdHJpbmcsIHAxPzogc3RyaW5nLCBwMj86IHN0cmluZywgcDM/OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsZXNEaXJlY3RvcnkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGlmIChwMSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcnMucHVzaChwMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHAyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVycy5wdXNoKHAyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocDMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1c2gocDMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocGxhY2Vob2xkZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNocm9tZS5pMThuLmdldE1lc3NhZ2UoaWQsIHBsYWNlaG9sZGVycyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hyb21lLmkxOG4uZ2V0TWVzc2FnZShpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdXBlci50cmFuc2xhdGUoaWQsIHAxLCBwMiwgcDMpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbnN0YW50c1NlcnZpY2UgfSBmcm9tICcuL2NvbnN0YW50cy5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IENpcGhlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY2lwaGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jb2xsZWN0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9sZGVyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9mb2xkZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEtleUNvbm5lY3RvclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMva2V5Q29ubmVjdG9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBNZXNzYWdpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL21lc3NhZ2luZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9saWN5U2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9wb2xpY3kuc2VydmljZSc7XHJcbmltcG9ydCB7IFNlYXJjaFNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc2VhcmNoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUb2tlblNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdG9rZW4uc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFZhdWx0VGltZW91dFNlcnZpY2UgYXMgVmF1bHRUaW1lb3V0U2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3ZhdWx0VGltZW91dC5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IFBvbGljeVR5cGUgfSBmcm9tICcuLi9lbnVtcy9wb2xpY3lUeXBlJztcclxuaW1wb3J0IHsgRW5jU3RyaW5nIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9lbmNTdHJpbmcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZhdWx0VGltZW91dFNlcnZpY2UgaW1wbGVtZW50cyBWYXVsdFRpbWVvdXRTZXJ2aWNlQWJzdHJhY3Rpb24ge1xyXG4gICAgcGluUHJvdGVjdGVkS2V5OiBFbmNTdHJpbmcgPSBudWxsO1xyXG4gICAgYmlvbWV0cmljTG9ja2VkOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIGV2ZXJCZWVuVW5sb2NrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGluaXRlZCA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2lwaGVyU2VydmljZTogQ2lwaGVyU2VydmljZSwgcHJpdmF0ZSBmb2xkZXJTZXJ2aWNlOiBGb2xkZXJTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY29sbGVjdGlvblNlcnZpY2U6IENvbGxlY3Rpb25TZXJ2aWNlLCBwcml2YXRlIGNyeXB0b1NlcnZpY2U6IENyeXB0b1NlcnZpY2UsXHJcbiAgICAgICAgcHJvdGVjdGVkIHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBtZXNzYWdpbmdTZXJ2aWNlOiBNZXNzYWdpbmdTZXJ2aWNlLCBwcml2YXRlIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsIHByaXZhdGUgdG9rZW5TZXJ2aWNlOiBUb2tlblNlcnZpY2UsIHByaXZhdGUgcG9saWN5U2VydmljZTogUG9saWN5U2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGtleUNvbm5lY3RvclNlcnZpY2U6IEtleUNvbm5lY3RvclNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBsb2NrZWRDYWxsYmFjazogKCkgPT4gUHJvbWlzZTx2b2lkPiA9IG51bGwsIHByaXZhdGUgbG9nZ2VkT3V0Q2FsbGJhY2s6ICgpID0+IFByb21pc2U8dm9pZD4gPSBudWxsKSB7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdChjaGVja09uSW50ZXJ2YWw6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5pbml0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmIChjaGVja09uSW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydENoZWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0Q2hlY2soKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja1ZhdWx0VGltZW91dCgpO1xyXG4gICAgICAgIHNldEludGVydmFsKCgpID0+IHRoaXMuY2hlY2tWYXVsdFRpbWVvdXQoKSwgMTAgKiAxMDAwKTsgLy8gY2hlY2sgZXZlcnkgMTAgc2Vjb25kc1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEtleXMgYXJlbid0IHN0b3JlZCBmb3IgYSBkZXZpY2UgdGhhdCBpcyBsb2NrZWQgb3IgbG9nZ2VkIG91dC5cclxuICAgIGFzeW5jIGlzTG9ja2VkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIC8vIEhhbmRsZSBuZXZlciBsb2NrIHN0YXJ0dXAgc2l0dWF0aW9uXHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5oYXNLZXlTdG9yZWQoJ2F1dG8nKSAmJiAhdGhpcy5ldmVyQmVlblVubG9ja2VkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5nZXRLZXkoJ2F1dG8nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAhdGhpcy5jcnlwdG9TZXJ2aWNlLmhhc0tleUluTWVtb3J5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY2hlY2tWYXVsdFRpbWVvdXQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNWaWV3T3BlbigpKSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCBsb2NrXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFwiaXMgbG9nZ2VkIG91dCBjaGVja1wiIC0gc2ltaWxhciB0byBpc0xvY2tlZCwgYmVsb3dcclxuICAgICAgICBjb25zdCBhdXRoZWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpO1xyXG4gICAgICAgIGlmICghYXV0aGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmlzTG9ja2VkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdmF1bHRUaW1lb3V0ID0gYXdhaXQgdGhpcy5nZXRWYXVsdFRpbWVvdXQoKTtcclxuICAgICAgICBpZiAodmF1bHRUaW1lb3V0ID09IG51bGwgfHwgdmF1bHRUaW1lb3V0IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8bnVtYmVyPihDb25zdGFudHNTZXJ2aWNlLmxhc3RBY3RpdmVLZXkpO1xyXG4gICAgICAgIGlmIChsYXN0QWN0aXZlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdmF1bHRUaW1lb3V0U2Vjb25kcyA9IHZhdWx0VGltZW91dCAqIDYwO1xyXG4gICAgICAgIGNvbnN0IGRpZmZTZWNvbmRzID0gKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSBsYXN0QWN0aXZlKSAvIDEwMDA7XHJcbiAgICAgICAgaWYgKGRpZmZTZWNvbmRzID49IHZhdWx0VGltZW91dFNlY29uZHMpIHtcclxuICAgICAgICAgICAgLy8gUGl2b3QgYmFzZWQgb24gdGhlIHNhdmVkIHZhdWx0IHRpbWVvdXQgYWN0aW9uXHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRBY3Rpb24gPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0QWN0aW9uS2V5KTtcclxuICAgICAgICAgICAgdGltZW91dEFjdGlvbiA9PT0gJ2xvZ091dCcgPyBhd2FpdCB0aGlzLmxvZ091dCgpIDogYXdhaXQgdGhpcy5sb2NrKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBsb2NrKGFsbG93U29mdExvY2sgPSBmYWxzZSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGF1dGhlZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XHJcbiAgICAgICAgaWYgKCFhdXRoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMua2V5Q29ubmVjdG9yU2VydmljZS5nZXRVc2VzS2V5Q29ubmVjdG9yKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgcGluU2V0ID0gYXdhaXQgdGhpcy5pc1BpbkxvY2tTZXQoKTtcclxuICAgICAgICAgICAgY29uc3QgcGluTG9jayA9IChwaW5TZXRbMF0gJiYgdGhpcy5waW5Qcm90ZWN0ZWRLZXkgIT0gbnVsbCkgfHwgcGluU2V0WzFdO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFwaW5Mb2NrICYmICFhd2FpdCB0aGlzLmlzQmlvbWV0cmljTG9ja1NldCgpKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvZ091dCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJpb21ldHJpY0xvY2tlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5ldmVyQmVlblVubG9ja2VkID0gdHJ1ZTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuY2xlYXJLZXkoZmFsc2UpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5jbGVhck9yZ0tleXModHJ1ZSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmNsZWFyS2V5UGFpcih0cnVlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuY2xlYXJFbmNLZXkodHJ1ZSk7XHJcblxyXG4gICAgICAgIHRoaXMuZm9sZGVyU2VydmljZS5jbGVhckNhY2hlKCk7XHJcbiAgICAgICAgdGhpcy5jaXBoZXJTZXJ2aWNlLmNsZWFyQ2FjaGUoKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25TZXJ2aWNlLmNsZWFyQ2FjaGUoKTtcclxuICAgICAgICB0aGlzLnNlYXJjaFNlcnZpY2UuY2xlYXJJbmRleCgpO1xyXG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdsb2NrZWQnKTtcclxuICAgICAgICBpZiAodGhpcy5sb2NrZWRDYWxsYmFjayAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9ja2VkQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9nT3V0KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICh0aGlzLmxvZ2dlZE91dENhbGxiYWNrICE9IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2dnZWRPdXRDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZXRWYXVsdFRpbWVvdXRPcHRpb25zKHRpbWVvdXQ6IG51bWJlciwgYWN0aW9uOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRLZXksIHRpbWVvdXQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEFjdGlvbktleSwgYWN0aW9uKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UudG9nZ2xlS2V5KCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy50b2tlblNlcnZpY2UudG9nZ2xlVG9rZW5zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaXNQaW5Mb2NrU2V0KCk6IFByb21pc2U8W2Jvb2xlYW4sIGJvb2xlYW5dPiB7XHJcbiAgICAgICAgY29uc3QgcHJvdGVjdGVkUGluID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihDb25zdGFudHNTZXJ2aWNlLnByb3RlY3RlZFBpbik7XHJcbiAgICAgICAgY29uc3QgcGluUHJvdGVjdGVkS2V5ID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihDb25zdGFudHNTZXJ2aWNlLnBpblByb3RlY3RlZEtleSk7XHJcbiAgICAgICAgcmV0dXJuIFtwcm90ZWN0ZWRQaW4gIT0gbnVsbCwgcGluUHJvdGVjdGVkS2V5ICE9IG51bGxdO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGlzQmlvbWV0cmljTG9ja1NldCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8Ym9vbGVhbj4oQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNVbmxvY2tLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFZhdWx0VGltZW91dCgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgICAgIGNvbnN0IHZhdWx0VGltZW91dCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRLZXkpO1xyXG5cclxuICAgICAgICBpZiAoYXdhaXQgdGhpcy5wb2xpY3lTZXJ2aWNlLnBvbGljeUFwcGxpZXNUb1VzZXIoUG9saWN5VHlwZS5NYXhpbXVtVmF1bHRUaW1lb3V0KSkge1xyXG4gICAgICAgICAgICBjb25zdCBwb2xpY3kgPSBhd2FpdCB0aGlzLnBvbGljeVNlcnZpY2UuZ2V0QWxsKFBvbGljeVR5cGUuTWF4aW11bVZhdWx0VGltZW91dCk7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBuZWdhdGl2ZSB2YWx1ZXMsIGFuZCBlbnN1cmUgaXQncyBzbWFsbGVyIHRoYW4gbWF4aW11bSBhbGxvd2VkIHZhbHVlIGFjY29yZGluZyB0byBwb2xpY3lcclxuICAgICAgICAgICAgbGV0IHRpbWVvdXQgPSBNYXRoLm1pbih2YXVsdFRpbWVvdXQsIHBvbGljeVswXS5kYXRhLm1pbnV0ZXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhdWx0VGltZW91dCA9PSBudWxsIHx8IHRpbWVvdXQgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gcG9saWN5WzBdLmRhdGEubWludXRlcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gV2UgcmVhbGx5IHNob3VsZG4ndCBuZWVkIHRvIHNldCB0aGUgdmFsdWUgaGVyZSwgYnV0IG11bHRpcGxlIHNlcnZpY2VzIHJlbGllcyBvbiB0aGlzIHZhbHVlIGJlaW5nIGNvcnJlY3QuXHJcbiAgICAgICAgICAgIGlmICh2YXVsdFRpbWVvdXQgIT09IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEtleSwgdGltZW91dCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aW1lb3V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhdWx0VGltZW91dDtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRoaXMuZXZlckJlZW5VbmxvY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGluUHJvdGVjdGVkS2V5ID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoQ29uc3RhbnRzU2VydmljZS5wcm90ZWN0ZWRQaW4pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFZhdWx0VGltZW91dFNlcnZpY2UgYXMgQmFzZVZhdWx0VGltZW91dFNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTYWZhcmlBcHAgfSBmcm9tICcuLi9icm93c2VyL3NhZmFyaUFwcCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYXVsdFRpbWVvdXRTZXJ2aWNlIGV4dGVuZHMgQmFzZVZhdWx0VGltZW91dFNlcnZpY2Uge1xyXG5cclxuICAgIHN0YXJ0Q2hlY2soKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja1ZhdWx0VGltZW91dCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzU2FmYXJpKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja1NhZmFyaSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHRoaXMuY2hlY2tWYXVsdFRpbWVvdXQoKSwgMTAgKiAxMDAwKTsgLy8gY2hlY2sgZXZlcnkgMTAgc2Vjb25kc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGlzIGlzIGEgd29yay1hcm91bmQgdG8gc2FmYXJpIGFkZGluZyBhbiBhcmJpdGFyeSBkZWxheSB0byBzZXRUaW1lb3V0IGFuZFxyXG4gICAgLy8gIHNldEludGVydmFscy4gSXQgd29ya3MgYnkgY2FsbGluZyB0aGUgbmF0aXZlIGV4dGVuc2lvbiB3aGljaCBzbGVlcHMgZm9yIDEwcyxcclxuICAgIC8vICBlZmZpY2llbnRseSByZXBsaWNhdGluZyBzZXRJbnRlcnZhbC5cclxuICAgIGFzeW5jIGNoZWNrU2FmYXJpKCkge1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBTYWZhcmlBcHAuc2VuZE1lc3NhZ2VUb0FwcCgnc2xlZXAnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tWYXVsdFRpbWVvdXQoKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXhjZXB0aW9uIFNhZmFyaSBWYXVsdFRpbWVvdXQnLCBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDaXBoZXJSZXByb21wdFR5cGUgfSBmcm9tICdqc2xpYi1jb21tb24vZW51bXMvY2lwaGVyUmVwcm9tcHRUeXBlJztcclxuaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9lbnVtcy9jaXBoZXJUeXBlJztcclxuXHJcbmltcG9ydCB7IENpcGhlclZpZXcgfSBmcm9tICdqc2xpYi1jb21tb24vbW9kZWxzL3ZpZXcvY2lwaGVyVmlldyc7XHJcblxyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQXBwSWRTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL2FwcElkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBdWRpdFNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvYXVkaXQuc2VydmljZSc7XHJcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL2F1dGguc2VydmljZSc7XHJcbmltcG9ydCB7IENpcGhlclNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvY2lwaGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9jb2xsZWN0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb25zb2xlTG9nU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9jb25zb2xlTG9nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL2NvbnN0YW50cy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29udGFpbmVyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9jb250YWluZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEVudmlyb25tZW50U2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9lbnZpcm9ubWVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL2V2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFeHBvcnRTZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL2V4cG9ydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRmlsZVVwbG9hZFNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvZmlsZVVwbG9hZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9sZGVyU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9mb2xkZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEtleUNvbm5lY3RvclNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMva2V5Q29ubmVjdG9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9ub3RpZmljYXRpb25zLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL3Bhc3N3b3JkR2VuZXJhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9saWN5U2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9wb2xpY3kuc2VydmljZSc7XHJcbmltcG9ydCB7IFNlYXJjaFNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvc2VhcmNoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTZW5kU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9zZW5kLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTZXR0aW5nc1NlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvc2V0dGluZ3Muc2VydmljZSc7XHJcbmltcG9ydCB7IFN0YXRlU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9zdGF0ZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3luY1NlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvc3luYy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3lzdGVtU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy9zeXN0ZW0uc2VydmljZSc7XHJcbmltcG9ydCB7IFRva2VuU2VydmljZSB9IGZyb20gJ2pzbGliLWNvbW1vbi9zZXJ2aWNlcy90b2tlbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVG90cFNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvdG90cC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvdXNlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclZlcmlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICdqc2xpYi1jb21tb24vc2VydmljZXMvdXNlclZlcmlmaWNhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgV2ViQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlIH0gZnJvbSAnanNsaWItY29tbW9uL3NlcnZpY2VzL3dlYkNyeXB0b0Z1bmN0aW9uLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgQXBpU2VydmljZSBhcyBBcGlTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQXBwSWRTZXJ2aWNlIGFzIEFwcElkU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9hcHBJZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQXVkaXRTZXJ2aWNlIGFzIEF1ZGl0U2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9hdWRpdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQXV0aFNlcnZpY2UgYXMgQXV0aFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvYXV0aC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2lwaGVyU2VydmljZSBhcyBDaXBoZXJTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29sbGVjdGlvblNlcnZpY2UgYXMgQ29sbGVjdGlvblNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvY29sbGVjdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSBhcyBDcnlwdG9TZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlIGFzIENyeXB0b0Z1bmN0aW9uU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9jcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRW52aXJvbm1lbnRTZXJ2aWNlIGFzIEVudmlyb25tZW50U2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9lbnZpcm9ubWVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIGFzIEV2ZW50U2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9ldmVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRXhwb3J0U2VydmljZSBhcyBFeHBvcnRTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2V4cG9ydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRmlsZVVwbG9hZFNlcnZpY2UgYXMgRmlsZVVwbG9hZFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvZmlsZVVwbG9hZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9sZGVyU2VydmljZSBhcyBGb2xkZXJTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2ZvbGRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSTE4blNlcnZpY2UgYXMgSTE4blNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvaTE4bi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgS2V5Q29ubmVjdG9yU2VydmljZSBhcyBLZXlDb25uZWN0b3JTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2tleUNvbm5lY3Rvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nU2VydmljZSBhcyBMb2dTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL2xvZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTWVzc2FnaW5nU2VydmljZSBhcyBNZXNzYWdpbmdTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL21lc3NhZ2luZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uc1NlcnZpY2UgYXMgTm90aWZpY2F0aW9uc1NlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvbm90aWZpY2F0aW9ucy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSBhcyBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3Bhc3N3b3JkR2VuZXJhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgYXMgUGxhdGZvcm1VdGlsc1NlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9saWN5U2VydmljZSBhcyBQb2xpY3lTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3BvbGljeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VhcmNoU2VydmljZSBhcyBTZWFyY2hTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3NlYXJjaC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VuZFNlcnZpY2UgYXMgU2VuZFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvc2VuZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2V0dGluZ3NTZXJ2aWNlIGFzIFNldHRpbmdzU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9zZXR0aW5ncy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RhdGVTZXJ2aWNlIGFzIFN0YXRlU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy9zdGF0ZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgYXMgU3RvcmFnZVNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3luY1NlcnZpY2UgYXMgU3luY1NlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvc3luYy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3lzdGVtU2VydmljZSBhcyBTeXN0ZW1TZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3N5c3RlbS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVG9rZW5TZXJ2aWNlIGFzIFRva2VuU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWItY29tbW9uL2Fic3RyYWN0aW9ucy90b2tlbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVG90cFNlcnZpY2UgYXMgVG90cFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdG90cC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclNlcnZpY2UgYXMgVXNlclNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdXNlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXNlclZlcmlmaWNhdGlvblNlcnZpY2UgYXMgVXNlclZlcmlmaWNhdGlvblNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliLWNvbW1vbi9hYnN0cmFjdGlvbnMvdXNlclZlcmlmaWNhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSBhcyBWYXVsdFRpbWVvdXRTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi1jb21tb24vYWJzdHJhY3Rpb25zL3ZhdWx0VGltZW91dC5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IEF1dG9maWxsU2VydmljZSBhcyBBdXRvZmlsbFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL3NlcnZpY2VzL2Fic3RyYWN0aW9ucy9hdXRvZmlsbC5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IEJyb3dzZXJBcGkgfSBmcm9tICcuLi9icm93c2VyL2Jyb3dzZXJBcGknO1xyXG5pbXBvcnQgeyBTYWZhcmlBcHAgfSBmcm9tICcuLi9icm93c2VyL3NhZmFyaUFwcCc7XHJcblxyXG5pbXBvcnQgQ29tbWFuZHNCYWNrZ3JvdW5kIGZyb20gJy4vY29tbWFuZHMuYmFja2dyb3VuZCc7XHJcbmltcG9ydCBDb250ZXh0TWVudXNCYWNrZ3JvdW5kIGZyb20gJy4vY29udGV4dE1lbnVzLmJhY2tncm91bmQnO1xyXG5pbXBvcnQgSWRsZUJhY2tncm91bmQgZnJvbSAnLi9pZGxlLmJhY2tncm91bmQnO1xyXG5pbXBvcnQgeyBOYXRpdmVNZXNzYWdpbmdCYWNrZ3JvdW5kIH0gZnJvbSAnLi9uYXRpdmVNZXNzYWdpbmcuYmFja2dyb3VuZCc7XHJcbmltcG9ydCBOb3RpZmljYXRpb25CYWNrZ3JvdW5kIGZyb20gJy4vbm90aWZpY2F0aW9uLmJhY2tncm91bmQnO1xyXG5pbXBvcnQgUnVudGltZUJhY2tncm91bmQgZnJvbSAnLi9ydW50aW1lLmJhY2tncm91bmQnO1xyXG5pbXBvcnQgVGFic0JhY2tncm91bmQgZnJvbSAnLi90YWJzLmJhY2tncm91bmQnO1xyXG5pbXBvcnQgV2ViUmVxdWVzdEJhY2tncm91bmQgZnJvbSAnLi93ZWJSZXF1ZXN0LmJhY2tncm91bmQnO1xyXG5pbXBvcnQgV2luZG93c0JhY2tncm91bmQgZnJvbSAnLi93aW5kb3dzLmJhY2tncm91bmQnO1xyXG5cclxuaW1wb3J0IHsgUG9wdXBVdGlsc1NlcnZpY2UgfSBmcm9tICcuLi9wb3B1cC9zZXJ2aWNlcy9wb3B1cC11dGlscy5zZXJ2aWNlJztcclxuaW1wb3J0IEF1dG9maWxsU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9hdXRvZmlsbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQnJvd3NlckNyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9icm93c2VyQ3J5cHRvLnNlcnZpY2UnO1xyXG5pbXBvcnQgQnJvd3Nlck1lc3NhZ2luZ1NlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvYnJvd3Nlck1lc3NhZ2luZy5zZXJ2aWNlJztcclxuaW1wb3J0IEJyb3dzZXJQbGF0Zm9ybVV0aWxzU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9icm93c2VyUGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcclxuaW1wb3J0IEJyb3dzZXJTdG9yYWdlU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9icm93c2VyU3RvcmFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IEkxOG5TZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL2kxOG4uc2VydmljZSc7XHJcbmltcG9ydCBWYXVsdFRpbWVvdXRTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL3ZhdWx0VGltZW91dC5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW5CYWNrZ3JvdW5kIHtcclxuICAgIG1lc3NhZ2luZ1NlcnZpY2U6IE1lc3NhZ2luZ1NlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAgc2VjdXJlU3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICBpMThuU2VydmljZTogSTE4blNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAgY29uc3RhbnRzU2VydmljZTogQ29uc3RhbnRzU2VydmljZTtcclxuICAgIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIGNyeXB0b1NlcnZpY2U6IENyeXB0b1NlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIGNyeXB0b0Z1bmN0aW9uU2VydmljZTogQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICB0b2tlblNlcnZpY2U6IFRva2VuU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAgYXBwSWRTZXJ2aWNlOiBBcHBJZFNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIGVudmlyb25tZW50U2VydmljZTogRW52aXJvbm1lbnRTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICB1c2VyU2VydmljZTogVXNlclNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIHNldHRpbmdzU2VydmljZTogU2V0dGluZ3NTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICBjaXBoZXJTZXJ2aWNlOiBDaXBoZXJTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICBmb2xkZXJTZXJ2aWNlOiBGb2xkZXJTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICBjb2xsZWN0aW9uU2VydmljZTogQ29sbGVjdGlvblNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIHZhdWx0VGltZW91dFNlcnZpY2U6IFZhdWx0VGltZW91dFNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIHN5bmNTZXJ2aWNlOiBTeW5jU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAgcGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZTogUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAgdG90cFNlcnZpY2U6IFRvdHBTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICBhdXRvZmlsbFNlcnZpY2U6IEF1dG9maWxsU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAgY29udGFpbmVyU2VydmljZTogQ29udGFpbmVyU2VydmljZTtcclxuICAgIGF1ZGl0U2VydmljZTogQXVkaXRTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICBhdXRoU2VydmljZTogQXV0aFNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIGV4cG9ydFNlcnZpY2U6IEV4cG9ydFNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIG5vdGlmaWNhdGlvbnNTZXJ2aWNlOiBOb3RpZmljYXRpb25zU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAgc3RhdGVTZXJ2aWNlOiBTdGF0ZVNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIHN5c3RlbVNlcnZpY2U6IFN5c3RlbVNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIGV2ZW50U2VydmljZTogRXZlbnRTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICBwb2xpY3lTZXJ2aWNlOiBQb2xpY3lTZXJ2aWNlQWJzdHJhY3Rpb247XHJcbiAgICBwb3B1cFV0aWxzU2VydmljZTogUG9wdXBVdGlsc1NlcnZpY2U7XHJcbiAgICBzZW5kU2VydmljZTogU2VuZFNlcnZpY2VBYnN0cmFjdGlvbjtcclxuICAgIGZpbGVVcGxvYWRTZXJ2aWNlOiBGaWxlVXBsb2FkU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAga2V5Q29ubmVjdG9yU2VydmljZTogS2V5Q29ubmVjdG9yU2VydmljZUFic3RyYWN0aW9uO1xyXG4gICAgdXNlclZlcmlmaWNhdGlvblNlcnZpY2U6IFVzZXJWZXJpZmljYXRpb25TZXJ2aWNlQWJzdHJhY3Rpb247XHJcblxyXG4gICAgb25VcGRhdGVkUmFuOiBib29sZWFuO1xyXG4gICAgb25SZXBsYWNlZFJhbjogYm9vbGVhbjtcclxuICAgIGxvZ2luVG9BdXRvRmlsbDogQ2lwaGVyVmlldyA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBjb21tYW5kc0JhY2tncm91bmQ6IENvbW1hbmRzQmFja2dyb3VuZDtcclxuICAgIHByaXZhdGUgY29udGV4dE1lbnVzQmFja2dyb3VuZDogQ29udGV4dE1lbnVzQmFja2dyb3VuZDtcclxuICAgIHByaXZhdGUgaWRsZUJhY2tncm91bmQ6IElkbGVCYWNrZ3JvdW5kO1xyXG4gICAgcHJpdmF0ZSBub3RpZmljYXRpb25CYWNrZ3JvdW5kOiBOb3RpZmljYXRpb25CYWNrZ3JvdW5kO1xyXG4gICAgcHJpdmF0ZSBydW50aW1lQmFja2dyb3VuZDogUnVudGltZUJhY2tncm91bmQ7XHJcbiAgICBwcml2YXRlIHRhYnNCYWNrZ3JvdW5kOiBUYWJzQmFja2dyb3VuZDtcclxuICAgIHByaXZhdGUgd2ViUmVxdWVzdEJhY2tncm91bmQ6IFdlYlJlcXVlc3RCYWNrZ3JvdW5kO1xyXG4gICAgcHJpdmF0ZSB3aW5kb3dzQmFja2dyb3VuZDogV2luZG93c0JhY2tncm91bmQ7XHJcblxyXG4gICAgcHJpdmF0ZSBzaWRlYmFyQWN0aW9uOiBhbnk7XHJcbiAgICBwcml2YXRlIGJ1aWxkaW5nQ29udGV4dE1lbnU6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIG1lbnVPcHRpb25zTG9hZGVkOiBhbnlbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzeW5jVGltZW91dDogYW55O1xyXG4gICAgcHJpdmF0ZSBpc1NhZmFyaTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgbmF0aXZlTWVzc2FnaW5nQmFja2dyb3VuZDogTmF0aXZlTWVzc2FnaW5nQmFja2dyb3VuZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBTZXJ2aWNlc1xyXG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZSA9IG5ldyBCcm93c2VyTWVzc2FnaW5nU2VydmljZSgpO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UgPSBuZXcgQnJvd3NlclN0b3JhZ2VTZXJ2aWNlKCk7XHJcbiAgICAgICAgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSA9IG5ldyBCcm93c2VyUGxhdGZvcm1VdGlsc1NlcnZpY2UodGhpcy5tZXNzYWdpbmdTZXJ2aWNlLCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgICAgICAoY2xpcGJvYXJkVmFsdWUsIGNsZWFyTXMpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN5c3RlbVNlcnZpY2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3lzdGVtU2VydmljZS5jbGVhckNsaXBib2FyZChjbGlwYm9hcmRWYWx1ZSwgY2xlYXJNcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hdGl2ZU1lc3NhZ2luZ0JhY2tncm91bmQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLm5hdGl2ZU1lc3NhZ2luZ0JhY2tncm91bmQuZ2V0UmVzcG9uc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5uYXRpdmVNZXNzYWdpbmdCYWNrZ3JvdW5kLnNlbmQoeyBjb21tYW5kOiAnYmlvbWV0cmljVW5sb2NrJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5yZXNwb25zZSA9PT0gJ3VubG9ja2VkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2VjdXJlU3RvcmFnZVNlcnZpY2UgPSBuZXcgQnJvd3NlclN0b3JhZ2VTZXJ2aWNlKCk7XHJcbiAgICAgICAgdGhpcy5pMThuU2VydmljZSA9IG5ldyBJMThuU2VydmljZShCcm93c2VyQXBpLmdldFVJTGFuZ3VhZ2Uod2luZG93KSk7XHJcbiAgICAgICAgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UgPSBuZXcgV2ViQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlKHdpbmRvdywgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlID0gbmV3IENvbnNvbGVMb2dTZXJ2aWNlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLmNyeXB0b1NlcnZpY2UgPSBuZXcgQnJvd3NlckNyeXB0b1NlcnZpY2UodGhpcy5zdG9yYWdlU2VydmljZSwgdGhpcy5zZWN1cmVTdG9yYWdlU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UsIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UsIHRoaXMubG9nU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy50b2tlblNlcnZpY2UgPSBuZXcgVG9rZW5TZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuYXBwSWRTZXJ2aWNlID0gbmV3IEFwcElkU2VydmljZSh0aGlzLnN0b3JhZ2VTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmVudmlyb25tZW50U2VydmljZSA9IG5ldyBFbnZpcm9ubWVudFNlcnZpY2UodGhpcy5zdG9yYWdlU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5hcGlTZXJ2aWNlID0gbmV3IEFwaVNlcnZpY2UodGhpcy50b2tlblNlcnZpY2UsIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UsIHRoaXMuZW52aXJvbm1lbnRTZXJ2aWNlLFxyXG4gICAgICAgICAgICAoZXhwaXJlZDogYm9vbGVhbikgPT4gdGhpcy5sb2dvdXQoZXhwaXJlZCkpO1xyXG4gICAgICAgIHRoaXMudXNlclNlcnZpY2UgPSBuZXcgVXNlclNlcnZpY2UodGhpcy50b2tlblNlcnZpY2UsIHRoaXMuc3RvcmFnZVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NTZXJ2aWNlID0gbmV3IFNldHRpbmdzU2VydmljZSh0aGlzLnVzZXJTZXJ2aWNlLCB0aGlzLnN0b3JhZ2VTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmZpbGVVcGxvYWRTZXJ2aWNlID0gbmV3IEZpbGVVcGxvYWRTZXJ2aWNlKHRoaXMubG9nU2VydmljZSwgdGhpcy5hcGlTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmNpcGhlclNlcnZpY2UgPSBuZXcgQ2lwaGVyU2VydmljZSh0aGlzLmNyeXB0b1NlcnZpY2UsIHRoaXMudXNlclNlcnZpY2UsIHRoaXMuc2V0dGluZ3NTZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLmFwaVNlcnZpY2UsIHRoaXMuZmlsZVVwbG9hZFNlcnZpY2UsIHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMuaTE4blNlcnZpY2UsICgpID0+IHRoaXMuc2VhcmNoU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmZvbGRlclNlcnZpY2UgPSBuZXcgRm9sZGVyU2VydmljZSh0aGlzLmNyeXB0b1NlcnZpY2UsIHRoaXMudXNlclNlcnZpY2UsIHRoaXMuYXBpU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZSwgdGhpcy5pMThuU2VydmljZSwgdGhpcy5jaXBoZXJTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25TZXJ2aWNlID0gbmV3IENvbGxlY3Rpb25TZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy51c2VyU2VydmljZSwgdGhpcy5zdG9yYWdlU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5pMThuU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5zZWFyY2hTZXJ2aWNlID0gbmV3IFNlYXJjaFNlcnZpY2UodGhpcy5jaXBoZXJTZXJ2aWNlLCB0aGlzLmxvZ1NlcnZpY2UsIHRoaXMuaTE4blNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuc2VuZFNlcnZpY2UgPSBuZXcgU2VuZFNlcnZpY2UodGhpcy5jcnlwdG9TZXJ2aWNlLCB0aGlzLnVzZXJTZXJ2aWNlLCB0aGlzLmFwaVNlcnZpY2UsIHRoaXMuZmlsZVVwbG9hZFNlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMuaTE4blNlcnZpY2UsIHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLnN0YXRlU2VydmljZSA9IG5ldyBTdGF0ZVNlcnZpY2UoKTtcclxuICAgICAgICB0aGlzLnBvbGljeVNlcnZpY2UgPSBuZXcgUG9saWN5U2VydmljZSh0aGlzLnVzZXJTZXJ2aWNlLCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLCB0aGlzLmFwaVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMua2V5Q29ubmVjdG9yU2VydmljZSA9IG5ldyBLZXlDb25uZWN0b3JTZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMudXNlclNlcnZpY2UsIHRoaXMuY3J5cHRvU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLCB0aGlzLnRva2VuU2VydmljZSwgdGhpcy5sb2dTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UgPSBuZXcgVmF1bHRUaW1lb3V0U2VydmljZSh0aGlzLmNpcGhlclNlcnZpY2UsIHRoaXMuZm9sZGVyU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uU2VydmljZSwgdGhpcy5jcnlwdG9TZXJ2aWNlLCB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2UsIHRoaXMuc2VhcmNoU2VydmljZSwgdGhpcy51c2VyU2VydmljZSwgdGhpcy50b2tlblNlcnZpY2UsIHRoaXMucG9saWN5U2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5rZXlDb25uZWN0b3JTZXJ2aWNlLFxyXG4gICAgICAgICAgICBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25zU2VydmljZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zU2VydmljZS51cGRhdGVDb25uZWN0aW9uKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0SWNvbigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWZyZXNoQmFkZ2VBbmRNZW51KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3lzdGVtU2VydmljZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeXN0ZW1TZXJ2aWNlLnN0YXJ0UHJvY2Vzc1JlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3lzdGVtU2VydmljZS5jbGVhclBlbmRpbmdDbGlwYm9hcmQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5sb2dvdXQoZmFsc2UpKTtcclxuICAgICAgICB0aGlzLnN5bmNTZXJ2aWNlID0gbmV3IFN5bmNTZXJ2aWNlKHRoaXMudXNlclNlcnZpY2UsIHRoaXMuYXBpU2VydmljZSwgdGhpcy5zZXR0aW5nc1NlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMuZm9sZGVyU2VydmljZSwgdGhpcy5jaXBoZXJTZXJ2aWNlLCB0aGlzLmNyeXB0b1NlcnZpY2UsIHRoaXMuY29sbGVjdGlvblNlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMubWVzc2FnaW5nU2VydmljZSwgdGhpcy5wb2xpY3lTZXJ2aWNlLCB0aGlzLnNlbmRTZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UsIHRoaXMudG9rZW5TZXJ2aWNlLCB0aGlzLmtleUNvbm5lY3RvclNlcnZpY2UsXHJcbiAgICAgICAgICAgIGFzeW5jIChleHBpcmVkOiBib29sZWFuKSA9PiBhd2FpdCB0aGlzLmxvZ291dChleHBpcmVkKSk7XHJcbiAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UgPSBuZXcgRXZlbnRTZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMuYXBpU2VydmljZSwgdGhpcy51c2VyU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5jaXBoZXJTZXJ2aWNlLCB0aGlzLmxvZ1NlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMucGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSA9IG5ldyBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy5zdG9yYWdlU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5wb2xpY3lTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLnRvdHBTZXJ2aWNlID0gbmV3IFRvdHBTZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLCB0aGlzLmxvZ1NlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuYXV0b2ZpbGxTZXJ2aWNlID0gbmV3IEF1dG9maWxsU2VydmljZSh0aGlzLmNpcGhlclNlcnZpY2UsIHRoaXMudXNlclNlcnZpY2UsIHRoaXMudG90cFNlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLCB0aGlzLmxvZ1NlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyU2VydmljZSA9IG5ldyBDb250YWluZXJTZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5hdWRpdFNlcnZpY2UgPSBuZXcgQXVkaXRTZXJ2aWNlKHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLCB0aGlzLmFwaVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuZXhwb3J0U2VydmljZSA9IG5ldyBFeHBvcnRTZXJ2aWNlKHRoaXMuZm9sZGVyU2VydmljZSwgdGhpcy5jaXBoZXJTZXJ2aWNlLCB0aGlzLmFwaVNlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMuY3J5cHRvU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zU2VydmljZSA9IG5ldyBOb3RpZmljYXRpb25zU2VydmljZSh0aGlzLnVzZXJTZXJ2aWNlLCB0aGlzLnN5bmNTZXJ2aWNlLCB0aGlzLmFwcElkU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UsIHRoaXMuZW52aXJvbm1lbnRTZXJ2aWNlLCAoKSA9PiB0aGlzLmxvZ291dCh0cnVlKSwgdGhpcy5sb2dTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLnBvcHVwVXRpbHNTZXJ2aWNlID0gbmV3IFBvcHVwVXRpbHNTZXJ2aWNlKHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuc3lzdGVtU2VydmljZSA9IG5ldyBTeXN0ZW1TZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMudmF1bHRUaW1lb3V0U2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLCB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JjZVdpbmRvd1JlbG9hZCA9IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNGaXJlZm94KCkgfHwgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5pc09wZXJhKCk7XHJcbiAgICAgICAgICAgICAgICBCcm93c2VyQXBpLnJlbG9hZEV4dGVuc2lvbihmb3JjZVdpbmRvd1JlbG9hZCA/IHdpbmRvdyA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnVzZXJWZXJpZmljYXRpb25TZXJ2aWNlID0gbmV3IFVzZXJWZXJpZmljYXRpb25TZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy5pMThuU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5hcGlTZXJ2aWNlKTtcclxuXHJcbiAgICAgICAgLy8gT3RoZXIgZmllbGRzXHJcbiAgICAgICAgdGhpcy5pc1NhZmFyaSA9IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKTtcclxuICAgICAgICB0aGlzLnNpZGViYXJBY3Rpb24gPSB0aGlzLmlzU2FmYXJpID8gbnVsbCA6ICh0eXBlb2Ygb3ByICE9PSAndW5kZWZpbmVkJykgJiYgb3ByLnNpZGViYXJBY3Rpb24gP1xyXG4gICAgICAgICAgICBvcHIuc2lkZWJhckFjdGlvbiA6ICh3aW5kb3cgYXMgYW55KS5jaHJvbWUuc2lkZWJhckFjdGlvbjtcclxuXHJcbiAgICAgICAgLy8gQmFja2dyb3VuZFxyXG4gICAgICAgIHRoaXMucnVudGltZUJhY2tncm91bmQgPSBuZXcgUnVudGltZUJhY2tncm91bmQodGhpcywgdGhpcy5hdXRvZmlsbFNlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UgYXMgQnJvd3NlclBsYXRmb3JtVXRpbHNTZXJ2aWNlLCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLCB0aGlzLmkxOG5TZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnNTZXJ2aWNlLCB0aGlzLnN5c3RlbVNlcnZpY2UsIHRoaXMuZW52aXJvbm1lbnRTZXJ2aWNlLCB0aGlzLm1lc3NhZ2luZ1NlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMubG9nU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5uYXRpdmVNZXNzYWdpbmdCYWNrZ3JvdW5kID0gbmV3IE5hdGl2ZU1lc3NhZ2luZ0JhY2tncm91bmQodGhpcy5zdG9yYWdlU2VydmljZSwgdGhpcy5jcnlwdG9TZXJ2aWNlLCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLCB0aGlzLnJ1bnRpbWVCYWNrZ3JvdW5kLCB0aGlzLmkxOG5TZXJ2aWNlLCB0aGlzLnVzZXJTZXJ2aWNlLCB0aGlzLm1lc3NhZ2luZ1NlcnZpY2UsIHRoaXMuYXBwSWRTZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRzQmFja2dyb3VuZCA9IG5ldyBDb21tYW5kc0JhY2tncm91bmQodGhpcywgdGhpcy5wYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uQmFja2dyb3VuZCA9IG5ldyBOb3RpZmljYXRpb25CYWNrZ3JvdW5kKHRoaXMsIHRoaXMuYXV0b2ZpbGxTZXJ2aWNlLCB0aGlzLmNpcGhlclNlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMudmF1bHRUaW1lb3V0U2VydmljZSwgdGhpcy5wb2xpY3lTZXJ2aWNlLCB0aGlzLmZvbGRlclNlcnZpY2UsIHRoaXMudXNlclNlcnZpY2UpO1xyXG5cclxuICAgICAgICB0aGlzLnRhYnNCYWNrZ3JvdW5kID0gbmV3IFRhYnNCYWNrZ3JvdW5kKHRoaXMsIHRoaXMubm90aWZpY2F0aW9uQmFja2dyb3VuZCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudXNCYWNrZ3JvdW5kID0gbmV3IENvbnRleHRNZW51c0JhY2tncm91bmQodGhpcywgdGhpcy5jaXBoZXJTZXJ2aWNlLCB0aGlzLnBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UsIHRoaXMudmF1bHRUaW1lb3V0U2VydmljZSwgdGhpcy5ldmVudFNlcnZpY2UsIHRoaXMudG90cFNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuaWRsZUJhY2tncm91bmQgPSBuZXcgSWRsZUJhY2tncm91bmQodGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnNTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLndlYlJlcXVlc3RCYWNrZ3JvdW5kID0gbmV3IFdlYlJlcXVlc3RCYWNrZ3JvdW5kKHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UsIHRoaXMuY2lwaGVyU2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLndpbmRvd3NCYWNrZ3JvdW5kID0gbmV3IFdpbmRvd3NCYWNrZ3JvdW5kKHRoaXMpO1xyXG5cclxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlID0gbmV3IEF1dGhTZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy5hcGlTZXJ2aWNlLCB0aGlzLnVzZXJTZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLnRva2VuU2VydmljZSwgdGhpcy5hcHBJZFNlcnZpY2UsIHRoaXMuaTE4blNlcnZpY2UsIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UsXHJcbiAgICAgICAgICAgIG5ldyBjbGFzcyBleHRlbmRzIE1lc3NhZ2luZ1NlcnZpY2VBYnN0cmFjdGlvbiB7XHJcbiAgICAgICAgICAgICAgICAvLyBBdXRoU2VydmljZSBzaG91bGQgc2VuZCB0aGUgbWVzc2FnZXMgdG8gdGhlIGJhY2tncm91bmQgbm90IHBvcHVwLlxyXG4gICAgICAgICAgICAgICAgc2VuZCA9IChzdWJzY3JpYmVyOiBzdHJpbmcsIGFyZzogYW55ID0ge30pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gT2JqZWN0LmFzc2lnbih7fSwgeyBjb21tYW5kOiBzdWJzY3JpYmVyIH0sIGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5ydW50aW1lQmFja2dyb3VuZC5wcm9jZXNzTWVzc2FnZShtZXNzYWdlLCB0aGF0LCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSgpLCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UsIHRoaXMubG9nU2VydmljZSwgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UsIHRoaXMuZW52aXJvbm1lbnRTZXJ2aWNlLFxyXG4gICAgICAgICAgICB0aGlzLmtleUNvbm5lY3RvclNlcnZpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGJvb3RzdHJhcCgpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lclNlcnZpY2UuYXR0YWNoVG9XaW5kb3cod2luZG93KTtcclxuXHJcbiAgICAgICAgKHRoaXMuYXV0aFNlcnZpY2UgYXMgQXV0aFNlcnZpY2UpLmluaXQoKTtcclxuICAgICAgICBhd2FpdCAodGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlIGFzIFZhdWx0VGltZW91dFNlcnZpY2UpLmluaXQodHJ1ZSk7XHJcbiAgICAgICAgYXdhaXQgKHRoaXMuaTE4blNlcnZpY2UgYXMgSTE4blNlcnZpY2UpLmluaXQoKTtcclxuICAgICAgICBhd2FpdCAodGhpcy5ldmVudFNlcnZpY2UgYXMgRXZlbnRTZXJ2aWNlKS5pbml0KHRydWUpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucnVudGltZUJhY2tncm91bmQuaW5pdCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMubm90aWZpY2F0aW9uQmFja2dyb3VuZC5pbml0KCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jb21tYW5kc0JhY2tncm91bmQuaW5pdCgpO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnRhYnNCYWNrZ3JvdW5kLmluaXQoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0JhY2tncm91bmQuaW5pdCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuaWRsZUJhY2tncm91bmQuaW5pdCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMud2ViUmVxdWVzdEJhY2tncm91bmQuaW5pdCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMud2luZG93c0JhY2tncm91bmQuaW5pdCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbnZpcm9ubWVudFNlcnZpY2Uuc2V0VXJsc0Zyb21TdG9yYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldEljb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZnVsbFN5bmModHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UuaW5pdCgpLCAyNTAwKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZXRJY29uKCkge1xyXG4gICAgICAgIGlmICghY2hyb21lLmJyb3dzZXJBY3Rpb24gJiYgIXRoaXMuc2lkZWJhckFjdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpc0F1dGhlbnRpY2F0ZWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpO1xyXG4gICAgICAgIGNvbnN0IGxvY2tlZCA9IGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5pc0xvY2tlZCgpO1xyXG5cclxuICAgICAgICBsZXQgc3VmZml4ID0gJyc7XHJcbiAgICAgICAgaWYgKCFpc0F1dGhlbnRpY2F0ZWQpIHtcclxuICAgICAgICAgICAgc3VmZml4ID0gJ19ncmF5JztcclxuICAgICAgICB9IGVsc2UgaWYgKGxvY2tlZCkge1xyXG4gICAgICAgICAgICBzdWZmaXggPSAnX2xvY2tlZCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmFjdGlvblNldEljb24oY2hyb21lLmJyb3dzZXJBY3Rpb24sIHN1ZmZpeCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hY3Rpb25TZXRJY29uKHRoaXMuc2lkZWJhckFjdGlvbiwgc3VmZml4KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZWZyZXNoQmFkZ2VBbmRNZW51KGZvckxvY2tlZDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKCFjaHJvbWUud2luZG93cyB8fCAhY2hyb21lLmNvbnRleHRNZW51cykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtZW51RGlzYWJsZWQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVDb250ZXh0TWVudUl0ZW1LZXkpO1xyXG4gICAgICAgIGlmICghbWVudURpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYnVpbGRDb250ZXh0TWVudSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzUmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZm9yTG9ja2VkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZE1lbnVBbmRVcGRhdGVCYWRnZUZvck5vQWNjZXNzU3RhdGUoIW1lbnVEaXNhYmxlZCk7XHJcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGVkUmFuID0gdGhpcy5vblJlcGxhY2VkUmFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRhYiA9IGF3YWl0IEJyb3dzZXJBcGkuZ2V0VGFiRnJvbUN1cnJlbnRXaW5kb3coKTtcclxuICAgICAgICBpZiAodGFiKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVSZWFkeSh0YWIsICFtZW51RGlzYWJsZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBsb2dvdXQoZXhwaXJlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZXZlbnRTZXJ2aWNlLnVwbG9hZEV2ZW50cygpO1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XHJcblxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UuY2xlYXJFdmVudHMoKSxcclxuICAgICAgICAgICAgdGhpcy5zeW5jU2VydmljZS5zZXRMYXN0U3luYyhuZXcgRGF0ZSgwKSksXHJcbiAgICAgICAgICAgIHRoaXMudG9rZW5TZXJ2aWNlLmNsZWFyVG9rZW4oKSxcclxuICAgICAgICAgICAgdGhpcy5jcnlwdG9TZXJ2aWNlLmNsZWFyS2V5cygpLFxyXG4gICAgICAgICAgICB0aGlzLnVzZXJTZXJ2aWNlLmNsZWFyKCksXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3NTZXJ2aWNlLmNsZWFyKHVzZXJJZCksXHJcbiAgICAgICAgICAgIHRoaXMuY2lwaGVyU2VydmljZS5jbGVhcih1c2VySWQpLFxyXG4gICAgICAgICAgICB0aGlzLmZvbGRlclNlcnZpY2UuY2xlYXIodXNlcklkKSxcclxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uU2VydmljZS5jbGVhcih1c2VySWQpLFxyXG4gICAgICAgICAgICB0aGlzLnBvbGljeVNlcnZpY2UuY2xlYXIodXNlcklkKSxcclxuICAgICAgICAgICAgdGhpcy5wYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLmNsZWFyKCksXHJcbiAgICAgICAgICAgIHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5jbGVhcigpLFxyXG4gICAgICAgICAgICB0aGlzLmtleUNvbm5lY3RvclNlcnZpY2UuY2xlYXIoKSxcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZWFyY2hTZXJ2aWNlLmNsZWFySW5kZXgoKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnZG9uZUxvZ2dpbmdPdXQnLCB7IGV4cGlyZWQ6IGV4cGlyZWQgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0SWNvbigpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaEJhZGdlQW5kTWVudSgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVzZWVkU3RvcmFnZSgpO1xyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UudXBkYXRlQ29ubmVjdGlvbihmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5zeXN0ZW1TZXJ2aWNlLnN0YXJ0UHJvY2Vzc1JlbG9hZCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc3lzdGVtU2VydmljZS5jbGVhclBlbmRpbmdDbGlwYm9hcmQoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjb2xsZWN0UGFnZURldGFpbHNGb3JDb250ZW50U2NyaXB0KHRhYjogYW55LCBzZW5kZXI6IHN0cmluZywgZnJhbWVJZDogbnVtYmVyID0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0YWIgPT0gbnVsbCB8fCAhdGFiLmlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG9wdGlvbnM6IGFueSA9IHt9O1xyXG4gICAgICAgIGlmIChmcmFtZUlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5mcmFtZUlkID0gZnJhbWVJZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2UodGFiLCB7XHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdjb2xsZWN0UGFnZURldGFpbHMnLFxyXG4gICAgICAgICAgICB0YWI6IHRhYixcclxuICAgICAgICAgICAgc2VuZGVyOiBzZW5kZXIsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb3BlblBvcHVwKCkge1xyXG4gICAgICAgIC8vIENocm9tZSBBUElzIGNhbm5vdCBvcGVuIHBvcHVwXHJcblxyXG4gICAgICAgIC8vIFRPRE86IERvIHdlIG5lZWQgdG8gb3BlbiB0aGlzIHBvcHVwP1xyXG4gICAgICAgIGlmICghdGhpcy5pc1NhZmFyaSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IFNhZmFyaUFwcC5zZW5kTWVzc2FnZVRvQXBwKCdzaG93UG9wb3ZlcicsIG51bGwsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlc2VlZFN0b3JhZ2UoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzQ2hyb21lKCkgJiYgIXRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNWaXZhbGRpKCkgJiZcclxuICAgICAgICAgICAgIXRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNPcGVyYSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYXVsdFRpbWVvdXQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxudW1iZXI+KENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5KTtcclxuICAgICAgICBpZiAoY3VycmVudFZhdWx0VGltZW91dCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdldFN0b3JhZ2UgPSAoKTogUHJvbWlzZTxhbnk+ID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQobnVsbCwgKG86IGFueSkgPT4gcmVzb2x2ZShvKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNsZWFyU3RvcmFnZSA9ICgpOiBQcm9taXNlPHZvaWQ+ID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5jbGVhcigoKSA9PiByZXNvbHZlKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBzdG9yYWdlID0gYXdhaXQgZ2V0U3RvcmFnZSgpO1xyXG4gICAgICAgIGF3YWl0IGNsZWFyU3RvcmFnZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzdG9yYWdlKSB7XHJcbiAgICAgICAgICAgIGlmICghc3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoa2V5LCBzdG9yYWdlW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGJ1aWxkQ29udGV4dE1lbnUoKSB7XHJcbiAgICAgICAgaWYgKCFjaHJvbWUuY29udGV4dE1lbnVzIHx8IHRoaXMuYnVpbGRpbmdDb250ZXh0TWVudSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJ1aWxkaW5nQ29udGV4dE1lbnUgPSB0cnVlO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzUmVtb3ZlQWxsKCk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzQ3JlYXRlKHtcclxuICAgICAgICAgICAgdHlwZTogJ25vcm1hbCcsXHJcbiAgICAgICAgICAgIGlkOiAncm9vdCcsXHJcbiAgICAgICAgICAgIGNvbnRleHRzOiBbJ2FsbCddLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0JpdHdhcmRlbicsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzQ3JlYXRlKHtcclxuICAgICAgICAgICAgdHlwZTogJ25vcm1hbCcsXHJcbiAgICAgICAgICAgIGlkOiAnYXV0b2ZpbGwnLFxyXG4gICAgICAgICAgICBwYXJlbnRJZDogJ3Jvb3QnLFxyXG4gICAgICAgICAgICBjb250ZXh0czogWydhbGwnXSxcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnYXV0b0ZpbGwnKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0TWVudXNDcmVhdGUoe1xyXG4gICAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcclxuICAgICAgICAgICAgaWQ6ICdjb3B5LXVzZXJuYW1lJyxcclxuICAgICAgICAgICAgcGFyZW50SWQ6ICdyb290JyxcclxuICAgICAgICAgICAgY29udGV4dHM6IFsnYWxsJ10sXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2NvcHlVc2VybmFtZScpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdub3JtYWwnLFxyXG4gICAgICAgICAgICBpZDogJ2NvcHktcGFzc3dvcmQnLFxyXG4gICAgICAgICAgICBwYXJlbnRJZDogJ3Jvb3QnLFxyXG4gICAgICAgICAgICBjb250ZXh0czogWydhbGwnXSxcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnY29weVBhc3N3b3JkJyksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmNhbkFjY2Vzc1ByZW1pdW0oKSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcclxuICAgICAgICAgICAgICAgIGlkOiAnY29weS10b3RwJyxcclxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAncm9vdCcsXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0czogWydhbGwnXSxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2NvcHlWZXJpZmljYXRpb25Db2RlJyksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0TWVudXNDcmVhdGUoe1xyXG4gICAgICAgICAgICB0eXBlOiAnc2VwYXJhdG9yJyxcclxuICAgICAgICAgICAgcGFyZW50SWQ6ICdyb290JyxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0TWVudXNDcmVhdGUoe1xyXG4gICAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcclxuICAgICAgICAgICAgaWQ6ICdnZW5lcmF0ZS1wYXNzd29yZCcsXHJcbiAgICAgICAgICAgIHBhcmVudElkOiAncm9vdCcsXHJcbiAgICAgICAgICAgIGNvbnRleHRzOiBbJ2FsbCddLFxyXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5pMThuU2VydmljZS50KCdnZW5lcmF0ZVBhc3N3b3JkQ29waWVkJyksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzQ3JlYXRlKHtcclxuICAgICAgICAgICAgdHlwZTogJ25vcm1hbCcsXHJcbiAgICAgICAgICAgIGlkOiAnY29weS1pZGVudGlmaWVyJyxcclxuICAgICAgICAgICAgcGFyZW50SWQ6ICdyb290JyxcclxuICAgICAgICAgICAgY29udGV4dHM6IFsnYWxsJ10sXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2NvcHlFbGVtZW50SWRlbnRpZmllcicpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmJ1aWxkaW5nQ29udGV4dE1lbnUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGNvbnRleHRNZW51UmVhZHkodGFiOiBhbnksIGNvbnRleHRNZW51RW5hYmxlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1lbnVBbmRVcGRhdGVCYWRnZSh0YWIudXJsLCB0YWIuaWQsIGNvbnRleHRNZW51RW5hYmxlZCk7XHJcbiAgICAgICAgdGhpcy5vblVwZGF0ZWRSYW4gPSB0aGlzLm9uUmVwbGFjZWRSYW4gPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGxvYWRNZW51QW5kVXBkYXRlQmFkZ2UodXJsOiBzdHJpbmcsIHRhYklkOiBudW1iZXIsIGNvbnRleHRNZW51RW5hYmxlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICghdXJsIHx8ICghY2hyb21lLmJyb3dzZXJBY3Rpb24gJiYgIXRoaXMuc2lkZWJhckFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hY3Rpb25TZXRCYWRnZUJhY2tncm91bmRDb2xvcihjaHJvbWUuYnJvd3NlckFjdGlvbik7XHJcbiAgICAgICAgdGhpcy5hY3Rpb25TZXRCYWRnZUJhY2tncm91bmRDb2xvcih0aGlzLnNpZGViYXJBY3Rpb24pO1xyXG5cclxuICAgICAgICB0aGlzLm1lbnVPcHRpb25zTG9hZGVkID0gW107XHJcbiAgICAgICAgY29uc3QgbG9ja2VkID0gYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmlzTG9ja2VkKCk7XHJcbiAgICAgICAgaWYgKCFsb2NrZWQpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0QWxsRGVjcnlwdGVkRm9yVXJsKHVybCk7XHJcbiAgICAgICAgICAgICAgICBjaXBoZXJzLnNvcnQoKGEsIGIpID0+IHRoaXMuY2lwaGVyU2VydmljZS5zb3J0Q2lwaGVyc0J5TGFzdFVzZWRUaGVuTmFtZShhLCBiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHRNZW51RW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlcnMuZm9yRWFjaChjaXBoZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRMb2dpbkNvbnRleHRNZW51T3B0aW9ucyhjaXBoZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc2FibGVCYWRnZUNvdW50ZXIgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVCYWRnZUNvdW50ZXJLZXkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRoZVRleHQgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWRpc2FibGVCYWRnZUNvdW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2lwaGVycy5sZW5ndGggPiAwICYmIGNpcGhlcnMubGVuZ3RoIDw9IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlVGV4dCA9IGNpcGhlcnMubGVuZ3RoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaXBoZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlVGV4dCA9ICc5Kyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0TWVudUVuYWJsZWQgJiYgY2lwaGVycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWROb0xvZ2luc0NvbnRleHRNZW51T3B0aW9ucyh0aGlzLmkxOG5TZXJ2aWNlLnQoJ25vTWF0Y2hpbmdMb2dpbnMnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWRlYmFyQWN0aW9uU2V0QmFkZ2VUZXh0KHRoZVRleHQsIHRhYklkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnJvd3NlckFjdGlvblNldEJhZGdlVGV4dCh0aGVUZXh0LCB0YWJJZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1lbnVBbmRVcGRhdGVCYWRnZUZvck5vQWNjZXNzU3RhdGUoY29udGV4dE1lbnVFbmFibGVkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGxvYWRNZW51QW5kVXBkYXRlQmFkZ2VGb3JOb0FjY2Vzc1N0YXRlKGNvbnRleHRNZW51RW5hYmxlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGlmIChjb250ZXh0TWVudUVuYWJsZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgYXV0aGVkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkTm9Mb2dpbnNDb250ZXh0TWVudU9wdGlvbnModGhpcy5pMThuU2VydmljZS50KGF1dGhlZCA/ICd2YXVsdExvY2tlZCcgOiAndmF1bHRMb2dnZWRPdXQnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0YWJzID0gYXdhaXQgQnJvd3NlckFwaS5nZXRBY3RpdmVUYWJzKCk7XHJcbiAgICAgICAgaWYgKHRhYnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0YWJzLmZvckVhY2godGFiID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0YWIuaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnJvd3NlckFjdGlvblNldEJhZGdlVGV4dCgnJywgdGFiLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpZGViYXJBY3Rpb25TZXRCYWRnZVRleHQoJycsIHRhYi5pZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGxvYWRMb2dpbkNvbnRleHRNZW51T3B0aW9ucyhjaXBoZXI6IGFueSkge1xyXG4gICAgICAgIGlmIChjaXBoZXIgPT0gbnVsbCB8fCBjaXBoZXIudHlwZSAhPT0gQ2lwaGVyVHlwZS5Mb2dpbiB8fCBjaXBoZXIucmVwcm9tcHQgIT09IENpcGhlclJlcHJvbXB0VHlwZS5Ob25lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0aXRsZSA9IGNpcGhlci5uYW1lO1xyXG4gICAgICAgIGlmIChjaXBoZXIubG9naW4udXNlcm5hbWUgJiYgY2lwaGVyLmxvZ2luLnVzZXJuYW1lICE9PSAnJykge1xyXG4gICAgICAgICAgICB0aXRsZSArPSAoJyAoJyArIGNpcGhlci5sb2dpbi51c2VybmFtZSArICcpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZENvbnRleHRNZW51T3B0aW9ucyh0aXRsZSwgY2lwaGVyLmlkLCBjaXBoZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgbG9hZE5vTG9naW5zQ29udGV4dE1lbnVPcHRpb25zKG5vTG9naW5zTWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkQ29udGV4dE1lbnVPcHRpb25zKG5vTG9naW5zTWVzc2FnZSwgJ25vb3AnLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGxvYWRDb250ZXh0TWVudU9wdGlvbnModGl0bGU6IHN0cmluZywgaWRTdWZmaXg6IHN0cmluZywgY2lwaGVyOiBhbnkpIHtcclxuICAgICAgICBpZiAoIWNocm9tZS5jb250ZXh0TWVudXMgfHwgdGhpcy5tZW51T3B0aW9uc0xvYWRlZC5pbmRleE9mKGlkU3VmZml4KSA+IC0xIHx8XHJcbiAgICAgICAgICAgIChjaXBoZXIgIT0gbnVsbCAmJiBjaXBoZXIudHlwZSAhPT0gQ2lwaGVyVHlwZS5Mb2dpbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5tZW51T3B0aW9uc0xvYWRlZC5wdXNoKGlkU3VmZml4KTtcclxuXHJcbiAgICAgICAgaWYgKGNpcGhlciA9PSBudWxsIHx8IChjaXBoZXIubG9naW4ucGFzc3dvcmQgJiYgY2lwaGVyLmxvZ2luLnBhc3N3b3JkICE9PSAnJykpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0TWVudXNDcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ25vcm1hbCcsXHJcbiAgICAgICAgICAgICAgICBpZDogJ2F1dG9maWxsXycgKyBpZFN1ZmZpeCxcclxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAnYXV0b2ZpbGwnLFxyXG4gICAgICAgICAgICAgICAgY29udGV4dHM6IFsnYWxsJ10sXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zYW5pdGl6ZUNvbnRleHRNZW51VGl0bGUodGl0bGUpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaXBoZXIgPT0gbnVsbCB8fCAoY2lwaGVyLmxvZ2luLnVzZXJuYW1lICYmIGNpcGhlci5sb2dpbi51c2VybmFtZSAhPT0gJycpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzQ3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdub3JtYWwnLFxyXG4gICAgICAgICAgICAgICAgaWQ6ICdjb3B5LXVzZXJuYW1lXycgKyBpZFN1ZmZpeCxcclxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAnY29weS11c2VybmFtZScsXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0czogWydhbGwnXSxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnNhbml0aXplQ29udGV4dE1lbnVUaXRsZSh0aXRsZSksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNpcGhlciA9PSBudWxsIHx8IChjaXBoZXIubG9naW4ucGFzc3dvcmQgJiYgY2lwaGVyLmxvZ2luLnBhc3N3b3JkICE9PSAnJyAmJiBjaXBoZXIudmlld1Bhc3N3b3JkKSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcclxuICAgICAgICAgICAgICAgIGlkOiAnY29weS1wYXNzd29yZF8nICsgaWRTdWZmaXgsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnRJZDogJ2NvcHktcGFzc3dvcmQnLFxyXG4gICAgICAgICAgICAgICAgY29udGV4dHM6IFsnYWxsJ10sXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zYW5pdGl6ZUNvbnRleHRNZW51VGl0bGUodGl0bGUpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNhbkFjY2Vzc1ByZW1pdW0gPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmNhbkFjY2Vzc1ByZW1pdW0oKTtcclxuICAgICAgICBpZiAoY2FuQWNjZXNzUHJlbWl1bSAmJiAoY2lwaGVyID09IG51bGwgfHwgKGNpcGhlci5sb2dpbi50b3RwICYmIGNpcGhlci5sb2dpbi50b3RwICE9PSAnJykpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzQ3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdub3JtYWwnLFxyXG4gICAgICAgICAgICAgICAgaWQ6ICdjb3B5LXRvdHBfJyArIGlkU3VmZml4LFxyXG4gICAgICAgICAgICAgICAgcGFyZW50SWQ6ICdjb3B5LXRvdHAnLFxyXG4gICAgICAgICAgICAgICAgY29udGV4dHM6IFsnYWxsJ10sXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zYW5pdGl6ZUNvbnRleHRNZW51VGl0bGUodGl0bGUpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZUNvbnRleHRNZW51VGl0bGUodGl0bGU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRpdGxlLnJlcGxhY2UoLyYvZywgJyYmJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBmdWxsU3luYyhvdmVycmlkZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3Qgc3luY0ludGVybmFsID0gNiAqIDYwICogNjAgKiAxMDAwOyAvLyA2IGhvdXJzXHJcbiAgICAgICAgY29uc3QgbGFzdFN5bmMgPSBhd2FpdCB0aGlzLnN5bmNTZXJ2aWNlLmdldExhc3RTeW5jKCk7XHJcblxyXG4gICAgICAgIGxldCBsYXN0U3luY0FnbyA9IHN5bmNJbnRlcm5hbCArIDE7XHJcbiAgICAgICAgaWYgKGxhc3RTeW5jICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGFzdFN5bmNBZ28gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxhc3RTeW5jLmdldFRpbWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvdmVycmlkZSB8fCBsYXN0U3luY0FnbyA+PSBzeW5jSW50ZXJuYWwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5mdWxsU3luYyhvdmVycmlkZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVOZXh0U3luYygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVOZXh0U3luYygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNjaGVkdWxlTmV4dFN5bmMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3luY1RpbWVvdXQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc3luY1RpbWVvdXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zeW5jVGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5mdWxsU3luYygpLCA1ICogNjAgKiAxMDAwKTsgLy8gY2hlY2sgZXZlcnkgNSBtaW51dGVzXHJcbiAgICB9XHJcblxyXG4gICAgLy8gQnJvd3NlciBBUEkgSGVscGVyc1xyXG5cclxuICAgIHByaXZhdGUgY29udGV4dE1lbnVzUmVtb3ZlQWxsKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgY2hyb21lLmNvbnRleHRNZW51cy5yZW1vdmVBbGwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb250ZXh0TWVudXNDcmVhdGUob3B0aW9uczogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBjaHJvbWUuY29udGV4dE1lbnVzLmNyZWF0ZShvcHRpb25zLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGFjdGlvblNldEljb24odGhlQWN0aW9uOiBhbnksIHN1ZmZpeDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBpZiAoIXRoZUFjdGlvbiB8fCAhdGhlQWN0aW9uLnNldEljb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgcGF0aDoge1xyXG4gICAgICAgICAgICAgICAgMTk6ICdpbWFnZXMvaWNvbjE5JyArIHN1ZmZpeCArICcucG5nJyxcclxuICAgICAgICAgICAgICAgIDM4OiAnaW1hZ2VzL2ljb24zOCcgKyBzdWZmaXggKyAnLnBuZycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNGaXJlZm94KCkpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhlQWN0aW9uLnNldEljb24ob3B0aW9ucyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzU2FmYXJpKCkpIHtcclxuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBzaW5jZSBTYWZhcmkgMTQuMC4zIHJldHVybnMgYSBwZW5kaW5nIHByb21pc2VcclxuICAgICAgICAgICAgLy8gd2hpY2ggZG9lc24ndCByZXNvbHZlIHdpdGhpbiBhIHJlYXNvbmFibGUgdGltZS5cclxuICAgICAgICAgICAgdGhlQWN0aW9uLnNldEljb24ob3B0aW9ucyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhlQWN0aW9uLnNldEljb24ob3B0aW9ucywgKCkgPT4gcmVzb2x2ZSgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWN0aW9uU2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3IoYWN0aW9uOiBhbnkpIHtcclxuICAgICAgICBpZiAoYWN0aW9uICYmIGFjdGlvbi5zZXRCYWRnZUJhY2tncm91bmRDb2xvcikge1xyXG4gICAgICAgICAgICBhY3Rpb24uc2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3IoeyBjb2xvcjogJyMyOTRlNWYnIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJyb3dzZXJBY3Rpb25TZXRCYWRnZVRleHQodGV4dDogc3RyaW5nLCB0YWJJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGNocm9tZS5icm93c2VyQWN0aW9uICYmIGNocm9tZS5icm93c2VyQWN0aW9uLnNldEJhZGdlVGV4dCkge1xyXG4gICAgICAgICAgICBjaHJvbWUuYnJvd3NlckFjdGlvbi5zZXRCYWRnZVRleHQoe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgICAgIHRhYklkOiB0YWJJZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2lkZWJhckFjdGlvblNldEJhZGdlVGV4dCh0ZXh0OiBzdHJpbmcsIHRhYklkOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2lkZWJhckFjdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zaWRlYmFyQWN0aW9uLnNldEJhZGdlVGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLnNpZGViYXJBY3Rpb24uc2V0QmFkZ2VUZXh0KHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgICAgICB0YWJJZDogdGFiSWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zaWRlYmFyQWN0aW9uLnNldFRpdGxlKSB7XHJcbiAgICAgICAgICAgIGxldCB0aXRsZSA9ICdCaXR3YXJkZW4nO1xyXG4gICAgICAgICAgICBpZiAodGV4dCAmJiB0ZXh0ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGl0bGUgKz0gKCcgWycgKyB0ZXh0ICsgJ10nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zaWRlYmFyQWN0aW9uLnNldFRpdGxlKHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgICAgIHRhYklkOiB0YWJJZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBNYWluQmFja2dyb3VuZCBmcm9tICcuL2JhY2tncm91bmQvbWFpbi5iYWNrZ3JvdW5kJztcclxuXHJcbmNvbnN0IGJpdHdhcmRlbk1haW4gPSAod2luZG93IGFzIGFueSkuYml0d2FyZGVuTWFpbiA9IG5ldyBNYWluQmFja2dyb3VuZCgpO1xyXG5iaXR3YXJkZW5NYWluLmJvb3RzdHJhcCgpLnRoZW4oKCkgPT4ge1xyXG4gICAgLy8gRmluaXNoZWQgYm9vdHN0cmFwcGluZ1xyXG59KTtcclxuIiwiZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VSZXNwb25zZSB7XHJcbiAgICBwcml2YXRlIHJlc3BvbnNlOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0UmVzcG9uc2VQcm9wZXJ0eShwcm9wZXJ0eU5hbWU6IHN0cmluZywgcmVzcG9uc2U6IGFueSA9IG51bGwsIGV4YWN0TmFtZSA9IGZhbHNlKTogYW55IHtcclxuICAgICAgICBpZiAocHJvcGVydHlOYW1lID09IG51bGwgfHwgcHJvcGVydHlOYW1lID09PSAnJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb3BlcnR5TmFtZSBtdXN0IG5vdCBiZSBudWxsL2VtcHR5LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzcG9uc2UgPT0gbnVsbCAmJiB0aGlzLnJlc3BvbnNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSB0aGlzLnJlc3BvbnNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzcG9uc2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFleGFjdE5hbWUgJiYgcmVzcG9uc2VbcHJvcGVydHlOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxldCBvdGhlckNhc2VQcm9wZXJ0eU5hbWU6IHN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eU5hbWUuY2hhckF0KDApID09PSBwcm9wZXJ0eU5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIG90aGVyQ2FzZVByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG90aGVyQ2FzZVByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJvcGVydHlOYW1lLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIG90aGVyQ2FzZVByb3BlcnR5TmFtZSArPSBwcm9wZXJ0eU5hbWUuc2xpY2UoMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZSA9IG90aGVyQ2FzZVByb3BlcnR5TmFtZTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlW3Byb3BlcnR5TmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlW3Byb3BlcnR5TmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlW3Byb3BlcnR5TmFtZV07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2lwaGVyUmVwcm9tcHRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvY2lwaGVyUmVwcm9tcHRUeXBlJztcclxuaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2NpcGhlclR5cGUnO1xyXG5pbXBvcnQgeyBMaW5rZWRJZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9saW5rZWRJZFR5cGUnO1xyXG5cclxuaW1wb3J0IHsgQ2lwaGVyIH0gZnJvbSAnLi4vZG9tYWluL2NpcGhlcic7XHJcblxyXG5pbXBvcnQgeyBBdHRhY2htZW50VmlldyB9IGZyb20gJy4vYXR0YWNobWVudFZpZXcnO1xyXG5pbXBvcnQgeyBDYXJkVmlldyB9IGZyb20gJy4vY2FyZFZpZXcnO1xyXG5pbXBvcnQgeyBGaWVsZFZpZXcgfSBmcm9tICcuL2ZpZWxkVmlldyc7XHJcbmltcG9ydCB7IElkZW50aXR5VmlldyB9IGZyb20gJy4vaWRlbnRpdHlWaWV3JztcclxuaW1wb3J0IHsgSXRlbVZpZXcgfSBmcm9tICcuL2l0ZW1WaWV3JztcclxuaW1wb3J0IHsgTG9naW5WaWV3IH0gZnJvbSAnLi9sb2dpblZpZXcnO1xyXG5pbXBvcnQgeyBQYXNzd29yZEhpc3RvcnlWaWV3IH0gZnJvbSAnLi9wYXNzd29yZEhpc3RvcnlWaWV3JztcclxuaW1wb3J0IHsgU2VjdXJlTm90ZVZpZXcgfSBmcm9tICcuL3NlY3VyZU5vdGVWaWV3JztcclxuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2lwaGVyVmlldyBpbXBsZW1lbnRzIFZpZXcge1xyXG4gICAgaWQ6IHN0cmluZyA9IG51bGw7XHJcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nID0gbnVsbDtcclxuICAgIGZvbGRlcklkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgbmFtZTogc3RyaW5nID0gbnVsbDtcclxuICAgIG5vdGVzOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgdHlwZTogQ2lwaGVyVHlwZSA9IG51bGw7XHJcbiAgICBmYXZvcml0ZSA9IGZhbHNlO1xyXG4gICAgb3JnYW5pemF0aW9uVXNlVG90cCA9IGZhbHNlO1xyXG4gICAgZWRpdCA9IGZhbHNlO1xyXG4gICAgdmlld1Bhc3N3b3JkID0gdHJ1ZTtcclxuICAgIGxvY2FsRGF0YTogYW55O1xyXG4gICAgbG9naW4gPSBuZXcgTG9naW5WaWV3KCk7XHJcbiAgICBpZGVudGl0eSA9IG5ldyBJZGVudGl0eVZpZXcoKTtcclxuICAgIGNhcmQgPSBuZXcgQ2FyZFZpZXcoKTtcclxuICAgIHNlY3VyZU5vdGUgPSBuZXcgU2VjdXJlTm90ZVZpZXcoKTtcclxuICAgIGF0dGFjaG1lbnRzOiBBdHRhY2htZW50Vmlld1tdID0gbnVsbDtcclxuICAgIGZpZWxkczogRmllbGRWaWV3W10gPSBudWxsO1xyXG4gICAgcGFzc3dvcmRIaXN0b3J5OiBQYXNzd29yZEhpc3RvcnlWaWV3W10gPSBudWxsO1xyXG4gICAgY29sbGVjdGlvbklkczogc3RyaW5nW10gPSBudWxsO1xyXG4gICAgcmV2aXNpb25EYXRlOiBEYXRlID0gbnVsbDtcclxuICAgIGRlbGV0ZWREYXRlOiBEYXRlID0gbnVsbDtcclxuICAgIHJlcHJvbXB0OiBDaXBoZXJSZXByb21wdFR5cGUgPSBDaXBoZXJSZXByb21wdFR5cGUuTm9uZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjPzogQ2lwaGVyKSB7XHJcbiAgICAgICAgaWYgKCFjKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaWQgPSBjLmlkO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSBjLm9yZ2FuaXphdGlvbklkO1xyXG4gICAgICAgIHRoaXMuZm9sZGVySWQgPSBjLmZvbGRlcklkO1xyXG4gICAgICAgIHRoaXMuZmF2b3JpdGUgPSBjLmZhdm9yaXRlO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uVXNlVG90cCA9IGMub3JnYW5pemF0aW9uVXNlVG90cDtcclxuICAgICAgICB0aGlzLmVkaXQgPSBjLmVkaXQ7XHJcbiAgICAgICAgdGhpcy52aWV3UGFzc3dvcmQgPSBjLnZpZXdQYXNzd29yZDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBjLnR5cGU7XHJcbiAgICAgICAgdGhpcy5sb2NhbERhdGEgPSBjLmxvY2FsRGF0YTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZHMgPSBjLmNvbGxlY3Rpb25JZHM7XHJcbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSBjLnJldmlzaW9uRGF0ZTtcclxuICAgICAgICB0aGlzLmRlbGV0ZWREYXRlID0gYy5kZWxldGVkRGF0ZTtcclxuICAgICAgICAvLyBPbGQgbG9jYWxseSBzdG9yZWQgY2lwaGVycyBtaWdodCBoYXZlIHJlcHJvbXB0ID09IG51bGwuIElmIHNvIHNldCBpdCB0byBOb25lLlxyXG4gICAgICAgIHRoaXMucmVwcm9tcHQgPSBjLnJlcHJvbXB0ID8/IENpcGhlclJlcHJvbXB0VHlwZS5Ob25lO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0IGl0ZW0oKSB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkxvZ2luOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9naW47XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VjdXJlTm90ZTtcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkNhcmQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYXJkO1xyXG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pZGVudGl0eTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN1YlRpdGxlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbS5zdWJUaXRsZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaGFzUGFzc3dvcmRIaXN0b3J5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhc3N3b3JkSGlzdG9yeSAmJiB0aGlzLnBhc3N3b3JkSGlzdG9yeS5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBoYXNBdHRhY2htZW50cygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2htZW50cyAmJiB0aGlzLmF0dGFjaG1lbnRzLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc09sZEF0dGFjaG1lbnRzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0F0dGFjaG1lbnRzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hdHRhY2htZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXR0YWNobWVudHNbaV0ua2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc0ZpZWxkcygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWVsZHMgJiYgdGhpcy5maWVsZHMubGVuZ3RoID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFzc3dvcmRSZXZpc2lvbkRpc3BsYXlEYXRlKCk6IERhdGUge1xyXG4gICAgICAgIGlmICh0aGlzLnR5cGUgIT09IENpcGhlclR5cGUuTG9naW4gfHwgdGhpcy5sb2dpbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5sb2dpbi5wYXNzd29yZCA9PSBudWxsIHx8IHRoaXMubG9naW4ucGFzc3dvcmQgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5sb2dpbi5wYXNzd29yZFJldmlzaW9uRGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNEZWxldGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZWREYXRlICE9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGxpbmtlZEZpZWxkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtLmxpbmtlZEZpZWxkT3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBsaW5rZWRGaWVsZFZhbHVlKGlkOiBMaW5rZWRJZFR5cGUpIHtcclxuICAgICAgICBjb25zdCBsaW5rZWRGaWVsZE9wdGlvbiA9IHRoaXMubGlua2VkRmllbGRPcHRpb25zPy5nZXQoaWQpO1xyXG4gICAgICAgIGlmIChsaW5rZWRGaWVsZE9wdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbTtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtW2xpbmtlZEZpZWxkT3B0aW9uLnByb3BlcnR5S2V5IGFzIGtleW9mIHR5cGVvZiBpdGVtXTtcclxuICAgIH1cclxuXHJcbiAgICBsaW5rZWRGaWVsZEkxOG5LZXkoaWQ6IExpbmtlZElkVHlwZSk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGlua2VkRmllbGRPcHRpb25zLmdldChpZCk/LmkxOG5LZXk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gSGFzaFB1cnBvc2Uge1xyXG4gICAgU2VydmVyQXV0aG9yaXphdGlvbiA9IDEsXHJcbiAgICBMb2NhbEF1dGhvcml6YXRpb24gPSAyLFxyXG59XHJcbiIsImV4cG9ydCBlbnVtIFRoZW1lVHlwZSB7XHJcbiAgICBTeXN0ZW0gPSAnc3lzdGVtJyxcclxuICAgIExpZ2h0ID0gJ2xpZ2h0JyxcclxuICAgIERhcmsgPSAnZGFyaycsXHJcbiAgICBOb3JkID0gJ25vcmQnLFxyXG4gICAgU29sYXJpemVkRGFyayA9ICdzb2xhcml6ZWREYXJrJyxcclxufVxyXG4iLCJpbXBvcnQgeyBJdGVtVmlldyB9IGZyb20gJy4vaXRlbVZpZXcnO1xyXG5pbXBvcnQgeyBMb2dpblVyaVZpZXcgfSBmcm9tICcuL2xvZ2luVXJpVmlldyc7XHJcblxyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL21pc2MvdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgTG9naW4gfSBmcm9tICcuLi9kb21haW4vbG9naW4nO1xyXG5cclxuaW1wb3J0IHsgTG9naW5MaW5rZWRJZCBhcyBMaW5rZWRJZCB9IGZyb20gJy4uLy4uL2VudW1zL2xpbmtlZElkVHlwZSc7XHJcblxyXG5pbXBvcnQgeyBsaW5rZWRGaWVsZE9wdGlvbiB9IGZyb20gJy4uLy4uL21pc2MvbGlua2VkRmllbGRPcHRpb24uZGVjb3JhdG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBMb2dpblZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcbiAgICBAbGlua2VkRmllbGRPcHRpb24oTGlua2VkSWQuVXNlcm5hbWUpXHJcbiAgICB1c2VybmFtZTogc3RyaW5nID0gbnVsbDtcclxuICAgIEBsaW5rZWRGaWVsZE9wdGlvbihMaW5rZWRJZC5QYXNzd29yZClcclxuICAgIHBhc3N3b3JkOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICAgIHBhc3N3b3JkUmV2aXNpb25EYXRlPzogRGF0ZSA9IG51bGw7XHJcbiAgICB0b3RwOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgdXJpczogTG9naW5VcmlWaWV3W10gPSBudWxsO1xyXG4gICAgYXV0b2ZpbGxPblBhZ2VMb2FkOiBib29sZWFuID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihsPzogTG9naW4pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmICghbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBhc3N3b3JkUmV2aXNpb25EYXRlID0gbC5wYXNzd29yZFJldmlzaW9uRGF0ZTtcclxuICAgICAgICB0aGlzLmF1dG9maWxsT25QYWdlTG9hZCA9IGwuYXV0b2ZpbGxPblBhZ2VMb2FkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1cmkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oYXNVcmlzID8gdGhpcy51cmlzWzBdLnVyaSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1hc2tlZFBhc3N3b3JkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFzc3dvcmQgIT0gbnVsbCA/ICfigKLigKLigKLigKLigKLigKLigKLigKInIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3ViVGl0bGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51c2VybmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2FuTGF1bmNoKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhhc1VyaXMgJiYgdGhpcy51cmlzLnNvbWUodSA9PiB1LmNhbkxhdW5jaCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc1RvdHAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICFVdGlscy5pc051bGxPcldoaXRlc3BhY2UodGhpcy50b3RwKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGF1bmNoVXJpKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzVXJpcykge1xyXG4gICAgICAgICAgICBjb25zdCB1cmkgPSB0aGlzLnVyaXMuZmluZCh1ID0+IHUuY2FuTGF1bmNoKTtcclxuICAgICAgICAgICAgaWYgKHVyaSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJpLmxhdW5jaFVyaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaGFzVXJpcygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51cmlzICE9IG51bGwgJiYgdGhpcy51cmlzLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIENvbnN0YW50c1NlcnZpY2Uge1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGVudmlyb25tZW50VXJsc0tleTogc3RyaW5nID0gJ2Vudmlyb25tZW50VXJscyc7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgZGlzYWJsZUdhS2V5OiBzdHJpbmcgPSAnZGlzYWJsZUdhJztcclxuICAgIHN0YXRpYyByZWFkb25seSBkaXNhYmxlQWRkTG9naW5Ob3RpZmljYXRpb25LZXk6IHN0cmluZyA9ICdkaXNhYmxlQWRkTG9naW5Ob3RpZmljYXRpb24nO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGRpc2FibGVDaGFuZ2VkUGFzc3dvcmROb3RpZmljYXRpb25LZXk6IHN0cmluZyA9ICdkaXNhYmxlQ2hhbmdlZFBhc3N3b3JkTm90aWZpY2F0aW9uJztcclxuICAgIHN0YXRpYyByZWFkb25seSBkaXNhYmxlQ29udGV4dE1lbnVJdGVtS2V5OiBzdHJpbmcgPSAnZGlzYWJsZUNvbnRleHRNZW51SXRlbSc7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgZGlzYWJsZUZhdmljb25LZXk6IHN0cmluZyA9ICdkaXNhYmxlRmF2aWNvbic7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgZGlzYWJsZUJhZGdlQ291bnRlcktleTogc3RyaW5nID0gJ2Rpc2FibGVCYWRnZUNvdW50ZXInO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGRpc2FibGVBdXRvVG90cENvcHlLZXk6IHN0cmluZyA9ICdkaXNhYmxlQXV0b1RvdHBDb3B5JztcclxuICAgIHN0YXRpYyByZWFkb25seSBkaXNhYmxlQXV0b0Jpb21ldHJpY3NQcm9tcHRLZXk6IHN0cmluZyA9ICdub0F1dG9Qcm9tcHRCaW9tZXRyaWNzJztcclxuICAgIHN0YXRpYyByZWFkb25seSBlbmFibGVBdXRvRmlsbE9uUGFnZUxvYWRLZXk6IHN0cmluZyA9ICdlbmFibGVBdXRvRmlsbE9uUGFnZUxvYWQnO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGF1dG9GaWxsT25QYWdlTG9hZERlZmF1bHRLZXk6IHN0cmluZyA9ICdhdXRvRmlsbE9uUGFnZUxvYWREZWZhdWx0JztcclxuICAgIHN0YXRpYyByZWFkb25seSB2YXVsdFRpbWVvdXRLZXk6IHN0cmluZyA9ICdsb2NrT3B0aW9uJztcclxuICAgIHN0YXRpYyByZWFkb25seSB2YXVsdFRpbWVvdXRBY3Rpb25LZXk6IHN0cmluZyA9ICd2YXVsdFRpbWVvdXRBY3Rpb24nO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGxhc3RBY3RpdmVLZXk6IHN0cmluZyA9ICdsYXN0QWN0aXZlJztcclxuICAgIHN0YXRpYyByZWFkb25seSBuZXZlckRvbWFpbnNLZXk6IHN0cmluZyA9ICduZXZlckRvbWFpbnMnO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGluc3RhbGxlZFZlcnNpb25LZXk6IHN0cmluZyA9ICdpbnN0YWxsZWRWZXJzaW9uJztcclxuICAgIHN0YXRpYyByZWFkb25seSBsb2NhbGVLZXk6IHN0cmluZyA9ICdsb2NhbGUnO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IHRoZW1lS2V5OiBzdHJpbmcgPSAndGhlbWUnO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGNvbGxhcHNlZEdyb3VwaW5nc0tleTogc3RyaW5nID0gJ2NvbGxhcHNlZEdyb3VwaW5ncyc7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgYXV0b0NvbmZpcm1GaW5nZXJwcmludHM6IHN0cmluZyA9ICdhdXRvQ29uZmlybUZpbmdlcnByaW50cyc7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgZG9udFNob3dDYXJkc0N1cnJlbnRUYWI6IHN0cmluZyA9ICdkb250U2hvd0NhcmRzQ3VycmVudFRhYic7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgZG9udFNob3dJZGVudGl0aWVzQ3VycmVudFRhYjogc3RyaW5nID0gJ2RvbnRTaG93SWRlbnRpdGllc0N1cnJlbnRUYWInO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRVcmlNYXRjaDogc3RyaW5nID0gJ2RlZmF1bHRVcmlNYXRjaCc7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgcGluUHJvdGVjdGVkS2V5OiBzdHJpbmcgPSAncGluUHJvdGVjdGVkS2V5JztcclxuICAgIHN0YXRpYyByZWFkb25seSBwcm90ZWN0ZWRQaW46IHN0cmluZyA9ICdwcm90ZWN0ZWRQaW4nO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGNsZWFyQ2xpcGJvYXJkS2V5OiBzdHJpbmcgPSAnY2xlYXJDbGlwYm9hcmRLZXknO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGV2ZW50Q29sbGVjdGlvbktleTogc3RyaW5nID0gJ2V2ZW50Q29sbGVjdGlvbic7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgc3NvQ29kZVZlcmlmaWVyS2V5OiBzdHJpbmcgPSAnc3NvQ29kZVZlcmlmaWVyJztcclxuICAgIHN0YXRpYyByZWFkb25seSBzc29TdGF0ZUtleTogc3RyaW5nID0gJ3Nzb1N0YXRlJztcclxuICAgIHN0YXRpYyByZWFkb25seSBiaW9tZXRyaWNVbmxvY2tLZXk6IHN0cmluZyA9ICdiaW9tZXRyaWMnO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGJpb21ldHJpY1RleHQ6IHN0cmluZyA9ICdiaW9tZXRyaWNUZXh0JztcclxuICAgIHN0YXRpYyByZWFkb25seSBiaW9tZXRyaWNBd2FpdGluZ0FjY2VwdGFuY2U6IHN0cmluZyA9ICdiaW9tZXRyaWNBd2FpdGluZ0FjY2VwdGFuY2UnO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGJpb21ldHJpY0ZpbmdlcnByaW50VmFsaWRhdGVkOiBzdHJpbmcgPSAnYmlvbWV0cmljRmluZ2VycHJpbnRWYWxpZGF0ZWQnO1xyXG5cclxuICAgIHJlYWRvbmx5IGVudmlyb25tZW50VXJsc0tleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5lbnZpcm9ubWVudFVybHNLZXk7XHJcbiAgICByZWFkb25seSBkaXNhYmxlR2FLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUdhS2V5O1xyXG4gICAgcmVhZG9ubHkgZGlzYWJsZUFkZExvZ2luTm90aWZpY2F0aW9uS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVBZGRMb2dpbk5vdGlmaWNhdGlvbktleTtcclxuICAgIHJlYWRvbmx5IGRpc2FibGVDb250ZXh0TWVudUl0ZW1LZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUNvbnRleHRNZW51SXRlbUtleTtcclxuICAgIHJlYWRvbmx5IGRpc2FibGVGYXZpY29uS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVGYXZpY29uS2V5O1xyXG4gICAgcmVhZG9ubHkgZGlzYWJsZUJhZGdlQ291bnRlcktleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5kaXNhYmxlQmFkZ2VDb3VudGVyS2V5O1xyXG4gICAgcmVhZG9ubHkgZGlzYWJsZUF1dG9Ub3RwQ29weUtleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5kaXNhYmxlQXV0b1RvdHBDb3B5S2V5O1xyXG4gICAgcmVhZG9ubHkgZGlzYWJsZUF1dG9CaW9tZXRyaWNzUHJvbXB0S2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVBdXRvQmlvbWV0cmljc1Byb21wdEtleTtcclxuICAgIHJlYWRvbmx5IGVuYWJsZUF1dG9GaWxsT25QYWdlTG9hZEtleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5lbmFibGVBdXRvRmlsbE9uUGFnZUxvYWRLZXk7XHJcbiAgICByZWFkb25seSBhdXRvRmlsbE9uUGFnZUxvYWREZWZhdWx0S2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmF1dG9GaWxsT25QYWdlTG9hZERlZmF1bHRLZXk7XHJcbiAgICByZWFkb25seSB2YXVsdFRpbWVvdXRLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5O1xyXG4gICAgcmVhZG9ubHkgdmF1bHRUaW1lb3V0QWN0aW9uS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEFjdGlvbktleTtcclxuICAgIHJlYWRvbmx5IGxhc3RBY3RpdmVLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UubGFzdEFjdGl2ZUtleTtcclxuICAgIHJlYWRvbmx5IG5ldmVyRG9tYWluc0tleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5uZXZlckRvbWFpbnNLZXk7XHJcbiAgICByZWFkb25seSBpbnN0YWxsZWRWZXJzaW9uS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmluc3RhbGxlZFZlcnNpb25LZXk7XHJcbiAgICByZWFkb25seSBsb2NhbGVLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UubG9jYWxlS2V5O1xyXG4gICAgcmVhZG9ubHkgdGhlbWVLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UudGhlbWVLZXk7XHJcbiAgICByZWFkb25seSBjb2xsYXBzZWRHcm91cGluZ3NLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuY29sbGFwc2VkR3JvdXBpbmdzS2V5O1xyXG4gICAgcmVhZG9ubHkgYXV0b0NvbmZpcm1GaW5nZXJwcmludHM6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuYXV0b0NvbmZpcm1GaW5nZXJwcmludHM7XHJcbiAgICByZWFkb25seSBkb250U2hvd0NhcmRzQ3VycmVudFRhYjogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5kb250U2hvd0NhcmRzQ3VycmVudFRhYjtcclxuICAgIHJlYWRvbmx5IGRvbnRTaG93SWRlbnRpdGllc0N1cnJlbnRUYWI6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuZG9udFNob3dJZGVudGl0aWVzQ3VycmVudFRhYjtcclxuICAgIHJlYWRvbmx5IGRlZmF1bHRVcmlNYXRjaDogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5kZWZhdWx0VXJpTWF0Y2g7XHJcbiAgICByZWFkb25seSBwaW5Qcm90ZWN0ZWRLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UucGluUHJvdGVjdGVkS2V5O1xyXG4gICAgcmVhZG9ubHkgcHJvdGVjdGVkUGluOiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLnByb3RlY3RlZFBpbjtcclxuICAgIHJlYWRvbmx5IGNsZWFyQ2xpcGJvYXJkS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmNsZWFyQ2xpcGJvYXJkS2V5O1xyXG4gICAgcmVhZG9ubHkgZXZlbnRDb2xsZWN0aW9uS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmV2ZW50Q29sbGVjdGlvbktleTtcclxuICAgIHJlYWRvbmx5IHNzb0NvZGVWZXJpZmllcktleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5zc29Db2RlVmVyaWZpZXJLZXk7XHJcbiAgICByZWFkb25seSBzc29TdGF0ZUtleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5zc29TdGF0ZUtleTtcclxuICAgIHJlYWRvbmx5IGJpb21ldHJpY1VubG9ja0tleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNVbmxvY2tLZXk7XHJcbiAgICByZWFkb25seSBiaW9tZXRyaWNUZXh0OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmJpb21ldHJpY1RleHQ7XHJcbiAgICByZWFkb25seSBiaW9tZXRyaWNBd2FpdGluZ0FjY2VwdGFuY2U6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuYmlvbWV0cmljQXdhaXRpbmdBY2NlcHRhbmNlO1xyXG4gICAgcmVhZG9ubHkgYmlvbWV0cmljRmluZ2VycHJpbnRWYWxpZGF0ZWQ6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuYmlvbWV0cmljRmluZ2VycHJpbnRWYWxpZGF0ZWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2lwaGVyUmVwcm9tcHRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvY2lwaGVyUmVwcm9tcHRUeXBlJztcclxuaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2NpcGhlclR5cGUnO1xyXG5cclxuaW1wb3J0IHsgQXR0YWNobWVudERhdGEgfSBmcm9tICcuL2F0dGFjaG1lbnREYXRhJztcclxuaW1wb3J0IHsgQ2FyZERhdGEgfSBmcm9tICcuL2NhcmREYXRhJztcclxuaW1wb3J0IHsgRmllbGREYXRhIH0gZnJvbSAnLi9maWVsZERhdGEnO1xyXG5pbXBvcnQgeyBJZGVudGl0eURhdGEgfSBmcm9tICcuL2lkZW50aXR5RGF0YSc7XHJcbmltcG9ydCB7IExvZ2luRGF0YSB9IGZyb20gJy4vbG9naW5EYXRhJztcclxuaW1wb3J0IHsgUGFzc3dvcmRIaXN0b3J5RGF0YSB9IGZyb20gJy4vcGFzc3dvcmRIaXN0b3J5RGF0YSc7XHJcbmltcG9ydCB7IFNlY3VyZU5vdGVEYXRhIH0gZnJvbSAnLi9zZWN1cmVOb3RlRGF0YSc7XHJcblxyXG5pbXBvcnQgeyBDaXBoZXJSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2NpcGhlclJlc3BvbnNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDaXBoZXJEYXRhIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xyXG4gICAgZm9sZGVySWQ6IHN0cmluZztcclxuICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgZWRpdDogYm9vbGVhbjtcclxuICAgIHZpZXdQYXNzd29yZDogYm9vbGVhbjtcclxuICAgIG9yZ2FuaXphdGlvblVzZVRvdHA6IGJvb2xlYW47XHJcbiAgICBmYXZvcml0ZTogYm9vbGVhbjtcclxuICAgIHJldmlzaW9uRGF0ZTogc3RyaW5nO1xyXG4gICAgdHlwZTogQ2lwaGVyVHlwZTtcclxuICAgIHNpemVOYW1lOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBub3Rlczogc3RyaW5nO1xyXG4gICAgbG9naW4/OiBMb2dpbkRhdGE7XHJcbiAgICBzZWN1cmVOb3RlPzogU2VjdXJlTm90ZURhdGE7XHJcbiAgICBjYXJkPzogQ2FyZERhdGE7XHJcbiAgICBpZGVudGl0eT86IElkZW50aXR5RGF0YTtcclxuICAgIGZpZWxkcz86IEZpZWxkRGF0YVtdO1xyXG4gICAgYXR0YWNobWVudHM/OiBBdHRhY2htZW50RGF0YVtdO1xyXG4gICAgcGFzc3dvcmRIaXN0b3J5PzogUGFzc3dvcmRIaXN0b3J5RGF0YVtdO1xyXG4gICAgY29sbGVjdGlvbklkcz86IHN0cmluZ1tdO1xyXG4gICAgZGVsZXRlZERhdGU6IHN0cmluZztcclxuICAgIHJlcHJvbXB0OiBDaXBoZXJSZXByb21wdFR5cGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U/OiBDaXBoZXJSZXNwb25zZSwgdXNlcklkPzogc3RyaW5nLCBjb2xsZWN0aW9uSWRzPzogc3RyaW5nW10pIHtcclxuICAgICAgICBpZiAocmVzcG9uc2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlkID0gcmVzcG9uc2UuaWQ7XHJcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IHJlc3BvbnNlLm9yZ2FuaXphdGlvbklkO1xyXG4gICAgICAgIHRoaXMuZm9sZGVySWQgPSByZXNwb25zZS5mb2xkZXJJZDtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZDtcclxuICAgICAgICB0aGlzLmVkaXQgPSByZXNwb25zZS5lZGl0O1xyXG4gICAgICAgIHRoaXMudmlld1Bhc3N3b3JkID0gcmVzcG9uc2Uudmlld1Bhc3N3b3JkO1xyXG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uVXNlVG90cCA9IHJlc3BvbnNlLm9yZ2FuaXphdGlvblVzZVRvdHA7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZSA9IHJlc3BvbnNlLmZhdm9yaXRlO1xyXG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gcmVzcG9uc2UucmV2aXNpb25EYXRlO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHJlc3BvbnNlLnR5cGU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gcmVzcG9uc2UubmFtZTtcclxuICAgICAgICB0aGlzLm5vdGVzID0gcmVzcG9uc2Uubm90ZXM7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uSWRzID0gY29sbGVjdGlvbklkcyAhPSBudWxsID8gY29sbGVjdGlvbklkcyA6IHJlc3BvbnNlLmNvbGxlY3Rpb25JZHM7XHJcbiAgICAgICAgdGhpcy5kZWxldGVkRGF0ZSA9IHJlc3BvbnNlLmRlbGV0ZWREYXRlO1xyXG4gICAgICAgIHRoaXMucmVwcm9tcHQgPSByZXNwb25zZS5yZXByb21wdDtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkxvZ2luOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbiA9IG5ldyBMb2dpbkRhdGEocmVzcG9uc2UubG9naW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWN1cmVOb3RlID0gbmV3IFNlY3VyZU5vdGVEYXRhKHJlc3BvbnNlLnNlY3VyZU5vdGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5DYXJkOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJkID0gbmV3IENhcmREYXRhKHJlc3BvbnNlLmNhcmQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5JZGVudGl0eTpcclxuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkgPSBuZXcgSWRlbnRpdHlEYXRhKHJlc3BvbnNlLmlkZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2UuZmllbGRzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHMgPSByZXNwb25zZS5maWVsZHMubWFwKGYgPT4gbmV3IEZpZWxkRGF0YShmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXNwb25zZS5hdHRhY2htZW50cyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudHMgPSByZXNwb25zZS5hdHRhY2htZW50cy5tYXAoYSA9PiBuZXcgQXR0YWNobWVudERhdGEoYSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzcG9uc2UucGFzc3dvcmRIaXN0b3J5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXNzd29yZEhpc3RvcnkgPSByZXNwb25zZS5wYXNzd29yZEhpc3RvcnkubWFwKHBoID0+IG5ldyBQYXNzd29yZEhpc3RvcnlEYXRhKHBoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=